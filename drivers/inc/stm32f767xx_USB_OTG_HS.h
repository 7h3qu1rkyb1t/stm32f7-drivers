#define Get_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 |= FLAG)
#define Get_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 |= FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 |= ~FLAG)
#define Set_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 &= FLAG)
#define Clr_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 |= ~FLAG)
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS                (0x1 << 0)    // Session request success
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ                   (0x1 << 1)    // Session request
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS                (0x1 << 8)    // Host negotiation success
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ                 (0x1 << 9)    // HNP request
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN               (0x1 << 10)    // Host set HNP enable
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN                (0x1 << 11)    // Device HNP enabled
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS                (0x1 << 16)    // Connector ID status
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT                  (0x1 << 17)    // Long/short debounce time
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD                 (0x1 << 18)    // A-session valid
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD                 (0x1 << 19)    // B-session valid
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_EHEN                  (0x1 << 12)    // Embedded host enable
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET                 (0x1 << 2)    // Session end detected
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG               (0x1 << 8)    // Session request success status change
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG               (0x1 << 9)    // Host negotiation success status change
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET                (0x1 << 17)    // Host negotiation detected
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG               (0x1 << 18)    // A-device timeout change
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE                (0x1 << 19)    // Debounce done
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_IDCHNG                (0x1 << 20)    // ID input pin changed
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT                  (0x1 << 0)    // Global interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN               (0xf << 1)    // Burst length/type
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN                 (0x1 << 5)    // DMA enable
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL               (0x1 << 7)    // TxFIFO empty level
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL              (0x1 << 8)    // Periodic TxFIFO empty level
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL                 (0x7 << 0)    // FS timeout calibration
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL                (0x1 << 6)    // USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP                (0x1 << 8)    // SRP-capable
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP                (0x1 << 9)    // HNP-capable
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT                  (0xf << 10)    // USB turnaround time
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS               (0x1 << 15)    // PHY Low-power clock select
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS              (0x1 << 17)    // ULPI FS/LS select
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR                (0x1 << 18)    // ULPI Auto-resume
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM               (0x1 << 19)    // ULPI Clock SuspendM
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD            (0x1 << 20)    // ULPI External VBUS Drive
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI            (0x1 << 21)    // ULPI external VBUS indicator
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS                 (0x1 << 22)    // TermSel DLine pulsing selection
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI                  (0x1 << 23)    // Indicator complement
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI                  (0x1 << 24)    // Indicator pass through
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD               (0x1 << 25)    // ULPI interface protect disable
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD                 (0x1 << 29)    // Forced host mode
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD                 (0x1 << 30)    // Forced peripheral mode
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST                 (0x1 << 0)    // Core soft reset
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST                 (0x1 << 1)    // HCLK soft reset
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST                 (0x1 << 2)    // Host frame counter reset
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH               (0x1 << 4)    // RxFIFO flush
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH               (0x1 << 5)    // TxFIFO flush
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM                (0x1f << 6)    // TxFIFO number
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL                (0x1 << 31)    // AHB master idle
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ                (0x1 << 30)    // DMA request signal enabled for USB OTG HS
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD                  (0x1 << 0)    // Current mode of operation
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS                  (0x1 << 1)    // Mode mismatch interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT                (0x1 << 2)    // OTG interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF                   (0x1 << 3)    // Start of frame
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL                (0x1 << 4)    // RxFIFO nonempty
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE                (0x1 << 5)    // Nonperiodic TxFIFO empty
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF              (0x1 << 6)    // Global IN nonperiodic NAK effective
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF            (0x1 << 7)    // Global OUT NAK effective
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP                 (0x1 << 10)    // Early suspend
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP               (0x1 << 11)    // USB suspend
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST                (0x1 << 12)    // USB reset
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE               (0x1 << 13)    // Enumeration done
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP               (0x1 << 14)    // Isochronous OUT packet dropped interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF                  (0x1 << 15)    // End of periodic frame interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT                (0x1 << 18)    // IN endpoint interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT                (0x1 << 19)    // OUT endpoint interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR              (0x1 << 20)    // Incomplete isochronous IN transfer
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT     (0x1 << 21)    // Incomplete periodic transfer
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP             (0x1 << 22)    // Data fetch suspended
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT               (0x1 << 24)    // Host port interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT                 (0x1 << 25)    // Host channels interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE                 (0x1 << 26)    // Periodic TxFIFO empty
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG               (0x1 << 28)    // Connector ID status change
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT               (0x1 << 29)    // Disconnect detected interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT                (0x1 << 30)    // Session request/new session detected interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT                (0x1 << 31)    // Resume/remote wakeup detected interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM                 (0x1 << 1)    // Mode mismatch interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT                (0x1 << 2)    // OTG interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM                  (0x1 << 3)    // Start of frame mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM               (0x1 << 4)    // Receive FIFO nonempty mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM               (0x1 << 5)    // Nonperiodic TxFIFO empty mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM             (0x1 << 6)    // Global nonperiodic IN NAK effective mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM             (0x1 << 7)    // Global OUT NAK effective mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM                (0x1 << 10)    // Early suspend mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM              (0x1 << 11)    // USB suspend mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST                (0x1 << 12)    // USB reset mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM              (0x1 << 13)    // Enumeration done mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM              (0x1 << 14)    // Isochronous OUT packet dropped interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM                 (0x1 << 15)    // End of periodic frame interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT                (0x1 << 18)    // IN endpoints interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT                (0x1 << 19)    // OUT endpoints interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM             (0x1 << 20)    // Incomplete isochronous IN transfer mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM       (0x1 << 21)    // Incomplete periodic transfer mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM                (0x1 << 22)    // Data fetch suspended mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM                 (0x1 << 24)    // Host port interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM                  (0x1 << 25)    // Host channels interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM                (0x1 << 26)    // Periodic TxFIFO empty mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM              (0x1 << 28)    // Connector ID status change mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT               (0x1 << 29)    // Disconnect detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM                 (0x1 << 30)    // Session request/new session detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM                  (0x1 << 31)    // Resume/remote wakeup detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_RSTDE                 (0x1 << 23)    // Reset detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_LPMINTM               (0x1 << 27)    // LPM interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM            (0xf << 0)    // Channel number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT             (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID             (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS           (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM            (0xf << 0)    // Channel number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT             (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID             (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS           (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD                  (0xffff << 0)    // RxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFSA        (0xffff << 0)    // Nonperiodic transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFD         (0xffff << 16)    // Nonperiodic TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FSA        (0xffff << 0)    // Endpoint 0 transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FD         (0xffff << 16)    // Endpoint 0 TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV             (0xffff << 0)    // Nonperiodic TxFIFO space available
#define  _OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV             (0xff << 16)    // Nonperiodic transmit request queue space available
#define  _OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP             (0x7f << 24)    // Top of the nonperiodic transmit request queue
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN                  (0x1 << 16)    // Power down
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_BCDEN                   (0x1 << 17)    // Battery charging detector (BCD) enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDEN                   (0x1 << 18)    // Data contact detection (DCD) mode enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PDEN                    (0x1 << 19)    // Primary detection (PD) mode enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_SDEN                    (0x1 << 20)    // Secondary detection (SD) mode enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_VBDEN                   (0x1 << 21)    // USB VBUS detection enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDET                   (0x1 << 0)    // Data contact detection (DCD) status
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PDET                    (0x1 << 1)    // Primary detection (PD) status
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_SDET                    (0x1 << 2)    // Secondary detection (SD) status
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PS2DET                  (0x1 << 3)    // DM pull-up detection status
#define  _OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID                (0xffffffff << 0)    // Product ID field
#define  _OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA                (0xffff << 0)    // Host periodic TxFIFO start address
#define  _OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD                (0xffff << 16)    // Host periodic TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_EPNUM          (0xf << 0)    // Endpoint number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_BCNT           (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_DPID           (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_PKTSTS         (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_FRMNUM         (0xf << 21)    // Frame number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_EPNUM          (0xf << 0)    // Endpoint number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_BCNT           (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_DPID           (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_PKTSTS         (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_FRMNUM         (0xf << 21)    // Frame number
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMEN                 (0x1 << 0)    // LPM support enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMACK                (0x1 << 1)    // LPM token acknowledge enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESL                  (0xf << 2)    // Best effort service latency
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_REMWAKE               (0x1 << 6)    // bRemoteWake value
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1SSEN                (0x1 << 7)    // L1 Shallow Sleep enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESLTHRS              (0xf << 8)    // BESL threshold
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1DSEN                (0x1 << 12)    // L1 deep sleep enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRST                (0x3 << 13)    // LPM response
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SLPSTS                (0x1 << 15)    // Port sleep status
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1RSMOK               (0x1 << 16)    // Sleep State Resume OK
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMCHIDX              (0xf << 17)    // LPM Channel Index
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNT               (0x7 << 21)    // LPM retry count
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SNDLPM                (0x1 << 24)    // Send LPM transaction
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNTSTS            (0x7 << 25)    // LPM retry count status
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_ENBESL                (0x1 << 28)    // Enable best effort service latency
#define  _OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS                    (0x3 << 0)    // FS/LS PHY clock select
#define  _OTG_HS_HOST_OTG_HS_HCFG_FSLSS                      (0x1 << 2)    // FS- and LS-only support
#define  _OTG_HS_HOST_OTG_HS_HFIR_FRIVL                      (0xffff << 0)    // Frame interval
#define  _OTG_HS_HOST_OTG_HS_HFNUM_FRNUM                     (0xffff << 0)    // Frame number
#define  _OTG_HS_HOST_OTG_HS_HFNUM_FTREM                     (0xffff << 16)    // Frame time remaining
#define  _OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL                (0xffff << 0)    // Periodic transmit data FIFO space available
#define  _OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV                 (0xff << 16)    // Periodic transmit request queue space available
#define  _OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP                 (0xff << 24)    // Top of the periodic transmit request queue
#define  _OTG_HS_HOST_OTG_HS_HAINT_HAINT                     (0xffff << 0)    // Channel interrupts
#define  _OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM                 (0xffff << 0)    // Channel interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HPRT_PCSTS                      (0x1 << 0)    // Port connect status
#define  _OTG_HS_HOST_OTG_HS_HPRT_PCDET                      (0x1 << 1)    // Port connect detected
#define  _OTG_HS_HOST_OTG_HS_HPRT_PENA                       (0x1 << 2)    // Port enable
#define  _OTG_HS_HOST_OTG_HS_HPRT_PENCHNG                    (0x1 << 3)    // Port enable/disable change
#define  _OTG_HS_HOST_OTG_HS_HPRT_POCA                       (0x1 << 4)    // Port overcurrent active
#define  _OTG_HS_HOST_OTG_HS_HPRT_POCCHNG                    (0x1 << 5)    // Port overcurrent change
#define  _OTG_HS_HOST_OTG_HS_HPRT_PRES                       (0x1 << 6)    // Port resume
#define  _OTG_HS_HOST_OTG_HS_HPRT_PSUSP                      (0x1 << 7)    // Port suspend
#define  _OTG_HS_HOST_OTG_HS_HPRT_PRST                       (0x1 << 8)    // Port reset
#define  _OTG_HS_HOST_OTG_HS_HPRT_PLSTS                      (0x3 << 10)    // Port line status
#define  _OTG_HS_HOST_OTG_HS_HPRT_PPWR                       (0x1 << 12)    // Port power
#define  _OTG_HS_HOST_OTG_HS_HPRT_PTCTL                      (0xf << 13)    // Port test control
#define  _OTG_HS_HOST_OTG_HS_HPRT_PSPD                       (0x3 << 17)    // Port speed
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT0_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT0_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT0_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT0_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT0_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT0_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT0_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT1_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT1_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT1_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT2_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT2_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT2_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT3_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT3_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT3_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT4_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT4_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT4_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT5_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT5_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT5_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT6_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT6_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT6_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT7_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT7_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT7_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT8_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT8_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT8_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT9_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT9_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT9_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT10_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT10_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT10_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT11_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT11_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT11_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET                 (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM               (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM               (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET                 (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM               (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM               (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT12_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT12_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT12_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT12_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT12_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT12_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT12_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ12_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ12_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ12_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA12_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT13_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT13_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT13_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT13_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT13_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT13_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT13_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_STALLM               (0x1 << 3)    // STALLM response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ13_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ13_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ13_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA13_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT14_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT14_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT14_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT14_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT14_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT14_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT14_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_NAKM                 (0x1 << 4)    // NAKM response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_ACKM                 (0x1 << 5)    // ACKM response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ14_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ14_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ14_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA14_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT15_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT15_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT15_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT15_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT15_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT15_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT15_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_STALL                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ15_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ15_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ15_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA15_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_DSPD                     (0x3 << 0)    // Device speed
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK                 (0x1 << 2)    // Nonzero-length status OUT handshake
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_DAD                      (0x7f << 4)    // Device address
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL                    (0x3 << 11)    // Periodic (micro)frame interval
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL                (0x3 << 24)    // Periodic scheduling interval
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG                   (0x1 << 0)    // Remote wakeup signaling
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_SDIS                     (0x1 << 1)    // Soft disconnect
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS                   (0x1 << 2)    // Global IN NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS                   (0x1 << 3)    // Global OUT NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_TCTL                     (0x7 << 4)    // Test control
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK                   (0x1 << 7)    // Set global IN NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK                   (0x1 << 8)    // Clear global IN NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK                   (0x1 << 9)    // Set global OUT NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK                   (0x1 << 10)    // Clear global OUT NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE                 (0x1 << 11)    // Power-on programming done
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS                  (0x1 << 0)    // Suspend status
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD                  (0x3 << 1)    // Enumerated speed
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_EERR                     (0x1 << 3)    // Erratic error
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF                    (0x3fff << 8)    // Frame number of the received SOF
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM                 (0x1 << 0)    // Transfer completed interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM                  (0x1 << 1)    // Endpoint disabled interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM                   (0x1 << 3)    // Timeout condition mask (nonisochronous endpoints)
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK             (0x1 << 4)    // IN token received when TxFIFO empty mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM               (0x1 << 5)    // IN token received with EP mismatch mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM               (0x1 << 6)    // IN endpoint NAK effective mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM                (0x1 << 8)    // FIFO underrun mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM                   (0x1 << 9)    // BNA interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM                 (0x1 << 0)    // Transfer completed interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM                  (0x1 << 1)    // Endpoint disabled interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM                 (0x1 << 3)    // SETUP phase done mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM                (0x1 << 4)    // OUT token received when endpoint disabled mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP               (0x1 << 6)    // Back-to-back SETUP packets received mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM                  (0x1 << 8)    // OUT packet error mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM                  (0x1 << 9)    // BNA interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT                  (0xffff << 0)    // IN endpoint interrupt bits
#define  _OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT                  (0xffff << 16)    // OUT endpoint interrupt bits
#define  _OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM                 (0xffff << 0)    // IN EP interrupt mask bits
#define  _OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM                 (0xffff << 16)    // OUT EP interrupt mask bits
#define  _OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT               (0xffff << 0)    // Device VBUS discharge time
#define  _OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP             (0xfff << 0)    // Device VBUS pulsing time
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN           (0x1 << 0)    // Nonisochronous IN endpoints threshold enable
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN              (0x1 << 1)    // ISO IN endpoint threshold enable
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN              (0x1ff << 2)    // Transmit threshold length
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN               (0x1 << 16)    // Receive threshold enable
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN              (0x1ff << 17)    // Receive threshold length
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN                 (0x1 << 27)    // Arbiter parking enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM          (0xffff << 0)    // IN EP Tx FIFO empty interrupt mask bits
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT              (0x1 << 1)    // IN endpoint 1interrupt bit
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT              (0x1 << 17)    // OUT endpoint 1 interrupt bit
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM          (0x1 << 1)    // IN Endpoint 1 interrupt mask bit
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM          (0x1 << 17)    // OUT Endpoint 1 interrupt mask bit
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ              (0x7f << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT              (0x3 << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ                (0x3 << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ              (0x7f << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT              (0x1 << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT             (0x3 << 29)    // SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS6_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS7_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK                 (0x1 << 0)    // Stop PHY clock
#define  _OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK                (0x1 << 1)    // Gate HCLK
#define  _OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP                 (0x1 << 4)    // PHY suspended
