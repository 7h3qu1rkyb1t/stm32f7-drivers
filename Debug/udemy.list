
udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009cc  080009cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009d8  080009d8  000109e0  2**0
                  CONTENTS
  4 .ARM          00000000  080009d8  080009d8  000109e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d8  080009e0  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d2b  00000000  00000000  00010a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000447  00000000  00000000  00012739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000108  00000000  00000000  00012b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00012c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001bed  00000000  00000000  00012d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ff9  00000000  00000000  00014945  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000086fa  00000000  00000000  0001593e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000344  00000000  00000000  0001e0b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080009b4 	.word	0x080009b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080009b4 	.word	0x080009b4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <gpio_init>:
 * PB5 MOSI AF6
 * PB3 SCK AF6
 * PA4 NSS  AF6
 */

void gpio_init(){
 8000248:	b580      	push	{r7, lr}
 800024a:	b08c      	sub	sp, #48	; 0x30
 800024c:	af00      	add	r7, sp, #0
    GPIO_Handle_t spi_sck, spi_mosi, spi_miso, spi_nss;
    spi_sck.GPIOx = GPIOB;
 800024e:	4b2f      	ldr	r3, [pc, #188]	; (800030c <gpio_init+0xc4>)
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
    spi_miso.GPIOx = GPIOB;
 8000252:	4b2e      	ldr	r3, [pc, #184]	; (800030c <gpio_init+0xc4>)
 8000254:	60fb      	str	r3, [r7, #12]
    spi_mosi.GPIOx = GPIOB;
 8000256:	4b2d      	ldr	r3, [pc, #180]	; (800030c <gpio_init+0xc4>)
 8000258:	61bb      	str	r3, [r7, #24]
    spi_nss.GPIOx = GPIOA;
 800025a:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <gpio_init+0xc8>)
 800025c:	603b      	str	r3, [r7, #0]
    
    spi_sck.PinConfig.GPIO_PinMode = GPIO_ALTERNATE_FUNCTION;
 800025e:	2302      	movs	r3, #2
 8000260:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    spi_miso.PinConfig.GPIO_PinMode = GPIO_ALTERNATE_FUNCTION;
 8000264:	2302      	movs	r3, #2
 8000266:	747b      	strb	r3, [r7, #17]
    spi_mosi.PinConfig.GPIO_PinMode = GPIO_ALTERNATE_FUNCTION;
 8000268:	2302      	movs	r3, #2
 800026a:	777b      	strb	r3, [r7, #29]
    spi_nss.PinConfig.GPIO_PinMode = GPIO_ALTERNATE_FUNCTION;
 800026c:	2302      	movs	r3, #2
 800026e:	717b      	strb	r3, [r7, #5]

    spi_sck.PinConfig.GPIO_PinAltMode = AF6;
 8000270:	2306      	movs	r3, #6
 8000272:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    spi_miso.PinConfig.GPIO_PinAltMode = AF6;
 8000276:	2306      	movs	r3, #6
 8000278:	757b      	strb	r3, [r7, #21]
    spi_mosi.PinConfig.GPIO_PinAltMode = AF6;
 800027a:	2306      	movs	r3, #6
 800027c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    spi_nss.PinConfig.GPIO_PinAltMode = AF6;
 8000280:	2306      	movs	r3, #6
 8000282:	727b      	strb	r3, [r7, #9]

    spi_sck.PinConfig.GPIO_PinNumber = 3;
 8000284:	2303      	movs	r3, #3
 8000286:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    spi_miso.PinConfig.GPIO_PinNumber = 4;
 800028a:	2304      	movs	r3, #4
 800028c:	743b      	strb	r3, [r7, #16]
    spi_mosi.PinConfig.GPIO_PinNumber = 5;
 800028e:	2305      	movs	r3, #5
 8000290:	773b      	strb	r3, [r7, #28]
    spi_nss.PinConfig.GPIO_PinNumber = 4;
 8000292:	2304      	movs	r3, #4
 8000294:	713b      	strb	r3, [r7, #4]

    spi_sck.PinConfig.GPIO_OPType = GPIO_PUSHPULL;
 8000296:	2300      	movs	r3, #0
 8000298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    spi_miso.PinConfig.GPIO_OPType = GPIO_PUSHPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	74bb      	strb	r3, [r7, #18]
    spi_mosi.PinConfig.GPIO_OPType = GPIO_PUSHPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	77bb      	strb	r3, [r7, #30]
    spi_nss.PinConfig.GPIO_OPType = GPIO_PUSHPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	71bb      	strb	r3, [r7, #6]

    spi_sck.PinConfig.GPIO_PinSpeed =   GPIO_VERY_HIGH_SPEED;
 80002a8:	2303      	movs	r3, #3
 80002aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    spi_miso.PinConfig.GPIO_PinSpeed =  GPIO_VERY_HIGH_SPEED;
 80002ae:	2303      	movs	r3, #3
 80002b0:	74fb      	strb	r3, [r7, #19]
    spi_mosi.PinConfig.GPIO_PinSpeed =  GPIO_VERY_HIGH_SPEED;
 80002b2:	2303      	movs	r3, #3
 80002b4:	77fb      	strb	r3, [r7, #31]
    spi_nss.PinConfig.GPIO_PinSpeed =   GPIO_VERY_HIGH_SPEED;
 80002b6:	2303      	movs	r3, #3
 80002b8:	71fb      	strb	r3, [r7, #7]

    spi_sck.PinConfig.GPIO_PUPDControl = GPIO_PULL_UP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    spi_miso.PinConfig.GPIO_PUPDControl = GPIO_PULL_UP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	753b      	strb	r3, [r7, #20]
    spi_mosi.PinConfig.GPIO_PUPDControl = GPIO_PULL_UP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	f887 3020 	strb.w	r3, [r7, #32]
    spi_nss.PinConfig.GPIO_PUPDControl = GPIO_PULL_UP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	723b      	strb	r3, [r7, #8]

    RCC_GPIO_ClkCtrl(RCC_GPIOB, SET);
 80002ce:	2101      	movs	r1, #1
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 f909 	bl	80004e8 <RCC_GPIO_ClkCtrl>
    RCC_GPIO_ClkCtrl(RCC_GPIOA, SET);
 80002d6:	2101      	movs	r1, #1
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 f905 	bl	80004e8 <RCC_GPIO_ClkCtrl>
    GPIO_Init(&spi_sck);
 80002de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f89b 	bl	800041e <GPIO_Init>
    GPIO_Init(&spi_mosi);
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f896 	bl	800041e <GPIO_Init>
    GPIO_Init(&spi_miso);
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f891 	bl	800041e <GPIO_Init>
    GPIO_Init(&spi_nss);
 80002fc:	463b      	mov	r3, r7
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f88d 	bl	800041e <GPIO_Init>
}
 8000304:	bf00      	nop
 8000306:	3730      	adds	r7, #48	; 0x30
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020400 	.word	0x40020400
 8000310:	40020000 	.word	0x40020000

08000314 <spi_init>:

void spi_init(){
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
    RCC_SPI_ClkCtrl(RCC_SPI3, SET);
 800031a:	2101      	movs	r1, #1
 800031c:	2002      	movs	r0, #2
 800031e:	f000 fa2b 	bl	8000778 <RCC_SPI_ClkCtrl>
    SPI_Handle_t handler;
    handler.handle = SPI3;
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <spi_init+0x40>)
 8000324:	607b      	str	r3, [r7, #4]
    handler.config.bus_config = SPI_Bus_Full_duplex;
 8000326:	2300      	movs	r3, #0
 8000328:	727b      	strb	r3, [r7, #9]
    handler.config.device_mode = SPI_Mode_Master;
 800032a:	2301      	movs	r3, #1
 800032c:	723b      	strb	r3, [r7, #8]
    handler.config.speed = SPI_pclk_div_by_2;
 800032e:	2300      	movs	r3, #0
 8000330:	73bb      	strb	r3, [r7, #14]
    handler.config.cpha = SPI_CPHA_First;
 8000332:	2300      	movs	r3, #0
 8000334:	72fb      	strb	r3, [r7, #11]
    handler.config.cpol = SPI_CPOL_LOW;
 8000336:	2300      	movs	r3, #0
 8000338:	733b      	strb	r3, [r7, #12]
    handler.config.ds = 8;
 800033a:	2308      	movs	r3, #8
 800033c:	72bb      	strb	r3, [r7, #10]
    handler.config.ssm = SPI_SSM_RESET;
 800033e:	2300      	movs	r3, #0
 8000340:	737b      	strb	r3, [r7, #13]
    SPI_Init(&handler);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f9b7 	bl	80006b8 <SPI_Init>
}
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40003c00 	.word	0x40003c00

08000358 <main>:

int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
    gpio_init();
 800035e:	f7ff ff73 	bl	8000248 <gpio_init>

    spi_init();
 8000362:	f7ff ffd7 	bl	8000314 <spi_init>
    char buffer[] = "Hello hi";
 8000366:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <main+0x68>)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	ca07      	ldmia	r2, {r0, r1, r2}
 800036c:	c303      	stmia	r3!, {r0, r1}
 800036e:	701a      	strb	r2, [r3, #0]
    uint32_t size = strlen(buffer);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff60 	bl	8000238 <strlen>
 8000378:	6138      	str	r0, [r7, #16]
    SPI_Control(SPI3, SET);
 800037a:	2101      	movs	r1, #1
 800037c:	4811      	ldr	r0, [pc, #68]	; (80003c4 <main+0x6c>)
 800037e:	f000 fac4 	bl	800090a <SPI_Control>

	while(1){
		SPI_SendData(SPI3, (uint8_t *)buffer, size);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	693a      	ldr	r2, [r7, #16]
 8000386:	4619      	mov	r1, r3
 8000388:	480e      	ldr	r0, [pc, #56]	; (80003c4 <main+0x6c>)
 800038a:	f000 fa83 	bl	8000894 <SPI_SendData>
		while( SPI_Status(SPI3, SPI_Status_BSY) );
 800038e:	bf00      	nop
 8000390:	2107      	movs	r1, #7
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <main+0x6c>)
 8000394:	f000 fad5 	bl	8000942 <SPI_Status>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d1f8      	bne.n	8000390 <main+0x38>
		SPI_Control(SPI3, RESET);
 800039e:	2100      	movs	r1, #0
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <main+0x6c>)
 80003a2:	f000 fab2 	bl	800090a <SPI_Control>
		for(int i=0; i<1000000; i++);
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	e002      	b.n	80003b2 <main+0x5a>
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	3301      	adds	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <main+0x70>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	ddf8      	ble.n	80003ac <main+0x54>
        __asm__("nop");
 80003ba:	bf00      	nop
		SPI_SendData(SPI3, (uint8_t *)buffer, size);
 80003bc:	e7e1      	b.n	8000382 <main+0x2a>
 80003be:	bf00      	nop
 80003c0:	080009cc 	.word	0x080009cc
 80003c4:	40003c00 	.word	0x40003c00
 80003c8:	000f423f 	.word	0x000f423f

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 fab7 	bl	800096c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ffab 	bl	8000358 <main>

08000402 <LoopForever>:

LoopForever:
    b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000410:	080009e0 	.word	0x080009e0
  ldr r2, =_sbss
 8000414:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000418:	2000001c 	.word	0x2000001c

0800041c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC_IRQHandler>

0800041e <GPIO_Init>:
 * @return      - none
 *
 * @note        - none 
 *
 */
void GPIO_Init(GPIO_Handle_t* PinHandler){
 800041e:	b480      	push	{r7}
 8000420:	b085      	sub	sp, #20
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
    /* configure mode */
    PinHandler->GPIOx->MODER |= PinHandler->PinConfig.GPIO_PinMode << (2* PinHandler->PinConfig.GPIO_PinNumber);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	4619      	mov	r1, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
 800043c:	4619      	mov	r1, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	430a      	orrs	r2, r1
 8000444:	601a      	str	r2, [r3, #0]

    /* configure speed */
    PinHandler->GPIOx->OSPEEDR |= PinHandler->PinConfig.GPIO_PinSpeed <<(2* PinHandler->PinConfig.GPIO_PinNumber);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	79db      	ldrb	r3, [r3, #7]
 8000450:	4619      	mov	r1, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	430a      	orrs	r2, r1
 8000464:	609a      	str	r2, [r3, #8]

    /* configure pupd settings */
    PinHandler->GPIOx->PUPDR = PinHandler->PinConfig.GPIO_PUPDControl <<(2*PinHandler->PinConfig.GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7a1b      	ldrb	r3, [r3, #8]
 800046a:	461a      	mov	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	409a      	lsls	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60da      	str	r2, [r3, #12]

    /* configure output type */
    PinHandler->GPIOx->OTYPER |= PinHandler->PinConfig.GPIO_OPType <<( PinHandler->PinConfig.GPIO_PinNumber);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	799b      	ldrb	r3, [r3, #6]
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	4619      	mov	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	430a      	orrs	r2, r1
 8000496:	605a      	str	r2, [r3, #4]

    /* alternate function config */
    if(PinHandler->PinConfig.GPIO_PinMode == GPIO_ALTERNATE_FUNCTION){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d11d      	bne.n	80004dc <GPIO_Init+0xbe>
        uint8_t AF_reg, pin_reg;
        AF_reg = PinHandler->PinConfig.GPIO_PinNumber / 8;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	08db      	lsrs	r3, r3, #3
 80004a6:	73fb      	strb	r3, [r7, #15]
        pin_reg = PinHandler->PinConfig.GPIO_PinNumber %8;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	73bb      	strb	r3, [r7, #14]
        PinHandler->GPIOx->AFRH[AF_reg] |= PinHandler->PinConfig.GPIO_PinAltMode << ( pin_reg * 4 );
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	7bfa      	ldrb	r2, [r7, #15]
 80004b8:	3208      	adds	r2, #8
 80004ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7a5b      	ldrb	r3, [r3, #9]
 80004c2:	461a      	mov	r2, r3
 80004c4:	7bbb      	ldrb	r3, [r7, #14]
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	7bfa      	ldrb	r2, [r7, #15]
 80004d4:	4301      	orrs	r1, r0
 80004d6:	3208      	adds	r2, #8
 80004d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <RCC_GPIO_ClkCtrl>:
 * @return      -
 *
 * @note        -
 *
 */
void RCC_GPIO_ClkCtrl(GPIO_PORTS PORT, uint8_t state){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
    if (state){
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d06a      	beq.n	80005d4 <RCC_GPIO_ClkCtrl+0xec>
        switch (PORT){
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b0a      	cmp	r3, #10
 8000502:	f200 80d0 	bhi.w	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
 8000506:	a201      	add	r2, pc, #4	; (adr r2, 800050c <RCC_GPIO_ClkCtrl+0x24>)
 8000508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050c:	08000539 	.word	0x08000539
 8000510:	08000547 	.word	0x08000547
 8000514:	08000555 	.word	0x08000555
 8000518:	08000563 	.word	0x08000563
 800051c:	08000571 	.word	0x08000571
 8000520:	0800057f 	.word	0x0800057f
 8000524:	0800058d 	.word	0x0800058d
 8000528:	0800059b 	.word	0x0800059b
 800052c:	080005a9 	.word	0x080005a9
 8000530:	080005b7 	.word	0x080005b7
 8000534:	080005c5 	.word	0x080005c5
        case RCC_GPIOA :
            RCC->AHB1ENR |= (1 << 0);
 8000538:	4b5e      	ldr	r3, [pc, #376]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a5d      	ldr	r2, [pc, #372]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000544:	e0af      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOB :
            RCC->AHB1ENR |= (1 << 1);
 8000546:	4b5b      	ldr	r3, [pc, #364]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a5a      	ldr	r2, [pc, #360]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000552:	e0a8      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOC :
            RCC->AHB1ENR |= (1 << 2);
 8000554:	4b57      	ldr	r3, [pc, #348]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a56      	ldr	r2, [pc, #344]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000560:	e0a1      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOD :
            RCC->AHB1ENR |= (1 << 3);
 8000562:	4b54      	ldr	r3, [pc, #336]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a53      	ldr	r2, [pc, #332]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800056e:	e09a      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOE :
            RCC->AHB1ENR |= (1 << 4);
 8000570:	4b50      	ldr	r3, [pc, #320]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a4f      	ldr	r2, [pc, #316]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800057c:	e093      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOF :
            RCC->AHB1ENR |= (1 << 5);
 800057e:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a4c      	ldr	r2, [pc, #304]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000584:	f043 0320 	orr.w	r3, r3, #32
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800058a:	e08c      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOG :
            RCC->AHB1ENR |= (1 << 6);
 800058c:	4b49      	ldr	r3, [pc, #292]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000598:	e085      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOH :
            RCC->AHB1ENR |= (1 << 7);
 800059a:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80005a6:	e07e      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOI :
            RCC->AHB1ENR |= (1 << 8);
 80005a8:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a41      	ldr	r2, [pc, #260]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80005b4:	e077      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOJ :
            RCC->AHB1ENR |= (1 << 9);
 80005b6:	4b3f      	ldr	r3, [pc, #252]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a3e      	ldr	r2, [pc, #248]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80005c2:	e070      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOK :
            RCC->AHB1ENR |= (1 << 10);
 80005c4:	4b3b      	ldr	r3, [pc, #236]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a3a      	ldr	r2, [pc, #232]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80005ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80005d0:	bf00      	nop
 80005d2:	e068      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        }
    }else{
        switch(PORT){
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b0a      	cmp	r3, #10
 80005d8:	d865      	bhi.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <RCC_GPIO_ClkCtrl+0xf8>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	0800060d 	.word	0x0800060d
 80005e4:	0800061b 	.word	0x0800061b
 80005e8:	08000629 	.word	0x08000629
 80005ec:	08000637 	.word	0x08000637
 80005f0:	08000645 	.word	0x08000645
 80005f4:	08000653 	.word	0x08000653
 80005f8:	08000661 	.word	0x08000661
 80005fc:	0800066f 	.word	0x0800066f
 8000600:	0800067d 	.word	0x0800067d
 8000604:	0800068b 	.word	0x0800068b
 8000608:	08000699 	.word	0x08000699
        case RCC_GPIOA :
            RCC->AHB1ENR &= ~(1 << 0);
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000618:	e045      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOB:
            RCC->AHB1ENR &= ~(1 << 1);
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000620:	f023 0302 	bic.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000626:	e03e      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOC :
            RCC->AHB1ENR &= ~(1 << 2);
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800062e:	f023 0304 	bic.w	r3, r3, #4
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000634:	e037      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOD :
            RCC->AHB1ENR &= ~(1 << 3);
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800063c:	f023 0308 	bic.w	r3, r3, #8
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000642:	e030      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOE :
            RCC->AHB1ENR &= ~(1 << 4);
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a1a      	ldr	r2, [pc, #104]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800064a:	f023 0310 	bic.w	r3, r3, #16
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000650:	e029      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOF :
            RCC->AHB1ENR &= ~(1 << 5);
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000658:	f023 0320 	bic.w	r3, r3, #32
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800065e:	e022      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOG :
            RCC->AHB1ENR &= ~(1 << 6);
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800066c:	e01b      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOH :
            RCC->AHB1ENR &= ~(1 << 7);
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800067a:	e014      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOI :
            RCC->AHB1ENR &= ~(1 << 8);
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000688:	e00d      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOJ :
            RCC->AHB1ENR &= ~(1 << 9);
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000696:	e006      	b.n	80006a6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOK :
            RCC->AHB1ENR &= ~(1 << 10);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800069e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80006a4:	bf00      	nop
        }
    }   
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <SPI_Init>:
#include "stm32f767xx_spi.h"

// Initialization
void SPI_Init(SPI_Handle_t* pin_handler){
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    uint32_t tmp_reg1 = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
    uint32_t tmp_reg2 = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
    // configure the mode
    if (pin_handler->config.device_mode ){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00b      	beq.n	80006e8 <SPI_Init+0x30>
        tmp_reg1 |= (1<<2);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
        if (!pin_handler->config.ssm){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7a5b      	ldrb	r3, [r3, #9]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d103      	bne.n	80006e8 <SPI_Init+0x30>
            tmp_reg2 |= (1<<2);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	60bb      	str	r3, [r7, #8]
        }
    }
    tmp_reg1 |= (pin_handler->config.device_mode << 2);                                      // set bit MSTR master selection
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
    // bus mode (bidi)
    if (pin_handler->config.bus_config == SPI_Bus_Half_duplex ){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	795b      	ldrb	r3, [r3, #5]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d104      	bne.n	8000708 <SPI_Init+0x50>
        tmp_reg1 |= (1<<15);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e007      	b.n	8000718 <SPI_Init+0x60>
    } else if (pin_handler->config.bus_config == SPI_Bus_Simplex){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	2b02      	cmp	r3, #2
 800070e:	d103      	bne.n	8000718 <SPI_Init+0x60>
        tmp_reg1 |= (1<<10);                                     // configure only for receive only mode.
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000716:	60fb      	str	r3, [r7, #12]
    }
    // data size set
    tmp_reg2 |= ((pin_handler->config.ds & 0xf) << 8);          // limit ds to only 16 bit
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	799b      	ldrb	r3, [r3, #6]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	4313      	orrs	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
    // clock phase
    tmp_reg1 |= pin_handler->config.cpha;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	79db      	ldrb	r3, [r3, #7]
 800072c:	461a      	mov	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
    // Clock polarity
    tmp_reg1 |= (pin_handler->config.cpol <<1 );
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7a1b      	ldrb	r3, [r3, #8]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4313      	orrs	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
    // slave select by software or hw
    tmp_reg1 |= (pin_handler->config.ssm << 9);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7a5b      	ldrb	r3, [r3, #9]
 8000746:	025b      	lsls	r3, r3, #9
 8000748:	461a      	mov	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
    // set baud rate
    tmp_reg1 |= (pin_handler->config.speed << 3);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7a9b      	ldrb	r3, [r3, #10]
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
    pin_handler->handle->CR1 = tmp_reg1|(1<<3);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	f042 0208 	orr.w	r2, r2, #8
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <RCC_SPI_ClkCtrl>:
            break;
    }
}

// clock control
void RCC_SPI_ClkCtrl(SPI_Interfaces interface, uint8_t state){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
    if (state){
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d03d      	beq.n	800080a <RCC_SPI_ClkCtrl+0x92>
        switch(interface){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d877      	bhi.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <RCC_SPI_ClkCtrl+0x24>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007b5 	.word	0x080007b5
 80007a0:	080007c3 	.word	0x080007c3
 80007a4:	080007d1 	.word	0x080007d1
 80007a8:	080007df 	.word	0x080007df
 80007ac:	080007ed 	.word	0x080007ed
 80007b0:	080007fb 	.word	0x080007fb
            case RCC_SPI1:
                RCC->APB2ENR |= (1<<12);
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b8:	4a35      	ldr	r2, [pc, #212]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007be:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 80007c0:	e060      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI2:
                RCC->APB1ENR |= (1<<14);
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a32      	ldr	r2, [pc, #200]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
                break;
 80007ce:	e059      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI3:
                RCC->APB1ENR |= (1<<15);
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
                break;
 80007dc:	e052      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI4:
                RCC->APB2ENR |= (1<<14);
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 80007ea:	e04b      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI5:
                RCC->APB2ENR |= (1<<20);
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 80007f8:	e044      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI6:
                RCC->APB2ENR |= (1<<21);
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 8000806:	bf00      	nop
 8000808:	e03c      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
        }
    } else{
        switch(interface){
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b05      	cmp	r3, #5
 800080e:	d839      	bhi.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <RCC_SPI_ClkCtrl+0xa0>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000831 	.word	0x08000831
 800081c:	0800083f 	.word	0x0800083f
 8000820:	0800084d 	.word	0x0800084d
 8000824:	0800085b 	.word	0x0800085b
 8000828:	08000869 	.word	0x08000869
 800082c:	08000877 	.word	0x08000877
            case RCC_SPI1:
                RCC->APB2ENR &= ~(1<<12);
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000834:	4a16      	ldr	r2, [pc, #88]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800083a:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 800083c:	e022      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI2:
                RCC->APB1ENR &= ~(1<<14);
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
                break;
 800084a:	e01b      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI3:
                RCC->APB1ENR &= ~(1<<15);
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000852:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
                break;
 8000858:	e014      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI4:
                RCC->APB2ENR &= ~(1<<14);
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 8000866:	e00d      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI5:
                RCC->APB2ENR &= ~(1<<20);
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 800086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 800086e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000872:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 8000874:	e006      	b.n	8000884 <RCC_SPI_ClkCtrl+0x10c>
            case RCC_SPI6:
                RCC->APB2ENR &= ~(1<<21);
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <RCC_SPI_ClkCtrl+0x118>)
 800087c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
                break;
 8000882:	bf00      	nop
        }
    }
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800

08000894 <SPI_SendData>:

// Data send and recieve
void SPI_SendData(SPI_I2S_RegDef_t* reg, uint8_t* tx_buf, uint32_t size){
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
    // chek the buf if empty exit
    uint8_t ds = (reg->CR2>>8) & 0xf;                       // get ds value
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	75fb      	strb	r3, [r7, #23]
    while(size){
 80008ae:	e023      	b.n	80008f8 <SPI_SendData+0x64>
        // wait till txe is set
        while(!(reg->SR & (1<<1)));
 80008b0:	bf00      	nop
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f9      	beq.n	80008b2 <SPI_SendData+0x1e>
        // depending on ds flag send data send data
        // TODO : implement incase of odd number of bits
        if (ds == 8){
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d105      	bne.n	80008d0 <SPI_SendData+0x3c>
            reg->DR = *tx_buf;
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	e00d      	b.n	80008ec <SPI_SendData+0x58>
        } else if (ds == 16){
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	2b10      	cmp	r3, #16
 80008d4:	d10a      	bne.n	80008ec <SPI_SendData+0x58>
            reg->DR = *(uint16_t *)tx_buf;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	60da      	str	r2, [r3, #12]
            tx_buf++;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
            size--;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
        }
        tx_buf++;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
        size--;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
    while(size){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1d8      	bne.n	80008b0 <SPI_SendData+0x1c>

    }
}
 80008fe:	bf00      	nop
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SPI_Control>:
void SPI_irq_config(uint8_t irq_num, uint8_t state);            // SET or RESET state
void SPI_IRQ_set_priority(uint8_t irq_num, uint32_t priority);
void SPI_IRQ_Handling(SPI_Handle_t* handle);

// Enable or Disable S
void SPI_Control(SPI_I2S_RegDef_t* reg_handle, uint8_t state){
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	70fb      	strb	r3, [r7, #3]
    if (state){
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <SPI_Control+0x20>
        reg_handle->CR1 |= (1<<6);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
    } else{
        reg_handle->CR1 &= ~(1<<6);
    }
}
 8000928:	e005      	b.n	8000936 <SPI_Control+0x2c>
        reg_handle->CR1 &= ~(1<<6);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SPI_Status>:

uint32_t SPI_Status(SPI_I2S_RegDef_t* reg_handle, SPI_Status_Flags item){
 8000942:	b480      	push	{r7}
 8000944:	b085      	sub	sp, #20
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	70fb      	strb	r3, [r7, #3]
	uint32_t value = reg_handle->SR & 1 << item;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4013      	ands	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
    return value;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <__libc_init_array>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	4e0d      	ldr	r6, [pc, #52]	; (80009a4 <__libc_init_array+0x38>)
 8000970:	4c0d      	ldr	r4, [pc, #52]	; (80009a8 <__libc_init_array+0x3c>)
 8000972:	1ba4      	subs	r4, r4, r6
 8000974:	10a4      	asrs	r4, r4, #2
 8000976:	2500      	movs	r5, #0
 8000978:	42a5      	cmp	r5, r4
 800097a:	d109      	bne.n	8000990 <__libc_init_array+0x24>
 800097c:	4e0b      	ldr	r6, [pc, #44]	; (80009ac <__libc_init_array+0x40>)
 800097e:	4c0c      	ldr	r4, [pc, #48]	; (80009b0 <__libc_init_array+0x44>)
 8000980:	f000 f818 	bl	80009b4 <_init>
 8000984:	1ba4      	subs	r4, r4, r6
 8000986:	10a4      	asrs	r4, r4, #2
 8000988:	2500      	movs	r5, #0
 800098a:	42a5      	cmp	r5, r4
 800098c:	d105      	bne.n	800099a <__libc_init_array+0x2e>
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000994:	4798      	blx	r3
 8000996:	3501      	adds	r5, #1
 8000998:	e7ee      	b.n	8000978 <__libc_init_array+0xc>
 800099a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800099e:	4798      	blx	r3
 80009a0:	3501      	adds	r5, #1
 80009a2:	e7f2      	b.n	800098a <__libc_init_array+0x1e>
 80009a4:	080009d8 	.word	0x080009d8
 80009a8:	080009d8 	.word	0x080009d8
 80009ac:	080009d8 	.word	0x080009d8
 80009b0:	080009dc 	.word	0x080009dc

080009b4 <_init>:
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	bf00      	nop
 80009b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ba:	bc08      	pop	{r3}
 80009bc:	469e      	mov	lr, r3
 80009be:	4770      	bx	lr

080009c0 <_fini>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr
