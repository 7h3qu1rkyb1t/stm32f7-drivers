
udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000068c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000884  0800088c  0001088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000884  08000884  0001088c  2**0
                  CONTENTS
  4 .ARM          00000000  08000884  08000884  0001088c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000884  0800088c  0001088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000884  08000884  00010884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000888  08000888  00010888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800088c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800088c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001088c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011d2  00000000  00000000  000108ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003ba  00000000  00000000  00011a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e0  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00011f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000130b  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000008f8  00000000  00000000  000132db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000052e0  00000000  00000000  00013bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000001e  00000000  00000000  00018eb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000278  00000000  00000000  00018ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	0800086c 	.word	0x0800086c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	0800086c 	.word	0x0800086c

08000238 <delay>:
#include "stm32f767xx.h"
#include "stm32f767xx_gpio.h"
void delay(){
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for(int i = 0; i<300000; i++){
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e003      	b.n	800024c <delay+0x14>
		__asm__("nop");
 8000244:	bf00      	nop
	for(int i = 0; i<300000; i++){
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3301      	adds	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a05      	ldr	r2, [pc, #20]	; (8000264 <delay+0x2c>)
 8000250:	4293      	cmp	r3, r2
 8000252:	ddf7      	ble.n	8000244 <delay+0xc>
	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	000493df 	.word	0x000493df

08000268 <main>:
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
	GPIO_Handle_t led;
	led.GPIOx = GPIOB;
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <main+0x7c>)
 8000270:	617b      	str	r3, [r7, #20]
	led.PinConfig.GPIO_PinNumber = 7;
 8000272:	2307      	movs	r3, #7
 8000274:	763b      	strb	r3, [r7, #24]
	led.PinConfig.GPIO_PinMode = GPIO_OUTPUT;
 8000276:	2301      	movs	r3, #1
 8000278:	767b      	strb	r3, [r7, #25]
	led.PinConfig.GPIO_PinSpeed = GPIO_LOW_SPEED;
 800027a:	2300      	movs	r3, #0
 800027c:	76fb      	strb	r3, [r7, #27]
	led.PinConfig.GPIO_PUPDControl = GPIO_NO_PUPD;
 800027e:	2300      	movs	r3, #0
 8000280:	773b      	strb	r3, [r7, #28]
	led.PinConfig.GPIO_OPType = GPIO_PUSHPULL ;
 8000282:	2300      	movs	r3, #0
 8000284:	76bb      	strb	r3, [r7, #26]
	RCC_GPIO_ClkCtrl(RCC_GPIOB,SET);
 8000286:	2101      	movs	r1, #1
 8000288:	2001      	movs	r0, #1
 800028a:	f000 f9b5 	bl	80005f8 <RCC_GPIO_ClkCtrl>
	GPIO_Init(&led);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f94a 	bl	800052c <GPIO_Init>

    GPIO_Handle_t btn_in;
    btn_in.GPIOx = GPIOC;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <main+0x80>)
 800029a:	60bb      	str	r3, [r7, #8]
    btn_in.PinConfig.GPIO_PinNumber = 13;
 800029c:	230d      	movs	r3, #13
 800029e:	733b      	strb	r3, [r7, #12]
    btn_in.PinConfig.GPIO_PinMode = GPIO_INPUT;
 80002a0:	2300      	movs	r3, #0
 80002a2:	737b      	strb	r3, [r7, #13]
    btn_in.PinConfig.GPIO_PinSpeed = GPIO_LOW_SPEED;
 80002a4:	2300      	movs	r3, #0
 80002a6:	73fb      	strb	r3, [r7, #15]
    btn_in.PinConfig.GPIO_PUPDControl = GPIO_NO_PUPD;
 80002a8:	2300      	movs	r3, #0
 80002aa:	743b      	strb	r3, [r7, #16]
    btn_in.PinConfig.GPIO_OPType = GPIO_PUSHPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	73bb      	strb	r3, [r7, #14]
    RCC_GPIO_ClkCtrl(RCC_GPIOC, SET);
 80002b0:	2101      	movs	r1, #1
 80002b2:	2002      	movs	r0, #2
 80002b4:	f000 f9a0 	bl	80005f8 <RCC_GPIO_ClkCtrl>
    GPIO_Init(&btn_in);
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f935 	bl	800052c <GPIO_Init>

    Exti_Config_R btn ; 
    btn.exti_num = 13;
 80002c2:	230d      	movs	r3, #13
 80002c4:	713b      	strb	r3, [r7, #4]
    btn.mode = EXTI_MODE_RISING;
 80002c6:	2300      	movs	r3, #0
 80002c8:	717b      	strb	r3, [r7, #5]
    btn.port = PORT_C;
 80002ca:	2302      	movs	r3, #2
 80002cc:	71bb      	strb	r3, [r7, #6]
    exti_init(&btn);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f845 	bl	8000360 <exti_init>
    IRQ_Configure(40, SET, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2101      	movs	r1, #1
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f000 f8d0 	bl	8000480 <IRQ_Configure>

	while(1){
        __asm__("nop");
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <main+0x78>
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800

080002ec <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    GPIO_TogglePin(GPIOB, 7);
 80002f0:	2107      	movs	r1, #7
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <EXTI15_10_IRQHandler+0x1c>)
 80002f4:	f000 fa68 	bl	80007c8 <GPIO_TogglePin>
    delay();
 80002f8:	f7ff ff9e 	bl	8000238 <delay>
    GPIO_IRQ_Handler(13);
 80002fc:	200d      	movs	r0, #13
 80002fe:	f000 fa79 	bl	80007f4 <GPIO_IRQ_Handler>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40020400 	.word	0x40020400

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 fa73 	bl	8000824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff93 	bl	8000268 <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	0800088c 	.word	0x0800088c
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	2000001c 	.word	0x2000001c

0800035c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <exti_init>:
#include "stm32f767xx.h"

void exti_init(Exti_Config_R* config){
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    RCC_SYSCFG_Clk_en();
 8000368:	4b42      	ldr	r3, [pc, #264]	; (8000474 <exti_init+0x114>)
 800036a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800036c:	4a41      	ldr	r2, [pc, #260]	; (8000474 <exti_init+0x114>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6453      	str	r3, [r2, #68]	; 0x44
    // unmask interrupt
    EXTI->EXTI_IMR |=  (1 << config->exti_num);
 8000374:	4b40      	ldr	r3, [pc, #256]	; (8000478 <exti_init+0x118>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	4611      	mov	r1, r2
 8000384:	4a3c      	ldr	r2, [pc, #240]	; (8000478 <exti_init+0x118>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
    // Set mode
    if (config->mode == EXTI_MODE_RISING){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d117      	bne.n	80003c2 <exti_init+0x62>
        EXTI->EXTI_RTSR |= (1 << config->exti_num);
 8000392:	4b39      	ldr	r3, [pc, #228]	; (8000478 <exti_init+0x118>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	4611      	mov	r1, r2
 800039c:	2201      	movs	r2, #1
 800039e:	408a      	lsls	r2, r1
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a35      	ldr	r2, [pc, #212]	; (8000478 <exti_init+0x118>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6093      	str	r3, [r2, #8]
        EXTI->EXTI_FTSR &= ~(1 << config->exti_num);
 80003a8:	4b33      	ldr	r3, [pc, #204]	; (8000478 <exti_init+0x118>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	7812      	ldrb	r2, [r2, #0]
 80003b0:	4611      	mov	r1, r2
 80003b2:	2201      	movs	r2, #1
 80003b4:	408a      	lsls	r2, r1
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a2f      	ldr	r2, [pc, #188]	; (8000478 <exti_init+0x118>)
 80003bc:	400b      	ands	r3, r1
 80003be:	60d3      	str	r3, [r2, #12]
 80003c0:	e031      	b.n	8000426 <exti_init+0xc6>
    } else if (config->mode == EXTI_MODE_FALLING){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	785b      	ldrb	r3, [r3, #1]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d117      	bne.n	80003fa <exti_init+0x9a>
        EXTI->EXTI_RTSR &= ~(1 << config->exti_num);
 80003ca:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <exti_init+0x118>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	7812      	ldrb	r2, [r2, #0]
 80003d2:	4611      	mov	r1, r2
 80003d4:	2201      	movs	r2, #1
 80003d6:	408a      	lsls	r2, r1
 80003d8:	43d2      	mvns	r2, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	4a26      	ldr	r2, [pc, #152]	; (8000478 <exti_init+0x118>)
 80003de:	400b      	ands	r3, r1
 80003e0:	6093      	str	r3, [r2, #8]
        EXTI->EXTI_FTSR |= (1 << config->exti_num);
 80003e2:	4b25      	ldr	r3, [pc, #148]	; (8000478 <exti_init+0x118>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	4611      	mov	r1, r2
 80003f2:	4a21      	ldr	r2, [pc, #132]	; (8000478 <exti_init+0x118>)
 80003f4:	430b      	orrs	r3, r1
 80003f6:	60d3      	str	r3, [r2, #12]
 80003f8:	e015      	b.n	8000426 <exti_init+0xc6>
    } else {
        EXTI->EXTI_RTSR |= (1 << config->exti_num);
 80003fa:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <exti_init+0x118>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7812      	ldrb	r2, [r2, #0]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	4611      	mov	r1, r2
 800040a:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <exti_init+0x118>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6093      	str	r3, [r2, #8]
        EXTI->EXTI_FTSR |= (1 << config->exti_num);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <exti_init+0x118>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7812      	ldrb	r2, [r2, #0]
 8000418:	4611      	mov	r1, r2
 800041a:	2201      	movs	r2, #1
 800041c:	408a      	lsls	r2, r1
 800041e:	4611      	mov	r1, r2
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <exti_init+0x118>)
 8000422:	430b      	orrs	r3, r1
 8000424:	60d3      	str	r3, [r2, #12]
    }
    // Set syscfg register
    if(config->exti_num <= 0xF){                 // if it is > 0xB then these are software exti intr
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b0f      	cmp	r3, #15
 800042c:	d81c      	bhi.n	8000468 <exti_init+0x108>
        uint8_t sys_cfg_reg = config->exti_num/4;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	089b      	lsrs	r3, r3, #2
 8000434:	73fb      	strb	r3, [r7, #15]
        uint8_t cfg_offset = (config->exti_num % 4) * 4;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	73bb      	strb	r3, [r7, #14]
        SYSCFG->SYSCFG_EXTICR[sys_cfg_reg] |= config->port << cfg_offset;
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <exti_init+0x11c>)
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	3302      	adds	r3, #2
 800044a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	4619      	mov	r1, r3
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	4618      	mov	r0, r3
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <exti_init+0x11c>)
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	4302      	orrs	r2, r0
 8000462:	3302      	adds	r3, #2
 8000464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40023800 	.word	0x40023800
 8000478:	40013c00 	.word	0x40013c00
 800047c:	40013800 	.word	0x40013800

08000480 <IRQ_Configure>:

void IRQ_Configure(uint8_t intr, uint8_t state, uint8_t priority){
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	460b      	mov	r3, r1
 800048c:	71bb      	strb	r3, [r7, #6]
 800048e:	4613      	mov	r3, r2
 8000490:	717b      	strb	r3, [r7, #5]
    uint8_t int_reg = intr / 32;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	095b      	lsrs	r3, r3, #5
 8000496:	73fb      	strb	r3, [r7, #15]
    uint8_t bit_offset = intr % 32;
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	f003 031f 	and.w	r3, r3, #31
 800049e:	73bb      	strb	r3, [r7, #14]
    // set or reset interrupt
    if (state){
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d00e      	beq.n	80004c4 <IRQ_Configure+0x44>
        NVIC->NVIC_ISER[int_reg] |= (1<< bit_offset);
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <IRQ_Configure+0xa8>)
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	491b      	ldr	r1, [pc, #108]	; (8000528 <IRQ_Configure+0xa8>)
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	4302      	orrs	r2, r0
 80004be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80004c2:	e00f      	b.n	80004e4 <IRQ_Configure+0x64>
    } else {
        NVIC->NVIC_ICER[int_reg] |= (1<< bit_offset);
 80004c4:	4a18      	ldr	r2, [pc, #96]	; (8000528 <IRQ_Configure+0xa8>)
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	3320      	adds	r3, #32
 80004ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	2101      	movs	r1, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	4913      	ldr	r1, [pc, #76]	; (8000528 <IRQ_Configure+0xa8>)
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	4302      	orrs	r2, r0
 80004de:	3320      	adds	r3, #32
 80004e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    // set priority
    uint8_t prt_reg = intr / 4;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	089b      	lsrs	r3, r3, #2
 80004e8:	737b      	strb	r3, [r7, #13]
    uint8_t prt_offset = (intr % 4) * 8 + 4 ;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 0303 	and.w	r3, r3, #3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	3304      	adds	r3, #4
 80004f8:	733b      	strb	r3, [r7, #12]
    NVIC->NVIC_IPR[prt_reg] |= (priority << prt_offset);
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <IRQ_Configure+0xa8>)
 80004fc:	7b7b      	ldrb	r3, [r7, #13]
 80004fe:	33c0      	adds	r3, #192	; 0xc0
 8000500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000504:	7979      	ldrb	r1, [r7, #5]
 8000506:	7b3b      	ldrb	r3, [r7, #12]
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	4618      	mov	r0, r3
 800050e:	4906      	ldr	r1, [pc, #24]	; (8000528 <IRQ_Configure+0xa8>)
 8000510:	7b7b      	ldrb	r3, [r7, #13]
 8000512:	4302      	orrs	r2, r0
 8000514:	33c0      	adds	r3, #192	; 0xc0
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e100 	.word	0xe000e100

0800052c <GPIO_Init>:
 * @return      - none
 *
 * @note        - none 
 *
 */
void GPIO_Init(GPIO_Handle_t* PinHandler){
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    /* configure mode */
    PinHandler->GPIOx->MODER |= PinHandler->PinConfig.GPIO_PinMode << (2* PinHandler->PinConfig.GPIO_PinNumber);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	795b      	ldrb	r3, [r3, #5]
 800053e:	4619      	mov	r1, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	4619      	mov	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]

    /* configure speed */
    PinHandler->GPIOx->OSPEEDR |= PinHandler->PinConfig.GPIO_PinSpeed <<(2* PinHandler->PinConfig.GPIO_PinNumber);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	79db      	ldrb	r3, [r3, #7]
 800055e:	4619      	mov	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	430a      	orrs	r2, r1
 8000572:	609a      	str	r2, [r3, #8]

    /* configure pupd settings */
    PinHandler->GPIOx->PUPDR = PinHandler->PinConfig.GPIO_PUPDControl <<(2*PinHandler->PinConfig.GPIO_PinNumber);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7a1b      	ldrb	r3, [r3, #8]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	409a      	lsls	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	60da      	str	r2, [r3, #12]

    /* configure output type */
    PinHandler->GPIOx->OTYPER |= PinHandler->PinConfig.GPIO_OPType <<( PinHandler->PinConfig.GPIO_PinNumber);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	799b      	ldrb	r3, [r3, #6]
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]

    /* alternate function config */
    if(PinHandler->PinConfig.GPIO_PinMode == GPIO_ALTERNATE_FUNCTION){
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d11d      	bne.n	80005ea <GPIO_Init+0xbe>
        uint8_t pin,port;
        port = PinHandler->PinConfig.GPIO_PinNumber / 8;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	73fb      	strb	r3, [r7, #15]
        pin = PinHandler->PinConfig.GPIO_PinNumber %8;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	73bb      	strb	r3, [r7, #14]
        PinHandler->GPIOx->AFRH[port] |= PinHandler->PinConfig.GPIO_PinAltMode << ( pin * 4 );
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	7bfa      	ldrb	r2, [r7, #15]
 80005c6:	3208      	adds	r2, #8
 80005c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	461a      	mov	r2, r3
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	4301      	orrs	r1, r0
 80005e4:	3208      	adds	r2, #8
 80005e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <RCC_GPIO_ClkCtrl>:
 * @return      -
 *
 * @note        -
 *
 */
void RCC_GPIO_ClkCtrl(GPIO_PORTS PORT, uint8_t state){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	460a      	mov	r2, r1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	71bb      	strb	r3, [r7, #6]
    if (state){
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d069      	beq.n	80006e2 <RCC_GPIO_ClkCtrl+0xea>
        switch (PORT){
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b0a      	cmp	r3, #10
 8000612:	f200 80d0 	bhi.w	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <RCC_GPIO_ClkCtrl+0x24>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	08000649 	.word	0x08000649
 8000620:	08000657 	.word	0x08000657
 8000624:	08000665 	.word	0x08000665
 8000628:	08000673 	.word	0x08000673
 800062c:	08000681 	.word	0x08000681
 8000630:	0800068f 	.word	0x0800068f
 8000634:	0800069d 	.word	0x0800069d
 8000638:	080006ab 	.word	0x080006ab
 800063c:	080006b9 	.word	0x080006b9
 8000640:	080006c7 	.word	0x080006c7
 8000644:	080006d5 	.word	0x080006d5
        case RCC_GPIOA :
            RCC->AHB1ENR |= (1 << 0);
 8000648:	4b5e      	ldr	r3, [pc, #376]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a5d      	ldr	r2, [pc, #372]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000654:	e0af      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOB :
            RCC->AHB1ENR |= (1 << 1);
 8000656:	4b5b      	ldr	r3, [pc, #364]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a5a      	ldr	r2, [pc, #360]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000662:	e0a8      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOC :
            RCC->AHB1ENR |= (1 << 2);
 8000664:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a56      	ldr	r2, [pc, #344]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000670:	e0a1      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOD :
            RCC->AHB1ENR |= (1 << 3);
 8000672:	4b54      	ldr	r3, [pc, #336]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a53      	ldr	r2, [pc, #332]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800067e:	e09a      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOE :
            RCC->AHB1ENR |= (1 << 4);
 8000680:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	4a4f      	ldr	r2, [pc, #316]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800068c:	e093      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOF :
            RCC->AHB1ENR |= (1 << 5);
 800068e:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a4c      	ldr	r2, [pc, #304]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800069a:	e08c      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOG :
            RCC->AHB1ENR |= (1 << 6);
 800069c:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a48      	ldr	r2, [pc, #288]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80006a8:	e085      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOH :
            RCC->AHB1ENR |= (1 << 7);
 80006aa:	4b46      	ldr	r3, [pc, #280]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80006b6:	e07e      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOI :
            RCC->AHB1ENR |= (1 << 8);
 80006b8:	4b42      	ldr	r3, [pc, #264]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a41      	ldr	r2, [pc, #260]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80006c4:	e077      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOJ :
            RCC->AHB1ENR |= (1 << 9);
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a3e      	ldr	r2, [pc, #248]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80006d2:	e070      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOK :
            RCC->AHB1ENR |= (1 << 10);
 80006d4:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80006da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80006e0:	e069      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        }
    }else{
        switch(PORT){
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b0a      	cmp	r3, #10
 80006e6:	d866      	bhi.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <RCC_GPIO_ClkCtrl+0xf8>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	0800071d 	.word	0x0800071d
 80006f4:	0800072b 	.word	0x0800072b
 80006f8:	08000739 	.word	0x08000739
 80006fc:	08000747 	.word	0x08000747
 8000700:	08000755 	.word	0x08000755
 8000704:	08000763 	.word	0x08000763
 8000708:	08000771 	.word	0x08000771
 800070c:	0800077f 	.word	0x0800077f
 8000710:	0800078d 	.word	0x0800078d
 8000714:	0800079b 	.word	0x0800079b
 8000718:	080007a9 	.word	0x080007a9
        case RCC_GPIOA :
            RCC->AHB1ENR &= ~(1 << 0);
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000728:	e045      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOB:
            RCC->AHB1ENR &= ~(1 << 1);
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000730:	f023 0302 	bic.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000736:	e03e      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOC :
            RCC->AHB1ENR &= ~(1 << 2);
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800073e:	f023 0304 	bic.w	r3, r3, #4
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000744:	e037      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOD :
            RCC->AHB1ENR &= ~(1 << 3);
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800074c:	f023 0308 	bic.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000752:	e030      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOE :
            RCC->AHB1ENR &= ~(1 << 4);
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800075a:	f023 0310 	bic.w	r3, r3, #16
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000760:	e029      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOF :
            RCC->AHB1ENR &= ~(1 << 5);
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000768:	f023 0320 	bic.w	r3, r3, #32
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800076e:	e022      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOG :
            RCC->AHB1ENR &= ~(1 << 6);
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800077c:	e01b      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOH :
            RCC->AHB1ENR &= ~(1 << 7);
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800078a:	e014      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOI :
            RCC->AHB1ENR &= ~(1 << 8);
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 8000792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000796:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8000798:	e00d      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOJ :
            RCC->AHB1ENR &= ~(1 << 9);
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80007a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80007a6:	e006      	b.n	80007b6 <RCC_GPIO_ClkCtrl+0x1be>
        case RCC_GPIOK :
            RCC->AHB1ENR &= ~(1 << 10);
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <RCC_GPIO_ClkCtrl+0x1cc>)
 80007ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 80007b4:	bf00      	nop
        }
    }   
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <GPIO_TogglePin>:
 * @return      -
 *
 * @note        -
 *
 */
void GPIO_TogglePin(GPIO_RegDef_t* GPIOx, uint8_t pin){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
    GPIOx->ODR ^= (1<<pin);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	78fa      	ldrb	r2, [r7, #3]
 80007da:	2101      	movs	r1, #1
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	405a      	eors	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	615a      	str	r2, [r3, #20]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <GPIO_IRQ_Handler>:
 * @return      -
 *
 * @note        -
 *
 */
void GPIO_IRQ_Handler(uint8_t PinNum){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
    EXTI->EXTI_PR |= (1<<PinNum);
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <GPIO_IRQ_Handler+0x2c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	2101      	movs	r1, #1
 8000806:	fa01 f202 	lsl.w	r2, r1, r2
 800080a:	4611      	mov	r1, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <GPIO_IRQ_Handler+0x2c>)
 800080e:	430b      	orrs	r3, r1
 8000810:	6153      	str	r3, [r2, #20]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40013c00 	.word	0x40013c00

08000824 <__libc_init_array>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	4e0d      	ldr	r6, [pc, #52]	; (800085c <__libc_init_array+0x38>)
 8000828:	4c0d      	ldr	r4, [pc, #52]	; (8000860 <__libc_init_array+0x3c>)
 800082a:	1ba4      	subs	r4, r4, r6
 800082c:	10a4      	asrs	r4, r4, #2
 800082e:	2500      	movs	r5, #0
 8000830:	42a5      	cmp	r5, r4
 8000832:	d109      	bne.n	8000848 <__libc_init_array+0x24>
 8000834:	4e0b      	ldr	r6, [pc, #44]	; (8000864 <__libc_init_array+0x40>)
 8000836:	4c0c      	ldr	r4, [pc, #48]	; (8000868 <__libc_init_array+0x44>)
 8000838:	f000 f818 	bl	800086c <_init>
 800083c:	1ba4      	subs	r4, r4, r6
 800083e:	10a4      	asrs	r4, r4, #2
 8000840:	2500      	movs	r5, #0
 8000842:	42a5      	cmp	r5, r4
 8000844:	d105      	bne.n	8000852 <__libc_init_array+0x2e>
 8000846:	bd70      	pop	{r4, r5, r6, pc}
 8000848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800084c:	4798      	blx	r3
 800084e:	3501      	adds	r5, #1
 8000850:	e7ee      	b.n	8000830 <__libc_init_array+0xc>
 8000852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000856:	4798      	blx	r3
 8000858:	3501      	adds	r5, #1
 800085a:	e7f2      	b.n	8000842 <__libc_init_array+0x1e>
 800085c:	08000884 	.word	0x08000884
 8000860:	08000884 	.word	0x08000884
 8000864:	08000884 	.word	0x08000884
 8000868:	08000888 	.word	0x08000888

0800086c <_init>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	bf00      	nop
 8000870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000872:	bc08      	pop	{r3}
 8000874:	469e      	mov	lr, r3
 8000876:	4770      	bx	lr

08000878 <_fini>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	bf00      	nop
 800087c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087e:	bc08      	pop	{r3}
 8000880:	469e      	mov	lr, r3
 8000882:	4770      	bx	lr
