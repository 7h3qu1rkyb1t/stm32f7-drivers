Save current buffer to make changes
Files: 46 Matches: 2639 Duration: 161ms
#define Get_MPU_MPU_RNR(FLAG)                (*(uint32_t*)0xe000ed98 |= FLAG)
#define Get_MPU_MPU_RBAR(FLAG)               (*(uint32_t*)0xe000ed9c |= FLAG)
#define Get_MPU_MPU_RASR(FLAG)               (*(uint32_t*)0xe000eda0 |= FLAG)
#define Set_MPU_MPU_TYPER(FLAG)              (*(uint32_t*)0xe000ed90 &= FLAG)
#define Clr_MPU_MPU_TYPER(FLAG)              (*(uint32_t*)0xe000ed90 |= ~FLAG)
#define Set_MPU_MPU_CTRL(FLAG)               (*(uint32_t*)0xe000ed94 &= FLAG)
#define Clr_MPU_MPU_CTRL(FLAG)               (*(uint32_t*)0xe000ed94 |= ~FLAG)
#define Set_MPU_MPU_RNR(FLAG)                (*(uint32_t*)0xe000ed98 &= FLAG)
#define Clr_MPU_MPU_RNR(FLAG)                (*(uint32_t*)0xe000ed98 |= ~FLAG)
#define Set_MPU_MPU_RBAR(FLAG)               (*(uint32_t*)0xe000ed9c &= FLAG)
#define Clr_MPU_MPU_RBAR(FLAG)               (*(uint32_t*)0xe000ed9c |= ~FLAG)
#define Set_MPU_MPU_RASR(FLAG)               (*(uint32_t*)0xe000eda0 &= FLAG)
#define Clr_MPU_MPU_RASR(FLAG)               (*(uint32_t*)0xe000eda0 |= ~FLAG)
#define  _MPU_MPU_TYPER_SEPARATE                             (0x1 << 0)    // Separate flag
#define  _MPU_MPU_TYPER_DREGION                              (0xff << 8)    // Number of MPU data regions
#define  _MPU_MPU_TYPER_IREGION                              (0xff << 16)    // Number of MPU instruction regions
　
　drivers/inc/stm32f767xx_FLASH.h
#define Get_Flash_CR(FLAG)                   (*(uint32_t*)0x40023c10 |= FLAG)
#define Get_Flash_OPTCR(FLAG)                (*(uint32_t*)0x40023c14 |= FLAG)
#define Get_Flash_OPTCR1(FLAG)               (*(uint32_t*)0x40023c18 |= FLAG)
#define Set_Flash_ACR(FLAG)                  (*(uint32_t*)0x40023c00 &= FLAG)
#define Clr_Flash_ACR(FLAG)                  (*(uint32_t*)0x40023c00 |= ~FLAG)
#define Set_Flash_KEYR(FLAG)                 (*(uint32_t*)0x40023c04 &= FLAG)
#define Clr_Flash_KEYR(FLAG)                 (*(uint32_t*)0x40023c04 |= ~FLAG)
#define Set_Flash_OPTKEYR(FLAG)              (*(uint32_t*)0x40023c08 &= FLAG)
#define Clr_Flash_OPTKEYR(FLAG)              (*(uint32_t*)0x40023c08 |= ~FLAG)
#define Set_Flash_SR(FLAG)                   (*(uint32_t*)0x40023c0c &= FLAG)
#define Clr_Flash_SR(FLAG)                   (*(uint32_t*)0x40023c0c |= ~FLAG)
#define Set_Flash_CR(FLAG)                   (*(uint32_t*)0x40023c10 &= FLAG)
#define Clr_Flash_CR(FLAG)                   (*(uint32_t*)0x40023c10 |= ~FLAG)
#define Set_Flash_OPTCR(FLAG)                (*(uint32_t*)0x40023c14 &= FLAG)
#define Clr_Flash_OPTCR(FLAG)                (*(uint32_t*)0x40023c14 |= ~FLAG)
#define Set_Flash_OPTCR1(FLAG)               (*(uint32_t*)0x40023c18 &= FLAG)
#define Clr_Flash_OPTCR1(FLAG)               (*(uint32_t*)0x40023c18 |= ~FLAG)
#define  _Flash_ACR_LATENCY                                  (0xf << 0)    // Latency
#define  _Flash_ACR_PRFTEN                                   (0x1 << 8)    // Prefetch enable
#define  _Flash_ACR_ARTEN                                    (0x1 << 9)    // ART Accelerator Enable
　
　drivers/inc/stm32f767xx_HASH.h
#define Get_HASH_HASH_HR5(FLAG)              (*(uint32_t*)0x50060724 |= FLAG)
#define Get_HASH_HASH_HR6(FLAG)              (*(uint32_t*)0x50060728 |= FLAG)
#define Get_HASH_HASH_HR7(FLAG)              (*(uint32_t*)0x5006072c |= FLAG)
#define Set_HASH_CR(FLAG)                    (*(uint32_t*)0x50060400 &= FLAG)
#define Clr_HASH_CR(FLAG)                    (*(uint32_t*)0x50060400 |= ~FLAG)
#define Set_HASH_DIN(FLAG)                   (*(uint32_t*)0x50060404 &= FLAG)
#define Clr_HASH_DIN(FLAG)                   (*(uint32_t*)0x50060404 |= ~FLAG)
#define Set_HASH_STR(FLAG)                   (*(uint32_t*)0x50060408 &= FLAG)
#define Clr_HASH_STR(FLAG)                   (*(uint32_t*)0x50060408 |= ~FLAG)
#define Set_HASH_HR0(FLAG)                   (*(uint32_t*)0x5006040c &= FLAG)
#define Clr_HASH_HR0(FLAG)                   (*(uint32_t*)0x5006040c |= ~FLAG)
#define Set_HASH_HR1(FLAG)                   (*(uint32_t*)0x50060410 &= FLAG)
#define Clr_HASH_HR1(FLAG)                   (*(uint32_t*)0x50060410 |= ~FLAG)
#define Set_HASH_HR2(FLAG)                   (*(uint32_t*)0x50060414 &= FLAG)
#define Clr_HASH_HR2(FLAG)                   (*(uint32_t*)0x50060414 |= ~FLAG)
#define Set_HASH_HR3(FLAG)                   (*(uint32_t*)0x50060418 &= FLAG)
#define Clr_HASH_HR3(FLAG)                   (*(uint32_t*)0x50060418 |= ~FLAG)
#define Set_HASH_HR4(FLAG)                   (*(uint32_t*)0x5006041c &= FLAG)
#define Clr_HASH_HR4(FLAG)                   (*(uint32_t*)0x5006041c |= ~FLAG)
#define Set_HASH_IMR(FLAG)                   (*(uint32_t*)0x50060420 &= FLAG)
#define Clr_HASH_IMR(FLAG)                   (*(uint32_t*)0x50060420 |= ~FLAG)
#define Set_HASH_SR(FLAG)                    (*(uint32_t*)0x50060424 &= FLAG)
#define Clr_HASH_SR(FLAG)                    (*(uint32_t*)0x50060424 |= ~FLAG)
#define Set_HASH_CSR0(FLAG)                  (*(uint32_t*)0x500604f8 &= FLAG)
#define Clr_HASH_CSR0(FLAG)                  (*(uint32_t*)0x500604f8 |= ~FLAG)
#define Set_HASH_CSR1(FLAG)                  (*(uint32_t*)0x500604fc &= FLAG)
#define Clr_HASH_CSR1(FLAG)                  (*(uint32_t*)0x500604fc |= ~FLAG)
#define Set_HASH_CSR2(FLAG)                  (*(uint32_t*)0x50060500 &= FLAG)
#define Clr_HASH_CSR2(FLAG)                  (*(uint32_t*)0x50060500 |= ~FLAG)
#define Set_HASH_CSR3(FLAG)                  (*(uint32_t*)0x50060504 &= FLAG)
#define Clr_HASH_CSR3(FLAG)                  (*(uint32_t*)0x50060504 |= ~FLAG)
#define Set_HASH_CSR4(FLAG)                  (*(uint32_t*)0x50060508 &= FLAG)
#define Clr_HASH_CSR4(FLAG)                  (*(uint32_t*)0x50060508 |= ~FLAG)
#define Set_HASH_CSR5(FLAG)                  (*(uint32_t*)0x5006050c &= FLAG)
#define Clr_HASH_CSR5(FLAG)                  (*(uint32_t*)0x5006050c |= ~FLAG)
#define Set_HASH_CSR6(FLAG)                  (*(uint32_t*)0x50060510 &= FLAG)
#define Clr_HASH_CSR6(FLAG)                  (*(uint32_t*)0x50060510 |= ~FLAG)
#define Set_HASH_CSR7(FLAG)                  (*(uint32_t*)0x50060514 &= FLAG)
#define Clr_HASH_CSR7(FLAG)                  (*(uint32_t*)0x50060514 |= ~FLAG)
#define Set_HASH_CSR8(FLAG)                  (*(uint32_t*)0x50060518 &= FLAG)
#define Clr_HASH_CSR8(FLAG)                  (*(uint32_t*)0x50060518 |= ~FLAG)
#define Set_HASH_CSR9(FLAG)                  (*(uint32_t*)0x5006051c &= FLAG)
#define Clr_HASH_CSR9(FLAG)                  (*(uint32_t*)0x5006051c |= ~FLAG)
#define Set_HASH_CSR10(FLAG)                 (*(uint32_t*)0x50060520 &= FLAG)
#define Clr_HASH_CSR10(FLAG)                 (*(uint32_t*)0x50060520 |= ~FLAG)
#define Set_HASH_CSR11(FLAG)                 (*(uint32_t*)0x50060524 &= FLAG)
#define Clr_HASH_CSR11(FLAG)                 (*(uint32_t*)0x50060524 |= ~FLAG)
#define Set_HASH_CSR12(FLAG)                 (*(uint32_t*)0x50060528 &= FLAG)
#define Clr_HASH_CSR12(FLAG)                 (*(uint32_t*)0x50060528 |= ~FLAG)
#define Set_HASH_CSR13(FLAG)                 (*(uint32_t*)0x5006052c &= FLAG)
#define Clr_HASH_CSR13(FLAG)                 (*(uint32_t*)0x5006052c |= ~FLAG)
#define Set_HASH_CSR14(FLAG)                 (*(uint32_t*)0x50060530 &= FLAG)
#define Clr_HASH_CSR14(FLAG)                 (*(uint32_t*)0x50060530 |= ~FLAG)
#define Set_HASH_CSR15(FLAG)                 (*(uint32_t*)0x50060534 &= FLAG)
#define Clr_HASH_CSR15(FLAG)                 (*(uint32_t*)0x50060534 |= ~FLAG)
#define Set_HASH_CSR16(FLAG)                 (*(uint32_t*)0x50060538 &= FLAG)
#define Clr_HASH_CSR16(FLAG)                 (*(uint32_t*)0x50060538 |= ~FLAG)
#define Set_HASH_CSR17(FLAG)                 (*(uint32_t*)0x5006053c &= FLAG)
#define Clr_HASH_CSR17(FLAG)                 (*(uint32_t*)0x5006053c |= ~FLAG)
#define Set_HASH_CSR18(FLAG)                 (*(uint32_t*)0x50060540 &= FLAG)
#define Clr_HASH_CSR18(FLAG)                 (*(uint32_t*)0x50060540 |= ~FLAG)
#define Set_HASH_CSR19(FLAG)                 (*(uint32_t*)0x50060544 &= FLAG)
#define Clr_HASH_CSR19(FLAG)                 (*(uint32_t*)0x50060544 |= ~FLAG)
#define Set_HASH_CSR20(FLAG)                 (*(uint32_t*)0x50060548 &= FLAG)
#define Clr_HASH_CSR20(FLAG)                 (*(uint32_t*)0x50060548 |= ~FLAG)
#define Set_HASH_CSR21(FLAG)                 (*(uint32_t*)0x5006054c &= FLAG)
#define Clr_HASH_CSR21(FLAG)                 (*(uint32_t*)0x5006054c |= ~FLAG)
#define Set_HASH_CSR22(FLAG)                 (*(uint32_t*)0x50060550 &= FLAG)
#define Clr_HASH_CSR22(FLAG)                 (*(uint32_t*)0x50060550 |= ~FLAG)
#define Set_HASH_CSR23(FLAG)                 (*(uint32_t*)0x50060554 &= FLAG)
#define Clr_HASH_CSR23(FLAG)                 (*(uint32_t*)0x50060554 |= ~FLAG)
#define Set_HASH_CSR24(FLAG)                 (*(uint32_t*)0x50060558 &= FLAG)
#define Clr_HASH_CSR24(FLAG)                 (*(uint32_t*)0x50060558 |= ~FLAG)
#define Set_HASH_CSR25(FLAG)                 (*(uint32_t*)0x5006055c &= FLAG)
#define Clr_HASH_CSR25(FLAG)                 (*(uint32_t*)0x5006055c |= ~FLAG)
#define Set_HASH_CSR26(FLAG)                 (*(uint32_t*)0x50060560 &= FLAG)
#define Clr_HASH_CSR26(FLAG)                 (*(uint32_t*)0x50060560 |= ~FLAG)
#define Set_HASH_CSR27(FLAG)                 (*(uint32_t*)0x50060564 &= FLAG)
#define Clr_HASH_CSR27(FLAG)                 (*(uint32_t*)0x50060564 |= ~FLAG)
#define Set_HASH_CSR28(FLAG)                 (*(uint32_t*)0x50060568 &= FLAG)
#define Clr_HASH_CSR28(FLAG)                 (*(uint32_t*)0x50060568 |= ~FLAG)
#define Set_HASH_CSR29(FLAG)                 (*(uint32_t*)0x5006056c &= FLAG)
#define Clr_HASH_CSR29(FLAG)                 (*(uint32_t*)0x5006056c |= ~FLAG)
#define Set_HASH_CSR30(FLAG)                 (*(uint32_t*)0x50060570 &= FLAG)
#define Clr_HASH_CSR30(FLAG)                 (*(uint32_t*)0x50060570 |= ~FLAG)
#define Set_HASH_CSR31(FLAG)                 (*(uint32_t*)0x50060574 &= FLAG)
#define Clr_HASH_CSR31(FLAG)                 (*(uint32_t*)0x50060574 |= ~FLAG)
#define Set_HASH_CSR32(FLAG)                 (*(uint32_t*)0x50060578 &= FLAG)
#define Clr_HASH_CSR32(FLAG)                 (*(uint32_t*)0x50060578 |= ~FLAG)
#define Set_HASH_CSR33(FLAG)                 (*(uint32_t*)0x5006057c &= FLAG)
#define Clr_HASH_CSR33(FLAG)                 (*(uint32_t*)0x5006057c |= ~FLAG)
#define Set_HASH_CSR34(FLAG)                 (*(uint32_t*)0x50060580 &= FLAG)
#define Clr_HASH_CSR34(FLAG)                 (*(uint32_t*)0x50060580 |= ~FLAG)
#define Set_HASH_CSR35(FLAG)                 (*(uint32_t*)0x50060584 &= FLAG)
#define Clr_HASH_CSR35(FLAG)                 (*(uint32_t*)0x50060584 |= ~FLAG)
#define Set_HASH_CSR36(FLAG)                 (*(uint32_t*)0x50060588 &= FLAG)
#define Clr_HASH_CSR36(FLAG)                 (*(uint32_t*)0x50060588 |= ~FLAG)
#define Set_HASH_CSR37(FLAG)                 (*(uint32_t*)0x5006058c &= FLAG)
#define Clr_HASH_CSR37(FLAG)                 (*(uint32_t*)0x5006058c |= ~FLAG)
#define Set_HASH_CSR38(FLAG)                 (*(uint32_t*)0x50060590 &= FLAG)
#define Clr_HASH_CSR38(FLAG)                 (*(uint32_t*)0x50060590 |= ~FLAG)
#define Set_HASH_CSR39(FLAG)                 (*(uint32_t*)0x50060594 &= FLAG)
#define Clr_HASH_CSR39(FLAG)                 (*(uint32_t*)0x50060594 |= ~FLAG)
#define Set_HASH_CSR40(FLAG)                 (*(uint32_t*)0x50060598 &= FLAG)
#define Clr_HASH_CSR40(FLAG)                 (*(uint32_t*)0x50060598 |= ~FLAG)
#define Set_HASH_CSR41(FLAG)                 (*(uint32_t*)0x5006059c &= FLAG)
#define Clr_HASH_CSR41(FLAG)                 (*(uint32_t*)0x5006059c |= ~FLAG)
#define Set_HASH_CSR42(FLAG)                 (*(uint32_t*)0x500605a0 &= FLAG)
#define Clr_HASH_CSR42(FLAG)                 (*(uint32_t*)0x500605a0 |= ~FLAG)
#define Set_HASH_CSR43(FLAG)                 (*(uint32_t*)0x500605a4 &= FLAG)
#define Clr_HASH_CSR43(FLAG)                 (*(uint32_t*)0x500605a4 |= ~FLAG)
#define Set_HASH_CSR44(FLAG)                 (*(uint32_t*)0x500605a8 &= FLAG)
#define Clr_HASH_CSR44(FLAG)                 (*(uint32_t*)0x500605a8 |= ~FLAG)
#define Set_HASH_CSR45(FLAG)                 (*(uint32_t*)0x500605ac &= FLAG)
#define Clr_HASH_CSR45(FLAG)                 (*(uint32_t*)0x500605ac |= ~FLAG)
#define Set_HASH_CSR46(FLAG)                 (*(uint32_t*)0x500605b0 &= FLAG)
#define Clr_HASH_CSR46(FLAG)                 (*(uint32_t*)0x500605b0 |= ~FLAG)
#define Set_HASH_CSR47(FLAG)                 (*(uint32_t*)0x500605b4 &= FLAG)
#define Clr_HASH_CSR47(FLAG)                 (*(uint32_t*)0x500605b4 |= ~FLAG)
#define Set_HASH_CSR48(FLAG)                 (*(uint32_t*)0x500605b8 &= FLAG)
#define Clr_HASH_CSR48(FLAG)                 (*(uint32_t*)0x500605b8 |= ~FLAG)
#define Set_HASH_CSR49(FLAG)                 (*(uint32_t*)0x500605bc &= FLAG)
#define Clr_HASH_CSR49(FLAG)                 (*(uint32_t*)0x500605bc |= ~FLAG)
#define Set_HASH_CSR50(FLAG)                 (*(uint32_t*)0x500605c0 &= FLAG)
#define Clr_HASH_CSR50(FLAG)                 (*(uint32_t*)0x500605c0 |= ~FLAG)
#define Set_HASH_CSR51(FLAG)                 (*(uint32_t*)0x500605c4 &= FLAG)
#define Clr_HASH_CSR51(FLAG)                 (*(uint32_t*)0x500605c4 |= ~FLAG)
#define Set_HASH_CSR52(FLAG)                 (*(uint32_t*)0x500605c8 &= FLAG)
#define Clr_HASH_CSR52(FLAG)                 (*(uint32_t*)0x500605c8 |= ~FLAG)
#define Set_HASH_CSR53(FLAG)                 (*(uint32_t*)0x500605cc &= FLAG)
#define Clr_HASH_CSR53(FLAG)                 (*(uint32_t*)0x500605cc |= ~FLAG)
#define Set_HASH_HASH_HR0(FLAG)              (*(uint32_t*)0x50060710 &= FLAG)
#define Clr_HASH_HASH_HR0(FLAG)              (*(uint32_t*)0x50060710 |= ~FLAG)
#define Set_HASH_HASH_HR1(FLAG)              (*(uint32_t*)0x50060714 &= FLAG)
#define Clr_HASH_HASH_HR1(FLAG)              (*(uint32_t*)0x50060714 |= ~FLAG)
#define Set_HASH_HASH_HR2(FLAG)              (*(uint32_t*)0x50060718 &= FLAG)
#define Clr_HASH_HASH_HR2(FLAG)              (*(uint32_t*)0x50060718 |= ~FLAG)
#define Set_HASH_HASH_HR3(FLAG)              (*(uint32_t*)0x5006071c &= FLAG)
#define Clr_HASH_HASH_HR3(FLAG)              (*(uint32_t*)0x5006071c |= ~FLAG)
#define Set_HASH_HASH_HR4(FLAG)              (*(uint32_t*)0x50060720 &= FLAG)
#define Clr_HASH_HASH_HR4(FLAG)              (*(uint32_t*)0x50060720 |= ~FLAG)
#define Set_HASH_HASH_HR5(FLAG)              (*(uint32_t*)0x50060724 &= FLAG)
#define Clr_HASH_HASH_HR5(FLAG)              (*(uint32_t*)0x50060724 |= ~FLAG)
#define Set_HASH_HASH_HR6(FLAG)              (*(uint32_t*)0x50060728 &= FLAG)
#define Clr_HASH_HASH_HR6(FLAG)              (*(uint32_t*)0x50060728 |= ~FLAG)
#define Set_HASH_HASH_HR7(FLAG)              (*(uint32_t*)0x5006072c &= FLAG)
#define Clr_HASH_HASH_HR7(FLAG)              (*(uint32_t*)0x5006072c |= ~FLAG)
#define  _HASH_CR_INIT                                       (0x1 << 2)    // Initialize message digest calculation
#define  _HASH_CR_DMAE                                       (0x1 << 3)    // DMA enable
#define  _HASH_CR_DATATYPE                                   (0x3 << 4)    // Data type selection
　
　drivers/inc/stm32f767xx_DMA.h
#define Get_DMA2_S7M0AR(FLAG)                (*(uint32_t*)0x400264c4 |= FLAG)
#define Get_DMA2_S7M1AR(FLAG)                (*(uint32_t*)0x400264c8 |= FLAG)
#define Get_DMA2_S7FCR(FLAG)                 (*(uint32_t*)0x400264cc |= FLAG)
#define Set_DMA1_LISR(FLAG)                  (*(uint32_t*)0x40026000 &= FLAG)
#define Clr_DMA1_LISR(FLAG)                  (*(uint32_t*)0x40026000 |= ~FLAG)
#define Set_DMA1_HISR(FLAG)                  (*(uint32_t*)0x40026004 &= FLAG)
#define Clr_DMA1_HISR(FLAG)                  (*(uint32_t*)0x40026004 |= ~FLAG)
#define Set_DMA1_LIFCR(FLAG)                 (*(uint32_t*)0x40026008 &= FLAG)
#define Clr_DMA1_LIFCR(FLAG)                 (*(uint32_t*)0x40026008 |= ~FLAG)
#define Set_DMA1_HIFCR(FLAG)                 (*(uint32_t*)0x4002600c &= FLAG)
#define Clr_DMA1_HIFCR(FLAG)                 (*(uint32_t*)0x4002600c |= ~FLAG)
#define Set_DMA1_S0CR(FLAG)                  (*(uint32_t*)0x40026010 &= FLAG)
#define Clr_DMA1_S0CR(FLAG)                  (*(uint32_t*)0x40026010 |= ~FLAG)
#define Set_DMA1_S0NDTR(FLAG)                (*(uint32_t*)0x40026014 &= FLAG)
#define Clr_DMA1_S0NDTR(FLAG)                (*(uint32_t*)0x40026014 |= ~FLAG)
#define Set_DMA1_S0PAR(FLAG)                 (*(uint32_t*)0x40026018 &= FLAG)
#define Clr_DMA1_S0PAR(FLAG)                 (*(uint32_t*)0x40026018 |= ~FLAG)
#define Set_DMA1_S0M0AR(FLAG)                (*(uint32_t*)0x4002601c &= FLAG)
#define Clr_DMA1_S0M0AR(FLAG)                (*(uint32_t*)0x4002601c |= ~FLAG)
#define Set_DMA1_S0M1AR(FLAG)                (*(uint32_t*)0x40026020 &= FLAG)
#define Clr_DMA1_S0M1AR(FLAG)                (*(uint32_t*)0x40026020 |= ~FLAG)
#define Set_DMA1_S0FCR(FLAG)                 (*(uint32_t*)0x40026024 &= FLAG)
#define Clr_DMA1_S0FCR(FLAG)                 (*(uint32_t*)0x40026024 |= ~FLAG)
#define Set_DMA1_S1CR(FLAG)                  (*(uint32_t*)0x40026028 &= FLAG)
#define Clr_DMA1_S1CR(FLAG)                  (*(uint32_t*)0x40026028 |= ~FLAG)
#define Set_DMA1_S1NDTR(FLAG)                (*(uint32_t*)0x4002602c &= FLAG)
#define Clr_DMA1_S1NDTR(FLAG)                (*(uint32_t*)0x4002602c |= ~FLAG)
#define Set_DMA1_S1PAR(FLAG)                 (*(uint32_t*)0x40026030 &= FLAG)
#define Clr_DMA1_S1PAR(FLAG)                 (*(uint32_t*)0x40026030 |= ~FLAG)
#define Set_DMA1_S1M0AR(FLAG)                (*(uint32_t*)0x40026034 &= FLAG)
#define Clr_DMA1_S1M0AR(FLAG)                (*(uint32_t*)0x40026034 |= ~FLAG)
#define Set_DMA1_S1M1AR(FLAG)                (*(uint32_t*)0x40026038 &= FLAG)
#define Clr_DMA1_S1M1AR(FLAG)                (*(uint32_t*)0x40026038 |= ~FLAG)
#define Set_DMA1_S1FCR(FLAG)                 (*(uint32_t*)0x4002603c &= FLAG)
#define Clr_DMA1_S1FCR(FLAG)                 (*(uint32_t*)0x4002603c |= ~FLAG)
#define Set_DMA1_S2CR(FLAG)                  (*(uint32_t*)0x40026040 &= FLAG)
#define Clr_DMA1_S2CR(FLAG)                  (*(uint32_t*)0x40026040 |= ~FLAG)
#define Set_DMA1_S2NDTR(FLAG)                (*(uint32_t*)0x40026044 &= FLAG)
#define Clr_DMA1_S2NDTR(FLAG)                (*(uint32_t*)0x40026044 |= ~FLAG)
#define Set_DMA1_S2PAR(FLAG)                 (*(uint32_t*)0x40026048 &= FLAG)
#define Clr_DMA1_S2PAR(FLAG)                 (*(uint32_t*)0x40026048 |= ~FLAG)
#define Set_DMA1_S2M0AR(FLAG)                (*(uint32_t*)0x4002604c &= FLAG)
#define Clr_DMA1_S2M0AR(FLAG)                (*(uint32_t*)0x4002604c |= ~FLAG)
#define Set_DMA1_S2M1AR(FLAG)                (*(uint32_t*)0x40026050 &= FLAG)
#define Clr_DMA1_S2M1AR(FLAG)                (*(uint32_t*)0x40026050 |= ~FLAG)
#define Set_DMA1_S2FCR(FLAG)                 (*(uint32_t*)0x40026054 &= FLAG)
#define Clr_DMA1_S2FCR(FLAG)                 (*(uint32_t*)0x40026054 |= ~FLAG)
#define Set_DMA1_S3CR(FLAG)                  (*(uint32_t*)0x40026058 &= FLAG)
#define Clr_DMA1_S3CR(FLAG)                  (*(uint32_t*)0x40026058 |= ~FLAG)
#define Set_DMA1_S3NDTR(FLAG)                (*(uint32_t*)0x4002605c &= FLAG)
#define Clr_DMA1_S3NDTR(FLAG)                (*(uint32_t*)0x4002605c |= ~FLAG)
#define Set_DMA1_S3PAR(FLAG)                 (*(uint32_t*)0x40026060 &= FLAG)
#define Clr_DMA1_S3PAR(FLAG)                 (*(uint32_t*)0x40026060 |= ~FLAG)
#define Set_DMA1_S3M0AR(FLAG)                (*(uint32_t*)0x40026064 &= FLAG)
#define Clr_DMA1_S3M0AR(FLAG)                (*(uint32_t*)0x40026064 |= ~FLAG)
#define Set_DMA1_S3M1AR(FLAG)                (*(uint32_t*)0x40026068 &= FLAG)
#define Clr_DMA1_S3M1AR(FLAG)                (*(uint32_t*)0x40026068 |= ~FLAG)
#define Set_DMA1_S3FCR(FLAG)                 (*(uint32_t*)0x4002606c &= FLAG)
#define Clr_DMA1_S3FCR(FLAG)                 (*(uint32_t*)0x4002606c |= ~FLAG)
#define Set_DMA1_S4CR(FLAG)                  (*(uint32_t*)0x40026070 &= FLAG)
#define Clr_DMA1_S4CR(FLAG)                  (*(uint32_t*)0x40026070 |= ~FLAG)
#define Set_DMA1_S4NDTR(FLAG)                (*(uint32_t*)0x40026074 &= FLAG)
#define Clr_DMA1_S4NDTR(FLAG)                (*(uint32_t*)0x40026074 |= ~FLAG)
#define Set_DMA1_S4PAR(FLAG)                 (*(uint32_t*)0x40026078 &= FLAG)
#define Clr_DMA1_S4PAR(FLAG)                 (*(uint32_t*)0x40026078 |= ~FLAG)
#define Set_DMA1_S4M0AR(FLAG)                (*(uint32_t*)0x4002607c &= FLAG)
#define Clr_DMA1_S4M0AR(FLAG)                (*(uint32_t*)0x4002607c |= ~FLAG)
#define Set_DMA1_S4M1AR(FLAG)                (*(uint32_t*)0x40026080 &= FLAG)
#define Clr_DMA1_S4M1AR(FLAG)                (*(uint32_t*)0x40026080 |= ~FLAG)
#define Set_DMA1_S4FCR(FLAG)                 (*(uint32_t*)0x40026084 &= FLAG)
#define Clr_DMA1_S4FCR(FLAG)                 (*(uint32_t*)0x40026084 |= ~FLAG)
#define Set_DMA1_S5CR(FLAG)                  (*(uint32_t*)0x40026088 &= FLAG)
#define Clr_DMA1_S5CR(FLAG)                  (*(uint32_t*)0x40026088 |= ~FLAG)
#define Set_DMA1_S5NDTR(FLAG)                (*(uint32_t*)0x4002608c &= FLAG)
#define Clr_DMA1_S5NDTR(FLAG)                (*(uint32_t*)0x4002608c |= ~FLAG)
#define Set_DMA1_S5PAR(FLAG)                 (*(uint32_t*)0x40026090 &= FLAG)
#define Clr_DMA1_S5PAR(FLAG)                 (*(uint32_t*)0x40026090 |= ~FLAG)
#define Set_DMA1_S5M0AR(FLAG)                (*(uint32_t*)0x40026094 &= FLAG)
#define Clr_DMA1_S5M0AR(FLAG)                (*(uint32_t*)0x40026094 |= ~FLAG)
#define Set_DMA1_S5M1AR(FLAG)                (*(uint32_t*)0x40026098 &= FLAG)
#define Clr_DMA1_S5M1AR(FLAG)                (*(uint32_t*)0x40026098 |= ~FLAG)
#define Set_DMA1_S5FCR(FLAG)                 (*(uint32_t*)0x4002609c &= FLAG)
#define Clr_DMA1_S5FCR(FLAG)                 (*(uint32_t*)0x4002609c |= ~FLAG)
#define Set_DMA1_S6CR(FLAG)                  (*(uint32_t*)0x400260a0 &= FLAG)
#define Clr_DMA1_S6CR(FLAG)                  (*(uint32_t*)0x400260a0 |= ~FLAG)
#define Set_DMA1_S6NDTR(FLAG)                (*(uint32_t*)0x400260a4 &= FLAG)
#define Clr_DMA1_S6NDTR(FLAG)                (*(uint32_t*)0x400260a4 |= ~FLAG)
#define Set_DMA1_S6PAR(FLAG)                 (*(uint32_t*)0x400260a8 &= FLAG)
#define Clr_DMA1_S6PAR(FLAG)                 (*(uint32_t*)0x400260a8 |= ~FLAG)
#define Set_DMA1_S6M0AR(FLAG)                (*(uint32_t*)0x400260ac &= FLAG)
#define Clr_DMA1_S6M0AR(FLAG)                (*(uint32_t*)0x400260ac |= ~FLAG)
#define Set_DMA1_S6M1AR(FLAG)                (*(uint32_t*)0x400260b0 &= FLAG)
#define Clr_DMA1_S6M1AR(FLAG)                (*(uint32_t*)0x400260b0 |= ~FLAG)
#define Set_DMA1_S6FCR(FLAG)                 (*(uint32_t*)0x400260b4 &= FLAG)
#define Clr_DMA1_S6FCR(FLAG)                 (*(uint32_t*)0x400260b4 |= ~FLAG)
#define Set_DMA1_S7CR(FLAG)                  (*(uint32_t*)0x400260b8 &= FLAG)
#define Clr_DMA1_S7CR(FLAG)                  (*(uint32_t*)0x400260b8 |= ~FLAG)
#define Set_DMA1_S7NDTR(FLAG)                (*(uint32_t*)0x400260bc &= FLAG)
#define Clr_DMA1_S7NDTR(FLAG)                (*(uint32_t*)0x400260bc |= ~FLAG)
#define Set_DMA1_S7PAR(FLAG)                 (*(uint32_t*)0x400260c0 &= FLAG)
#define Clr_DMA1_S7PAR(FLAG)                 (*(uint32_t*)0x400260c0 |= ~FLAG)
#define Set_DMA1_S7M0AR(FLAG)                (*(uint32_t*)0x400260c4 &= FLAG)
#define Clr_DMA1_S7M0AR(FLAG)                (*(uint32_t*)0x400260c4 |= ~FLAG)
#define Set_DMA1_S7M1AR(FLAG)                (*(uint32_t*)0x400260c8 &= FLAG)
#define Clr_DMA1_S7M1AR(FLAG)                (*(uint32_t*)0x400260c8 |= ~FLAG)
#define Set_DMA1_S7FCR(FLAG)                 (*(uint32_t*)0x400260cc &= FLAG)
#define Clr_DMA1_S7FCR(FLAG)                 (*(uint32_t*)0x400260cc |= ~FLAG)
#define Set_DMA2_LISR(FLAG)                  (*(uint32_t*)0x40026400 &= FLAG)
#define Clr_DMA2_LISR(FLAG)                  (*(uint32_t*)0x40026400 |= ~FLAG)
#define Set_DMA2_HISR(FLAG)                  (*(uint32_t*)0x40026404 &= FLAG)
#define Clr_DMA2_HISR(FLAG)                  (*(uint32_t*)0x40026404 |= ~FLAG)
#define Set_DMA2_LIFCR(FLAG)                 (*(uint32_t*)0x40026408 &= FLAG)
#define Clr_DMA2_LIFCR(FLAG)                 (*(uint32_t*)0x40026408 |= ~FLAG)
#define Set_DMA2_HIFCR(FLAG)                 (*(uint32_t*)0x4002640c &= FLAG)
#define Clr_DMA2_HIFCR(FLAG)                 (*(uint32_t*)0x4002640c |= ~FLAG)
#define Set_DMA2_S0CR(FLAG)                  (*(uint32_t*)0x40026410 &= FLAG)
#define Clr_DMA2_S0CR(FLAG)                  (*(uint32_t*)0x40026410 |= ~FLAG)
#define Set_DMA2_S0NDTR(FLAG)                (*(uint32_t*)0x40026414 &= FLAG)
#define Clr_DMA2_S0NDTR(FLAG)                (*(uint32_t*)0x40026414 |= ~FLAG)
#define Set_DMA2_S0PAR(FLAG)                 (*(uint32_t*)0x40026418 &= FLAG)
#define Clr_DMA2_S0PAR(FLAG)                 (*(uint32_t*)0x40026418 |= ~FLAG)
#define Set_DMA2_S0M0AR(FLAG)                (*(uint32_t*)0x4002641c &= FLAG)
#define Clr_DMA2_S0M0AR(FLAG)                (*(uint32_t*)0x4002641c |= ~FLAG)
#define Set_DMA2_S0M1AR(FLAG)                (*(uint32_t*)0x40026420 &= FLAG)
#define Clr_DMA2_S0M1AR(FLAG)                (*(uint32_t*)0x40026420 |= ~FLAG)
#define Set_DMA2_S0FCR(FLAG)                 (*(uint32_t*)0x40026424 &= FLAG)
#define Clr_DMA2_S0FCR(FLAG)                 (*(uint32_t*)0x40026424 |= ~FLAG)
#define Set_DMA2_S1CR(FLAG)                  (*(uint32_t*)0x40026428 &= FLAG)
#define Clr_DMA2_S1CR(FLAG)                  (*(uint32_t*)0x40026428 |= ~FLAG)
#define Set_DMA2_S1NDTR(FLAG)                (*(uint32_t*)0x4002642c &= FLAG)
#define Clr_DMA2_S1NDTR(FLAG)                (*(uint32_t*)0x4002642c |= ~FLAG)
#define Set_DMA2_S1PAR(FLAG)                 (*(uint32_t*)0x40026430 &= FLAG)
#define Clr_DMA2_S1PAR(FLAG)                 (*(uint32_t*)0x40026430 |= ~FLAG)
#define Set_DMA2_S1M0AR(FLAG)                (*(uint32_t*)0x40026434 &= FLAG)
#define Clr_DMA2_S1M0AR(FLAG)                (*(uint32_t*)0x40026434 |= ~FLAG)
#define Set_DMA2_S1M1AR(FLAG)                (*(uint32_t*)0x40026438 &= FLAG)
#define Clr_DMA2_S1M1AR(FLAG)                (*(uint32_t*)0x40026438 |= ~FLAG)
#define Set_DMA2_S1FCR(FLAG)                 (*(uint32_t*)0x4002643c &= FLAG)
#define Clr_DMA2_S1FCR(FLAG)                 (*(uint32_t*)0x4002643c |= ~FLAG)
#define Set_DMA2_S2CR(FLAG)                  (*(uint32_t*)0x40026440 &= FLAG)
#define Clr_DMA2_S2CR(FLAG)                  (*(uint32_t*)0x40026440 |= ~FLAG)
#define Set_DMA2_S2NDTR(FLAG)                (*(uint32_t*)0x40026444 &= FLAG)
#define Clr_DMA2_S2NDTR(FLAG)                (*(uint32_t*)0x40026444 |= ~FLAG)
#define Set_DMA2_S2PAR(FLAG)                 (*(uint32_t*)0x40026448 &= FLAG)
#define Clr_DMA2_S2PAR(FLAG)                 (*(uint32_t*)0x40026448 |= ~FLAG)
#define Set_DMA2_S2M0AR(FLAG)                (*(uint32_t*)0x4002644c &= FLAG)
#define Clr_DMA2_S2M0AR(FLAG)                (*(uint32_t*)0x4002644c |= ~FLAG)
#define Set_DMA2_S2M1AR(FLAG)                (*(uint32_t*)0x40026450 &= FLAG)
#define Clr_DMA2_S2M1AR(FLAG)                (*(uint32_t*)0x40026450 |= ~FLAG)
#define Set_DMA2_S2FCR(FLAG)                 (*(uint32_t*)0x40026454 &= FLAG)
#define Clr_DMA2_S2FCR(FLAG)                 (*(uint32_t*)0x40026454 |= ~FLAG)
#define Set_DMA2_S3CR(FLAG)                  (*(uint32_t*)0x40026458 &= FLAG)
#define Clr_DMA2_S3CR(FLAG)                  (*(uint32_t*)0x40026458 |= ~FLAG)
#define Set_DMA2_S3NDTR(FLAG)                (*(uint32_t*)0x4002645c &= FLAG)
#define Clr_DMA2_S3NDTR(FLAG)                (*(uint32_t*)0x4002645c |= ~FLAG)
#define Set_DMA2_S3PAR(FLAG)                 (*(uint32_t*)0x40026460 &= FLAG)
#define Clr_DMA2_S3PAR(FLAG)                 (*(uint32_t*)0x40026460 |= ~FLAG)
#define Set_DMA2_S3M0AR(FLAG)                (*(uint32_t*)0x40026464 &= FLAG)
#define Clr_DMA2_S3M0AR(FLAG)                (*(uint32_t*)0x40026464 |= ~FLAG)
#define Set_DMA2_S3M1AR(FLAG)                (*(uint32_t*)0x40026468 &= FLAG)
#define Clr_DMA2_S3M1AR(FLAG)                (*(uint32_t*)0x40026468 |= ~FLAG)
#define Set_DMA2_S3FCR(FLAG)                 (*(uint32_t*)0x4002646c &= FLAG)
#define Clr_DMA2_S3FCR(FLAG)                 (*(uint32_t*)0x4002646c |= ~FLAG)
#define Set_DMA2_S4CR(FLAG)                  (*(uint32_t*)0x40026470 &= FLAG)
#define Clr_DMA2_S4CR(FLAG)                  (*(uint32_t*)0x40026470 |= ~FLAG)
#define Set_DMA2_S4NDTR(FLAG)                (*(uint32_t*)0x40026474 &= FLAG)
#define Clr_DMA2_S4NDTR(FLAG)                (*(uint32_t*)0x40026474 |= ~FLAG)
#define Set_DMA2_S4PAR(FLAG)                 (*(uint32_t*)0x40026478 &= FLAG)
#define Clr_DMA2_S4PAR(FLAG)                 (*(uint32_t*)0x40026478 |= ~FLAG)
#define Set_DMA2_S4M0AR(FLAG)                (*(uint32_t*)0x4002647c &= FLAG)
#define Clr_DMA2_S4M0AR(FLAG)                (*(uint32_t*)0x4002647c |= ~FLAG)
#define Set_DMA2_S4M1AR(FLAG)                (*(uint32_t*)0x40026480 &= FLAG)
#define Clr_DMA2_S4M1AR(FLAG)                (*(uint32_t*)0x40026480 |= ~FLAG)
#define Set_DMA2_S4FCR(FLAG)                 (*(uint32_t*)0x40026484 &= FLAG)
#define Clr_DMA2_S4FCR(FLAG)                 (*(uint32_t*)0x40026484 |= ~FLAG)
#define Set_DMA2_S5CR(FLAG)                  (*(uint32_t*)0x40026488 &= FLAG)
#define Clr_DMA2_S5CR(FLAG)                  (*(uint32_t*)0x40026488 |= ~FLAG)
#define Set_DMA2_S5NDTR(FLAG)                (*(uint32_t*)0x4002648c &= FLAG)
#define Clr_DMA2_S5NDTR(FLAG)                (*(uint32_t*)0x4002648c |= ~FLAG)
#define Set_DMA2_S5PAR(FLAG)                 (*(uint32_t*)0x40026490 &= FLAG)
#define Clr_DMA2_S5PAR(FLAG)                 (*(uint32_t*)0x40026490 |= ~FLAG)
#define Set_DMA2_S5M0AR(FLAG)                (*(uint32_t*)0x40026494 &= FLAG)
#define Clr_DMA2_S5M0AR(FLAG)                (*(uint32_t*)0x40026494 |= ~FLAG)
#define Set_DMA2_S5M1AR(FLAG)                (*(uint32_t*)0x40026498 &= FLAG)
#define Clr_DMA2_S5M1AR(FLAG)                (*(uint32_t*)0x40026498 |= ~FLAG)
#define Set_DMA2_S5FCR(FLAG)                 (*(uint32_t*)0x4002649c &= FLAG)
#define Clr_DMA2_S5FCR(FLAG)                 (*(uint32_t*)0x4002649c |= ~FLAG)
#define Set_DMA2_S6CR(FLAG)                  (*(uint32_t*)0x400264a0 &= FLAG)
#define Clr_DMA2_S6CR(FLAG)                  (*(uint32_t*)0x400264a0 |= ~FLAG)
#define Set_DMA2_S6NDTR(FLAG)                (*(uint32_t*)0x400264a4 &= FLAG)
#define Clr_DMA2_S6NDTR(FLAG)                (*(uint32_t*)0x400264a4 |= ~FLAG)
#define Set_DMA2_S6PAR(FLAG)                 (*(uint32_t*)0x400264a8 &= FLAG)
#define Clr_DMA2_S6PAR(FLAG)                 (*(uint32_t*)0x400264a8 |= ~FLAG)
#define Set_DMA2_S6M0AR(FLAG)                (*(uint32_t*)0x400264ac &= FLAG)
#define Clr_DMA2_S6M0AR(FLAG)                (*(uint32_t*)0x400264ac |= ~FLAG)
#define Set_DMA2_S6M1AR(FLAG)                (*(uint32_t*)0x400264b0 &= FLAG)
#define Clr_DMA2_S6M1AR(FLAG)                (*(uint32_t*)0x400264b0 |= ~FLAG)
#define Set_DMA2_S6FCR(FLAG)                 (*(uint32_t*)0x400264b4 &= FLAG)
#define Clr_DMA2_S6FCR(FLAG)                 (*(uint32_t*)0x400264b4 |= ~FLAG)
#define Set_DMA2_S7CR(FLAG)                  (*(uint32_t*)0x400264b8 &= FLAG)
#define Clr_DMA2_S7CR(FLAG)                  (*(uint32_t*)0x400264b8 |= ~FLAG)
#define Set_DMA2_S7NDTR(FLAG)                (*(uint32_t*)0x400264bc &= FLAG)
#define Clr_DMA2_S7NDTR(FLAG)                (*(uint32_t*)0x400264bc |= ~FLAG)
#define Set_DMA2_S7PAR(FLAG)                 (*(uint32_t*)0x400264c0 &= FLAG)
#define Clr_DMA2_S7PAR(FLAG)                 (*(uint32_t*)0x400264c0 |= ~FLAG)
#define Set_DMA2_S7M0AR(FLAG)                (*(uint32_t*)0x400264c4 &= FLAG)
#define Clr_DMA2_S7M0AR(FLAG)                (*(uint32_t*)0x400264c4 |= ~FLAG)
#define Set_DMA2_S7M1AR(FLAG)                (*(uint32_t*)0x400264c8 &= FLAG)
#define Clr_DMA2_S7M1AR(FLAG)                (*(uint32_t*)0x400264c8 |= ~FLAG)
#define Set_DMA2_S7FCR(FLAG)                 (*(uint32_t*)0x400264cc &= FLAG)
#define Clr_DMA2_S7FCR(FLAG)                 (*(uint32_t*)0x400264cc |= ~FLAG)
#define  _DMA1_LISR_TCIF3                                    (0x1 << 27)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LISR_HTIF3                                    (0x1 << 26)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA1_LISR_TEIF3                                    (0x1 << 25)    // Stream x transfer error interrupt flag (x=3..0)
　
　drivers/inc/stm32f767xx_JPEG.h
#define Get_JPEG_HUFFENC_DC1_5(FLAG)         (*(uint32_t*)0x500517f4 |= FLAG)
#define Get_JPEG_HUFFENC_DC1_6(FLAG)         (*(uint32_t*)0x500517f8 |= FLAG)
#define Get_JPEG_HUFFENC_DC1_7(FLAG)         (*(uint32_t*)0x500517fc |= FLAG)
#define Set_JPEG_JPEG_CONFR0(FLAG)           (*(uint32_t*)0x50051000 &= FLAG)
#define Clr_JPEG_JPEG_CONFR0(FLAG)           (*(uint32_t*)0x50051000 |= ~FLAG)
#define Set_JPEG_JPEG_CONFR1(FLAG)           (*(uint32_t*)0x50051004 &= FLAG)
#define Clr_JPEG_JPEG_CONFR1(FLAG)           (*(uint32_t*)0x50051004 |= ~FLAG)
#define Set_JPEG_JPEG_CONFR2(FLAG)           (*(uint32_t*)0x50051008 &= FLAG)
#define Clr_JPEG_JPEG_CONFR2(FLAG)           (*(uint32_t*)0x50051008 |= ~FLAG)
#define Set_JPEG_JPEG_CONFR3(FLAG)           (*(uint32_t*)0x5005100c &= FLAG)
#define Clr_JPEG_JPEG_CONFR3(FLAG)           (*(uint32_t*)0x5005100c |= ~FLAG)
#define Set_JPEG_JPEG_CONFR4(FLAG)           (*(uint32_t*)0x50051010 &= FLAG)
#define Clr_JPEG_JPEG_CONFR4(FLAG)           (*(uint32_t*)0x50051010 |= ~FLAG)
#define Set_JPEG_JPEG_CONFR5(FLAG)           (*(uint32_t*)0x50051014 &= FLAG)
#define Clr_JPEG_JPEG_CONFR5(FLAG)           (*(uint32_t*)0x50051014 |= ~FLAG)
#define Set_JPEG_JPEG_CONFR6(FLAG)           (*(uint32_t*)0x50051018 &= FLAG)
#define Clr_JPEG_JPEG_CONFR6(FLAG)           (*(uint32_t*)0x50051018 |= ~FLAG)
#define Set_JPEG_JPEG_CONFR7(FLAG)           (*(uint32_t*)0x5005101c &= FLAG)
#define Clr_JPEG_JPEG_CONFR7(FLAG)           (*(uint32_t*)0x5005101c |= ~FLAG)
#define Set_JPEG_JPEG_CR(FLAG)               (*(uint32_t*)0x50051030 &= FLAG)
#define Clr_JPEG_JPEG_CR(FLAG)               (*(uint32_t*)0x50051030 |= ~FLAG)
#define Set_JPEG_JPEG_SR(FLAG)               (*(uint32_t*)0x50051034 &= FLAG)
#define Clr_JPEG_JPEG_SR(FLAG)               (*(uint32_t*)0x50051034 |= ~FLAG)
#define Set_JPEG_JPEG_CFR(FLAG)              (*(uint32_t*)0x50051038 &= FLAG)
#define Clr_JPEG_JPEG_CFR(FLAG)              (*(uint32_t*)0x50051038 |= ~FLAG)
#define Set_JPEG_JPEG_DIR(FLAG)              (*(uint32_t*)0x50051040 &= FLAG)
#define Clr_JPEG_JPEG_DIR(FLAG)              (*(uint32_t*)0x50051040 |= ~FLAG)
#define Set_JPEG_JPEG_DOR(FLAG)              (*(uint32_t*)0x50051044 &= FLAG)
#define Clr_JPEG_JPEG_DOR(FLAG)              (*(uint32_t*)0x50051044 |= ~FLAG)
#define Set_JPEG_QMEM0_0(FLAG)               (*(uint32_t*)0x50051050 &= FLAG)
#define Clr_JPEG_QMEM0_0(FLAG)               (*(uint32_t*)0x50051050 |= ~FLAG)
#define Set_JPEG_QMEM0_1(FLAG)               (*(uint32_t*)0x50051054 &= FLAG)
#define Clr_JPEG_QMEM0_1(FLAG)               (*(uint32_t*)0x50051054 |= ~FLAG)
#define Set_JPEG_QMEM0_2(FLAG)               (*(uint32_t*)0x50051058 &= FLAG)
#define Clr_JPEG_QMEM0_2(FLAG)               (*(uint32_t*)0x50051058 |= ~FLAG)
#define Set_JPEG_QMEM0_3(FLAG)               (*(uint32_t*)0x5005105c &= FLAG)
#define Clr_JPEG_QMEM0_3(FLAG)               (*(uint32_t*)0x5005105c |= ~FLAG)
#define Set_JPEG_QMEM0_4(FLAG)               (*(uint32_t*)0x50051060 &= FLAG)
#define Clr_JPEG_QMEM0_4(FLAG)               (*(uint32_t*)0x50051060 |= ~FLAG)
#define Set_JPEG_QMEM0_5(FLAG)               (*(uint32_t*)0x50051064 &= FLAG)
#define Clr_JPEG_QMEM0_5(FLAG)               (*(uint32_t*)0x50051064 |= ~FLAG)
#define Set_JPEG_QMEM0_6(FLAG)               (*(uint32_t*)0x50051068 &= FLAG)
#define Clr_JPEG_QMEM0_6(FLAG)               (*(uint32_t*)0x50051068 |= ~FLAG)
#define Set_JPEG_QMEM0_7(FLAG)               (*(uint32_t*)0x5005106c &= FLAG)
#define Clr_JPEG_QMEM0_7(FLAG)               (*(uint32_t*)0x5005106c |= ~FLAG)
#define Set_JPEG_QMEM0_8(FLAG)               (*(uint32_t*)0x50051070 &= FLAG)
#define Clr_JPEG_QMEM0_8(FLAG)               (*(uint32_t*)0x50051070 |= ~FLAG)
#define Set_JPEG_QMEM0_9(FLAG)               (*(uint32_t*)0x50051074 &= FLAG)
#define Clr_JPEG_QMEM0_9(FLAG)               (*(uint32_t*)0x50051074 |= ~FLAG)
#define Set_JPEG_QMEM0_10(FLAG)              (*(uint32_t*)0x50051078 &= FLAG)
#define Clr_JPEG_QMEM0_10(FLAG)              (*(uint32_t*)0x50051078 |= ~FLAG)
#define Set_JPEG_QMEM0_11(FLAG)              (*(uint32_t*)0x5005107c &= FLAG)
#define Clr_JPEG_QMEM0_11(FLAG)              (*(uint32_t*)0x5005107c |= ~FLAG)
#define Set_JPEG_QMEM0_12(FLAG)              (*(uint32_t*)0x50051080 &= FLAG)
#define Clr_JPEG_QMEM0_12(FLAG)              (*(uint32_t*)0x50051080 |= ~FLAG)
#define Set_JPEG_QMEM0_13(FLAG)              (*(uint32_t*)0x50051084 &= FLAG)
#define Clr_JPEG_QMEM0_13(FLAG)              (*(uint32_t*)0x50051084 |= ~FLAG)
#define Set_JPEG_QMEM0_14(FLAG)              (*(uint32_t*)0x50051088 &= FLAG)
#define Clr_JPEG_QMEM0_14(FLAG)              (*(uint32_t*)0x50051088 |= ~FLAG)
#define Set_JPEG_QMEM0_15(FLAG)              (*(uint32_t*)0x5005108c &= FLAG)
#define Clr_JPEG_QMEM0_15(FLAG)              (*(uint32_t*)0x5005108c |= ~FLAG)
#define Set_JPEG_QMEM1_0(FLAG)               (*(uint32_t*)0x50051090 &= FLAG)
#define Clr_JPEG_QMEM1_0(FLAG)               (*(uint32_t*)0x50051090 |= ~FLAG)
#define Set_JPEG_QMEM1_1(FLAG)               (*(uint32_t*)0x50051094 &= FLAG)
#define Clr_JPEG_QMEM1_1(FLAG)               (*(uint32_t*)0x50051094 |= ~FLAG)
#define Set_JPEG_QMEM1_2(FLAG)               (*(uint32_t*)0x50051098 &= FLAG)
#define Clr_JPEG_QMEM1_2(FLAG)               (*(uint32_t*)0x50051098 |= ~FLAG)
#define Set_JPEG_QMEM1_3(FLAG)               (*(uint32_t*)0x5005109c &= FLAG)
#define Clr_JPEG_QMEM1_3(FLAG)               (*(uint32_t*)0x5005109c |= ~FLAG)
#define Set_JPEG_QMEM1_4(FLAG)               (*(uint32_t*)0x500510a0 &= FLAG)
#define Clr_JPEG_QMEM1_4(FLAG)               (*(uint32_t*)0x500510a0 |= ~FLAG)
#define Set_JPEG_QMEM1_5(FLAG)               (*(uint32_t*)0x500510a4 &= FLAG)
#define Clr_JPEG_QMEM1_5(FLAG)               (*(uint32_t*)0x500510a4 |= ~FLAG)
#define Set_JPEG_QMEM1_6(FLAG)               (*(uint32_t*)0x500510a8 &= FLAG)
#define Clr_JPEG_QMEM1_6(FLAG)               (*(uint32_t*)0x500510a8 |= ~FLAG)
#define Set_JPEG_QMEM1_7(FLAG)               (*(uint32_t*)0x500510ac &= FLAG)
#define Clr_JPEG_QMEM1_7(FLAG)               (*(uint32_t*)0x500510ac |= ~FLAG)
#define Set_JPEG_QMEM1_8(FLAG)               (*(uint32_t*)0x500510b0 &= FLAG)
#define Clr_JPEG_QMEM1_8(FLAG)               (*(uint32_t*)0x500510b0 |= ~FLAG)
#define Set_JPEG_QMEM1_9(FLAG)               (*(uint32_t*)0x500510b4 &= FLAG)
#define Clr_JPEG_QMEM1_9(FLAG)               (*(uint32_t*)0x500510b4 |= ~FLAG)
#define Set_JPEG_QMEM1_10(FLAG)              (*(uint32_t*)0x500510b8 &= FLAG)
#define Clr_JPEG_QMEM1_10(FLAG)              (*(uint32_t*)0x500510b8 |= ~FLAG)
#define Set_JPEG_QMEM1_11(FLAG)              (*(uint32_t*)0x500510bc &= FLAG)
#define Clr_JPEG_QMEM1_11(FLAG)              (*(uint32_t*)0x500510bc |= ~FLAG)
#define Set_JPEG_QMEM1_12(FLAG)              (*(uint32_t*)0x500510c0 &= FLAG)
#define Clr_JPEG_QMEM1_12(FLAG)              (*(uint32_t*)0x500510c0 |= ~FLAG)
#define Set_JPEG_QMEM1_13(FLAG)              (*(uint32_t*)0x500510c4 &= FLAG)
#define Clr_JPEG_QMEM1_13(FLAG)              (*(uint32_t*)0x500510c4 |= ~FLAG)
#define Set_JPEG_QMEM1_14(FLAG)              (*(uint32_t*)0x500510c8 &= FLAG)
#define Clr_JPEG_QMEM1_14(FLAG)              (*(uint32_t*)0x500510c8 |= ~FLAG)
#define Set_JPEG_QMEM1_15(FLAG)              (*(uint32_t*)0x500510cc &= FLAG)
#define Clr_JPEG_QMEM1_15(FLAG)              (*(uint32_t*)0x500510cc |= ~FLAG)
#define Set_JPEG_QMEM2_0(FLAG)               (*(uint32_t*)0x500510d0 &= FLAG)
#define Clr_JPEG_QMEM2_0(FLAG)               (*(uint32_t*)0x500510d0 |= ~FLAG)
#define Set_JPEG_QMEM2_1(FLAG)               (*(uint32_t*)0x500510d4 &= FLAG)
#define Clr_JPEG_QMEM2_1(FLAG)               (*(uint32_t*)0x500510d4 |= ~FLAG)
#define Set_JPEG_QMEM2_2(FLAG)               (*(uint32_t*)0x500510d8 &= FLAG)
#define Clr_JPEG_QMEM2_2(FLAG)               (*(uint32_t*)0x500510d8 |= ~FLAG)
#define Set_JPEG_QMEM2_3(FLAG)               (*(uint32_t*)0x500510dc &= FLAG)
#define Clr_JPEG_QMEM2_3(FLAG)               (*(uint32_t*)0x500510dc |= ~FLAG)
#define Set_JPEG_QMEM2_4(FLAG)               (*(uint32_t*)0x500510e0 &= FLAG)
#define Clr_JPEG_QMEM2_4(FLAG)               (*(uint32_t*)0x500510e0 |= ~FLAG)
#define Set_JPEG_QMEM2_5(FLAG)               (*(uint32_t*)0x500510e4 &= FLAG)
#define Clr_JPEG_QMEM2_5(FLAG)               (*(uint32_t*)0x500510e4 |= ~FLAG)
#define Set_JPEG_QMEM2_6(FLAG)               (*(uint32_t*)0x500510e8 &= FLAG)
#define Clr_JPEG_QMEM2_6(FLAG)               (*(uint32_t*)0x500510e8 |= ~FLAG)
#define Set_JPEG_QMEM2_7(FLAG)               (*(uint32_t*)0x500510ec &= FLAG)
#define Clr_JPEG_QMEM2_7(FLAG)               (*(uint32_t*)0x500510ec |= ~FLAG)
#define Set_JPEG_QMEM2_8(FLAG)               (*(uint32_t*)0x500510f0 &= FLAG)
#define Clr_JPEG_QMEM2_8(FLAG)               (*(uint32_t*)0x500510f0 |= ~FLAG)
#define Set_JPEG_QMEM2_9(FLAG)               (*(uint32_t*)0x500510f4 &= FLAG)
#define Clr_JPEG_QMEM2_9(FLAG)               (*(uint32_t*)0x500510f4 |= ~FLAG)
#define Set_JPEG_QMEM2_10(FLAG)              (*(uint32_t*)0x500510f8 &= FLAG)
#define Clr_JPEG_QMEM2_10(FLAG)              (*(uint32_t*)0x500510f8 |= ~FLAG)
#define Set_JPEG_QMEM2_11(FLAG)              (*(uint32_t*)0x500510fc &= FLAG)
#define Clr_JPEG_QMEM2_11(FLAG)              (*(uint32_t*)0x500510fc |= ~FLAG)
#define Set_JPEG_QMEM2_12(FLAG)              (*(uint32_t*)0x50051100 &= FLAG)
#define Clr_JPEG_QMEM2_12(FLAG)              (*(uint32_t*)0x50051100 |= ~FLAG)
#define Set_JPEG_QMEM2_13(FLAG)              (*(uint32_t*)0x50051104 &= FLAG)
#define Clr_JPEG_QMEM2_13(FLAG)              (*(uint32_t*)0x50051104 |= ~FLAG)
#define Set_JPEG_QMEM2_14(FLAG)              (*(uint32_t*)0x50051108 &= FLAG)
#define Clr_JPEG_QMEM2_14(FLAG)              (*(uint32_t*)0x50051108 |= ~FLAG)
#define Set_JPEG_QMEM2_15(FLAG)              (*(uint32_t*)0x5005110c &= FLAG)
#define Clr_JPEG_QMEM2_15(FLAG)              (*(uint32_t*)0x5005110c |= ~FLAG)
#define Set_JPEG_QMEM3_0(FLAG)               (*(uint32_t*)0x50051110 &= FLAG)
#define Clr_JPEG_QMEM3_0(FLAG)               (*(uint32_t*)0x50051110 |= ~FLAG)
#define Set_JPEG_QMEM3_1(FLAG)               (*(uint32_t*)0x50051114 &= FLAG)
#define Clr_JPEG_QMEM3_1(FLAG)               (*(uint32_t*)0x50051114 |= ~FLAG)
#define Set_JPEG_QMEM3_2(FLAG)               (*(uint32_t*)0x50051118 &= FLAG)
#define Clr_JPEG_QMEM3_2(FLAG)               (*(uint32_t*)0x50051118 |= ~FLAG)
#define Set_JPEG_QMEM3_3(FLAG)               (*(uint32_t*)0x5005111c &= FLAG)
#define Clr_JPEG_QMEM3_3(FLAG)               (*(uint32_t*)0x5005111c |= ~FLAG)
#define Set_JPEG_QMEM3_4(FLAG)               (*(uint32_t*)0x50051120 &= FLAG)
#define Clr_JPEG_QMEM3_4(FLAG)               (*(uint32_t*)0x50051120 |= ~FLAG)
#define Set_JPEG_QMEM3_5(FLAG)               (*(uint32_t*)0x50051124 &= FLAG)
#define Clr_JPEG_QMEM3_5(FLAG)               (*(uint32_t*)0x50051124 |= ~FLAG)
#define Set_JPEG_QMEM3_6(FLAG)               (*(uint32_t*)0x50051128 &= FLAG)
#define Clr_JPEG_QMEM3_6(FLAG)               (*(uint32_t*)0x50051128 |= ~FLAG)
#define Set_JPEG_QMEM3_7(FLAG)               (*(uint32_t*)0x5005112c &= FLAG)
#define Clr_JPEG_QMEM3_7(FLAG)               (*(uint32_t*)0x5005112c |= ~FLAG)
#define Set_JPEG_QMEM3_8(FLAG)               (*(uint32_t*)0x50051130 &= FLAG)
#define Clr_JPEG_QMEM3_8(FLAG)               (*(uint32_t*)0x50051130 |= ~FLAG)
#define Set_JPEG_QMEM3_9(FLAG)               (*(uint32_t*)0x50051134 &= FLAG)
#define Clr_JPEG_QMEM3_9(FLAG)               (*(uint32_t*)0x50051134 |= ~FLAG)
#define Set_JPEG_QMEM3_10(FLAG)              (*(uint32_t*)0x50051138 &= FLAG)
#define Clr_JPEG_QMEM3_10(FLAG)              (*(uint32_t*)0x50051138 |= ~FLAG)
#define Set_JPEG_QMEM3_11(FLAG)              (*(uint32_t*)0x5005113c &= FLAG)
#define Clr_JPEG_QMEM3_11(FLAG)              (*(uint32_t*)0x5005113c |= ~FLAG)
#define Set_JPEG_QMEM3_12(FLAG)              (*(uint32_t*)0x50051140 &= FLAG)
#define Clr_JPEG_QMEM3_12(FLAG)              (*(uint32_t*)0x50051140 |= ~FLAG)
#define Set_JPEG_QMEM3_13(FLAG)              (*(uint32_t*)0x50051144 &= FLAG)
#define Clr_JPEG_QMEM3_13(FLAG)              (*(uint32_t*)0x50051144 |= ~FLAG)
#define Set_JPEG_QMEM3_14(FLAG)              (*(uint32_t*)0x50051148 &= FLAG)
#define Clr_JPEG_QMEM3_14(FLAG)              (*(uint32_t*)0x50051148 |= ~FLAG)
#define Set_JPEG_QMEM3_15(FLAG)              (*(uint32_t*)0x5005114c &= FLAG)
#define Clr_JPEG_QMEM3_15(FLAG)              (*(uint32_t*)0x5005114c |= ~FLAG)
#define Set_JPEG_HUFFMIN_0(FLAG)             (*(uint32_t*)0x50051150 &= FLAG)
#define Clr_JPEG_HUFFMIN_0(FLAG)             (*(uint32_t*)0x50051150 |= ~FLAG)
#define Set_JPEG_HUFFMIN_1(FLAG)             (*(uint32_t*)0x50051154 &= FLAG)
#define Clr_JPEG_HUFFMIN_1(FLAG)             (*(uint32_t*)0x50051154 |= ~FLAG)
#define Set_JPEG_HUFFMIN_2(FLAG)             (*(uint32_t*)0x50051158 &= FLAG)
#define Clr_JPEG_HUFFMIN_2(FLAG)             (*(uint32_t*)0x50051158 |= ~FLAG)
#define Set_JPEG_HUFFMIN_3(FLAG)             (*(uint32_t*)0x5005115c &= FLAG)
#define Clr_JPEG_HUFFMIN_3(FLAG)             (*(uint32_t*)0x5005115c |= ~FLAG)
#define Set_JPEG_HUFFMIN_4(FLAG)             (*(uint32_t*)0x50051160 &= FLAG)
#define Clr_JPEG_HUFFMIN_4(FLAG)             (*(uint32_t*)0x50051160 |= ~FLAG)
#define Set_JPEG_HUFFMIN_5(FLAG)             (*(uint32_t*)0x50051164 &= FLAG)
#define Clr_JPEG_HUFFMIN_5(FLAG)             (*(uint32_t*)0x50051164 |= ~FLAG)
#define Set_JPEG_HUFFMIN_6(FLAG)             (*(uint32_t*)0x50051168 &= FLAG)
#define Clr_JPEG_HUFFMIN_6(FLAG)             (*(uint32_t*)0x50051168 |= ~FLAG)
#define Set_JPEG_HUFFMIN_7(FLAG)             (*(uint32_t*)0x5005116c &= FLAG)
#define Clr_JPEG_HUFFMIN_7(FLAG)             (*(uint32_t*)0x5005116c |= ~FLAG)
#define Set_JPEG_HUFFMIN_8(FLAG)             (*(uint32_t*)0x50051170 &= FLAG)
#define Clr_JPEG_HUFFMIN_8(FLAG)             (*(uint32_t*)0x50051170 |= ~FLAG)
#define Set_JPEG_HUFFMIN_9(FLAG)             (*(uint32_t*)0x50051174 &= FLAG)
#define Clr_JPEG_HUFFMIN_9(FLAG)             (*(uint32_t*)0x50051174 |= ~FLAG)
#define Set_JPEG_HUFFMIN_10(FLAG)            (*(uint32_t*)0x50051178 &= FLAG)
#define Clr_JPEG_HUFFMIN_10(FLAG)            (*(uint32_t*)0x50051178 |= ~FLAG)
#define Set_JPEG_HUFFMIN_11(FLAG)            (*(uint32_t*)0x5005117c &= FLAG)
#define Clr_JPEG_HUFFMIN_11(FLAG)            (*(uint32_t*)0x5005117c |= ~FLAG)
#define Set_JPEG_HUFFMIN_12(FLAG)            (*(uint32_t*)0x50051180 &= FLAG)
#define Clr_JPEG_HUFFMIN_12(FLAG)            (*(uint32_t*)0x50051180 |= ~FLAG)
#define Set_JPEG_HUFFMIN_13(FLAG)            (*(uint32_t*)0x50051184 &= FLAG)
#define Clr_JPEG_HUFFMIN_13(FLAG)            (*(uint32_t*)0x50051184 |= ~FLAG)
#define Set_JPEG_HUFFMIN_14(FLAG)            (*(uint32_t*)0x50051188 &= FLAG)
#define Clr_JPEG_HUFFMIN_14(FLAG)            (*(uint32_t*)0x50051188 |= ~FLAG)
#define Set_JPEG_HUFFMIN_15(FLAG)            (*(uint32_t*)0x5005118c &= FLAG)
#define Clr_JPEG_HUFFMIN_15(FLAG)            (*(uint32_t*)0x5005118c |= ~FLAG)
#define Set_JPEG_HUFFBASE0(FLAG)             (*(uint32_t*)0x50051190 &= FLAG)
#define Clr_JPEG_HUFFBASE0(FLAG)             (*(uint32_t*)0x50051190 |= ~FLAG)
#define Set_JPEG_HUFFBASE1(FLAG)             (*(uint32_t*)0x50051194 &= FLAG)
#define Clr_JPEG_HUFFBASE1(FLAG)             (*(uint32_t*)0x50051194 |= ~FLAG)
#define Set_JPEG_HUFFBASE2(FLAG)             (*(uint32_t*)0x50051198 &= FLAG)
#define Clr_JPEG_HUFFBASE2(FLAG)             (*(uint32_t*)0x50051198 |= ~FLAG)
#define Set_JPEG_HUFFBASE3(FLAG)             (*(uint32_t*)0x5005119c &= FLAG)
#define Clr_JPEG_HUFFBASE3(FLAG)             (*(uint32_t*)0x5005119c |= ~FLAG)
#define Set_JPEG_HUFFBASE4(FLAG)             (*(uint32_t*)0x500511a0 &= FLAG)
#define Clr_JPEG_HUFFBASE4(FLAG)             (*(uint32_t*)0x500511a0 |= ~FLAG)
#define Set_JPEG_HUFFBASE5(FLAG)             (*(uint32_t*)0x500511a4 &= FLAG)
#define Clr_JPEG_HUFFBASE5(FLAG)             (*(uint32_t*)0x500511a4 |= ~FLAG)
#define Set_JPEG_HUFFBASE6(FLAG)             (*(uint32_t*)0x500511a8 &= FLAG)
#define Clr_JPEG_HUFFBASE6(FLAG)             (*(uint32_t*)0x500511a8 |= ~FLAG)
#define Set_JPEG_HUFFBASE7(FLAG)             (*(uint32_t*)0x500511ac &= FLAG)
#define Clr_JPEG_HUFFBASE7(FLAG)             (*(uint32_t*)0x500511ac |= ~FLAG)
#define Set_JPEG_HUFFBASE8(FLAG)             (*(uint32_t*)0x500511b0 &= FLAG)
#define Clr_JPEG_HUFFBASE8(FLAG)             (*(uint32_t*)0x500511b0 |= ~FLAG)
#define Set_JPEG_HUFFBASE9(FLAG)             (*(uint32_t*)0x500511b4 &= FLAG)
#define Clr_JPEG_HUFFBASE9(FLAG)             (*(uint32_t*)0x500511b4 |= ~FLAG)
#define Set_JPEG_HUFFBASE10(FLAG)            (*(uint32_t*)0x500511b8 &= FLAG)
#define Clr_JPEG_HUFFBASE10(FLAG)            (*(uint32_t*)0x500511b8 |= ~FLAG)
#define Set_JPEG_HUFFBASE11(FLAG)            (*(uint32_t*)0x500511bc &= FLAG)
#define Clr_JPEG_HUFFBASE11(FLAG)            (*(uint32_t*)0x500511bc |= ~FLAG)
#define Set_JPEG_HUFFBASE12(FLAG)            (*(uint32_t*)0x500511c0 &= FLAG)
#define Clr_JPEG_HUFFBASE12(FLAG)            (*(uint32_t*)0x500511c0 |= ~FLAG)
#define Set_JPEG_HUFFBASE13(FLAG)            (*(uint32_t*)0x500511c4 &= FLAG)
#define Clr_JPEG_HUFFBASE13(FLAG)            (*(uint32_t*)0x500511c4 |= ~FLAG)
#define Set_JPEG_HUFFBASE14(FLAG)            (*(uint32_t*)0x500511c8 &= FLAG)
#define Clr_JPEG_HUFFBASE14(FLAG)            (*(uint32_t*)0x500511c8 |= ~FLAG)
#define Set_JPEG_HUFFBASE15(FLAG)            (*(uint32_t*)0x500511cc &= FLAG)
#define Clr_JPEG_HUFFBASE15(FLAG)            (*(uint32_t*)0x500511cc |= ~FLAG)
#define Set_JPEG_HUFFBASE16(FLAG)            (*(uint32_t*)0x500511d0 &= FLAG)
#define Clr_JPEG_HUFFBASE16(FLAG)            (*(uint32_t*)0x500511d0 |= ~FLAG)
#define Set_JPEG_HUFFBASE17(FLAG)            (*(uint32_t*)0x500511d4 &= FLAG)
#define Clr_JPEG_HUFFBASE17(FLAG)            (*(uint32_t*)0x500511d4 |= ~FLAG)
#define Set_JPEG_HUFFBASE18(FLAG)            (*(uint32_t*)0x500511d8 &= FLAG)
#define Clr_JPEG_HUFFBASE18(FLAG)            (*(uint32_t*)0x500511d8 |= ~FLAG)
#define Set_JPEG_HUFFBASE19(FLAG)            (*(uint32_t*)0x500511dc &= FLAG)
#define Clr_JPEG_HUFFBASE19(FLAG)            (*(uint32_t*)0x500511dc |= ~FLAG)
#define Set_JPEG_HUFFBASE20(FLAG)            (*(uint32_t*)0x500511e0 &= FLAG)
#define Clr_JPEG_HUFFBASE20(FLAG)            (*(uint32_t*)0x500511e0 |= ~FLAG)
#define Set_JPEG_HUFFBASE21(FLAG)            (*(uint32_t*)0x500511e4 &= FLAG)
#define Clr_JPEG_HUFFBASE21(FLAG)            (*(uint32_t*)0x500511e4 |= ~FLAG)
#define Set_JPEG_HUFFBASE22(FLAG)            (*(uint32_t*)0x500511e8 &= FLAG)
#define Clr_JPEG_HUFFBASE22(FLAG)            (*(uint32_t*)0x500511e8 |= ~FLAG)
#define Set_JPEG_HUFFBASE23(FLAG)            (*(uint32_t*)0x500511ec &= FLAG)
#define Clr_JPEG_HUFFBASE23(FLAG)            (*(uint32_t*)0x500511ec |= ~FLAG)
#define Set_JPEG_HUFFBASE24(FLAG)            (*(uint32_t*)0x500511f0 &= FLAG)
#define Clr_JPEG_HUFFBASE24(FLAG)            (*(uint32_t*)0x500511f0 |= ~FLAG)
#define Set_JPEG_HUFFBASE25(FLAG)            (*(uint32_t*)0x500511f4 &= FLAG)
#define Clr_JPEG_HUFFBASE25(FLAG)            (*(uint32_t*)0x500511f4 |= ~FLAG)
#define Set_JPEG_HUFFBASE26(FLAG)            (*(uint32_t*)0x500511f8 &= FLAG)
#define Clr_JPEG_HUFFBASE26(FLAG)            (*(uint32_t*)0x500511f8 |= ~FLAG)
#define Set_JPEG_HUFFBASE27(FLAG)            (*(uint32_t*)0x500511fc &= FLAG)
#define Clr_JPEG_HUFFBASE27(FLAG)            (*(uint32_t*)0x500511fc |= ~FLAG)
#define Set_JPEG_HUFFBASE28(FLAG)            (*(uint32_t*)0x50051200 &= FLAG)
#define Clr_JPEG_HUFFBASE28(FLAG)            (*(uint32_t*)0x50051200 |= ~FLAG)
#define Set_JPEG_HUFFBASE29(FLAG)            (*(uint32_t*)0x50051204 &= FLAG)
#define Clr_JPEG_HUFFBASE29(FLAG)            (*(uint32_t*)0x50051204 |= ~FLAG)
#define Set_JPEG_HUFFBASE30(FLAG)            (*(uint32_t*)0x50051208 &= FLAG)
#define Clr_JPEG_HUFFBASE30(FLAG)            (*(uint32_t*)0x50051208 |= ~FLAG)
#define Set_JPEG_HUFFBASE31(FLAG)            (*(uint32_t*)0x5005120c &= FLAG)
#define Clr_JPEG_HUFFBASE31(FLAG)            (*(uint32_t*)0x5005120c |= ~FLAG)
#define Set_JPEG_HUFFSYMB0(FLAG)             (*(uint32_t*)0x50051210 &= FLAG)
#define Clr_JPEG_HUFFSYMB0(FLAG)             (*(uint32_t*)0x50051210 |= ~FLAG)
#define Set_JPEG_HUFFSYMB1(FLAG)             (*(uint32_t*)0x50051214 &= FLAG)
#define Clr_JPEG_HUFFSYMB1(FLAG)             (*(uint32_t*)0x50051214 |= ~FLAG)
#define Set_JPEG_HUFFSYMB2(FLAG)             (*(uint32_t*)0x50051218 &= FLAG)
#define Clr_JPEG_HUFFSYMB2(FLAG)             (*(uint32_t*)0x50051218 |= ~FLAG)
#define Set_JPEG_HUFFSYMB3(FLAG)             (*(uint32_t*)0x5005121c &= FLAG)
#define Clr_JPEG_HUFFSYMB3(FLAG)             (*(uint32_t*)0x5005121c |= ~FLAG)
#define Set_JPEG_HUFFSYMB4(FLAG)             (*(uint32_t*)0x50051220 &= FLAG)
#define Clr_JPEG_HUFFSYMB4(FLAG)             (*(uint32_t*)0x50051220 |= ~FLAG)
#define Set_JPEG_HUFFSYMB5(FLAG)             (*(uint32_t*)0x50051224 &= FLAG)
#define Clr_JPEG_HUFFSYMB5(FLAG)             (*(uint32_t*)0x50051224 |= ~FLAG)
#define Set_JPEG_HUFFSYMB6(FLAG)             (*(uint32_t*)0x50051228 &= FLAG)
#define Clr_JPEG_HUFFSYMB6(FLAG)             (*(uint32_t*)0x50051228 |= ~FLAG)
#define Set_JPEG_HUFFSYMB7(FLAG)             (*(uint32_t*)0x5005122c &= FLAG)
#define Clr_JPEG_HUFFSYMB7(FLAG)             (*(uint32_t*)0x5005122c |= ~FLAG)
#define Set_JPEG_HUFFSYMB8(FLAG)             (*(uint32_t*)0x50051230 &= FLAG)
#define Clr_JPEG_HUFFSYMB8(FLAG)             (*(uint32_t*)0x50051230 |= ~FLAG)
#define Set_JPEG_HUFFSYMB9(FLAG)             (*(uint32_t*)0x50051234 &= FLAG)
#define Clr_JPEG_HUFFSYMB9(FLAG)             (*(uint32_t*)0x50051234 |= ~FLAG)
#define Set_JPEG_HUFFSYMB10(FLAG)            (*(uint32_t*)0x50051238 &= FLAG)
#define Clr_JPEG_HUFFSYMB10(FLAG)            (*(uint32_t*)0x50051238 |= ~FLAG)
#define Set_JPEG_HUFFSYMB11(FLAG)            (*(uint32_t*)0x5005123c &= FLAG)
#define Clr_JPEG_HUFFSYMB11(FLAG)            (*(uint32_t*)0x5005123c |= ~FLAG)
#define Set_JPEG_HUFFSYMB12(FLAG)            (*(uint32_t*)0x50051240 &= FLAG)
#define Clr_JPEG_HUFFSYMB12(FLAG)            (*(uint32_t*)0x50051240 |= ~FLAG)
#define Set_JPEG_HUFFSYMB13(FLAG)            (*(uint32_t*)0x50051244 &= FLAG)
#define Clr_JPEG_HUFFSYMB13(FLAG)            (*(uint32_t*)0x50051244 |= ~FLAG)
#define Set_JPEG_HUFFSYMB14(FLAG)            (*(uint32_t*)0x50051248 &= FLAG)
#define Clr_JPEG_HUFFSYMB14(FLAG)            (*(uint32_t*)0x50051248 |= ~FLAG)
#define Set_JPEG_HUFFSYMB15(FLAG)            (*(uint32_t*)0x5005124c &= FLAG)
#define Clr_JPEG_HUFFSYMB15(FLAG)            (*(uint32_t*)0x5005124c |= ~FLAG)
#define Set_JPEG_HUFFSYMB16(FLAG)            (*(uint32_t*)0x50051250 &= FLAG)
#define Clr_JPEG_HUFFSYMB16(FLAG)            (*(uint32_t*)0x50051250 |= ~FLAG)
#define Set_JPEG_HUFFSYMB17(FLAG)            (*(uint32_t*)0x50051254 &= FLAG)
#define Clr_JPEG_HUFFSYMB17(FLAG)            (*(uint32_t*)0x50051254 |= ~FLAG)
#define Set_JPEG_HUFFSYMB18(FLAG)            (*(uint32_t*)0x50051258 &= FLAG)
#define Clr_JPEG_HUFFSYMB18(FLAG)            (*(uint32_t*)0x50051258 |= ~FLAG)
#define Set_JPEG_HUFFSYMB19(FLAG)            (*(uint32_t*)0x5005125c &= FLAG)
#define Clr_JPEG_HUFFSYMB19(FLAG)            (*(uint32_t*)0x5005125c |= ~FLAG)
#define Set_JPEG_HUFFSYMB20(FLAG)            (*(uint32_t*)0x50051260 &= FLAG)
#define Clr_JPEG_HUFFSYMB20(FLAG)            (*(uint32_t*)0x50051260 |= ~FLAG)
#define Set_JPEG_HUFFSYMB21(FLAG)            (*(uint32_t*)0x50051264 &= FLAG)
#define Clr_JPEG_HUFFSYMB21(FLAG)            (*(uint32_t*)0x50051264 |= ~FLAG)
#define Set_JPEG_HUFFSYMB22(FLAG)            (*(uint32_t*)0x50051268 &= FLAG)
#define Clr_JPEG_HUFFSYMB22(FLAG)            (*(uint32_t*)0x50051268 |= ~FLAG)
#define Set_JPEG_HUFFSYMB23(FLAG)            (*(uint32_t*)0x5005126c &= FLAG)
#define Clr_JPEG_HUFFSYMB23(FLAG)            (*(uint32_t*)0x5005126c |= ~FLAG)
#define Set_JPEG_HUFFSYMB24(FLAG)            (*(uint32_t*)0x50051270 &= FLAG)
#define Clr_JPEG_HUFFSYMB24(FLAG)            (*(uint32_t*)0x50051270 |= ~FLAG)
#define Set_JPEG_HUFFSYMB25(FLAG)            (*(uint32_t*)0x50051274 &= FLAG)
#define Clr_JPEG_HUFFSYMB25(FLAG)            (*(uint32_t*)0x50051274 |= ~FLAG)
#define Set_JPEG_HUFFSYMB26(FLAG)            (*(uint32_t*)0x50051278 &= FLAG)
#define Clr_JPEG_HUFFSYMB26(FLAG)            (*(uint32_t*)0x50051278 |= ~FLAG)
#define Set_JPEG_HUFFSYMB27(FLAG)            (*(uint32_t*)0x5005127c &= FLAG)
#define Clr_JPEG_HUFFSYMB27(FLAG)            (*(uint32_t*)0x5005127c |= ~FLAG)
#define Set_JPEG_HUFFSYMB28(FLAG)            (*(uint32_t*)0x50051280 &= FLAG)
#define Clr_JPEG_HUFFSYMB28(FLAG)            (*(uint32_t*)0x50051280 |= ~FLAG)
#define Set_JPEG_HUFFSYMB29(FLAG)            (*(uint32_t*)0x50051284 &= FLAG)
#define Clr_JPEG_HUFFSYMB29(FLAG)            (*(uint32_t*)0x50051284 |= ~FLAG)
#define Set_JPEG_HUFFSYMB30(FLAG)            (*(uint32_t*)0x50051288 &= FLAG)
#define Clr_JPEG_HUFFSYMB30(FLAG)            (*(uint32_t*)0x50051288 |= ~FLAG)
#define Set_JPEG_HUFFSYMB31(FLAG)            (*(uint32_t*)0x5005128c &= FLAG)
#define Clr_JPEG_HUFFSYMB31(FLAG)            (*(uint32_t*)0x5005128c |= ~FLAG)
#define Set_JPEG_HUFFSYMB32(FLAG)            (*(uint32_t*)0x50051290 &= FLAG)
#define Clr_JPEG_HUFFSYMB32(FLAG)            (*(uint32_t*)0x50051290 |= ~FLAG)
#define Set_JPEG_HUFFSYMB33(FLAG)            (*(uint32_t*)0x50051294 &= FLAG)
#define Clr_JPEG_HUFFSYMB33(FLAG)            (*(uint32_t*)0x50051294 |= ~FLAG)
#define Set_JPEG_HUFFSYMB34(FLAG)            (*(uint32_t*)0x50051298 &= FLAG)
#define Clr_JPEG_HUFFSYMB34(FLAG)            (*(uint32_t*)0x50051298 |= ~FLAG)
#define Set_JPEG_HUFFSYMB35(FLAG)            (*(uint32_t*)0x5005129c &= FLAG)
#define Clr_JPEG_HUFFSYMB35(FLAG)            (*(uint32_t*)0x5005129c |= ~FLAG)
#define Set_JPEG_HUFFSYMB36(FLAG)            (*(uint32_t*)0x500512a0 &= FLAG)
#define Clr_JPEG_HUFFSYMB36(FLAG)            (*(uint32_t*)0x500512a0 |= ~FLAG)
#define Set_JPEG_HUFFSYMB37(FLAG)            (*(uint32_t*)0x500512a4 &= FLAG)
#define Clr_JPEG_HUFFSYMB37(FLAG)            (*(uint32_t*)0x500512a4 |= ~FLAG)
#define Set_JPEG_HUFFSYMB38(FLAG)            (*(uint32_t*)0x500512a8 &= FLAG)
#define Clr_JPEG_HUFFSYMB38(FLAG)            (*(uint32_t*)0x500512a8 |= ~FLAG)
#define Set_JPEG_HUFFSYMB39(FLAG)            (*(uint32_t*)0x500512ac &= FLAG)
#define Clr_JPEG_HUFFSYMB39(FLAG)            (*(uint32_t*)0x500512ac |= ~FLAG)
#define Set_JPEG_HUFFSYMB40(FLAG)            (*(uint32_t*)0x500512b0 &= FLAG)
#define Clr_JPEG_HUFFSYMB40(FLAG)            (*(uint32_t*)0x500512b0 |= ~FLAG)
#define Set_JPEG_HUFFSYMB41(FLAG)            (*(uint32_t*)0x500512b4 &= FLAG)
#define Clr_JPEG_HUFFSYMB41(FLAG)            (*(uint32_t*)0x500512b4 |= ~FLAG)
#define Set_JPEG_HUFFSYMB42(FLAG)            (*(uint32_t*)0x500512b8 &= FLAG)
#define Clr_JPEG_HUFFSYMB42(FLAG)            (*(uint32_t*)0x500512b8 |= ~FLAG)
#define Set_JPEG_HUFFSYMB43(FLAG)            (*(uint32_t*)0x500512bc &= FLAG)
#define Clr_JPEG_HUFFSYMB43(FLAG)            (*(uint32_t*)0x500512bc |= ~FLAG)
#define Set_JPEG_HUFFSYMB44(FLAG)            (*(uint32_t*)0x500512c0 &= FLAG)
#define Clr_JPEG_HUFFSYMB44(FLAG)            (*(uint32_t*)0x500512c0 |= ~FLAG)
#define Set_JPEG_HUFFSYMB45(FLAG)            (*(uint32_t*)0x500512c4 &= FLAG)
#define Clr_JPEG_HUFFSYMB45(FLAG)            (*(uint32_t*)0x500512c4 |= ~FLAG)
#define Set_JPEG_HUFFSYMB46(FLAG)            (*(uint32_t*)0x500512c8 &= FLAG)
#define Clr_JPEG_HUFFSYMB46(FLAG)            (*(uint32_t*)0x500512c8 |= ~FLAG)
#define Set_JPEG_HUFFSYMB47(FLAG)            (*(uint32_t*)0x500512cc &= FLAG)
#define Clr_JPEG_HUFFSYMB47(FLAG)            (*(uint32_t*)0x500512cc |= ~FLAG)
#define Set_JPEG_HUFFSYMB48(FLAG)            (*(uint32_t*)0x500512d0 &= FLAG)
#define Clr_JPEG_HUFFSYMB48(FLAG)            (*(uint32_t*)0x500512d0 |= ~FLAG)
#define Set_JPEG_HUFFSYMB49(FLAG)            (*(uint32_t*)0x500512d4 &= FLAG)
#define Clr_JPEG_HUFFSYMB49(FLAG)            (*(uint32_t*)0x500512d4 |= ~FLAG)
#define Set_JPEG_HUFFSYMB50(FLAG)            (*(uint32_t*)0x500512d8 &= FLAG)
#define Clr_JPEG_HUFFSYMB50(FLAG)            (*(uint32_t*)0x500512d8 |= ~FLAG)
#define Set_JPEG_HUFFSYMB51(FLAG)            (*(uint32_t*)0x500512dc &= FLAG)
#define Clr_JPEG_HUFFSYMB51(FLAG)            (*(uint32_t*)0x500512dc |= ~FLAG)
#define Set_JPEG_HUFFSYMB52(FLAG)            (*(uint32_t*)0x500512e0 &= FLAG)
#define Clr_JPEG_HUFFSYMB52(FLAG)            (*(uint32_t*)0x500512e0 |= ~FLAG)
#define Set_JPEG_HUFFSYMB53(FLAG)            (*(uint32_t*)0x500512e4 &= FLAG)
#define Clr_JPEG_HUFFSYMB53(FLAG)            (*(uint32_t*)0x500512e4 |= ~FLAG)
#define Set_JPEG_HUFFSYMB54(FLAG)            (*(uint32_t*)0x500512e8 &= FLAG)
#define Clr_JPEG_HUFFSYMB54(FLAG)            (*(uint32_t*)0x500512e8 |= ~FLAG)
#define Set_JPEG_HUFFSYMB55(FLAG)            (*(uint32_t*)0x500512ec &= FLAG)
#define Clr_JPEG_HUFFSYMB55(FLAG)            (*(uint32_t*)0x500512ec |= ~FLAG)
#define Set_JPEG_HUFFSYMB56(FLAG)            (*(uint32_t*)0x500512f0 &= FLAG)
#define Clr_JPEG_HUFFSYMB56(FLAG)            (*(uint32_t*)0x500512f0 |= ~FLAG)
#define Set_JPEG_HUFFSYMB57(FLAG)            (*(uint32_t*)0x500512f4 &= FLAG)
#define Clr_JPEG_HUFFSYMB57(FLAG)            (*(uint32_t*)0x500512f4 |= ~FLAG)
#define Set_JPEG_HUFFSYMB58(FLAG)            (*(uint32_t*)0x500512f8 &= FLAG)
#define Clr_JPEG_HUFFSYMB58(FLAG)            (*(uint32_t*)0x500512f8 |= ~FLAG)
#define Set_JPEG_HUFFSYMB59(FLAG)            (*(uint32_t*)0x500512fc &= FLAG)
#define Clr_JPEG_HUFFSYMB59(FLAG)            (*(uint32_t*)0x500512fc |= ~FLAG)
#define Set_JPEG_HUFFSYMB60(FLAG)            (*(uint32_t*)0x50051300 &= FLAG)
#define Clr_JPEG_HUFFSYMB60(FLAG)            (*(uint32_t*)0x50051300 |= ~FLAG)
#define Set_JPEG_HUFFSYMB61(FLAG)            (*(uint32_t*)0x50051304 &= FLAG)
#define Clr_JPEG_HUFFSYMB61(FLAG)            (*(uint32_t*)0x50051304 |= ~FLAG)
#define Set_JPEG_HUFFSYMB62(FLAG)            (*(uint32_t*)0x50051308 &= FLAG)
#define Clr_JPEG_HUFFSYMB62(FLAG)            (*(uint32_t*)0x50051308 |= ~FLAG)
#define Set_JPEG_HUFFSYMB63(FLAG)            (*(uint32_t*)0x5005130c &= FLAG)
#define Clr_JPEG_HUFFSYMB63(FLAG)            (*(uint32_t*)0x5005130c |= ~FLAG)
#define Set_JPEG_HUFFSYMB64(FLAG)            (*(uint32_t*)0x50051310 &= FLAG)
#define Clr_JPEG_HUFFSYMB64(FLAG)            (*(uint32_t*)0x50051310 |= ~FLAG)
#define Set_JPEG_HUFFSYMB65(FLAG)            (*(uint32_t*)0x50051314 &= FLAG)
#define Clr_JPEG_HUFFSYMB65(FLAG)            (*(uint32_t*)0x50051314 |= ~FLAG)
#define Set_JPEG_HUFFSYMB66(FLAG)            (*(uint32_t*)0x50051318 &= FLAG)
#define Clr_JPEG_HUFFSYMB66(FLAG)            (*(uint32_t*)0x50051318 |= ~FLAG)
#define Set_JPEG_HUFFSYMB67(FLAG)            (*(uint32_t*)0x5005131c &= FLAG)
#define Clr_JPEG_HUFFSYMB67(FLAG)            (*(uint32_t*)0x5005131c |= ~FLAG)
#define Set_JPEG_HUFFSYMB68(FLAG)            (*(uint32_t*)0x50051320 &= FLAG)
#define Clr_JPEG_HUFFSYMB68(FLAG)            (*(uint32_t*)0x50051320 |= ~FLAG)
#define Set_JPEG_HUFFSYMB69(FLAG)            (*(uint32_t*)0x50051324 &= FLAG)
#define Clr_JPEG_HUFFSYMB69(FLAG)            (*(uint32_t*)0x50051324 |= ~FLAG)
#define Set_JPEG_HUFFSYMB70(FLAG)            (*(uint32_t*)0x50051328 &= FLAG)
#define Clr_JPEG_HUFFSYMB70(FLAG)            (*(uint32_t*)0x50051328 |= ~FLAG)
#define Set_JPEG_HUFFSYMB71(FLAG)            (*(uint32_t*)0x5005132c &= FLAG)
#define Clr_JPEG_HUFFSYMB71(FLAG)            (*(uint32_t*)0x5005132c |= ~FLAG)
#define Set_JPEG_HUFFSYMB72(FLAG)            (*(uint32_t*)0x50051330 &= FLAG)
#define Clr_JPEG_HUFFSYMB72(FLAG)            (*(uint32_t*)0x50051330 |= ~FLAG)
#define Set_JPEG_HUFFSYMB73(FLAG)            (*(uint32_t*)0x50051334 &= FLAG)
#define Clr_JPEG_HUFFSYMB73(FLAG)            (*(uint32_t*)0x50051334 |= ~FLAG)
#define Set_JPEG_HUFFSYMB74(FLAG)            (*(uint32_t*)0x50051338 &= FLAG)
#define Clr_JPEG_HUFFSYMB74(FLAG)            (*(uint32_t*)0x50051338 |= ~FLAG)
#define Set_JPEG_HUFFSYMB75(FLAG)            (*(uint32_t*)0x5005133c &= FLAG)
#define Clr_JPEG_HUFFSYMB75(FLAG)            (*(uint32_t*)0x5005133c |= ~FLAG)
#define Set_JPEG_HUFFSYMB76(FLAG)            (*(uint32_t*)0x50051340 &= FLAG)
#define Clr_JPEG_HUFFSYMB76(FLAG)            (*(uint32_t*)0x50051340 |= ~FLAG)
#define Set_JPEG_HUFFSYMB77(FLAG)            (*(uint32_t*)0x50051344 &= FLAG)
#define Clr_JPEG_HUFFSYMB77(FLAG)            (*(uint32_t*)0x50051344 |= ~FLAG)
#define Set_JPEG_HUFFSYMB78(FLAG)            (*(uint32_t*)0x50051348 &= FLAG)
#define Clr_JPEG_HUFFSYMB78(FLAG)            (*(uint32_t*)0x50051348 |= ~FLAG)
#define Set_JPEG_HUFFSYMB79(FLAG)            (*(uint32_t*)0x5005134c &= FLAG)
#define Clr_JPEG_HUFFSYMB79(FLAG)            (*(uint32_t*)0x5005134c |= ~FLAG)
#define Set_JPEG_HUFFSYMB80(FLAG)            (*(uint32_t*)0x50051350 &= FLAG)
#define Clr_JPEG_HUFFSYMB80(FLAG)            (*(uint32_t*)0x50051350 |= ~FLAG)
#define Set_JPEG_HUFFSYMB81(FLAG)            (*(uint32_t*)0x50051354 &= FLAG)
#define Clr_JPEG_HUFFSYMB81(FLAG)            (*(uint32_t*)0x50051354 |= ~FLAG)
#define Set_JPEG_HUFFSYMB82(FLAG)            (*(uint32_t*)0x50051358 &= FLAG)
#define Clr_JPEG_HUFFSYMB82(FLAG)            (*(uint32_t*)0x50051358 |= ~FLAG)
#define Set_JPEG_HUFFSYMB83(FLAG)            (*(uint32_t*)0x5005135c &= FLAG)
#define Clr_JPEG_HUFFSYMB83(FLAG)            (*(uint32_t*)0x5005135c |= ~FLAG)
#define Set_JPEG_DHTMEM0(FLAG)               (*(uint32_t*)0x50051360 &= FLAG)
#define Clr_JPEG_DHTMEM0(FLAG)               (*(uint32_t*)0x50051360 |= ~FLAG)
#define Set_JPEG_DHTMEM2(FLAG)               (*(uint32_t*)0x50051364 &= FLAG)
#define Clr_JPEG_DHTMEM2(FLAG)               (*(uint32_t*)0x50051364 |= ~FLAG)
#define Set_JPEG_DHTMEM3(FLAG)               (*(uint32_t*)0x50051368 &= FLAG)
#define Clr_JPEG_DHTMEM3(FLAG)               (*(uint32_t*)0x50051368 |= ~FLAG)
#define Set_JPEG_DHTMEM4(FLAG)               (*(uint32_t*)0x5005136c &= FLAG)
#define Clr_JPEG_DHTMEM4(FLAG)               (*(uint32_t*)0x5005136c |= ~FLAG)
#define Set_JPEG_DHTMEM5(FLAG)               (*(uint32_t*)0x50051370 &= FLAG)
#define Clr_JPEG_DHTMEM5(FLAG)               (*(uint32_t*)0x50051370 |= ~FLAG)
#define Set_JPEG_DHTMEM6(FLAG)               (*(uint32_t*)0x50051374 &= FLAG)
#define Clr_JPEG_DHTMEM6(FLAG)               (*(uint32_t*)0x50051374 |= ~FLAG)
#define Set_JPEG_DHTMEM7(FLAG)               (*(uint32_t*)0x50051378 &= FLAG)
#define Clr_JPEG_DHTMEM7(FLAG)               (*(uint32_t*)0x50051378 |= ~FLAG)
#define Set_JPEG_DHTMEM8(FLAG)               (*(uint32_t*)0x5005137c &= FLAG)
#define Clr_JPEG_DHTMEM8(FLAG)               (*(uint32_t*)0x5005137c |= ~FLAG)
#define Set_JPEG_DHTMEM9(FLAG)               (*(uint32_t*)0x50051380 &= FLAG)
#define Clr_JPEG_DHTMEM9(FLAG)               (*(uint32_t*)0x50051380 |= ~FLAG)
#define Set_JPEG_DHTMEM10(FLAG)              (*(uint32_t*)0x50051384 &= FLAG)
#define Clr_JPEG_DHTMEM10(FLAG)              (*(uint32_t*)0x50051384 |= ~FLAG)
#define Set_JPEG_DHTMEM11(FLAG)              (*(uint32_t*)0x50051388 &= FLAG)
#define Clr_JPEG_DHTMEM11(FLAG)              (*(uint32_t*)0x50051388 |= ~FLAG)
#define Set_JPEG_DHTMEM12(FLAG)              (*(uint32_t*)0x5005138c &= FLAG)
#define Clr_JPEG_DHTMEM12(FLAG)              (*(uint32_t*)0x5005138c |= ~FLAG)
#define Set_JPEG_DHTMEM13(FLAG)              (*(uint32_t*)0x50051390 &= FLAG)
#define Clr_JPEG_DHTMEM13(FLAG)              (*(uint32_t*)0x50051390 |= ~FLAG)
#define Set_JPEG_DHTMEM14(FLAG)              (*(uint32_t*)0x50051394 &= FLAG)
#define Clr_JPEG_DHTMEM14(FLAG)              (*(uint32_t*)0x50051394 |= ~FLAG)
#define Set_JPEG_DHTMEM15(FLAG)              (*(uint32_t*)0x50051398 &= FLAG)
#define Clr_JPEG_DHTMEM15(FLAG)              (*(uint32_t*)0x50051398 |= ~FLAG)
#define Set_JPEG_DHTMEM16(FLAG)              (*(uint32_t*)0x5005139c &= FLAG)
#define Clr_JPEG_DHTMEM16(FLAG)              (*(uint32_t*)0x5005139c |= ~FLAG)
#define Set_JPEG_DHTMEM17(FLAG)              (*(uint32_t*)0x500513a0 &= FLAG)
#define Clr_JPEG_DHTMEM17(FLAG)              (*(uint32_t*)0x500513a0 |= ~FLAG)
#define Set_JPEG_DHTMEM18(FLAG)              (*(uint32_t*)0x500513a4 &= FLAG)
#define Clr_JPEG_DHTMEM18(FLAG)              (*(uint32_t*)0x500513a4 |= ~FLAG)
#define Set_JPEG_DHTMEM19(FLAG)              (*(uint32_t*)0x500513a8 &= FLAG)
#define Clr_JPEG_DHTMEM19(FLAG)              (*(uint32_t*)0x500513a8 |= ~FLAG)
#define Set_JPEG_DHTMEM20(FLAG)              (*(uint32_t*)0x500513ac &= FLAG)
#define Clr_JPEG_DHTMEM20(FLAG)              (*(uint32_t*)0x500513ac |= ~FLAG)
#define Set_JPEG_DHTMEM21(FLAG)              (*(uint32_t*)0x500513b0 &= FLAG)
#define Clr_JPEG_DHTMEM21(FLAG)              (*(uint32_t*)0x500513b0 |= ~FLAG)
#define Set_JPEG_DHTMEM22(FLAG)              (*(uint32_t*)0x500513b4 &= FLAG)
#define Clr_JPEG_DHTMEM22(FLAG)              (*(uint32_t*)0x500513b4 |= ~FLAG)
#define Set_JPEG_DHTMEM23(FLAG)              (*(uint32_t*)0x500513b8 &= FLAG)
#define Clr_JPEG_DHTMEM23(FLAG)              (*(uint32_t*)0x500513b8 |= ~FLAG)
#define Set_JPEG_DHTMEM24(FLAG)              (*(uint32_t*)0x500513bc &= FLAG)
#define Clr_JPEG_DHTMEM24(FLAG)              (*(uint32_t*)0x500513bc |= ~FLAG)
#define Set_JPEG_DHTMEM25(FLAG)              (*(uint32_t*)0x500513c0 &= FLAG)
#define Clr_JPEG_DHTMEM25(FLAG)              (*(uint32_t*)0x500513c0 |= ~FLAG)
#define Set_JPEG_DHTMEM26(FLAG)              (*(uint32_t*)0x500513c4 &= FLAG)
#define Clr_JPEG_DHTMEM26(FLAG)              (*(uint32_t*)0x500513c4 |= ~FLAG)
#define Set_JPEG_DHTMEM27(FLAG)              (*(uint32_t*)0x500513c8 &= FLAG)
#define Clr_JPEG_DHTMEM27(FLAG)              (*(uint32_t*)0x500513c8 |= ~FLAG)
#define Set_JPEG_DHTMEM28(FLAG)              (*(uint32_t*)0x500513cc &= FLAG)
#define Clr_JPEG_DHTMEM28(FLAG)              (*(uint32_t*)0x500513cc |= ~FLAG)
#define Set_JPEG_DHTMEM29(FLAG)              (*(uint32_t*)0x500513d0 &= FLAG)
#define Clr_JPEG_DHTMEM29(FLAG)              (*(uint32_t*)0x500513d0 |= ~FLAG)
#define Set_JPEG_DHTMEM30(FLAG)              (*(uint32_t*)0x500513d4 &= FLAG)
#define Clr_JPEG_DHTMEM30(FLAG)              (*(uint32_t*)0x500513d4 |= ~FLAG)
#define Set_JPEG_DHTMEM31(FLAG)              (*(uint32_t*)0x500513d8 &= FLAG)
#define Clr_JPEG_DHTMEM31(FLAG)              (*(uint32_t*)0x500513d8 |= ~FLAG)
#define Set_JPEG_DHTMEM32(FLAG)              (*(uint32_t*)0x500513dc &= FLAG)
#define Clr_JPEG_DHTMEM32(FLAG)              (*(uint32_t*)0x500513dc |= ~FLAG)
#define Set_JPEG_DHTMEM33(FLAG)              (*(uint32_t*)0x500513e0 &= FLAG)
#define Clr_JPEG_DHTMEM33(FLAG)              (*(uint32_t*)0x500513e0 |= ~FLAG)
#define Set_JPEG_DHTMEM34(FLAG)              (*(uint32_t*)0x500513e4 &= FLAG)
#define Clr_JPEG_DHTMEM34(FLAG)              (*(uint32_t*)0x500513e4 |= ~FLAG)
#define Set_JPEG_DHTMEM35(FLAG)              (*(uint32_t*)0x500513e8 &= FLAG)
#define Clr_JPEG_DHTMEM35(FLAG)              (*(uint32_t*)0x500513e8 |= ~FLAG)
#define Set_JPEG_DHTMEM36(FLAG)              (*(uint32_t*)0x500513ec &= FLAG)
#define Clr_JPEG_DHTMEM36(FLAG)              (*(uint32_t*)0x500513ec |= ~FLAG)
#define Set_JPEG_DHTMEM37(FLAG)              (*(uint32_t*)0x500513f0 &= FLAG)
#define Clr_JPEG_DHTMEM37(FLAG)              (*(uint32_t*)0x500513f0 |= ~FLAG)
#define Set_JPEG_DHTMEM38(FLAG)              (*(uint32_t*)0x500513f4 &= FLAG)
#define Clr_JPEG_DHTMEM38(FLAG)              (*(uint32_t*)0x500513f4 |= ~FLAG)
#define Set_JPEG_DHTMEM39(FLAG)              (*(uint32_t*)0x500513f8 &= FLAG)
#define Clr_JPEG_DHTMEM39(FLAG)              (*(uint32_t*)0x500513f8 |= ~FLAG)
#define Set_JPEG_DHTMEM40(FLAG)              (*(uint32_t*)0x500513fc &= FLAG)
#define Clr_JPEG_DHTMEM40(FLAG)              (*(uint32_t*)0x500513fc |= ~FLAG)
#define Set_JPEG_DHTMEM41(FLAG)              (*(uint32_t*)0x50051400 &= FLAG)
#define Clr_JPEG_DHTMEM41(FLAG)              (*(uint32_t*)0x50051400 |= ~FLAG)
#define Set_JPEG_DHTMEM42(FLAG)              (*(uint32_t*)0x50051404 &= FLAG)
#define Clr_JPEG_DHTMEM42(FLAG)              (*(uint32_t*)0x50051404 |= ~FLAG)
#define Set_JPEG_DHTMEM43(FLAG)              (*(uint32_t*)0x50051408 &= FLAG)
#define Clr_JPEG_DHTMEM43(FLAG)              (*(uint32_t*)0x50051408 |= ~FLAG)
#define Set_JPEG_DHTMEM44(FLAG)              (*(uint32_t*)0x5005140c &= FLAG)
#define Clr_JPEG_DHTMEM44(FLAG)              (*(uint32_t*)0x5005140c |= ~FLAG)
#define Set_JPEG_DHTMEM45(FLAG)              (*(uint32_t*)0x50051410 &= FLAG)
#define Clr_JPEG_DHTMEM45(FLAG)              (*(uint32_t*)0x50051410 |= ~FLAG)
#define Set_JPEG_DHTMEM46(FLAG)              (*(uint32_t*)0x50051414 &= FLAG)
#define Clr_JPEG_DHTMEM46(FLAG)              (*(uint32_t*)0x50051414 |= ~FLAG)
#define Set_JPEG_DHTMEM47(FLAG)              (*(uint32_t*)0x50051418 &= FLAG)
#define Clr_JPEG_DHTMEM47(FLAG)              (*(uint32_t*)0x50051418 |= ~FLAG)
#define Set_JPEG_DHTMEM48(FLAG)              (*(uint32_t*)0x5005141c &= FLAG)
#define Clr_JPEG_DHTMEM48(FLAG)              (*(uint32_t*)0x5005141c |= ~FLAG)
#define Set_JPEG_DHTMEM49(FLAG)              (*(uint32_t*)0x50051420 &= FLAG)
#define Clr_JPEG_DHTMEM49(FLAG)              (*(uint32_t*)0x50051420 |= ~FLAG)
#define Set_JPEG_DHTMEM50(FLAG)              (*(uint32_t*)0x50051424 &= FLAG)
#define Clr_JPEG_DHTMEM50(FLAG)              (*(uint32_t*)0x50051424 |= ~FLAG)
#define Set_JPEG_DHTMEM51(FLAG)              (*(uint32_t*)0x50051428 &= FLAG)
#define Clr_JPEG_DHTMEM51(FLAG)              (*(uint32_t*)0x50051428 |= ~FLAG)
#define Set_JPEG_DHTMEM52(FLAG)              (*(uint32_t*)0x5005142c &= FLAG)
#define Clr_JPEG_DHTMEM52(FLAG)              (*(uint32_t*)0x5005142c |= ~FLAG)
#define Set_JPEG_DHTMEM53(FLAG)              (*(uint32_t*)0x50051430 &= FLAG)
#define Clr_JPEG_DHTMEM53(FLAG)              (*(uint32_t*)0x50051430 |= ~FLAG)
#define Set_JPEG_DHTMEM54(FLAG)              (*(uint32_t*)0x50051434 &= FLAG)
#define Clr_JPEG_DHTMEM54(FLAG)              (*(uint32_t*)0x50051434 |= ~FLAG)
#define Set_JPEG_DHTMEM55(FLAG)              (*(uint32_t*)0x50051438 &= FLAG)
#define Clr_JPEG_DHTMEM55(FLAG)              (*(uint32_t*)0x50051438 |= ~FLAG)
#define Set_JPEG_DHTMEM56(FLAG)              (*(uint32_t*)0x5005143c &= FLAG)
#define Clr_JPEG_DHTMEM56(FLAG)              (*(uint32_t*)0x5005143c |= ~FLAG)
#define Set_JPEG_DHTMEM57(FLAG)              (*(uint32_t*)0x50051440 &= FLAG)
#define Clr_JPEG_DHTMEM57(FLAG)              (*(uint32_t*)0x50051440 |= ~FLAG)
#define Set_JPEG_DHTMEM58(FLAG)              (*(uint32_t*)0x50051444 &= FLAG)
#define Clr_JPEG_DHTMEM58(FLAG)              (*(uint32_t*)0x50051444 |= ~FLAG)
#define Set_JPEG_DHTMEM59(FLAG)              (*(uint32_t*)0x50051448 &= FLAG)
#define Clr_JPEG_DHTMEM59(FLAG)              (*(uint32_t*)0x50051448 |= ~FLAG)
#define Set_JPEG_DHTMEM60(FLAG)              (*(uint32_t*)0x5005144c &= FLAG)
#define Clr_JPEG_DHTMEM60(FLAG)              (*(uint32_t*)0x5005144c |= ~FLAG)
#define Set_JPEG_DHTMEM61(FLAG)              (*(uint32_t*)0x50051450 &= FLAG)
#define Clr_JPEG_DHTMEM61(FLAG)              (*(uint32_t*)0x50051450 |= ~FLAG)
#define Set_JPEG_DHTMEM62(FLAG)              (*(uint32_t*)0x50051454 &= FLAG)
#define Clr_JPEG_DHTMEM62(FLAG)              (*(uint32_t*)0x50051454 |= ~FLAG)
#define Set_JPEG_DHTMEM63(FLAG)              (*(uint32_t*)0x50051458 &= FLAG)
#define Clr_JPEG_DHTMEM63(FLAG)              (*(uint32_t*)0x50051458 |= ~FLAG)
#define Set_JPEG_DHTMEM64(FLAG)              (*(uint32_t*)0x5005145c &= FLAG)
#define Clr_JPEG_DHTMEM64(FLAG)              (*(uint32_t*)0x5005145c |= ~FLAG)
#define Set_JPEG_DHTMEM65(FLAG)              (*(uint32_t*)0x50051460 &= FLAG)
#define Clr_JPEG_DHTMEM65(FLAG)              (*(uint32_t*)0x50051460 |= ~FLAG)
#define Set_JPEG_DHTMEM66(FLAG)              (*(uint32_t*)0x50051464 &= FLAG)
#define Clr_JPEG_DHTMEM66(FLAG)              (*(uint32_t*)0x50051464 |= ~FLAG)
#define Set_JPEG_DHTMEM67(FLAG)              (*(uint32_t*)0x50051468 &= FLAG)
#define Clr_JPEG_DHTMEM67(FLAG)              (*(uint32_t*)0x50051468 |= ~FLAG)
#define Set_JPEG_DHTMEM68(FLAG)              (*(uint32_t*)0x5005146c &= FLAG)
#define Clr_JPEG_DHTMEM68(FLAG)              (*(uint32_t*)0x5005146c |= ~FLAG)
#define Set_JPEG_DHTMEM69(FLAG)              (*(uint32_t*)0x50051470 &= FLAG)
#define Clr_JPEG_DHTMEM69(FLAG)              (*(uint32_t*)0x50051470 |= ~FLAG)
#define Set_JPEG_DHTMEM70(FLAG)              (*(uint32_t*)0x50051474 &= FLAG)
#define Clr_JPEG_DHTMEM70(FLAG)              (*(uint32_t*)0x50051474 |= ~FLAG)
#define Set_JPEG_DHTMEM71(FLAG)              (*(uint32_t*)0x50051478 &= FLAG)
#define Clr_JPEG_DHTMEM71(FLAG)              (*(uint32_t*)0x50051478 |= ~FLAG)
#define Set_JPEG_DHTMEM72(FLAG)              (*(uint32_t*)0x5005147c &= FLAG)
#define Clr_JPEG_DHTMEM72(FLAG)              (*(uint32_t*)0x5005147c |= ~FLAG)
#define Set_JPEG_DHTMEM73(FLAG)              (*(uint32_t*)0x50051480 &= FLAG)
#define Clr_JPEG_DHTMEM73(FLAG)              (*(uint32_t*)0x50051480 |= ~FLAG)
#define Set_JPEG_DHTMEM74(FLAG)              (*(uint32_t*)0x50051484 &= FLAG)
#define Clr_JPEG_DHTMEM74(FLAG)              (*(uint32_t*)0x50051484 |= ~FLAG)
#define Set_JPEG_DHTMEM75(FLAG)              (*(uint32_t*)0x50051488 &= FLAG)
#define Clr_JPEG_DHTMEM75(FLAG)              (*(uint32_t*)0x50051488 |= ~FLAG)
#define Set_JPEG_DHTMEM76(FLAG)              (*(uint32_t*)0x5005148c &= FLAG)
#define Clr_JPEG_DHTMEM76(FLAG)              (*(uint32_t*)0x5005148c |= ~FLAG)
#define Set_JPEG_DHTMEM77(FLAG)              (*(uint32_t*)0x50051490 &= FLAG)
#define Clr_JPEG_DHTMEM77(FLAG)              (*(uint32_t*)0x50051490 |= ~FLAG)
#define Set_JPEG_DHTMEM78(FLAG)              (*(uint32_t*)0x50051494 &= FLAG)
#define Clr_JPEG_DHTMEM78(FLAG)              (*(uint32_t*)0x50051494 |= ~FLAG)
#define Set_JPEG_DHTMEM79(FLAG)              (*(uint32_t*)0x50051498 &= FLAG)
#define Clr_JPEG_DHTMEM79(FLAG)              (*(uint32_t*)0x50051498 |= ~FLAG)
#define Set_JPEG_DHTMEM80(FLAG)              (*(uint32_t*)0x5005149c &= FLAG)
#define Clr_JPEG_DHTMEM80(FLAG)              (*(uint32_t*)0x5005149c |= ~FLAG)
#define Set_JPEG_DHTMEM81(FLAG)              (*(uint32_t*)0x500514a0 &= FLAG)
#define Clr_JPEG_DHTMEM81(FLAG)              (*(uint32_t*)0x500514a0 |= ~FLAG)
#define Set_JPEG_DHTMEM82(FLAG)              (*(uint32_t*)0x500514a4 &= FLAG)
#define Clr_JPEG_DHTMEM82(FLAG)              (*(uint32_t*)0x500514a4 |= ~FLAG)
#define Set_JPEG_DHTMEM83(FLAG)              (*(uint32_t*)0x500514a8 &= FLAG)
#define Clr_JPEG_DHTMEM83(FLAG)              (*(uint32_t*)0x500514a8 |= ~FLAG)
#define Set_JPEG_DHTMEM84(FLAG)              (*(uint32_t*)0x500514ac &= FLAG)
#define Clr_JPEG_DHTMEM84(FLAG)              (*(uint32_t*)0x500514ac |= ~FLAG)
#define Set_JPEG_DHTMEM85(FLAG)              (*(uint32_t*)0x500514b0 &= FLAG)
#define Clr_JPEG_DHTMEM85(FLAG)              (*(uint32_t*)0x500514b0 |= ~FLAG)
#define Set_JPEG_DHTMEM86(FLAG)              (*(uint32_t*)0x500514b4 &= FLAG)
#define Clr_JPEG_DHTMEM86(FLAG)              (*(uint32_t*)0x500514b4 |= ~FLAG)
#define Set_JPEG_DHTMEM87(FLAG)              (*(uint32_t*)0x500514b8 &= FLAG)
#define Clr_JPEG_DHTMEM87(FLAG)              (*(uint32_t*)0x500514b8 |= ~FLAG)
#define Set_JPEG_DHTMEM88(FLAG)              (*(uint32_t*)0x500514bc &= FLAG)
#define Clr_JPEG_DHTMEM88(FLAG)              (*(uint32_t*)0x500514bc |= ~FLAG)
#define Set_JPEG_DHTMEM89(FLAG)              (*(uint32_t*)0x500514c0 &= FLAG)
#define Clr_JPEG_DHTMEM89(FLAG)              (*(uint32_t*)0x500514c0 |= ~FLAG)
#define Set_JPEG_DHTMEM90(FLAG)              (*(uint32_t*)0x500514c4 &= FLAG)
#define Clr_JPEG_DHTMEM90(FLAG)              (*(uint32_t*)0x500514c4 |= ~FLAG)
#define Set_JPEG_DHTMEM91(FLAG)              (*(uint32_t*)0x500514c8 &= FLAG)
#define Clr_JPEG_DHTMEM91(FLAG)              (*(uint32_t*)0x500514c8 |= ~FLAG)
#define Set_JPEG_DHTMEM92(FLAG)              (*(uint32_t*)0x500514cc &= FLAG)
#define Clr_JPEG_DHTMEM92(FLAG)              (*(uint32_t*)0x500514cc |= ~FLAG)
#define Set_JPEG_DHTMEM93(FLAG)              (*(uint32_t*)0x500514d0 &= FLAG)
#define Clr_JPEG_DHTMEM93(FLAG)              (*(uint32_t*)0x500514d0 |= ~FLAG)
#define Set_JPEG_DHTMEM94(FLAG)              (*(uint32_t*)0x500514d4 &= FLAG)
#define Clr_JPEG_DHTMEM94(FLAG)              (*(uint32_t*)0x500514d4 |= ~FLAG)
#define Set_JPEG_DHTMEM95(FLAG)              (*(uint32_t*)0x500514d8 &= FLAG)
#define Clr_JPEG_DHTMEM95(FLAG)              (*(uint32_t*)0x500514d8 |= ~FLAG)
#define Set_JPEG_DHTMEM96(FLAG)              (*(uint32_t*)0x500514dc &= FLAG)
#define Clr_JPEG_DHTMEM96(FLAG)              (*(uint32_t*)0x500514dc |= ~FLAG)
#define Set_JPEG_DHTMEM97(FLAG)              (*(uint32_t*)0x500514e0 &= FLAG)
#define Clr_JPEG_DHTMEM97(FLAG)              (*(uint32_t*)0x500514e0 |= ~FLAG)
#define Set_JPEG_DHTMEM98(FLAG)              (*(uint32_t*)0x500514e4 &= FLAG)
#define Clr_JPEG_DHTMEM98(FLAG)              (*(uint32_t*)0x500514e4 |= ~FLAG)
#define Set_JPEG_DHTMEM99(FLAG)              (*(uint32_t*)0x500514e8 &= FLAG)
#define Clr_JPEG_DHTMEM99(FLAG)              (*(uint32_t*)0x500514e8 |= ~FLAG)
#define Set_JPEG_DHTMEM100(FLAG)             (*(uint32_t*)0x500514ec &= FLAG)
#define Clr_JPEG_DHTMEM100(FLAG)             (*(uint32_t*)0x500514ec |= ~FLAG)
#define Set_JPEG_DHTMEM101(FLAG)             (*(uint32_t*)0x500514f0 &= FLAG)
#define Clr_JPEG_DHTMEM101(FLAG)             (*(uint32_t*)0x500514f0 |= ~FLAG)
#define Set_JPEG_DHTMEM102(FLAG)             (*(uint32_t*)0x500514f4 &= FLAG)
#define Clr_JPEG_DHTMEM102(FLAG)             (*(uint32_t*)0x500514f4 |= ~FLAG)
#define Set_JPEG_DHTMEM103(FLAG)             (*(uint32_t*)0x500514f8 &= FLAG)
#define Clr_JPEG_DHTMEM103(FLAG)             (*(uint32_t*)0x500514f8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_0(FLAG)         (*(uint32_t*)0x50051500 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_0(FLAG)         (*(uint32_t*)0x50051500 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_1(FLAG)         (*(uint32_t*)0x50051504 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_1(FLAG)         (*(uint32_t*)0x50051504 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_2(FLAG)         (*(uint32_t*)0x50051508 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_2(FLAG)         (*(uint32_t*)0x50051508 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_3(FLAG)         (*(uint32_t*)0x5005150c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_3(FLAG)         (*(uint32_t*)0x5005150c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_4(FLAG)         (*(uint32_t*)0x50051510 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_4(FLAG)         (*(uint32_t*)0x50051510 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_5(FLAG)         (*(uint32_t*)0x50051514 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_5(FLAG)         (*(uint32_t*)0x50051514 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_6(FLAG)         (*(uint32_t*)0x50051518 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_6(FLAG)         (*(uint32_t*)0x50051518 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_7(FLAG)         (*(uint32_t*)0x5005151c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_7(FLAG)         (*(uint32_t*)0x5005151c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_8(FLAG)         (*(uint32_t*)0x50051520 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_8(FLAG)         (*(uint32_t*)0x50051520 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_9(FLAG)         (*(uint32_t*)0x50051524 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_9(FLAG)         (*(uint32_t*)0x50051524 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_10(FLAG)        (*(uint32_t*)0x50051528 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_10(FLAG)        (*(uint32_t*)0x50051528 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_11(FLAG)        (*(uint32_t*)0x5005152c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_11(FLAG)        (*(uint32_t*)0x5005152c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_12(FLAG)        (*(uint32_t*)0x50051530 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_12(FLAG)        (*(uint32_t*)0x50051530 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_13(FLAG)        (*(uint32_t*)0x50051534 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_13(FLAG)        (*(uint32_t*)0x50051534 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_14(FLAG)        (*(uint32_t*)0x50051538 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_14(FLAG)        (*(uint32_t*)0x50051538 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_15(FLAG)        (*(uint32_t*)0x5005153c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_15(FLAG)        (*(uint32_t*)0x5005153c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_16(FLAG)        (*(uint32_t*)0x50051540 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_16(FLAG)        (*(uint32_t*)0x50051540 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_17(FLAG)        (*(uint32_t*)0x50051544 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_17(FLAG)        (*(uint32_t*)0x50051544 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_18(FLAG)        (*(uint32_t*)0x50051548 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_18(FLAG)        (*(uint32_t*)0x50051548 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_19(FLAG)        (*(uint32_t*)0x5005154c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_19(FLAG)        (*(uint32_t*)0x5005154c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_20(FLAG)        (*(uint32_t*)0x50051550 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_20(FLAG)        (*(uint32_t*)0x50051550 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_21(FLAG)        (*(uint32_t*)0x50051554 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_21(FLAG)        (*(uint32_t*)0x50051554 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_22(FLAG)        (*(uint32_t*)0x50051558 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_22(FLAG)        (*(uint32_t*)0x50051558 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_23(FLAG)        (*(uint32_t*)0x5005155c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_23(FLAG)        (*(uint32_t*)0x5005155c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_24(FLAG)        (*(uint32_t*)0x50051560 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_24(FLAG)        (*(uint32_t*)0x50051560 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_25(FLAG)        (*(uint32_t*)0x50051564 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_25(FLAG)        (*(uint32_t*)0x50051564 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_26(FLAG)        (*(uint32_t*)0x50051568 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_26(FLAG)        (*(uint32_t*)0x50051568 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_27(FLAG)        (*(uint32_t*)0x5005156c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_27(FLAG)        (*(uint32_t*)0x5005156c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_28(FLAG)        (*(uint32_t*)0x50051570 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_28(FLAG)        (*(uint32_t*)0x50051570 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_29(FLAG)        (*(uint32_t*)0x50051574 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_29(FLAG)        (*(uint32_t*)0x50051574 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_30(FLAG)        (*(uint32_t*)0x50051578 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_30(FLAG)        (*(uint32_t*)0x50051578 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_31(FLAG)        (*(uint32_t*)0x5005157c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_31(FLAG)        (*(uint32_t*)0x5005157c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_32(FLAG)        (*(uint32_t*)0x50051580 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_32(FLAG)        (*(uint32_t*)0x50051580 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_33(FLAG)        (*(uint32_t*)0x50051584 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_33(FLAG)        (*(uint32_t*)0x50051584 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_34(FLAG)        (*(uint32_t*)0x50051588 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_34(FLAG)        (*(uint32_t*)0x50051588 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_35(FLAG)        (*(uint32_t*)0x5005158c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_35(FLAG)        (*(uint32_t*)0x5005158c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_36(FLAG)        (*(uint32_t*)0x50051590 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_36(FLAG)        (*(uint32_t*)0x50051590 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_37(FLAG)        (*(uint32_t*)0x50051594 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_37(FLAG)        (*(uint32_t*)0x50051594 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_38(FLAG)        (*(uint32_t*)0x50051598 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_38(FLAG)        (*(uint32_t*)0x50051598 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_39(FLAG)        (*(uint32_t*)0x5005159c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_39(FLAG)        (*(uint32_t*)0x5005159c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_40(FLAG)        (*(uint32_t*)0x500515a0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_40(FLAG)        (*(uint32_t*)0x500515a0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_41(FLAG)        (*(uint32_t*)0x500515a4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_41(FLAG)        (*(uint32_t*)0x500515a4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_42(FLAG)        (*(uint32_t*)0x500515a8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_42(FLAG)        (*(uint32_t*)0x500515a8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_43(FLAG)        (*(uint32_t*)0x500515ac &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_43(FLAG)        (*(uint32_t*)0x500515ac |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_44(FLAG)        (*(uint32_t*)0x500515b0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_44(FLAG)        (*(uint32_t*)0x500515b0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_45(FLAG)        (*(uint32_t*)0x500515b4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_45(FLAG)        (*(uint32_t*)0x500515b4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_46(FLAG)        (*(uint32_t*)0x500515b8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_46(FLAG)        (*(uint32_t*)0x500515b8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_47(FLAG)        (*(uint32_t*)0x500515bc &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_47(FLAG)        (*(uint32_t*)0x500515bc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_48(FLAG)        (*(uint32_t*)0x500515c0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_48(FLAG)        (*(uint32_t*)0x500515c0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_49(FLAG)        (*(uint32_t*)0x500515c4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_49(FLAG)        (*(uint32_t*)0x500515c4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_50(FLAG)        (*(uint32_t*)0x500515c8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_50(FLAG)        (*(uint32_t*)0x500515c8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_51(FLAG)        (*(uint32_t*)0x500515cc &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_51(FLAG)        (*(uint32_t*)0x500515cc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_52(FLAG)        (*(uint32_t*)0x500515d0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_52(FLAG)        (*(uint32_t*)0x500515d0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_53(FLAG)        (*(uint32_t*)0x500515d4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_53(FLAG)        (*(uint32_t*)0x500515d4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_54(FLAG)        (*(uint32_t*)0x500515d8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_54(FLAG)        (*(uint32_t*)0x500515d8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_55(FLAG)        (*(uint32_t*)0x500515dc &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_55(FLAG)        (*(uint32_t*)0x500515dc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_56(FLAG)        (*(uint32_t*)0x500515e0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_56(FLAG)        (*(uint32_t*)0x500515e0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_57(FLAG)        (*(uint32_t*)0x500515e4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_57(FLAG)        (*(uint32_t*)0x500515e4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_58(FLAG)        (*(uint32_t*)0x500515e8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_58(FLAG)        (*(uint32_t*)0x500515e8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_59(FLAG)        (*(uint32_t*)0x500515ec &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_59(FLAG)        (*(uint32_t*)0x500515ec |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_60(FLAG)        (*(uint32_t*)0x500515f0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_60(FLAG)        (*(uint32_t*)0x500515f0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_61(FLAG)        (*(uint32_t*)0x500515f4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_61(FLAG)        (*(uint32_t*)0x500515f4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_62(FLAG)        (*(uint32_t*)0x500515f8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_62(FLAG)        (*(uint32_t*)0x500515f8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_63(FLAG)        (*(uint32_t*)0x500515fc &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_63(FLAG)        (*(uint32_t*)0x500515fc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_64(FLAG)        (*(uint32_t*)0x50051600 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_64(FLAG)        (*(uint32_t*)0x50051600 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_65(FLAG)        (*(uint32_t*)0x50051604 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_65(FLAG)        (*(uint32_t*)0x50051604 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_66(FLAG)        (*(uint32_t*)0x50051608 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_66(FLAG)        (*(uint32_t*)0x50051608 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_67(FLAG)        (*(uint32_t*)0x5005160c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_67(FLAG)        (*(uint32_t*)0x5005160c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_68(FLAG)        (*(uint32_t*)0x50051610 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_68(FLAG)        (*(uint32_t*)0x50051610 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_69(FLAG)        (*(uint32_t*)0x50051614 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_69(FLAG)        (*(uint32_t*)0x50051614 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_70(FLAG)        (*(uint32_t*)0x50051618 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_70(FLAG)        (*(uint32_t*)0x50051618 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_71(FLAG)        (*(uint32_t*)0x5005161c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_71(FLAG)        (*(uint32_t*)0x5005161c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_72(FLAG)        (*(uint32_t*)0x50051620 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_72(FLAG)        (*(uint32_t*)0x50051620 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_73(FLAG)        (*(uint32_t*)0x50051624 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_73(FLAG)        (*(uint32_t*)0x50051624 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_74(FLAG)        (*(uint32_t*)0x50051628 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_74(FLAG)        (*(uint32_t*)0x50051628 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_75(FLAG)        (*(uint32_t*)0x5005162c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_75(FLAG)        (*(uint32_t*)0x5005162c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_76(FLAG)        (*(uint32_t*)0x50051630 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_76(FLAG)        (*(uint32_t*)0x50051630 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_77(FLAG)        (*(uint32_t*)0x50051634 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_77(FLAG)        (*(uint32_t*)0x50051634 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_78(FLAG)        (*(uint32_t*)0x50051638 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_78(FLAG)        (*(uint32_t*)0x50051638 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_79(FLAG)        (*(uint32_t*)0x5005163c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_79(FLAG)        (*(uint32_t*)0x5005163c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_80(FLAG)        (*(uint32_t*)0x50051640 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_80(FLAG)        (*(uint32_t*)0x50051640 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_81(FLAG)        (*(uint32_t*)0x50051644 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_81(FLAG)        (*(uint32_t*)0x50051644 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_82(FLAG)        (*(uint32_t*)0x50051648 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_82(FLAG)        (*(uint32_t*)0x50051648 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_83(FLAG)        (*(uint32_t*)0x5005164c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_83(FLAG)        (*(uint32_t*)0x5005164c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_84(FLAG)        (*(uint32_t*)0x50051650 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_84(FLAG)        (*(uint32_t*)0x50051650 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_85(FLAG)        (*(uint32_t*)0x50051654 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_85(FLAG)        (*(uint32_t*)0x50051654 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_86(FLAG)        (*(uint32_t*)0x50051658 &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_86(FLAG)        (*(uint32_t*)0x50051658 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC0_87(FLAG)        (*(uint32_t*)0x5005165c &= FLAG)
#define Clr_JPEG_HUFFENC_AC0_87(FLAG)        (*(uint32_t*)0x5005165c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_0(FLAG)         (*(uint32_t*)0x50051660 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_0(FLAG)         (*(uint32_t*)0x50051660 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_1(FLAG)         (*(uint32_t*)0x50051664 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_1(FLAG)         (*(uint32_t*)0x50051664 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_2(FLAG)         (*(uint32_t*)0x50051668 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_2(FLAG)         (*(uint32_t*)0x50051668 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_3(FLAG)         (*(uint32_t*)0x5005166c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_3(FLAG)         (*(uint32_t*)0x5005166c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_4(FLAG)         (*(uint32_t*)0x50051670 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_4(FLAG)         (*(uint32_t*)0x50051670 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_5(FLAG)         (*(uint32_t*)0x50051674 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_5(FLAG)         (*(uint32_t*)0x50051674 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_6(FLAG)         (*(uint32_t*)0x50051678 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_6(FLAG)         (*(uint32_t*)0x50051678 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_7(FLAG)         (*(uint32_t*)0x5005167c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_7(FLAG)         (*(uint32_t*)0x5005167c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_8(FLAG)         (*(uint32_t*)0x50051680 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_8(FLAG)         (*(uint32_t*)0x50051680 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_9(FLAG)         (*(uint32_t*)0x50051684 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_9(FLAG)         (*(uint32_t*)0x50051684 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_10(FLAG)        (*(uint32_t*)0x50051688 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_10(FLAG)        (*(uint32_t*)0x50051688 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_11(FLAG)        (*(uint32_t*)0x5005168c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_11(FLAG)        (*(uint32_t*)0x5005168c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_12(FLAG)        (*(uint32_t*)0x50051690 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_12(FLAG)        (*(uint32_t*)0x50051690 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_13(FLAG)        (*(uint32_t*)0x50051694 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_13(FLAG)        (*(uint32_t*)0x50051694 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_14(FLAG)        (*(uint32_t*)0x50051698 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_14(FLAG)        (*(uint32_t*)0x50051698 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_15(FLAG)        (*(uint32_t*)0x5005169c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_15(FLAG)        (*(uint32_t*)0x5005169c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_16(FLAG)        (*(uint32_t*)0x500516a0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_16(FLAG)        (*(uint32_t*)0x500516a0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_17(FLAG)        (*(uint32_t*)0x500516a4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_17(FLAG)        (*(uint32_t*)0x500516a4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_18(FLAG)        (*(uint32_t*)0x500516a8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_18(FLAG)        (*(uint32_t*)0x500516a8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_19(FLAG)        (*(uint32_t*)0x500516ac &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_19(FLAG)        (*(uint32_t*)0x500516ac |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_20(FLAG)        (*(uint32_t*)0x500516b0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_20(FLAG)        (*(uint32_t*)0x500516b0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_21(FLAG)        (*(uint32_t*)0x500516b4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_21(FLAG)        (*(uint32_t*)0x500516b4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_22(FLAG)        (*(uint32_t*)0x500516b8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_22(FLAG)        (*(uint32_t*)0x500516b8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_23(FLAG)        (*(uint32_t*)0x500516bc &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_23(FLAG)        (*(uint32_t*)0x500516bc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_24(FLAG)        (*(uint32_t*)0x500516c0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_24(FLAG)        (*(uint32_t*)0x500516c0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_25(FLAG)        (*(uint32_t*)0x500516c4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_25(FLAG)        (*(uint32_t*)0x500516c4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_26(FLAG)        (*(uint32_t*)0x500516c8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_26(FLAG)        (*(uint32_t*)0x500516c8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_27(FLAG)        (*(uint32_t*)0x500516cc &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_27(FLAG)        (*(uint32_t*)0x500516cc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_28(FLAG)        (*(uint32_t*)0x500516d0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_28(FLAG)        (*(uint32_t*)0x500516d0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_29(FLAG)        (*(uint32_t*)0x500516d4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_29(FLAG)        (*(uint32_t*)0x500516d4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_30(FLAG)        (*(uint32_t*)0x500516d8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_30(FLAG)        (*(uint32_t*)0x500516d8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_31(FLAG)        (*(uint32_t*)0x500516dc &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_31(FLAG)        (*(uint32_t*)0x500516dc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_32(FLAG)        (*(uint32_t*)0x500516e0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_32(FLAG)        (*(uint32_t*)0x500516e0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_33(FLAG)        (*(uint32_t*)0x500516e4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_33(FLAG)        (*(uint32_t*)0x500516e4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_34(FLAG)        (*(uint32_t*)0x500516e8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_34(FLAG)        (*(uint32_t*)0x500516e8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_35(FLAG)        (*(uint32_t*)0x500516ec &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_35(FLAG)        (*(uint32_t*)0x500516ec |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_36(FLAG)        (*(uint32_t*)0x500516f0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_36(FLAG)        (*(uint32_t*)0x500516f0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_37(FLAG)        (*(uint32_t*)0x500516f4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_37(FLAG)        (*(uint32_t*)0x500516f4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_38(FLAG)        (*(uint32_t*)0x500516f8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_38(FLAG)        (*(uint32_t*)0x500516f8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_39(FLAG)        (*(uint32_t*)0x500516fc &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_39(FLAG)        (*(uint32_t*)0x500516fc |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_40(FLAG)        (*(uint32_t*)0x50051700 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_40(FLAG)        (*(uint32_t*)0x50051700 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_41(FLAG)        (*(uint32_t*)0x50051704 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_41(FLAG)        (*(uint32_t*)0x50051704 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_42(FLAG)        (*(uint32_t*)0x50051708 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_42(FLAG)        (*(uint32_t*)0x50051708 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_43(FLAG)        (*(uint32_t*)0x5005170c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_43(FLAG)        (*(uint32_t*)0x5005170c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_44(FLAG)        (*(uint32_t*)0x50051710 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_44(FLAG)        (*(uint32_t*)0x50051710 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_45(FLAG)        (*(uint32_t*)0x50051714 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_45(FLAG)        (*(uint32_t*)0x50051714 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_46(FLAG)        (*(uint32_t*)0x50051718 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_46(FLAG)        (*(uint32_t*)0x50051718 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_47(FLAG)        (*(uint32_t*)0x5005171c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_47(FLAG)        (*(uint32_t*)0x5005171c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_48(FLAG)        (*(uint32_t*)0x50051720 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_48(FLAG)        (*(uint32_t*)0x50051720 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_49(FLAG)        (*(uint32_t*)0x50051724 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_49(FLAG)        (*(uint32_t*)0x50051724 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_50(FLAG)        (*(uint32_t*)0x50051728 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_50(FLAG)        (*(uint32_t*)0x50051728 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_51(FLAG)        (*(uint32_t*)0x5005172c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_51(FLAG)        (*(uint32_t*)0x5005172c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_52(FLAG)        (*(uint32_t*)0x50051730 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_52(FLAG)        (*(uint32_t*)0x50051730 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_53(FLAG)        (*(uint32_t*)0x50051734 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_53(FLAG)        (*(uint32_t*)0x50051734 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_54(FLAG)        (*(uint32_t*)0x50051738 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_54(FLAG)        (*(uint32_t*)0x50051738 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_55(FLAG)        (*(uint32_t*)0x5005173c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_55(FLAG)        (*(uint32_t*)0x5005173c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_56(FLAG)        (*(uint32_t*)0x50051740 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_56(FLAG)        (*(uint32_t*)0x50051740 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_57(FLAG)        (*(uint32_t*)0x50051744 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_57(FLAG)        (*(uint32_t*)0x50051744 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_58(FLAG)        (*(uint32_t*)0x50051748 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_58(FLAG)        (*(uint32_t*)0x50051748 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_59(FLAG)        (*(uint32_t*)0x5005174c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_59(FLAG)        (*(uint32_t*)0x5005174c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_60(FLAG)        (*(uint32_t*)0x50051750 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_60(FLAG)        (*(uint32_t*)0x50051750 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_61(FLAG)        (*(uint32_t*)0x50051754 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_61(FLAG)        (*(uint32_t*)0x50051754 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_62(FLAG)        (*(uint32_t*)0x50051758 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_62(FLAG)        (*(uint32_t*)0x50051758 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_63(FLAG)        (*(uint32_t*)0x5005175c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_63(FLAG)        (*(uint32_t*)0x5005175c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_64(FLAG)        (*(uint32_t*)0x50051760 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_64(FLAG)        (*(uint32_t*)0x50051760 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_65(FLAG)        (*(uint32_t*)0x50051764 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_65(FLAG)        (*(uint32_t*)0x50051764 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_66(FLAG)        (*(uint32_t*)0x50051768 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_66(FLAG)        (*(uint32_t*)0x50051768 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_67(FLAG)        (*(uint32_t*)0x5005176c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_67(FLAG)        (*(uint32_t*)0x5005176c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_68(FLAG)        (*(uint32_t*)0x50051770 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_68(FLAG)        (*(uint32_t*)0x50051770 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_69(FLAG)        (*(uint32_t*)0x50051774 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_69(FLAG)        (*(uint32_t*)0x50051774 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_70(FLAG)        (*(uint32_t*)0x50051778 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_70(FLAG)        (*(uint32_t*)0x50051778 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_71(FLAG)        (*(uint32_t*)0x5005177c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_71(FLAG)        (*(uint32_t*)0x5005177c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_72(FLAG)        (*(uint32_t*)0x50051780 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_72(FLAG)        (*(uint32_t*)0x50051780 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_73(FLAG)        (*(uint32_t*)0x50051784 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_73(FLAG)        (*(uint32_t*)0x50051784 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_74(FLAG)        (*(uint32_t*)0x50051788 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_74(FLAG)        (*(uint32_t*)0x50051788 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_75(FLAG)        (*(uint32_t*)0x5005178c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_75(FLAG)        (*(uint32_t*)0x5005178c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_76(FLAG)        (*(uint32_t*)0x50051790 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_76(FLAG)        (*(uint32_t*)0x50051790 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_77(FLAG)        (*(uint32_t*)0x50051794 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_77(FLAG)        (*(uint32_t*)0x50051794 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_78(FLAG)        (*(uint32_t*)0x50051798 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_78(FLAG)        (*(uint32_t*)0x50051798 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_79(FLAG)        (*(uint32_t*)0x5005179c &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_79(FLAG)        (*(uint32_t*)0x5005179c |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_80(FLAG)        (*(uint32_t*)0x500517a0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_80(FLAG)        (*(uint32_t*)0x500517a0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_81(FLAG)        (*(uint32_t*)0x500517a4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_81(FLAG)        (*(uint32_t*)0x500517a4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_82(FLAG)        (*(uint32_t*)0x500517a8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_82(FLAG)        (*(uint32_t*)0x500517a8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_83(FLAG)        (*(uint32_t*)0x500517ac &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_83(FLAG)        (*(uint32_t*)0x500517ac |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_84(FLAG)        (*(uint32_t*)0x500517b0 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_84(FLAG)        (*(uint32_t*)0x500517b0 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_85(FLAG)        (*(uint32_t*)0x500517b4 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_85(FLAG)        (*(uint32_t*)0x500517b4 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_86(FLAG)        (*(uint32_t*)0x500517b8 &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_86(FLAG)        (*(uint32_t*)0x500517b8 |= ~FLAG)
#define Set_JPEG_HUFFENC_AC1_87(FLAG)        (*(uint32_t*)0x500517bc &= FLAG)
#define Clr_JPEG_HUFFENC_AC1_87(FLAG)        (*(uint32_t*)0x500517bc |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_0(FLAG)         (*(uint32_t*)0x500517c0 &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_0(FLAG)         (*(uint32_t*)0x500517c0 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_1(FLAG)         (*(uint32_t*)0x500517c4 &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_1(FLAG)         (*(uint32_t*)0x500517c4 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_2(FLAG)         (*(uint32_t*)0x500517c8 &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_2(FLAG)         (*(uint32_t*)0x500517c8 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_3(FLAG)         (*(uint32_t*)0x500517cc &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_3(FLAG)         (*(uint32_t*)0x500517cc |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_4(FLAG)         (*(uint32_t*)0x500517d0 &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_4(FLAG)         (*(uint32_t*)0x500517d0 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_5(FLAG)         (*(uint32_t*)0x500517d4 &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_5(FLAG)         (*(uint32_t*)0x500517d4 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_6(FLAG)         (*(uint32_t*)0x500517d8 &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_6(FLAG)         (*(uint32_t*)0x500517d8 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC0_7(FLAG)         (*(uint32_t*)0x500517dc &= FLAG)
#define Clr_JPEG_HUFFENC_DC0_7(FLAG)         (*(uint32_t*)0x500517dc |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_0(FLAG)         (*(uint32_t*)0x500517e0 &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_0(FLAG)         (*(uint32_t*)0x500517e0 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_1(FLAG)         (*(uint32_t*)0x500517e4 &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_1(FLAG)         (*(uint32_t*)0x500517e4 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_2(FLAG)         (*(uint32_t*)0x500517e8 &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_2(FLAG)         (*(uint32_t*)0x500517e8 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_3(FLAG)         (*(uint32_t*)0x500517ec &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_3(FLAG)         (*(uint32_t*)0x500517ec |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_4(FLAG)         (*(uint32_t*)0x500517f0 &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_4(FLAG)         (*(uint32_t*)0x500517f0 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_5(FLAG)         (*(uint32_t*)0x500517f4 &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_5(FLAG)         (*(uint32_t*)0x500517f4 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_6(FLAG)         (*(uint32_t*)0x500517f8 &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_6(FLAG)         (*(uint32_t*)0x500517f8 |= ~FLAG)
#define Set_JPEG_HUFFENC_DC1_7(FLAG)         (*(uint32_t*)0x500517fc &= FLAG)
#define Clr_JPEG_HUFFENC_DC1_7(FLAG)         (*(uint32_t*)0x500517fc |= ~FLAG)
#define  _JPEG_JPEG_CONFR0_START                             (0x1 << 0)    // Start
#define  _JPEG_JPEG_CONFR1_NF                                (0x3 << 0)    // Number of color components
#define  _JPEG_JPEG_CONFR1_DE                                (0x1 << 3)    // Decoding Enable
　
　drivers/inc/stm32f767xx_AC.h
#define Get_AC_CACR(FLAG)                    (*(uint32_t*)0xe000ef9c |= FLAG)
#define Get_AC_AHBSCR(FLAG)                  (*(uint32_t*)0xe000efa0 |= FLAG)
#define Get_AC_ABFSR(FLAG)                   (*(uint32_t*)0xe000efa8 |= FLAG)
#define Set_AC_ITCMCR(FLAG)                  (*(uint32_t*)0xe000ef90 &= FLAG)
#define Clr_AC_ITCMCR(FLAG)                  (*(uint32_t*)0xe000ef90 |= ~FLAG)
#define Set_AC_DTCMCR(FLAG)                  (*(uint32_t*)0xe000ef94 &= FLAG)
#define Clr_AC_DTCMCR(FLAG)                  (*(uint32_t*)0xe000ef94 |= ~FLAG)
#define Set_AC_AHBPCR(FLAG)                  (*(uint32_t*)0xe000ef98 &= FLAG)
#define Clr_AC_AHBPCR(FLAG)                  (*(uint32_t*)0xe000ef98 |= ~FLAG)
#define Set_AC_CACR(FLAG)                    (*(uint32_t*)0xe000ef9c &= FLAG)
#define Clr_AC_CACR(FLAG)                    (*(uint32_t*)0xe000ef9c |= ~FLAG)
#define Set_AC_AHBSCR(FLAG)                  (*(uint32_t*)0xe000efa0 &= FLAG)
#define Clr_AC_AHBSCR(FLAG)                  (*(uint32_t*)0xe000efa0 |= ~FLAG)
#define Set_AC_ABFSR(FLAG)                   (*(uint32_t*)0xe000efa8 &= FLAG)
#define Clr_AC_ABFSR(FLAG)                   (*(uint32_t*)0xe000efa8 |= ~FLAG)
#define  _AC_ITCMCR_EN                                       (0x1 << 0)    // EN
#define  _AC_ITCMCR_RMW                                      (0x1 << 1)    // RMW
#define  _AC_ITCMCR_RETEN                                    (0x1 << 2)    // RETEN
　
　drivers/inc/stm32f767xx_I2C.h
#define Get_I2C4_PECR(FLAG)                  (*(uint32_t*)0x40006020 |= FLAG)
#define Get_I2C4_RXDR(FLAG)                  (*(uint32_t*)0x40006024 |= FLAG)
#define Get_I2C4_TXDR(FLAG)                  (*(uint32_t*)0x40006028 |= FLAG)
#define Set_I2C1_CR1(FLAG)                   (*(uint32_t*)0x40005400 &= FLAG)
#define Clr_I2C1_CR1(FLAG)                   (*(uint32_t*)0x40005400 |= ~FLAG)
#define Set_I2C1_CR2(FLAG)                   (*(uint32_t*)0x40005404 &= FLAG)
#define Clr_I2C1_CR2(FLAG)                   (*(uint32_t*)0x40005404 |= ~FLAG)
#define Set_I2C1_OAR1(FLAG)                  (*(uint32_t*)0x40005408 &= FLAG)
#define Clr_I2C1_OAR1(FLAG)                  (*(uint32_t*)0x40005408 |= ~FLAG)
#define Set_I2C1_OAR2(FLAG)                  (*(uint32_t*)0x4000540c &= FLAG)
#define Clr_I2C1_OAR2(FLAG)                  (*(uint32_t*)0x4000540c |= ~FLAG)
#define Set_I2C1_TIMINGR(FLAG)               (*(uint32_t*)0x40005410 &= FLAG)
#define Clr_I2C1_TIMINGR(FLAG)               (*(uint32_t*)0x40005410 |= ~FLAG)
#define Set_I2C1_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005414 &= FLAG)
#define Clr_I2C1_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005414 |= ~FLAG)
#define Set_I2C1_ISR(FLAG)                   (*(uint32_t*)0x40005418 &= FLAG)
#define Clr_I2C1_ISR(FLAG)                   (*(uint32_t*)0x40005418 |= ~FLAG)
#define Set_I2C1_ICR(FLAG)                   (*(uint32_t*)0x4000541c &= FLAG)
#define Clr_I2C1_ICR(FLAG)                   (*(uint32_t*)0x4000541c |= ~FLAG)
#define Set_I2C1_PECR(FLAG)                  (*(uint32_t*)0x40005420 &= FLAG)
#define Clr_I2C1_PECR(FLAG)                  (*(uint32_t*)0x40005420 |= ~FLAG)
#define Set_I2C1_RXDR(FLAG)                  (*(uint32_t*)0x40005424 &= FLAG)
#define Clr_I2C1_RXDR(FLAG)                  (*(uint32_t*)0x40005424 |= ~FLAG)
#define Set_I2C1_TXDR(FLAG)                  (*(uint32_t*)0x40005428 &= FLAG)
#define Clr_I2C1_TXDR(FLAG)                  (*(uint32_t*)0x40005428 |= ~FLAG)
#define Set_I2C2_CR1(FLAG)                   (*(uint32_t*)0x40005800 &= FLAG)
#define Clr_I2C2_CR1(FLAG)                   (*(uint32_t*)0x40005800 |= ~FLAG)
#define Set_I2C2_CR2(FLAG)                   (*(uint32_t*)0x40005804 &= FLAG)
#define Clr_I2C2_CR2(FLAG)                   (*(uint32_t*)0x40005804 |= ~FLAG)
#define Set_I2C2_OAR1(FLAG)                  (*(uint32_t*)0x40005808 &= FLAG)
#define Clr_I2C2_OAR1(FLAG)                  (*(uint32_t*)0x40005808 |= ~FLAG)
#define Set_I2C2_OAR2(FLAG)                  (*(uint32_t*)0x4000580c &= FLAG)
#define Clr_I2C2_OAR2(FLAG)                  (*(uint32_t*)0x4000580c |= ~FLAG)
#define Set_I2C2_TIMINGR(FLAG)               (*(uint32_t*)0x40005810 &= FLAG)
#define Clr_I2C2_TIMINGR(FLAG)               (*(uint32_t*)0x40005810 |= ~FLAG)
#define Set_I2C2_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005814 &= FLAG)
#define Clr_I2C2_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005814 |= ~FLAG)
#define Set_I2C2_ISR(FLAG)                   (*(uint32_t*)0x40005818 &= FLAG)
#define Clr_I2C2_ISR(FLAG)                   (*(uint32_t*)0x40005818 |= ~FLAG)
#define Set_I2C2_ICR(FLAG)                   (*(uint32_t*)0x4000581c &= FLAG)
#define Clr_I2C2_ICR(FLAG)                   (*(uint32_t*)0x4000581c |= ~FLAG)
#define Set_I2C2_PECR(FLAG)                  (*(uint32_t*)0x40005820 &= FLAG)
#define Clr_I2C2_PECR(FLAG)                  (*(uint32_t*)0x40005820 |= ~FLAG)
#define Set_I2C2_RXDR(FLAG)                  (*(uint32_t*)0x40005824 &= FLAG)
#define Clr_I2C2_RXDR(FLAG)                  (*(uint32_t*)0x40005824 |= ~FLAG)
#define Set_I2C2_TXDR(FLAG)                  (*(uint32_t*)0x40005828 &= FLAG)
#define Clr_I2C2_TXDR(FLAG)                  (*(uint32_t*)0x40005828 |= ~FLAG)
#define Set_I2C3_CR1(FLAG)                   (*(uint32_t*)0x40005c00 &= FLAG)
#define Clr_I2C3_CR1(FLAG)                   (*(uint32_t*)0x40005c00 |= ~FLAG)
#define Set_I2C3_CR2(FLAG)                   (*(uint32_t*)0x40005c04 &= FLAG)
#define Clr_I2C3_CR2(FLAG)                   (*(uint32_t*)0x40005c04 |= ~FLAG)
#define Set_I2C3_OAR1(FLAG)                  (*(uint32_t*)0x40005c08 &= FLAG)
#define Clr_I2C3_OAR1(FLAG)                  (*(uint32_t*)0x40005c08 |= ~FLAG)
#define Set_I2C3_OAR2(FLAG)                  (*(uint32_t*)0x40005c0c &= FLAG)
#define Clr_I2C3_OAR2(FLAG)                  (*(uint32_t*)0x40005c0c |= ~FLAG)
#define Set_I2C3_TIMINGR(FLAG)               (*(uint32_t*)0x40005c10 &= FLAG)
#define Clr_I2C3_TIMINGR(FLAG)               (*(uint32_t*)0x40005c10 |= ~FLAG)
#define Set_I2C3_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005c14 &= FLAG)
#define Clr_I2C3_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005c14 |= ~FLAG)
#define Set_I2C3_ISR(FLAG)                   (*(uint32_t*)0x40005c18 &= FLAG)
#define Clr_I2C3_ISR(FLAG)                   (*(uint32_t*)0x40005c18 |= ~FLAG)
#define Set_I2C3_ICR(FLAG)                   (*(uint32_t*)0x40005c1c &= FLAG)
#define Clr_I2C3_ICR(FLAG)                   (*(uint32_t*)0x40005c1c |= ~FLAG)
#define Set_I2C3_PECR(FLAG)                  (*(uint32_t*)0x40005c20 &= FLAG)
#define Clr_I2C3_PECR(FLAG)                  (*(uint32_t*)0x40005c20 |= ~FLAG)
#define Set_I2C3_RXDR(FLAG)                  (*(uint32_t*)0x40005c24 &= FLAG)
#define Clr_I2C3_RXDR(FLAG)                  (*(uint32_t*)0x40005c24 |= ~FLAG)
#define Set_I2C3_TXDR(FLAG)                  (*(uint32_t*)0x40005c28 &= FLAG)
#define Clr_I2C3_TXDR(FLAG)                  (*(uint32_t*)0x40005c28 |= ~FLAG)
#define Set_I2C4_CR1(FLAG)                   (*(uint32_t*)0x40006000 &= FLAG)
#define Clr_I2C4_CR1(FLAG)                   (*(uint32_t*)0x40006000 |= ~FLAG)
#define Set_I2C4_CR2(FLAG)                   (*(uint32_t*)0x40006004 &= FLAG)
#define Clr_I2C4_CR2(FLAG)                   (*(uint32_t*)0x40006004 |= ~FLAG)
#define Set_I2C4_OAR1(FLAG)                  (*(uint32_t*)0x40006008 &= FLAG)
#define Clr_I2C4_OAR1(FLAG)                  (*(uint32_t*)0x40006008 |= ~FLAG)
#define Set_I2C4_OAR2(FLAG)                  (*(uint32_t*)0x4000600c &= FLAG)
#define Clr_I2C4_OAR2(FLAG)                  (*(uint32_t*)0x4000600c |= ~FLAG)
#define Set_I2C4_TIMINGR(FLAG)               (*(uint32_t*)0x40006010 &= FLAG)
#define Clr_I2C4_TIMINGR(FLAG)               (*(uint32_t*)0x40006010 |= ~FLAG)
#define Set_I2C4_TIMEOUTR(FLAG)              (*(uint32_t*)0x40006014 &= FLAG)
#define Clr_I2C4_TIMEOUTR(FLAG)              (*(uint32_t*)0x40006014 |= ~FLAG)
#define Set_I2C4_ISR(FLAG)                   (*(uint32_t*)0x40006018 &= FLAG)
#define Clr_I2C4_ISR(FLAG)                   (*(uint32_t*)0x40006018 |= ~FLAG)
#define Set_I2C4_ICR(FLAG)                   (*(uint32_t*)0x4000601c &= FLAG)
#define Clr_I2C4_ICR(FLAG)                   (*(uint32_t*)0x4000601c |= ~FLAG)
#define Set_I2C4_PECR(FLAG)                  (*(uint32_t*)0x40006020 &= FLAG)
#define Clr_I2C4_PECR(FLAG)                  (*(uint32_t*)0x40006020 |= ~FLAG)
#define Set_I2C4_RXDR(FLAG)                  (*(uint32_t*)0x40006024 &= FLAG)
#define Clr_I2C4_RXDR(FLAG)                  (*(uint32_t*)0x40006024 |= ~FLAG)
#define Set_I2C4_TXDR(FLAG)                  (*(uint32_t*)0x40006028 &= FLAG)
#define Clr_I2C4_TXDR(FLAG)                  (*(uint32_t*)0x40006028 |= ~FLAG)
#define  _I2C1_CR1_PE                                        (0x1 << 0)    // Peripheral enable
#define  _I2C1_CR1_TXIE                                      (0x1 << 1)    // TX Interrupt enable
#define  _I2C1_CR1_RXIE                                      (0x1 << 2)    // RX Interrupt enable
　
　drivers/inc/stm32f767xx_NVIC.h
#define Get_NVIC_IPR28(FLAG)                 (*(uint32_t*)0xe000e470 |= FLAG)
#define Get_NVIC_IPR29(FLAG)                 (*(uint32_t*)0xe000e474 |= FLAG)
#define Get_NVIC_STIR_STIR(FLAG)             (*(uint32_t*)0xe000ef00 |= FLAG)
#define Set_NVIC_ISER0(FLAG)                 (*(uint32_t*)0xe000e100 &= FLAG)
#define Clr_NVIC_ISER0(FLAG)                 (*(uint32_t*)0xe000e100 |= ~FLAG)
#define Set_NVIC_ISER1(FLAG)                 (*(uint32_t*)0xe000e104 &= FLAG)
#define Clr_NVIC_ISER1(FLAG)                 (*(uint32_t*)0xe000e104 |= ~FLAG)
#define Set_NVIC_ISER2(FLAG)                 (*(uint32_t*)0xe000e108 &= FLAG)
#define Clr_NVIC_ISER2(FLAG)                 (*(uint32_t*)0xe000e108 |= ~FLAG)
#define Set_NVIC_ICER0(FLAG)                 (*(uint32_t*)0xe000e180 &= FLAG)
#define Clr_NVIC_ICER0(FLAG)                 (*(uint32_t*)0xe000e180 |= ~FLAG)
#define Set_NVIC_ICER1(FLAG)                 (*(uint32_t*)0xe000e184 &= FLAG)
#define Clr_NVIC_ICER1(FLAG)                 (*(uint32_t*)0xe000e184 |= ~FLAG)
#define Set_NVIC_ICER2(FLAG)                 (*(uint32_t*)0xe000e188 &= FLAG)
#define Clr_NVIC_ICER2(FLAG)                 (*(uint32_t*)0xe000e188 |= ~FLAG)
#define Set_NVIC_ISPR0(FLAG)                 (*(uint32_t*)0xe000e200 &= FLAG)
#define Clr_NVIC_ISPR0(FLAG)                 (*(uint32_t*)0xe000e200 |= ~FLAG)
#define Set_NVIC_ISPR1(FLAG)                 (*(uint32_t*)0xe000e204 &= FLAG)
#define Clr_NVIC_ISPR1(FLAG)                 (*(uint32_t*)0xe000e204 |= ~FLAG)
#define Set_NVIC_ISPR2(FLAG)                 (*(uint32_t*)0xe000e208 &= FLAG)
#define Clr_NVIC_ISPR2(FLAG)                 (*(uint32_t*)0xe000e208 |= ~FLAG)
#define Set_NVIC_ICPR0(FLAG)                 (*(uint32_t*)0xe000e280 &= FLAG)
#define Clr_NVIC_ICPR0(FLAG)                 (*(uint32_t*)0xe000e280 |= ~FLAG)
#define Set_NVIC_ICPR1(FLAG)                 (*(uint32_t*)0xe000e284 &= FLAG)
#define Clr_NVIC_ICPR1(FLAG)                 (*(uint32_t*)0xe000e284 |= ~FLAG)
#define Set_NVIC_ICPR2(FLAG)                 (*(uint32_t*)0xe000e288 &= FLAG)
#define Clr_NVIC_ICPR2(FLAG)                 (*(uint32_t*)0xe000e288 |= ~FLAG)
#define Set_NVIC_IABR0(FLAG)                 (*(uint32_t*)0xe000e300 &= FLAG)
#define Clr_NVIC_IABR0(FLAG)                 (*(uint32_t*)0xe000e300 |= ~FLAG)
#define Set_NVIC_IABR1(FLAG)                 (*(uint32_t*)0xe000e304 &= FLAG)
#define Clr_NVIC_IABR1(FLAG)                 (*(uint32_t*)0xe000e304 |= ~FLAG)
#define Set_NVIC_IABR2(FLAG)                 (*(uint32_t*)0xe000e308 &= FLAG)
#define Clr_NVIC_IABR2(FLAG)                 (*(uint32_t*)0xe000e308 |= ~FLAG)
#define Set_NVIC_IPR0(FLAG)                  (*(uint32_t*)0xe000e400 &= FLAG)
#define Clr_NVIC_IPR0(FLAG)                  (*(uint32_t*)0xe000e400 |= ~FLAG)
#define Set_NVIC_IPR1(FLAG)                  (*(uint32_t*)0xe000e404 &= FLAG)
#define Clr_NVIC_IPR1(FLAG)                  (*(uint32_t*)0xe000e404 |= ~FLAG)
#define Set_NVIC_IPR2(FLAG)                  (*(uint32_t*)0xe000e408 &= FLAG)
#define Clr_NVIC_IPR2(FLAG)                  (*(uint32_t*)0xe000e408 |= ~FLAG)
#define Set_NVIC_IPR3(FLAG)                  (*(uint32_t*)0xe000e40c &= FLAG)
#define Clr_NVIC_IPR3(FLAG)                  (*(uint32_t*)0xe000e40c |= ~FLAG)
#define Set_NVIC_IPR4(FLAG)                  (*(uint32_t*)0xe000e410 &= FLAG)
#define Clr_NVIC_IPR4(FLAG)                  (*(uint32_t*)0xe000e410 |= ~FLAG)
#define Set_NVIC_IPR5(FLAG)                  (*(uint32_t*)0xe000e414 &= FLAG)
#define Clr_NVIC_IPR5(FLAG)                  (*(uint32_t*)0xe000e414 |= ~FLAG)
#define Set_NVIC_IPR6(FLAG)                  (*(uint32_t*)0xe000e418 &= FLAG)
#define Clr_NVIC_IPR6(FLAG)                  (*(uint32_t*)0xe000e418 |= ~FLAG)
#define Set_NVIC_IPR7(FLAG)                  (*(uint32_t*)0xe000e41c &= FLAG)
#define Clr_NVIC_IPR7(FLAG)                  (*(uint32_t*)0xe000e41c |= ~FLAG)
#define Set_NVIC_IPR8(FLAG)                  (*(uint32_t*)0xe000e420 &= FLAG)
#define Clr_NVIC_IPR8(FLAG)                  (*(uint32_t*)0xe000e420 |= ~FLAG)
#define Set_NVIC_IPR9(FLAG)                  (*(uint32_t*)0xe000e424 &= FLAG)
#define Clr_NVIC_IPR9(FLAG)                  (*(uint32_t*)0xe000e424 |= ~FLAG)
#define Set_NVIC_IPR10(FLAG)                 (*(uint32_t*)0xe000e428 &= FLAG)
#define Clr_NVIC_IPR10(FLAG)                 (*(uint32_t*)0xe000e428 |= ~FLAG)
#define Set_NVIC_IPR11(FLAG)                 (*(uint32_t*)0xe000e42c &= FLAG)
#define Clr_NVIC_IPR11(FLAG)                 (*(uint32_t*)0xe000e42c |= ~FLAG)
#define Set_NVIC_IPR12(FLAG)                 (*(uint32_t*)0xe000e430 &= FLAG)
#define Clr_NVIC_IPR12(FLAG)                 (*(uint32_t*)0xe000e430 |= ~FLAG)
#define Set_NVIC_IPR13(FLAG)                 (*(uint32_t*)0xe000e434 &= FLAG)
#define Clr_NVIC_IPR13(FLAG)                 (*(uint32_t*)0xe000e434 |= ~FLAG)
#define Set_NVIC_IPR14(FLAG)                 (*(uint32_t*)0xe000e438 &= FLAG)
#define Clr_NVIC_IPR14(FLAG)                 (*(uint32_t*)0xe000e438 |= ~FLAG)
#define Set_NVIC_IPR15(FLAG)                 (*(uint32_t*)0xe000e43c &= FLAG)
#define Clr_NVIC_IPR15(FLAG)                 (*(uint32_t*)0xe000e43c |= ~FLAG)
#define Set_NVIC_IPR16(FLAG)                 (*(uint32_t*)0xe000e440 &= FLAG)
#define Clr_NVIC_IPR16(FLAG)                 (*(uint32_t*)0xe000e440 |= ~FLAG)
#define Set_NVIC_IPR17(FLAG)                 (*(uint32_t*)0xe000e444 &= FLAG)
#define Clr_NVIC_IPR17(FLAG)                 (*(uint32_t*)0xe000e444 |= ~FLAG)
#define Set_NVIC_IPR18(FLAG)                 (*(uint32_t*)0xe000e448 &= FLAG)
#define Clr_NVIC_IPR18(FLAG)                 (*(uint32_t*)0xe000e448 |= ~FLAG)
#define Set_NVIC_IPR19(FLAG)                 (*(uint32_t*)0xe000e44c &= FLAG)
#define Clr_NVIC_IPR19(FLAG)                 (*(uint32_t*)0xe000e44c |= ~FLAG)
#define Set_NVIC_IPR20(FLAG)                 (*(uint32_t*)0xe000e450 &= FLAG)
#define Clr_NVIC_IPR20(FLAG)                 (*(uint32_t*)0xe000e450 |= ~FLAG)
#define Set_NVIC_ISER3(FLAG)                 (*(uint32_t*)0xe000e10c &= FLAG)
#define Clr_NVIC_ISER3(FLAG)                 (*(uint32_t*)0xe000e10c |= ~FLAG)
#define Set_NVIC_ICER3(FLAG)                 (*(uint32_t*)0xe000e18c &= FLAG)
#define Clr_NVIC_ICER3(FLAG)                 (*(uint32_t*)0xe000e18c |= ~FLAG)
#define Set_NVIC_ISPR3(FLAG)                 (*(uint32_t*)0xe000e20c &= FLAG)
#define Clr_NVIC_ISPR3(FLAG)                 (*(uint32_t*)0xe000e20c |= ~FLAG)
#define Set_NVIC_ICPR3(FLAG)                 (*(uint32_t*)0xe000e28c &= FLAG)
#define Clr_NVIC_ICPR3(FLAG)                 (*(uint32_t*)0xe000e28c |= ~FLAG)
#define Set_NVIC_IABR3(FLAG)                 (*(uint32_t*)0xe000e30c &= FLAG)
#define Clr_NVIC_IABR3(FLAG)                 (*(uint32_t*)0xe000e30c |= ~FLAG)
#define Set_NVIC_IPR21(FLAG)                 (*(uint32_t*)0xe000e454 &= FLAG)
#define Clr_NVIC_IPR21(FLAG)                 (*(uint32_t*)0xe000e454 |= ~FLAG)
#define Set_NVIC_IPR22(FLAG)                 (*(uint32_t*)0xe000e458 &= FLAG)
#define Clr_NVIC_IPR22(FLAG)                 (*(uint32_t*)0xe000e458 |= ~FLAG)
#define Set_NVIC_IPR23(FLAG)                 (*(uint32_t*)0xe000e45c &= FLAG)
#define Clr_NVIC_IPR23(FLAG)                 (*(uint32_t*)0xe000e45c |= ~FLAG)
#define Set_NVIC_IPR24(FLAG)                 (*(uint32_t*)0xe000e460 &= FLAG)
#define Clr_NVIC_IPR24(FLAG)                 (*(uint32_t*)0xe000e460 |= ~FLAG)
#define Set_NVIC_IPR25(FLAG)                 (*(uint32_t*)0xe000e464 &= FLAG)
#define Clr_NVIC_IPR25(FLAG)                 (*(uint32_t*)0xe000e464 |= ~FLAG)
#define Set_NVIC_IPR26(FLAG)                 (*(uint32_t*)0xe000e468 &= FLAG)
#define Clr_NVIC_IPR26(FLAG)                 (*(uint32_t*)0xe000e468 |= ~FLAG)
#define Set_NVIC_IPR27(FLAG)                 (*(uint32_t*)0xe000e46c &= FLAG)
#define Clr_NVIC_IPR27(FLAG)                 (*(uint32_t*)0xe000e46c |= ~FLAG)
#define Set_NVIC_IPR28(FLAG)                 (*(uint32_t*)0xe000e470 &= FLAG)
#define Clr_NVIC_IPR28(FLAG)                 (*(uint32_t*)0xe000e470 |= ~FLAG)
#define Set_NVIC_IPR29(FLAG)                 (*(uint32_t*)0xe000e474 &= FLAG)
#define Clr_NVIC_IPR29(FLAG)                 (*(uint32_t*)0xe000e474 |= ~FLAG)
#define Set_NVIC_STIR_STIR(FLAG)             (*(uint32_t*)0xe000ef00 &= FLAG)
#define Clr_NVIC_STIR_STIR(FLAG)             (*(uint32_t*)0xe000ef00 |= ~FLAG)
#define  _NVIC_ISER0_SETENA                                  (0xffffffff << 0)    // SETENA
#define  _NVIC_ISER1_SETENA                                  (0xffffffff << 0)    // SETENA
#define  _NVIC_ISER2_SETENA                                  (0xffffffff << 0)    // SETENA
　
　drivers/inc/stm32f767xx_RTC.h
#define Get_RTC_BKP29R(FLAG)                 (*(uint32_t*)0x400028c4 |= FLAG)
#define Get_RTC_BKP30R(FLAG)                 (*(uint32_t*)0x400028c8 |= FLAG)
#define Get_RTC_BKP31R(FLAG)                 (*(uint32_t*)0x400028cc |= FLAG)
#define Set_RTC_TR(FLAG)                     (*(uint32_t*)0x40002800 &= FLAG)
#define Clr_RTC_TR(FLAG)                     (*(uint32_t*)0x40002800 |= ~FLAG)
#define Set_RTC_DR(FLAG)                     (*(uint32_t*)0x40002804 &= FLAG)
#define Clr_RTC_DR(FLAG)                     (*(uint32_t*)0x40002804 |= ~FLAG)
#define Set_RTC_CR(FLAG)                     (*(uint32_t*)0x40002808 &= FLAG)
#define Clr_RTC_CR(FLAG)                     (*(uint32_t*)0x40002808 |= ~FLAG)
#define Set_RTC_ISR(FLAG)                    (*(uint32_t*)0x4000280c &= FLAG)
#define Clr_RTC_ISR(FLAG)                    (*(uint32_t*)0x4000280c |= ~FLAG)
#define Set_RTC_PRER(FLAG)                   (*(uint32_t*)0x40002810 &= FLAG)
#define Clr_RTC_PRER(FLAG)                   (*(uint32_t*)0x40002810 |= ~FLAG)
#define Set_RTC_WUTR(FLAG)                   (*(uint32_t*)0x40002814 &= FLAG)
#define Clr_RTC_WUTR(FLAG)                   (*(uint32_t*)0x40002814 |= ~FLAG)
#define Set_RTC_ALRMAR(FLAG)                 (*(uint32_t*)0x4000281c &= FLAG)
#define Clr_RTC_ALRMAR(FLAG)                 (*(uint32_t*)0x4000281c |= ~FLAG)
#define Set_RTC_ALRMBR(FLAG)                 (*(uint32_t*)0x40002820 &= FLAG)
#define Clr_RTC_ALRMBR(FLAG)                 (*(uint32_t*)0x40002820 |= ~FLAG)
#define Set_RTC_WPR(FLAG)                    (*(uint32_t*)0x40002824 &= FLAG)
#define Clr_RTC_WPR(FLAG)                    (*(uint32_t*)0x40002824 |= ~FLAG)
#define Set_RTC_SSR(FLAG)                    (*(uint32_t*)0x40002828 &= FLAG)
#define Clr_RTC_SSR(FLAG)                    (*(uint32_t*)0x40002828 |= ~FLAG)
#define Set_RTC_SHIFTR(FLAG)                 (*(uint32_t*)0x4000282c &= FLAG)
#define Clr_RTC_SHIFTR(FLAG)                 (*(uint32_t*)0x4000282c |= ~FLAG)
#define Set_RTC_TSTR(FLAG)                   (*(uint32_t*)0x40002830 &= FLAG)
#define Clr_RTC_TSTR(FLAG)                   (*(uint32_t*)0x40002830 |= ~FLAG)
#define Set_RTC_TSDR(FLAG)                   (*(uint32_t*)0x40002834 &= FLAG)
#define Clr_RTC_TSDR(FLAG)                   (*(uint32_t*)0x40002834 |= ~FLAG)
#define Set_RTC_TSSSR(FLAG)                  (*(uint32_t*)0x40002838 &= FLAG)
#define Clr_RTC_TSSSR(FLAG)                  (*(uint32_t*)0x40002838 |= ~FLAG)
#define Set_RTC_CALR(FLAG)                   (*(uint32_t*)0x4000283c &= FLAG)
#define Clr_RTC_CALR(FLAG)                   (*(uint32_t*)0x4000283c |= ~FLAG)
#define Set_RTC_TAMPCR(FLAG)                 (*(uint32_t*)0x40002840 &= FLAG)
#define Clr_RTC_TAMPCR(FLAG)                 (*(uint32_t*)0x40002840 |= ~FLAG)
#define Set_RTC_ALRMASSR(FLAG)               (*(uint32_t*)0x40002844 &= FLAG)
#define Clr_RTC_ALRMASSR(FLAG)               (*(uint32_t*)0x40002844 |= ~FLAG)
#define Set_RTC_ALRMBSSR(FLAG)               (*(uint32_t*)0x40002848 &= FLAG)
#define Clr_RTC_ALRMBSSR(FLAG)               (*(uint32_t*)0x40002848 |= ~FLAG)
#define Set_RTC_OR(FLAG)                     (*(uint32_t*)0x4000284c &= FLAG)
#define Clr_RTC_OR(FLAG)                     (*(uint32_t*)0x4000284c |= ~FLAG)
#define Set_RTC_BKP0R(FLAG)                  (*(uint32_t*)0x40002850 &= FLAG)
#define Clr_RTC_BKP0R(FLAG)                  (*(uint32_t*)0x40002850 |= ~FLAG)
#define Set_RTC_BKP1R(FLAG)                  (*(uint32_t*)0x40002854 &= FLAG)
#define Clr_RTC_BKP1R(FLAG)                  (*(uint32_t*)0x40002854 |= ~FLAG)
#define Set_RTC_BKP2R(FLAG)                  (*(uint32_t*)0x40002858 &= FLAG)
#define Clr_RTC_BKP2R(FLAG)                  (*(uint32_t*)0x40002858 |= ~FLAG)
#define Set_RTC_BKP3R(FLAG)                  (*(uint32_t*)0x4000285c &= FLAG)
#define Clr_RTC_BKP3R(FLAG)                  (*(uint32_t*)0x4000285c |= ~FLAG)
#define Set_RTC_BKP4R(FLAG)                  (*(uint32_t*)0x40002860 &= FLAG)
#define Clr_RTC_BKP4R(FLAG)                  (*(uint32_t*)0x40002860 |= ~FLAG)
#define Set_RTC_BKP5R(FLAG)                  (*(uint32_t*)0x40002864 &= FLAG)
#define Clr_RTC_BKP5R(FLAG)                  (*(uint32_t*)0x40002864 |= ~FLAG)
#define Set_RTC_BKP6R(FLAG)                  (*(uint32_t*)0x40002868 &= FLAG)
#define Clr_RTC_BKP6R(FLAG)                  (*(uint32_t*)0x40002868 |= ~FLAG)
#define Set_RTC_BKP7R(FLAG)                  (*(uint32_t*)0x4000286c &= FLAG)
#define Clr_RTC_BKP7R(FLAG)                  (*(uint32_t*)0x4000286c |= ~FLAG)
#define Set_RTC_BKP8R(FLAG)                  (*(uint32_t*)0x40002870 &= FLAG)
#define Clr_RTC_BKP8R(FLAG)                  (*(uint32_t*)0x40002870 |= ~FLAG)
#define Set_RTC_BKP9R(FLAG)                  (*(uint32_t*)0x40002874 &= FLAG)
#define Clr_RTC_BKP9R(FLAG)                  (*(uint32_t*)0x40002874 |= ~FLAG)
#define Set_RTC_BKP10R(FLAG)                 (*(uint32_t*)0x40002878 &= FLAG)
#define Clr_RTC_BKP10R(FLAG)                 (*(uint32_t*)0x40002878 |= ~FLAG)
#define Set_RTC_BKP11R(FLAG)                 (*(uint32_t*)0x4000287c &= FLAG)
#define Clr_RTC_BKP11R(FLAG)                 (*(uint32_t*)0x4000287c |= ~FLAG)
#define Set_RTC_BKP12R(FLAG)                 (*(uint32_t*)0x40002880 &= FLAG)
#define Clr_RTC_BKP12R(FLAG)                 (*(uint32_t*)0x40002880 |= ~FLAG)
#define Set_RTC_BKP13R(FLAG)                 (*(uint32_t*)0x40002884 &= FLAG)
#define Clr_RTC_BKP13R(FLAG)                 (*(uint32_t*)0x40002884 |= ~FLAG)
#define Set_RTC_BKP14R(FLAG)                 (*(uint32_t*)0x40002888 &= FLAG)
#define Clr_RTC_BKP14R(FLAG)                 (*(uint32_t*)0x40002888 |= ~FLAG)
#define Set_RTC_BKP15R(FLAG)                 (*(uint32_t*)0x4000288c &= FLAG)
#define Clr_RTC_BKP15R(FLAG)                 (*(uint32_t*)0x4000288c |= ~FLAG)
#define Set_RTC_BKP16R(FLAG)                 (*(uint32_t*)0x40002890 &= FLAG)
#define Clr_RTC_BKP16R(FLAG)                 (*(uint32_t*)0x40002890 |= ~FLAG)
#define Set_RTC_BKP17R(FLAG)                 (*(uint32_t*)0x40002894 &= FLAG)
#define Clr_RTC_BKP17R(FLAG)                 (*(uint32_t*)0x40002894 |= ~FLAG)
#define Set_RTC_BKP18R(FLAG)                 (*(uint32_t*)0x40002898 &= FLAG)
#define Clr_RTC_BKP18R(FLAG)                 (*(uint32_t*)0x40002898 |= ~FLAG)
#define Set_RTC_BKP19R(FLAG)                 (*(uint32_t*)0x4000289c &= FLAG)
#define Clr_RTC_BKP19R(FLAG)                 (*(uint32_t*)0x4000289c |= ~FLAG)
#define Set_RTC_BKP20R(FLAG)                 (*(uint32_t*)0x400028a0 &= FLAG)
#define Clr_RTC_BKP20R(FLAG)                 (*(uint32_t*)0x400028a0 |= ~FLAG)
#define Set_RTC_BKP21R(FLAG)                 (*(uint32_t*)0x400028a4 &= FLAG)
#define Clr_RTC_BKP21R(FLAG)                 (*(uint32_t*)0x400028a4 |= ~FLAG)
#define Set_RTC_BKP22R(FLAG)                 (*(uint32_t*)0x400028a8 &= FLAG)
#define Clr_RTC_BKP22R(FLAG)                 (*(uint32_t*)0x400028a8 |= ~FLAG)
#define Set_RTC_BKP23R(FLAG)                 (*(uint32_t*)0x400028ac &= FLAG)
#define Clr_RTC_BKP23R(FLAG)                 (*(uint32_t*)0x400028ac |= ~FLAG)
#define Set_RTC_BKP24R(FLAG)                 (*(uint32_t*)0x400028b0 &= FLAG)
#define Clr_RTC_BKP24R(FLAG)                 (*(uint32_t*)0x400028b0 |= ~FLAG)
#define Set_RTC_BKP25R(FLAG)                 (*(uint32_t*)0x400028b4 &= FLAG)
#define Clr_RTC_BKP25R(FLAG)                 (*(uint32_t*)0x400028b4 |= ~FLAG)
#define Set_RTC_BKP26R(FLAG)                 (*(uint32_t*)0x400028b8 &= FLAG)
#define Clr_RTC_BKP26R(FLAG)                 (*(uint32_t*)0x400028b8 |= ~FLAG)
#define Set_RTC_BKP27R(FLAG)                 (*(uint32_t*)0x400028bc &= FLAG)
#define Clr_RTC_BKP27R(FLAG)                 (*(uint32_t*)0x400028bc |= ~FLAG)
#define Set_RTC_BKP28R(FLAG)                 (*(uint32_t*)0x400028c0 &= FLAG)
#define Clr_RTC_BKP28R(FLAG)                 (*(uint32_t*)0x400028c0 |= ~FLAG)
#define Set_RTC_BKP29R(FLAG)                 (*(uint32_t*)0x400028c4 &= FLAG)
#define Clr_RTC_BKP29R(FLAG)                 (*(uint32_t*)0x400028c4 |= ~FLAG)
#define Set_RTC_BKP30R(FLAG)                 (*(uint32_t*)0x400028c8 &= FLAG)
#define Clr_RTC_BKP30R(FLAG)                 (*(uint32_t*)0x400028c8 |= ~FLAG)
#define Set_RTC_BKP31R(FLAG)                 (*(uint32_t*)0x400028cc &= FLAG)
#define Clr_RTC_BKP31R(FLAG)                 (*(uint32_t*)0x400028cc |= ~FLAG)
#define  _RTC_TR_PM                                          (0x1 << 22)    // AM/PM notation
#define  _RTC_TR_HT                                          (0x3 << 20)    // Hour tens in BCD format
#define  _RTC_TR_HU                                          (0xf << 16)    // Hour units in BCD format
　
　drivers/inc/stm32f767xx_USB_OTG_FS.h
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT5(FLAG)(*(uint32_t*)0x50000b98 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x50000ba0 |= FLAG)
#define Get_OTG_FS_PWRCLK_OTG_FS_PCGCCTL(FLAG)(*(uint32_t*)0x50000e00 |= FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GOTGCTL(FLAG)(*(uint32_t*)0x50000000 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GOTGCTL(FLAG)(*(uint32_t*)0x50000000 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GOTGINT(FLAG)(*(uint32_t*)0x50000004 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GOTGINT(FLAG)(*(uint32_t*)0x50000004 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GAHBCFG(FLAG)(*(uint32_t*)0x50000008 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GAHBCFG(FLAG)(*(uint32_t*)0x50000008 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GUSBCFG(FLAG)(*(uint32_t*)0x5000000c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GUSBCFG(FLAG)(*(uint32_t*)0x5000000c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRSTCTL(FLAG)(*(uint32_t*)0x50000010 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRSTCTL(FLAG)(*(uint32_t*)0x50000010 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GINTSTS(FLAG)(*(uint32_t*)0x50000014 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GINTSTS(FLAG)(*(uint32_t*)0x50000014 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GINTMSK(FLAG)(*(uint32_t*)0x50000018 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GINTMSK(FLAG)(*(uint32_t*)0x50000018 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x5000001c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x5000001c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x5000001c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x5000001c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXFSIZ(FLAG)(*(uint32_t*)0x50000024 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXFSIZ(FLAG)(*(uint32_t*)0x50000024 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x50000028 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x50000028 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x50000028 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x50000028 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_HNPTXSTS(FLAG)(*(uint32_t*)0x5000002c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_HNPTXSTS(FLAG)(*(uint32_t*)0x5000002c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GCCFG(FLAG) (*(uint32_t*)0x50000038 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GCCFG(FLAG) (*(uint32_t*)0x50000038 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_CID(FLAG)   (*(uint32_t*)0x5000003c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_CID(FLAG)   (*(uint32_t*)0x5000003c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ(FLAG)(*(uint32_t*)0x50000100 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ(FLAG)(*(uint32_t*)0x50000100 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF1(FLAG)(*(uint32_t*)0x50000104 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF1(FLAG)(*(uint32_t*)0x50000104 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF2(FLAG)(*(uint32_t*)0x50000108 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF2(FLAG)(*(uint32_t*)0x50000108 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF3(FLAG)(*(uint32_t*)0x5000010c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF3(FLAG)(*(uint32_t*)0x5000010c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x50000020 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x50000020 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x50000020 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x50000020 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GI2CCTL(FLAG)(*(uint32_t*)0x50000030 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GI2CCTL(FLAG)(*(uint32_t*)0x50000030 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GPWRDN(FLAG)(*(uint32_t*)0x50000058 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GPWRDN(FLAG)(*(uint32_t*)0x50000058 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GADPCTL(FLAG)(*(uint32_t*)0x50000060 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GADPCTL(FLAG)(*(uint32_t*)0x50000060 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF4(FLAG)(*(uint32_t*)0x50000110 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF4(FLAG)(*(uint32_t*)0x50000110 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF5(FLAG)(*(uint32_t*)0x50000114 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF5(FLAG)(*(uint32_t*)0x50000114 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GLPMCFG(FLAG)(*(uint32_t*)0x50000054 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GLPMCFG(FLAG)(*(uint32_t*)0x50000054 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCFG(FLAG)    (*(uint32_t*)0x50000400 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCFG(FLAG)    (*(uint32_t*)0x50000400 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HFIR(FLAG)    (*(uint32_t*)0x50000404 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HFIR(FLAG)    (*(uint32_t*)0x50000404 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HFNUM(FLAG)   (*(uint32_t*)0x50000408 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HFNUM(FLAG)   (*(uint32_t*)0x50000408 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HPTXSTS(FLAG) (*(uint32_t*)0x50000410 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HPTXSTS(FLAG) (*(uint32_t*)0x50000410 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HAINT(FLAG)   (*(uint32_t*)0x50000414 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HAINT(FLAG)   (*(uint32_t*)0x50000414 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HAINTMSK(FLAG)(*(uint32_t*)0x50000418 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HAINTMSK(FLAG)(*(uint32_t*)0x50000418 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HPRT(FLAG)    (*(uint32_t*)0x50000440 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HPRT(FLAG)    (*(uint32_t*)0x50000440 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR0(FLAG) (*(uint32_t*)0x50000500 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR0(FLAG) (*(uint32_t*)0x50000500 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR1(FLAG) (*(uint32_t*)0x50000520 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR1(FLAG) (*(uint32_t*)0x50000520 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR2(FLAG) (*(uint32_t*)0x50000540 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR2(FLAG) (*(uint32_t*)0x50000540 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR3(FLAG) (*(uint32_t*)0x50000560 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR3(FLAG) (*(uint32_t*)0x50000560 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR4(FLAG) (*(uint32_t*)0x50000580 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR4(FLAG) (*(uint32_t*)0x50000580 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR5(FLAG) (*(uint32_t*)0x500005a0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR5(FLAG) (*(uint32_t*)0x500005a0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR6(FLAG) (*(uint32_t*)0x500005c0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR6(FLAG) (*(uint32_t*)0x500005c0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR7(FLAG) (*(uint32_t*)0x500005e0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR7(FLAG) (*(uint32_t*)0x500005e0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT0(FLAG)  (*(uint32_t*)0x50000508 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT0(FLAG)  (*(uint32_t*)0x50000508 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT1(FLAG)  (*(uint32_t*)0x50000528 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT1(FLAG)  (*(uint32_t*)0x50000528 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT2(FLAG)  (*(uint32_t*)0x50000548 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT2(FLAG)  (*(uint32_t*)0x50000548 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT3(FLAG)  (*(uint32_t*)0x50000568 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT3(FLAG)  (*(uint32_t*)0x50000568 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT4(FLAG)  (*(uint32_t*)0x50000588 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT4(FLAG)  (*(uint32_t*)0x50000588 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT5(FLAG)  (*(uint32_t*)0x500005a8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT5(FLAG)  (*(uint32_t*)0x500005a8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT6(FLAG)  (*(uint32_t*)0x500005c8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT6(FLAG)  (*(uint32_t*)0x500005c8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT7(FLAG)  (*(uint32_t*)0x500005e8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT7(FLAG)  (*(uint32_t*)0x500005e8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK0(FLAG)(*(uint32_t*)0x5000050c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK0(FLAG)(*(uint32_t*)0x5000050c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK1(FLAG)(*(uint32_t*)0x5000052c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK1(FLAG)(*(uint32_t*)0x5000052c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK2(FLAG)(*(uint32_t*)0x5000054c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK2(FLAG)(*(uint32_t*)0x5000054c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK3(FLAG)(*(uint32_t*)0x5000056c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK3(FLAG)(*(uint32_t*)0x5000056c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK4(FLAG)(*(uint32_t*)0x5000058c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK4(FLAG)(*(uint32_t*)0x5000058c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK5(FLAG)(*(uint32_t*)0x500005ac &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK5(FLAG)(*(uint32_t*)0x500005ac |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK6(FLAG)(*(uint32_t*)0x500005cc &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK6(FLAG)(*(uint32_t*)0x500005cc |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK7(FLAG)(*(uint32_t*)0x500005ec &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK7(FLAG)(*(uint32_t*)0x500005ec |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ0(FLAG) (*(uint32_t*)0x50000510 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ0(FLAG) (*(uint32_t*)0x50000510 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ1(FLAG) (*(uint32_t*)0x50000530 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ1(FLAG) (*(uint32_t*)0x50000530 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ2(FLAG) (*(uint32_t*)0x50000550 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ2(FLAG) (*(uint32_t*)0x50000550 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ3(FLAG) (*(uint32_t*)0x50000570 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ3(FLAG) (*(uint32_t*)0x50000570 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ4(FLAG) (*(uint32_t*)0x50000590 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ4(FLAG) (*(uint32_t*)0x50000590 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ5(FLAG) (*(uint32_t*)0x500005b0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ5(FLAG) (*(uint32_t*)0x500005b0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ6(FLAG) (*(uint32_t*)0x500005d0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ6(FLAG) (*(uint32_t*)0x500005d0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ7(FLAG) (*(uint32_t*)0x500005f0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ7(FLAG) (*(uint32_t*)0x500005f0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR8(FLAG) (*(uint32_t*)0x500005f4 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR8(FLAG) (*(uint32_t*)0x500005f4 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT8(FLAG)  (*(uint32_t*)0x500005f8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT8(FLAG)  (*(uint32_t*)0x500005f8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK8(FLAG)(*(uint32_t*)0x500005fc &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK8(FLAG)(*(uint32_t*)0x500005fc |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ8(FLAG) (*(uint32_t*)0x50000600 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ8(FLAG) (*(uint32_t*)0x50000600 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR9(FLAG) (*(uint32_t*)0x50000604 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR9(FLAG) (*(uint32_t*)0x50000604 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT9(FLAG)  (*(uint32_t*)0x50000608 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT9(FLAG)  (*(uint32_t*)0x50000608 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK9(FLAG)(*(uint32_t*)0x5000060c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK9(FLAG)(*(uint32_t*)0x5000060c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ9(FLAG) (*(uint32_t*)0x50000610 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ9(FLAG) (*(uint32_t*)0x50000610 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR10(FLAG)(*(uint32_t*)0x50000614 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR10(FLAG)(*(uint32_t*)0x50000614 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT10(FLAG) (*(uint32_t*)0x50000618 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT10(FLAG) (*(uint32_t*)0x50000618 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK10(FLAG)(*(uint32_t*)0x5000061c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK10(FLAG)(*(uint32_t*)0x5000061c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ10(FLAG)(*(uint32_t*)0x50000620 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ10(FLAG)(*(uint32_t*)0x50000620 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR11(FLAG)(*(uint32_t*)0x50000624 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR11(FLAG)(*(uint32_t*)0x50000624 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT11(FLAG) (*(uint32_t*)0x50000628 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT11(FLAG) (*(uint32_t*)0x50000628 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK11(FLAG)(*(uint32_t*)0x5000062c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK11(FLAG)(*(uint32_t*)0x5000062c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ11(FLAG)(*(uint32_t*)0x50000630 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ11(FLAG)(*(uint32_t*)0x50000630 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DCFG(FLAG)  (*(uint32_t*)0x50000800 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DCFG(FLAG)  (*(uint32_t*)0x50000800 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DCTL(FLAG)  (*(uint32_t*)0x50000804 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DCTL(FLAG)  (*(uint32_t*)0x50000804 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DSTS(FLAG)  (*(uint32_t*)0x50000808 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DSTS(FLAG)  (*(uint32_t*)0x50000808 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPMSK(FLAG)(*(uint32_t*)0x50000810 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPMSK(FLAG)(*(uint32_t*)0x50000810 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPMSK(FLAG)(*(uint32_t*)0x50000814 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPMSK(FLAG)(*(uint32_t*)0x50000814 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DAINT(FLAG) (*(uint32_t*)0x50000818 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DAINT(FLAG) (*(uint32_t*)0x50000818 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DAINTMSK(FLAG)(*(uint32_t*)0x5000081c &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DAINTMSK(FLAG)(*(uint32_t*)0x5000081c |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DVBUSDIS(FLAG)(*(uint32_t*)0x50000828 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DVBUSDIS(FLAG)(*(uint32_t*)0x50000828 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DVBUSPULSE(FLAG)(*(uint32_t*)0x5000082c &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DVBUSPULSE(FLAG)(*(uint32_t*)0x5000082c |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x50000834 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x50000834 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL0(FLAG)(*(uint32_t*)0x50000900 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL0(FLAG)(*(uint32_t*)0x50000900 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL1(FLAG)(*(uint32_t*)0x50000920 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL1(FLAG)(*(uint32_t*)0x50000920 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL2(FLAG)(*(uint32_t*)0x50000940 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL2(FLAG)(*(uint32_t*)0x50000940 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL3(FLAG)(*(uint32_t*)0x50000960 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL3(FLAG)(*(uint32_t*)0x50000960 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL0(FLAG)(*(uint32_t*)0x50000b00 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL0(FLAG)(*(uint32_t*)0x50000b00 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL1(FLAG)(*(uint32_t*)0x50000b20 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL1(FLAG)(*(uint32_t*)0x50000b20 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL2(FLAG)(*(uint32_t*)0x50000b40 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL2(FLAG)(*(uint32_t*)0x50000b40 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL3(FLAG)(*(uint32_t*)0x50000b60 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL3(FLAG)(*(uint32_t*)0x50000b60 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT0(FLAG)(*(uint32_t*)0x50000908 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT0(FLAG)(*(uint32_t*)0x50000908 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT1(FLAG)(*(uint32_t*)0x50000928 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT1(FLAG)(*(uint32_t*)0x50000928 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT2(FLAG)(*(uint32_t*)0x50000948 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT2(FLAG)(*(uint32_t*)0x50000948 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT3(FLAG)(*(uint32_t*)0x50000968 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT3(FLAG)(*(uint32_t*)0x50000968 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT0(FLAG)(*(uint32_t*)0x50000b08 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT0(FLAG)(*(uint32_t*)0x50000b08 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT1(FLAG)(*(uint32_t*)0x50000b28 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT1(FLAG)(*(uint32_t*)0x50000b28 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT2(FLAG)(*(uint32_t*)0x50000b48 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT2(FLAG)(*(uint32_t*)0x50000b48 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT3(FLAG)(*(uint32_t*)0x50000b68 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT3(FLAG)(*(uint32_t*)0x50000b68 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x50000910 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x50000910 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x50000b10 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x50000b10 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x50000930 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x50000930 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x50000950 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x50000950 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x50000970 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x50000970 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS0(FLAG)(*(uint32_t*)0x50000918 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS0(FLAG)(*(uint32_t*)0x50000918 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS1(FLAG)(*(uint32_t*)0x50000938 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS1(FLAG)(*(uint32_t*)0x50000938 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS2(FLAG)(*(uint32_t*)0x50000958 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS2(FLAG)(*(uint32_t*)0x50000958 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS3(FLAG)(*(uint32_t*)0x50000978 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS3(FLAG)(*(uint32_t*)0x50000978 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x50000b30 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x50000b30 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x50000b50 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x50000b50 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x50000b70 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x50000b70 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL4(FLAG)(*(uint32_t*)0x50000980 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL4(FLAG)(*(uint32_t*)0x50000980 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT4(FLAG)(*(uint32_t*)0x50000988 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT4(FLAG)(*(uint32_t*)0x50000988 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x50000994 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x50000994 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS4(FLAG)(*(uint32_t*)0x5000099c &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS4(FLAG)(*(uint32_t*)0x5000099c |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL5(FLAG)(*(uint32_t*)0x500009a0 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL5(FLAG)(*(uint32_t*)0x500009a0 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT5(FLAG)(*(uint32_t*)0x500009a8 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT5(FLAG)(*(uint32_t*)0x500009a8 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55(FLAG)(*(uint32_t*)0x500009b0 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55(FLAG)(*(uint32_t*)0x500009b0 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS55(FLAG)(*(uint32_t*)0x500009b8 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS55(FLAG)(*(uint32_t*)0x500009b8 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL4(FLAG)(*(uint32_t*)0x50000b78 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL4(FLAG)(*(uint32_t*)0x50000b78 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT4(FLAG)(*(uint32_t*)0x50000b80 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT4(FLAG)(*(uint32_t*)0x50000b80 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x50000b88 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x50000b88 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL5(FLAG)(*(uint32_t*)0x50000b90 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL5(FLAG)(*(uint32_t*)0x50000b90 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT5(FLAG)(*(uint32_t*)0x50000b98 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT5(FLAG)(*(uint32_t*)0x50000b98 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x50000ba0 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x50000ba0 |= ~FLAG)
#define Set_OTG_FS_PWRCLK_OTG_FS_PCGCCTL(FLAG)(*(uint32_t*)0x50000e00 &= FLAG)
#define Clr_OTG_FS_PWRCLK_OTG_FS_PCGCCTL(FLAG)(*(uint32_t*)0x50000e00 |= ~FLAG)
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQSCS                (0x1 << 0)    // Session request success
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQ                   (0x1 << 1)    // Session request
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNGSCS                (0x1 << 8)    // Host negotiation success
　
　drivers/inc/stm32f767xx_GPIO.h
#define Get_GPIOK_AFRL(FLAG)                 (*(uint32_t*)0x40022820 |= FLAG)
#define Get_GPIOK_AFRH(FLAG)                 (*(uint32_t*)0x40022824 |= FLAG)
#define Get_GPIOK_BRR(FLAG)                  (*(uint32_t*)0x40022828 |= FLAG)
#define Set_GPIOA_MODER(FLAG)                (*(uint32_t*)0x40020000 &= FLAG)
#define Clr_GPIOA_MODER(FLAG)                (*(uint32_t*)0x40020000 |= ~FLAG)
#define Set_GPIOA_OTYPER(FLAG)               (*(uint32_t*)0x40020004 &= FLAG)
#define Clr_GPIOA_OTYPER(FLAG)               (*(uint32_t*)0x40020004 |= ~FLAG)
#define Set_GPIOA_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020008 &= FLAG)
#define Clr_GPIOA_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020008 |= ~FLAG)
#define Set_GPIOA_PUPDR(FLAG)                (*(uint32_t*)0x4002000c &= FLAG)
#define Clr_GPIOA_PUPDR(FLAG)                (*(uint32_t*)0x4002000c |= ~FLAG)
#define Set_GPIOA_IDR(FLAG)                  (*(uint32_t*)0x40020010 &= FLAG)
#define Clr_GPIOA_IDR(FLAG)                  (*(uint32_t*)0x40020010 |= ~FLAG)
#define Set_GPIOA_ODR(FLAG)                  (*(uint32_t*)0x40020014 &= FLAG)
#define Clr_GPIOA_ODR(FLAG)                  (*(uint32_t*)0x40020014 |= ~FLAG)
#define Set_GPIOA_BSRR(FLAG)                 (*(uint32_t*)0x40020018 &= FLAG)
#define Clr_GPIOA_BSRR(FLAG)                 (*(uint32_t*)0x40020018 |= ~FLAG)
#define Set_GPIOA_LCKR(FLAG)                 (*(uint32_t*)0x4002001c &= FLAG)
#define Clr_GPIOA_LCKR(FLAG)                 (*(uint32_t*)0x4002001c |= ~FLAG)
#define Set_GPIOA_AFRL(FLAG)                 (*(uint32_t*)0x40020020 &= FLAG)
#define Clr_GPIOA_AFRL(FLAG)                 (*(uint32_t*)0x40020020 |= ~FLAG)
#define Set_GPIOA_AFRH(FLAG)                 (*(uint32_t*)0x40020024 &= FLAG)
#define Clr_GPIOA_AFRH(FLAG)                 (*(uint32_t*)0x40020024 |= ~FLAG)
#define Set_GPIOA_BRR(FLAG)                  (*(uint32_t*)0x40020028 &= FLAG)
#define Clr_GPIOA_BRR(FLAG)                  (*(uint32_t*)0x40020028 |= ~FLAG)
#define Set_GPIOB_MODER(FLAG)                (*(uint32_t*)0x40020400 &= FLAG)
#define Clr_GPIOB_MODER(FLAG)                (*(uint32_t*)0x40020400 |= ~FLAG)
#define Set_GPIOB_OTYPER(FLAG)               (*(uint32_t*)0x40020404 &= FLAG)
#define Clr_GPIOB_OTYPER(FLAG)               (*(uint32_t*)0x40020404 |= ~FLAG)
#define Set_GPIOB_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020408 &= FLAG)
#define Clr_GPIOB_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020408 |= ~FLAG)
#define Set_GPIOB_PUPDR(FLAG)                (*(uint32_t*)0x4002040c &= FLAG)
#define Clr_GPIOB_PUPDR(FLAG)                (*(uint32_t*)0x4002040c |= ~FLAG)
#define Set_GPIOB_IDR(FLAG)                  (*(uint32_t*)0x40020410 &= FLAG)
#define Clr_GPIOB_IDR(FLAG)                  (*(uint32_t*)0x40020410 |= ~FLAG)
#define Set_GPIOB_ODR(FLAG)                  (*(uint32_t*)0x40020414 &= FLAG)
#define Clr_GPIOB_ODR(FLAG)                  (*(uint32_t*)0x40020414 |= ~FLAG)
#define Set_GPIOB_BSRR(FLAG)                 (*(uint32_t*)0x40020418 &= FLAG)
#define Clr_GPIOB_BSRR(FLAG)                 (*(uint32_t*)0x40020418 |= ~FLAG)
#define Set_GPIOB_LCKR(FLAG)                 (*(uint32_t*)0x4002041c &= FLAG)
#define Clr_GPIOB_LCKR(FLAG)                 (*(uint32_t*)0x4002041c |= ~FLAG)
#define Set_GPIOB_AFRL(FLAG)                 (*(uint32_t*)0x40020420 &= FLAG)
#define Clr_GPIOB_AFRL(FLAG)                 (*(uint32_t*)0x40020420 |= ~FLAG)
#define Set_GPIOB_AFRH(FLAG)                 (*(uint32_t*)0x40020424 &= FLAG)
#define Clr_GPIOB_AFRH(FLAG)                 (*(uint32_t*)0x40020424 |= ~FLAG)
#define Set_GPIOB_BRR(FLAG)                  (*(uint32_t*)0x40020428 &= FLAG)
#define Clr_GPIOB_BRR(FLAG)                  (*(uint32_t*)0x40020428 |= ~FLAG)
#define Set_GPIOC_MODER(FLAG)                (*(uint32_t*)0x40020800 &= FLAG)
#define Clr_GPIOC_MODER(FLAG)                (*(uint32_t*)0x40020800 |= ~FLAG)
#define Set_GPIOC_OTYPER(FLAG)               (*(uint32_t*)0x40020804 &= FLAG)
#define Clr_GPIOC_OTYPER(FLAG)               (*(uint32_t*)0x40020804 |= ~FLAG)
#define Set_GPIOC_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020808 &= FLAG)
#define Clr_GPIOC_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020808 |= ~FLAG)
#define Set_GPIOC_PUPDR(FLAG)                (*(uint32_t*)0x4002080c &= FLAG)
#define Clr_GPIOC_PUPDR(FLAG)                (*(uint32_t*)0x4002080c |= ~FLAG)
#define Set_GPIOC_IDR(FLAG)                  (*(uint32_t*)0x40020810 &= FLAG)
#define Clr_GPIOC_IDR(FLAG)                  (*(uint32_t*)0x40020810 |= ~FLAG)
#define Set_GPIOC_ODR(FLAG)                  (*(uint32_t*)0x40020814 &= FLAG)
#define Clr_GPIOC_ODR(FLAG)                  (*(uint32_t*)0x40020814 |= ~FLAG)
#define Set_GPIOC_BSRR(FLAG)                 (*(uint32_t*)0x40020818 &= FLAG)
#define Clr_GPIOC_BSRR(FLAG)                 (*(uint32_t*)0x40020818 |= ~FLAG)
#define Set_GPIOC_LCKR(FLAG)                 (*(uint32_t*)0x4002081c &= FLAG)
#define Clr_GPIOC_LCKR(FLAG)                 (*(uint32_t*)0x4002081c |= ~FLAG)
#define Set_GPIOC_AFRL(FLAG)                 (*(uint32_t*)0x40020820 &= FLAG)
#define Clr_GPIOC_AFRL(FLAG)                 (*(uint32_t*)0x40020820 |= ~FLAG)
#define Set_GPIOC_AFRH(FLAG)                 (*(uint32_t*)0x40020824 &= FLAG)
#define Clr_GPIOC_AFRH(FLAG)                 (*(uint32_t*)0x40020824 |= ~FLAG)
#define Set_GPIOC_BRR(FLAG)                  (*(uint32_t*)0x40020828 &= FLAG)
#define Clr_GPIOC_BRR(FLAG)                  (*(uint32_t*)0x40020828 |= ~FLAG)
#define Set_GPIOD_MODER(FLAG)                (*(uint32_t*)0x40020c00 &= FLAG)
#define Clr_GPIOD_MODER(FLAG)                (*(uint32_t*)0x40020c00 |= ~FLAG)
#define Set_GPIOD_OTYPER(FLAG)               (*(uint32_t*)0x40020c04 &= FLAG)
#define Clr_GPIOD_OTYPER(FLAG)               (*(uint32_t*)0x40020c04 |= ~FLAG)
#define Set_GPIOD_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020c08 &= FLAG)
#define Clr_GPIOD_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020c08 |= ~FLAG)
#define Set_GPIOD_PUPDR(FLAG)                (*(uint32_t*)0x40020c0c &= FLAG)
#define Clr_GPIOD_PUPDR(FLAG)                (*(uint32_t*)0x40020c0c |= ~FLAG)
#define Set_GPIOD_IDR(FLAG)                  (*(uint32_t*)0x40020c10 &= FLAG)
#define Clr_GPIOD_IDR(FLAG)                  (*(uint32_t*)0x40020c10 |= ~FLAG)
#define Set_GPIOD_ODR(FLAG)                  (*(uint32_t*)0x40020c14 &= FLAG)
#define Clr_GPIOD_ODR(FLAG)                  (*(uint32_t*)0x40020c14 |= ~FLAG)
#define Set_GPIOD_BSRR(FLAG)                 (*(uint32_t*)0x40020c18 &= FLAG)
#define Clr_GPIOD_BSRR(FLAG)                 (*(uint32_t*)0x40020c18 |= ~FLAG)
#define Set_GPIOD_LCKR(FLAG)                 (*(uint32_t*)0x40020c1c &= FLAG)
#define Clr_GPIOD_LCKR(FLAG)                 (*(uint32_t*)0x40020c1c |= ~FLAG)
#define Set_GPIOD_AFRL(FLAG)                 (*(uint32_t*)0x40020c20 &= FLAG)
#define Clr_GPIOD_AFRL(FLAG)                 (*(uint32_t*)0x40020c20 |= ~FLAG)
#define Set_GPIOD_AFRH(FLAG)                 (*(uint32_t*)0x40020c24 &= FLAG)
#define Clr_GPIOD_AFRH(FLAG)                 (*(uint32_t*)0x40020c24 |= ~FLAG)
#define Set_GPIOD_BRR(FLAG)                  (*(uint32_t*)0x40020c28 &= FLAG)
#define Clr_GPIOD_BRR(FLAG)                  (*(uint32_t*)0x40020c28 |= ~FLAG)
#define Set_GPIOE_MODER(FLAG)                (*(uint32_t*)0x40021000 &= FLAG)
#define Clr_GPIOE_MODER(FLAG)                (*(uint32_t*)0x40021000 |= ~FLAG)
#define Set_GPIOE_OTYPER(FLAG)               (*(uint32_t*)0x40021004 &= FLAG)
#define Clr_GPIOE_OTYPER(FLAG)               (*(uint32_t*)0x40021004 |= ~FLAG)
#define Set_GPIOE_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021008 &= FLAG)
#define Clr_GPIOE_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021008 |= ~FLAG)
#define Set_GPIOE_PUPDR(FLAG)                (*(uint32_t*)0x4002100c &= FLAG)
#define Clr_GPIOE_PUPDR(FLAG)                (*(uint32_t*)0x4002100c |= ~FLAG)
#define Set_GPIOE_IDR(FLAG)                  (*(uint32_t*)0x40021010 &= FLAG)
#define Clr_GPIOE_IDR(FLAG)                  (*(uint32_t*)0x40021010 |= ~FLAG)
#define Set_GPIOE_ODR(FLAG)                  (*(uint32_t*)0x40021014 &= FLAG)
#define Clr_GPIOE_ODR(FLAG)                  (*(uint32_t*)0x40021014 |= ~FLAG)
#define Set_GPIOE_BSRR(FLAG)                 (*(uint32_t*)0x40021018 &= FLAG)
#define Clr_GPIOE_BSRR(FLAG)                 (*(uint32_t*)0x40021018 |= ~FLAG)
#define Set_GPIOE_LCKR(FLAG)                 (*(uint32_t*)0x4002101c &= FLAG)
#define Clr_GPIOE_LCKR(FLAG)                 (*(uint32_t*)0x4002101c |= ~FLAG)
#define Set_GPIOE_AFRL(FLAG)                 (*(uint32_t*)0x40021020 &= FLAG)
#define Clr_GPIOE_AFRL(FLAG)                 (*(uint32_t*)0x40021020 |= ~FLAG)
#define Set_GPIOE_AFRH(FLAG)                 (*(uint32_t*)0x40021024 &= FLAG)
#define Clr_GPIOE_AFRH(FLAG)                 (*(uint32_t*)0x40021024 |= ~FLAG)
#define Set_GPIOE_BRR(FLAG)                  (*(uint32_t*)0x40021028 &= FLAG)
#define Clr_GPIOE_BRR(FLAG)                  (*(uint32_t*)0x40021028 |= ~FLAG)
#define Set_GPIOF_MODER(FLAG)                (*(uint32_t*)0x40021400 &= FLAG)
#define Clr_GPIOF_MODER(FLAG)                (*(uint32_t*)0x40021400 |= ~FLAG)
#define Set_GPIOF_OTYPER(FLAG)               (*(uint32_t*)0x40021404 &= FLAG)
#define Clr_GPIOF_OTYPER(FLAG)               (*(uint32_t*)0x40021404 |= ~FLAG)
#define Set_GPIOF_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021408 &= FLAG)
#define Clr_GPIOF_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021408 |= ~FLAG)
#define Set_GPIOF_PUPDR(FLAG)                (*(uint32_t*)0x4002140c &= FLAG)
#define Clr_GPIOF_PUPDR(FLAG)                (*(uint32_t*)0x4002140c |= ~FLAG)
#define Set_GPIOF_IDR(FLAG)                  (*(uint32_t*)0x40021410 &= FLAG)
#define Clr_GPIOF_IDR(FLAG)                  (*(uint32_t*)0x40021410 |= ~FLAG)
#define Set_GPIOF_ODR(FLAG)                  (*(uint32_t*)0x40021414 &= FLAG)
#define Clr_GPIOF_ODR(FLAG)                  (*(uint32_t*)0x40021414 |= ~FLAG)
#define Set_GPIOF_BSRR(FLAG)                 (*(uint32_t*)0x40021418 &= FLAG)
#define Clr_GPIOF_BSRR(FLAG)                 (*(uint32_t*)0x40021418 |= ~FLAG)
#define Set_GPIOF_LCKR(FLAG)                 (*(uint32_t*)0x4002141c &= FLAG)
#define Clr_GPIOF_LCKR(FLAG)                 (*(uint32_t*)0x4002141c |= ~FLAG)
#define Set_GPIOF_AFRL(FLAG)                 (*(uint32_t*)0x40021420 &= FLAG)
#define Clr_GPIOF_AFRL(FLAG)                 (*(uint32_t*)0x40021420 |= ~FLAG)
#define Set_GPIOF_AFRH(FLAG)                 (*(uint32_t*)0x40021424 &= FLAG)
#define Clr_GPIOF_AFRH(FLAG)                 (*(uint32_t*)0x40021424 |= ~FLAG)
#define Set_GPIOF_BRR(FLAG)                  (*(uint32_t*)0x40021428 &= FLAG)
#define Clr_GPIOF_BRR(FLAG)                  (*(uint32_t*)0x40021428 |= ~FLAG)
#define Set_GPIOG_MODER(FLAG)                (*(uint32_t*)0x40021800 &= FLAG)
#define Clr_GPIOG_MODER(FLAG)                (*(uint32_t*)0x40021800 |= ~FLAG)
#define Set_GPIOG_OTYPER(FLAG)               (*(uint32_t*)0x40021804 &= FLAG)
#define Clr_GPIOG_OTYPER(FLAG)               (*(uint32_t*)0x40021804 |= ~FLAG)
#define Set_GPIOG_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021808 &= FLAG)
#define Clr_GPIOG_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021808 |= ~FLAG)
#define Set_GPIOG_PUPDR(FLAG)                (*(uint32_t*)0x4002180c &= FLAG)
#define Clr_GPIOG_PUPDR(FLAG)                (*(uint32_t*)0x4002180c |= ~FLAG)
#define Set_GPIOG_IDR(FLAG)                  (*(uint32_t*)0x40021810 &= FLAG)
#define Clr_GPIOG_IDR(FLAG)                  (*(uint32_t*)0x40021810 |= ~FLAG)
#define Set_GPIOG_ODR(FLAG)                  (*(uint32_t*)0x40021814 &= FLAG)
#define Clr_GPIOG_ODR(FLAG)                  (*(uint32_t*)0x40021814 |= ~FLAG)
#define Set_GPIOG_BSRR(FLAG)                 (*(uint32_t*)0x40021818 &= FLAG)
#define Clr_GPIOG_BSRR(FLAG)                 (*(uint32_t*)0x40021818 |= ~FLAG)
#define Set_GPIOG_LCKR(FLAG)                 (*(uint32_t*)0x4002181c &= FLAG)
#define Clr_GPIOG_LCKR(FLAG)                 (*(uint32_t*)0x4002181c |= ~FLAG)
#define Set_GPIOG_AFRL(FLAG)                 (*(uint32_t*)0x40021820 &= FLAG)
#define Clr_GPIOG_AFRL(FLAG)                 (*(uint32_t*)0x40021820 |= ~FLAG)
#define Set_GPIOG_AFRH(FLAG)                 (*(uint32_t*)0x40021824 &= FLAG)
#define Clr_GPIOG_AFRH(FLAG)                 (*(uint32_t*)0x40021824 |= ~FLAG)
#define Set_GPIOG_BRR(FLAG)                  (*(uint32_t*)0x40021828 &= FLAG)
#define Clr_GPIOG_BRR(FLAG)                  (*(uint32_t*)0x40021828 |= ~FLAG)
#define Set_GPIOH_MODER(FLAG)                (*(uint32_t*)0x40021c00 &= FLAG)
#define Clr_GPIOH_MODER(FLAG)                (*(uint32_t*)0x40021c00 |= ~FLAG)
#define Set_GPIOH_OTYPER(FLAG)               (*(uint32_t*)0x40021c04 &= FLAG)
#define Clr_GPIOH_OTYPER(FLAG)               (*(uint32_t*)0x40021c04 |= ~FLAG)
#define Set_GPIOH_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021c08 &= FLAG)
#define Clr_GPIOH_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021c08 |= ~FLAG)
#define Set_GPIOH_PUPDR(FLAG)                (*(uint32_t*)0x40021c0c &= FLAG)
#define Clr_GPIOH_PUPDR(FLAG)                (*(uint32_t*)0x40021c0c |= ~FLAG)
#define Set_GPIOH_IDR(FLAG)                  (*(uint32_t*)0x40021c10 &= FLAG)
#define Clr_GPIOH_IDR(FLAG)                  (*(uint32_t*)0x40021c10 |= ~FLAG)
#define Set_GPIOH_ODR(FLAG)                  (*(uint32_t*)0x40021c14 &= FLAG)
#define Clr_GPIOH_ODR(FLAG)                  (*(uint32_t*)0x40021c14 |= ~FLAG)
#define Set_GPIOH_BSRR(FLAG)                 (*(uint32_t*)0x40021c18 &= FLAG)
#define Clr_GPIOH_BSRR(FLAG)                 (*(uint32_t*)0x40021c18 |= ~FLAG)
#define Set_GPIOH_LCKR(FLAG)                 (*(uint32_t*)0x40021c1c &= FLAG)
#define Clr_GPIOH_LCKR(FLAG)                 (*(uint32_t*)0x40021c1c |= ~FLAG)
#define Set_GPIOH_AFRL(FLAG)                 (*(uint32_t*)0x40021c20 &= FLAG)
#define Clr_GPIOH_AFRL(FLAG)                 (*(uint32_t*)0x40021c20 |= ~FLAG)
#define Set_GPIOH_AFRH(FLAG)                 (*(uint32_t*)0x40021c24 &= FLAG)
#define Clr_GPIOH_AFRH(FLAG)                 (*(uint32_t*)0x40021c24 |= ~FLAG)
#define Set_GPIOH_BRR(FLAG)                  (*(uint32_t*)0x40021c28 &= FLAG)
#define Clr_GPIOH_BRR(FLAG)                  (*(uint32_t*)0x40021c28 |= ~FLAG)
#define Set_GPIOI_MODER(FLAG)                (*(uint32_t*)0x40022000 &= FLAG)
#define Clr_GPIOI_MODER(FLAG)                (*(uint32_t*)0x40022000 |= ~FLAG)
#define Set_GPIOI_OTYPER(FLAG)               (*(uint32_t*)0x40022004 &= FLAG)
#define Clr_GPIOI_OTYPER(FLAG)               (*(uint32_t*)0x40022004 |= ~FLAG)
#define Set_GPIOI_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022008 &= FLAG)
#define Clr_GPIOI_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022008 |= ~FLAG)
#define Set_GPIOI_PUPDR(FLAG)                (*(uint32_t*)0x4002200c &= FLAG)
#define Clr_GPIOI_PUPDR(FLAG)                (*(uint32_t*)0x4002200c |= ~FLAG)
#define Set_GPIOI_IDR(FLAG)                  (*(uint32_t*)0x40022010 &= FLAG)
#define Clr_GPIOI_IDR(FLAG)                  (*(uint32_t*)0x40022010 |= ~FLAG)
#define Set_GPIOI_ODR(FLAG)                  (*(uint32_t*)0x40022014 &= FLAG)
#define Clr_GPIOI_ODR(FLAG)                  (*(uint32_t*)0x40022014 |= ~FLAG)
#define Set_GPIOI_BSRR(FLAG)                 (*(uint32_t*)0x40022018 &= FLAG)
#define Clr_GPIOI_BSRR(FLAG)                 (*(uint32_t*)0x40022018 |= ~FLAG)
#define Set_GPIOI_LCKR(FLAG)                 (*(uint32_t*)0x4002201c &= FLAG)
#define Clr_GPIOI_LCKR(FLAG)                 (*(uint32_t*)0x4002201c |= ~FLAG)
#define Set_GPIOI_AFRL(FLAG)                 (*(uint32_t*)0x40022020 &= FLAG)
#define Clr_GPIOI_AFRL(FLAG)                 (*(uint32_t*)0x40022020 |= ~FLAG)
#define Set_GPIOI_AFRH(FLAG)                 (*(uint32_t*)0x40022024 &= FLAG)
#define Clr_GPIOI_AFRH(FLAG)                 (*(uint32_t*)0x40022024 |= ~FLAG)
#define Set_GPIOI_BRR(FLAG)                  (*(uint32_t*)0x40022028 &= FLAG)
#define Clr_GPIOI_BRR(FLAG)                  (*(uint32_t*)0x40022028 |= ~FLAG)
#define Set_GPIOJ_MODER(FLAG)                (*(uint32_t*)0x40022400 &= FLAG)
#define Clr_GPIOJ_MODER(FLAG)                (*(uint32_t*)0x40022400 |= ~FLAG)
#define Set_GPIOJ_OTYPER(FLAG)               (*(uint32_t*)0x40022404 &= FLAG)
#define Clr_GPIOJ_OTYPER(FLAG)               (*(uint32_t*)0x40022404 |= ~FLAG)
#define Set_GPIOJ_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022408 &= FLAG)
#define Clr_GPIOJ_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022408 |= ~FLAG)
#define Set_GPIOJ_PUPDR(FLAG)                (*(uint32_t*)0x4002240c &= FLAG)
#define Clr_GPIOJ_PUPDR(FLAG)                (*(uint32_t*)0x4002240c |= ~FLAG)
#define Set_GPIOJ_IDR(FLAG)                  (*(uint32_t*)0x40022410 &= FLAG)
#define Clr_GPIOJ_IDR(FLAG)                  (*(uint32_t*)0x40022410 |= ~FLAG)
#define Set_GPIOJ_ODR(FLAG)                  (*(uint32_t*)0x40022414 &= FLAG)
#define Clr_GPIOJ_ODR(FLAG)                  (*(uint32_t*)0x40022414 |= ~FLAG)
#define Set_GPIOJ_BSRR(FLAG)                 (*(uint32_t*)0x40022418 &= FLAG)
#define Clr_GPIOJ_BSRR(FLAG)                 (*(uint32_t*)0x40022418 |= ~FLAG)
#define Set_GPIOJ_LCKR(FLAG)                 (*(uint32_t*)0x4002241c &= FLAG)
#define Clr_GPIOJ_LCKR(FLAG)                 (*(uint32_t*)0x4002241c |= ~FLAG)
#define Set_GPIOJ_AFRL(FLAG)                 (*(uint32_t*)0x40022420 &= FLAG)
#define Clr_GPIOJ_AFRL(FLAG)                 (*(uint32_t*)0x40022420 |= ~FLAG)
#define Set_GPIOJ_AFRH(FLAG)                 (*(uint32_t*)0x40022424 &= FLAG)
#define Clr_GPIOJ_AFRH(FLAG)                 (*(uint32_t*)0x40022424 |= ~FLAG)
#define Set_GPIOJ_BRR(FLAG)                  (*(uint32_t*)0x40022428 &= FLAG)
#define Clr_GPIOJ_BRR(FLAG)                  (*(uint32_t*)0x40022428 |= ~FLAG)
#define Set_GPIOK_MODER(FLAG)                (*(uint32_t*)0x40022800 &= FLAG)
#define Clr_GPIOK_MODER(FLAG)                (*(uint32_t*)0x40022800 |= ~FLAG)
#define Set_GPIOK_OTYPER(FLAG)               (*(uint32_t*)0x40022804 &= FLAG)
#define Clr_GPIOK_OTYPER(FLAG)               (*(uint32_t*)0x40022804 |= ~FLAG)
#define Set_GPIOK_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022808 &= FLAG)
#define Clr_GPIOK_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022808 |= ~FLAG)
#define Set_GPIOK_PUPDR(FLAG)                (*(uint32_t*)0x4002280c &= FLAG)
#define Clr_GPIOK_PUPDR(FLAG)                (*(uint32_t*)0x4002280c |= ~FLAG)
#define Set_GPIOK_IDR(FLAG)                  (*(uint32_t*)0x40022810 &= FLAG)
#define Clr_GPIOK_IDR(FLAG)                  (*(uint32_t*)0x40022810 |= ~FLAG)
#define Set_GPIOK_ODR(FLAG)                  (*(uint32_t*)0x40022814 &= FLAG)
#define Clr_GPIOK_ODR(FLAG)                  (*(uint32_t*)0x40022814 |= ~FLAG)
#define Set_GPIOK_BSRR(FLAG)                 (*(uint32_t*)0x40022818 &= FLAG)
#define Clr_GPIOK_BSRR(FLAG)                 (*(uint32_t*)0x40022818 |= ~FLAG)
#define Set_GPIOK_LCKR(FLAG)                 (*(uint32_t*)0x4002281c &= FLAG)
#define Clr_GPIOK_LCKR(FLAG)                 (*(uint32_t*)0x4002281c |= ~FLAG)
#define Set_GPIOK_AFRL(FLAG)                 (*(uint32_t*)0x40022820 &= FLAG)
#define Clr_GPIOK_AFRL(FLAG)                 (*(uint32_t*)0x40022820 |= ~FLAG)
#define Set_GPIOK_AFRH(FLAG)                 (*(uint32_t*)0x40022824 &= FLAG)
#define Clr_GPIOK_AFRH(FLAG)                 (*(uint32_t*)0x40022824 |= ~FLAG)
#define Set_GPIOK_BRR(FLAG)                  (*(uint32_t*)0x40022828 &= FLAG)
#define Clr_GPIOK_BRR(FLAG)                  (*(uint32_t*)0x40022828 |= ~FLAG)
#define  _GPIOA_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
　
　drivers/inc/stm32f767xx_SCB.h
#define Get_SCB_HFSR(FLAG)                   (*(uint32_t*)0xe000ed2c |= FLAG)
#define Get_SCB_MMFAR(FLAG)                  (*(uint32_t*)0xe000ed34 |= FLAG)
#define Get_SCB_BFAR(FLAG)                   (*(uint32_t*)0xe000ed38 |= FLAG)
#define Set_SCB_ACTRL_ACTRL(FLAG)            (*(uint32_t*)0xe000e008 &= FLAG)
#define Clr_SCB_ACTRL_ACTRL(FLAG)            (*(uint32_t*)0xe000e008 |= ~FLAG)
#define Set_SCB_CPUID(FLAG)                  (*(uint32_t*)0xe000ed00 &= FLAG)
#define Clr_SCB_CPUID(FLAG)                  (*(uint32_t*)0xe000ed00 |= ~FLAG)
#define Set_SCB_ICSR(FLAG)                   (*(uint32_t*)0xe000ed04 &= FLAG)
#define Clr_SCB_ICSR(FLAG)                   (*(uint32_t*)0xe000ed04 |= ~FLAG)
#define Set_SCB_VTOR(FLAG)                   (*(uint32_t*)0xe000ed08 &= FLAG)
#define Clr_SCB_VTOR(FLAG)                   (*(uint32_t*)0xe000ed08 |= ~FLAG)
#define Set_SCB_AIRCR(FLAG)                  (*(uint32_t*)0xe000ed0c &= FLAG)
#define Clr_SCB_AIRCR(FLAG)                  (*(uint32_t*)0xe000ed0c |= ~FLAG)
#define Set_SCB_SCR(FLAG)                    (*(uint32_t*)0xe000ed10 &= FLAG)
#define Clr_SCB_SCR(FLAG)                    (*(uint32_t*)0xe000ed10 |= ~FLAG)
#define Set_SCB_CCR(FLAG)                    (*(uint32_t*)0xe000ed14 &= FLAG)
#define Clr_SCB_CCR(FLAG)                    (*(uint32_t*)0xe000ed14 |= ~FLAG)
#define Set_SCB_SHPR1(FLAG)                  (*(uint32_t*)0xe000ed18 &= FLAG)
#define Clr_SCB_SHPR1(FLAG)                  (*(uint32_t*)0xe000ed18 |= ~FLAG)
#define Set_SCB_SHPR2(FLAG)                  (*(uint32_t*)0xe000ed1c &= FLAG)
#define Clr_SCB_SHPR2(FLAG)                  (*(uint32_t*)0xe000ed1c |= ~FLAG)
#define Set_SCB_SHPR3(FLAG)                  (*(uint32_t*)0xe000ed20 &= FLAG)
#define Clr_SCB_SHPR3(FLAG)                  (*(uint32_t*)0xe000ed20 |= ~FLAG)
#define Set_SCB_SHCSR(FLAG)                  (*(uint32_t*)0xe000ed24 &= FLAG)
#define Clr_SCB_SHCSR(FLAG)                  (*(uint32_t*)0xe000ed24 |= ~FLAG)
#define Set_SCB_CFSR_UFSR_BFSR_MMFSR(FLAG)   (*(uint32_t*)0xe000ed28 &= FLAG)
#define Clr_SCB_CFSR_UFSR_BFSR_MMFSR(FLAG)   (*(uint32_t*)0xe000ed28 |= ~FLAG)
#define Set_SCB_HFSR(FLAG)                   (*(uint32_t*)0xe000ed2c &= FLAG)
#define Clr_SCB_HFSR(FLAG)                   (*(uint32_t*)0xe000ed2c |= ~FLAG)
#define Set_SCB_MMFAR(FLAG)                  (*(uint32_t*)0xe000ed34 &= FLAG)
#define Clr_SCB_MMFAR(FLAG)                  (*(uint32_t*)0xe000ed34 |= ~FLAG)
#define Set_SCB_BFAR(FLAG)                   (*(uint32_t*)0xe000ed38 &= FLAG)
#define Clr_SCB_BFAR(FLAG)                   (*(uint32_t*)0xe000ed38 |= ~FLAG)
#define  _SCB_ACTRL_ACTRL_DISFOLD                            (0x1 << 2)    // DISFOLD
#define  _SCB_ACTRL_ACTRL_FPEXCODIS                          (0x1 << 10)    // FPEXCODIS
#define  _SCB_ACTRL_ACTRL_DISRAMODE                          (0x1 << 11)    // DISRAMODE
　
　drivers/inc/stm32f767xx_PWR.h
#define Get_PWR_CSR1(FLAG)                   (*(uint32_t*)0x40007004 |= FLAG)
#define Get_PWR_CR2(FLAG)                    (*(uint32_t*)0x40007008 |= FLAG)
#define Get_PWR_CSR2(FLAG)                   (*(uint32_t*)0x4000700c |= FLAG)
#define Set_PWR_CR1(FLAG)                    (*(uint32_t*)0x40007000 &= FLAG)
#define Clr_PWR_CR1(FLAG)                    (*(uint32_t*)0x40007000 |= ~FLAG)
#define Set_PWR_CSR1(FLAG)                   (*(uint32_t*)0x40007004 &= FLAG)
#define Clr_PWR_CSR1(FLAG)                   (*(uint32_t*)0x40007004 |= ~FLAG)
#define Set_PWR_CR2(FLAG)                    (*(uint32_t*)0x40007008 &= FLAG)
#define Clr_PWR_CR2(FLAG)                    (*(uint32_t*)0x40007008 |= ~FLAG)
#define Set_PWR_CSR2(FLAG)                   (*(uint32_t*)0x4000700c &= FLAG)
#define Clr_PWR_CSR2(FLAG)                   (*(uint32_t*)0x4000700c |= ~FLAG)
#define  _PWR_CR1_LPDS                                       (0x1 << 0)    // Low-power deep sleep
#define  _PWR_CR1_PDDS                                       (0x1 << 1)    // Power down deepsleep
#define  _PWR_CR1_CSBF                                       (0x1 << 3)    // Clear standby flag
　
　drivers/inc/stm32f767xx_LTDC.h
#define Get_LTCD_L2CFBLR(FLAG)               (*(uint32_t*)0x40016930 |= FLAG)
#define Get_LTCD_L2CFBLNR(FLAG)              (*(uint32_t*)0x40016934 |= FLAG)
#define Get_LTCD_L2CLUTWR(FLAG)              (*(uint32_t*)0x40016944 |= FLAG)
#define Set_LTCD_SSCR(FLAG)                  (*(uint32_t*)0x40016808 &= FLAG)
#define Clr_LTCD_SSCR(FLAG)                  (*(uint32_t*)0x40016808 |= ~FLAG)
#define Set_LTCD_BPCR(FLAG)                  (*(uint32_t*)0x4001680c &= FLAG)
#define Clr_LTCD_BPCR(FLAG)                  (*(uint32_t*)0x4001680c |= ~FLAG)
#define Set_LTCD_AWCR(FLAG)                  (*(uint32_t*)0x40016810 &= FLAG)
#define Clr_LTCD_AWCR(FLAG)                  (*(uint32_t*)0x40016810 |= ~FLAG)
#define Set_LTCD_TWCR(FLAG)                  (*(uint32_t*)0x40016814 &= FLAG)
#define Clr_LTCD_TWCR(FLAG)                  (*(uint32_t*)0x40016814 |= ~FLAG)
#define Set_LTCD_GCR(FLAG)                   (*(uint32_t*)0x40016818 &= FLAG)
#define Clr_LTCD_GCR(FLAG)                   (*(uint32_t*)0x40016818 |= ~FLAG)
#define Set_LTCD_SRCR(FLAG)                  (*(uint32_t*)0x40016824 &= FLAG)
#define Clr_LTCD_SRCR(FLAG)                  (*(uint32_t*)0x40016824 |= ~FLAG)
#define Set_LTCD_BCCR(FLAG)                  (*(uint32_t*)0x4001682c &= FLAG)
#define Clr_LTCD_BCCR(FLAG)                  (*(uint32_t*)0x4001682c |= ~FLAG)
#define Set_LTCD_IER(FLAG)                   (*(uint32_t*)0x40016834 &= FLAG)
#define Clr_LTCD_IER(FLAG)                   (*(uint32_t*)0x40016834 |= ~FLAG)
#define Set_LTCD_ISR(FLAG)                   (*(uint32_t*)0x40016838 &= FLAG)
#define Clr_LTCD_ISR(FLAG)                   (*(uint32_t*)0x40016838 |= ~FLAG)
#define Set_LTCD_ICR(FLAG)                   (*(uint32_t*)0x4001683c &= FLAG)
#define Clr_LTCD_ICR(FLAG)                   (*(uint32_t*)0x4001683c |= ~FLAG)
#define Set_LTCD_LIPCR(FLAG)                 (*(uint32_t*)0x40016840 &= FLAG)
#define Clr_LTCD_LIPCR(FLAG)                 (*(uint32_t*)0x40016840 |= ~FLAG)
#define Set_LTCD_CPSR(FLAG)                  (*(uint32_t*)0x40016844 &= FLAG)
#define Clr_LTCD_CPSR(FLAG)                  (*(uint32_t*)0x40016844 |= ~FLAG)
#define Set_LTCD_CDSR(FLAG)                  (*(uint32_t*)0x40016848 &= FLAG)
#define Clr_LTCD_CDSR(FLAG)                  (*(uint32_t*)0x40016848 |= ~FLAG)
#define Set_LTCD_L1CR(FLAG)                  (*(uint32_t*)0x40016884 &= FLAG)
#define Clr_LTCD_L1CR(FLAG)                  (*(uint32_t*)0x40016884 |= ~FLAG)
#define Set_LTCD_L1WHPCR(FLAG)               (*(uint32_t*)0x40016888 &= FLAG)
#define Clr_LTCD_L1WHPCR(FLAG)               (*(uint32_t*)0x40016888 |= ~FLAG)
#define Set_LTCD_L1WVPCR(FLAG)               (*(uint32_t*)0x4001688c &= FLAG)
#define Clr_LTCD_L1WVPCR(FLAG)               (*(uint32_t*)0x4001688c |= ~FLAG)
#define Set_LTCD_L1CKCR(FLAG)                (*(uint32_t*)0x40016890 &= FLAG)
#define Clr_LTCD_L1CKCR(FLAG)                (*(uint32_t*)0x40016890 |= ~FLAG)
#define Set_LTCD_L1PFCR(FLAG)                (*(uint32_t*)0x40016894 &= FLAG)
#define Clr_LTCD_L1PFCR(FLAG)                (*(uint32_t*)0x40016894 |= ~FLAG)
#define Set_LTCD_L1CACR(FLAG)                (*(uint32_t*)0x40016898 &= FLAG)
#define Clr_LTCD_L1CACR(FLAG)                (*(uint32_t*)0x40016898 |= ~FLAG)
#define Set_LTCD_L1DCCR(FLAG)                (*(uint32_t*)0x4001689c &= FLAG)
#define Clr_LTCD_L1DCCR(FLAG)                (*(uint32_t*)0x4001689c |= ~FLAG)
#define Set_LTCD_L1BFCR(FLAG)                (*(uint32_t*)0x400168a0 &= FLAG)
#define Clr_LTCD_L1BFCR(FLAG)                (*(uint32_t*)0x400168a0 |= ~FLAG)
#define Set_LTCD_L1CFBAR(FLAG)               (*(uint32_t*)0x400168ac &= FLAG)
#define Clr_LTCD_L1CFBAR(FLAG)               (*(uint32_t*)0x400168ac |= ~FLAG)
#define Set_LTCD_L1CFBLR(FLAG)               (*(uint32_t*)0x400168b0 &= FLAG)
#define Clr_LTCD_L1CFBLR(FLAG)               (*(uint32_t*)0x400168b0 |= ~FLAG)
#define Set_LTCD_L1CFBLNR(FLAG)              (*(uint32_t*)0x400168b4 &= FLAG)
#define Clr_LTCD_L1CFBLNR(FLAG)              (*(uint32_t*)0x400168b4 |= ~FLAG)
#define Set_LTCD_L1CLUTWR(FLAG)              (*(uint32_t*)0x400168c4 &= FLAG)
#define Clr_LTCD_L1CLUTWR(FLAG)              (*(uint32_t*)0x400168c4 |= ~FLAG)
#define Set_LTCD_L2CR(FLAG)                  (*(uint32_t*)0x40016904 &= FLAG)
#define Clr_LTCD_L2CR(FLAG)                  (*(uint32_t*)0x40016904 |= ~FLAG)
#define Set_LTCD_L2WHPCR(FLAG)               (*(uint32_t*)0x40016908 &= FLAG)
#define Clr_LTCD_L2WHPCR(FLAG)               (*(uint32_t*)0x40016908 |= ~FLAG)
#define Set_LTCD_L2WVPCR(FLAG)               (*(uint32_t*)0x4001690c &= FLAG)
#define Clr_LTCD_L2WVPCR(FLAG)               (*(uint32_t*)0x4001690c |= ~FLAG)
#define Set_LTCD_L2CKCR(FLAG)                (*(uint32_t*)0x40016910 &= FLAG)
#define Clr_LTCD_L2CKCR(FLAG)                (*(uint32_t*)0x40016910 |= ~FLAG)
#define Set_LTCD_L2PFCR(FLAG)                (*(uint32_t*)0x40016914 &= FLAG)
#define Clr_LTCD_L2PFCR(FLAG)                (*(uint32_t*)0x40016914 |= ~FLAG)
#define Set_LTCD_L2CACR(FLAG)                (*(uint32_t*)0x40016918 &= FLAG)
#define Clr_LTCD_L2CACR(FLAG)                (*(uint32_t*)0x40016918 |= ~FLAG)
#define Set_LTCD_L2DCCR(FLAG)                (*(uint32_t*)0x4001691c &= FLAG)
#define Clr_LTCD_L2DCCR(FLAG)                (*(uint32_t*)0x4001691c |= ~FLAG)
#define Set_LTCD_L2BFCR(FLAG)                (*(uint32_t*)0x40016920 &= FLAG)
#define Clr_LTCD_L2BFCR(FLAG)                (*(uint32_t*)0x40016920 |= ~FLAG)
#define Set_LTCD_L2CFBAR(FLAG)               (*(uint32_t*)0x4001692c &= FLAG)
#define Clr_LTCD_L2CFBAR(FLAG)               (*(uint32_t*)0x4001692c |= ~FLAG)
#define Set_LTCD_L2CFBLR(FLAG)               (*(uint32_t*)0x40016930 &= FLAG)
#define Clr_LTCD_L2CFBLR(FLAG)               (*(uint32_t*)0x40016930 |= ~FLAG)
#define Set_LTCD_L2CFBLNR(FLAG)              (*(uint32_t*)0x40016934 &= FLAG)
#define Clr_LTCD_L2CFBLNR(FLAG)              (*(uint32_t*)0x40016934 |= ~FLAG)
#define Set_LTCD_L2CLUTWR(FLAG)              (*(uint32_t*)0x40016944 &= FLAG)
#define Clr_LTCD_L2CLUTWR(FLAG)              (*(uint32_t*)0x40016944 |= ~FLAG)
#define  _LTCD_SSCR_HSW                                      (0x3ff << 16)    // Horizontal Synchronization Width (in units of pixel clock period)
#define  _LTCD_SSCR_VSH                                      (0x7ff << 0)    // Vertical Synchronization Height (in units of horizontal scan line)
#define  _LTCD_BPCR_AHBP                                     (0x3ff << 16)    // Accumulated Horizontal back porch (in units of pixel clock period)
　
　drivers/inc/stm32f767xx_SPI.h
#define Get_SPI6_TXCRCR(FLAG)                (*(uint32_t*)0x40015418 |= FLAG)
#define Get_SPI6_I2SCFGR(FLAG)               (*(uint32_t*)0x4001541c |= FLAG)
#define Get_SPI6_I2SPR(FLAG)                 (*(uint32_t*)0x40015420 |= FLAG)
#define Set_SPI2_CR1(FLAG)                   (*(uint32_t*)0x40003800 &= FLAG)
#define Clr_SPI2_CR1(FLAG)                   (*(uint32_t*)0x40003800 |= ~FLAG)
#define Set_SPI2_CR2(FLAG)                   (*(uint32_t*)0x40003804 &= FLAG)
#define Clr_SPI2_CR2(FLAG)                   (*(uint32_t*)0x40003804 |= ~FLAG)
#define Set_SPI2_SR(FLAG)                    (*(uint32_t*)0x40003808 &= FLAG)
#define Clr_SPI2_SR(FLAG)                    (*(uint32_t*)0x40003808 |= ~FLAG)
#define Set_SPI2_DR(FLAG)                    (*(uint32_t*)0x4000380c &= FLAG)
#define Clr_SPI2_DR(FLAG)                    (*(uint32_t*)0x4000380c |= ~FLAG)
#define Set_SPI2_CRCPR(FLAG)                 (*(uint32_t*)0x40003810 &= FLAG)
#define Clr_SPI2_CRCPR(FLAG)                 (*(uint32_t*)0x40003810 |= ~FLAG)
#define Set_SPI2_RXCRCR(FLAG)                (*(uint32_t*)0x40003814 &= FLAG)
#define Clr_SPI2_RXCRCR(FLAG)                (*(uint32_t*)0x40003814 |= ~FLAG)
#define Set_SPI2_TXCRCR(FLAG)                (*(uint32_t*)0x40003818 &= FLAG)
#define Clr_SPI2_TXCRCR(FLAG)                (*(uint32_t*)0x40003818 |= ~FLAG)
#define Set_SPI2_I2SCFGR(FLAG)               (*(uint32_t*)0x4000381c &= FLAG)
#define Clr_SPI2_I2SCFGR(FLAG)               (*(uint32_t*)0x4000381c |= ~FLAG)
#define Set_SPI2_I2SPR(FLAG)                 (*(uint32_t*)0x40003820 &= FLAG)
#define Clr_SPI2_I2SPR(FLAG)                 (*(uint32_t*)0x40003820 |= ~FLAG)
#define Set_SPI3_CR1(FLAG)                   (*(uint32_t*)0x40003c00 &= FLAG)
#define Clr_SPI3_CR1(FLAG)                   (*(uint32_t*)0x40003c00 |= ~FLAG)
#define Set_SPI3_CR2(FLAG)                   (*(uint32_t*)0x40003c04 &= FLAG)
#define Clr_SPI3_CR2(FLAG)                   (*(uint32_t*)0x40003c04 |= ~FLAG)
#define Set_SPI3_SR(FLAG)                    (*(uint32_t*)0x40003c08 &= FLAG)
#define Clr_SPI3_SR(FLAG)                    (*(uint32_t*)0x40003c08 |= ~FLAG)
#define Set_SPI3_DR(FLAG)                    (*(uint32_t*)0x40003c0c &= FLAG)
#define Clr_SPI3_DR(FLAG)                    (*(uint32_t*)0x40003c0c |= ~FLAG)
#define Set_SPI3_CRCPR(FLAG)                 (*(uint32_t*)0x40003c10 &= FLAG)
#define Clr_SPI3_CRCPR(FLAG)                 (*(uint32_t*)0x40003c10 |= ~FLAG)
#define Set_SPI3_RXCRCR(FLAG)                (*(uint32_t*)0x40003c14 &= FLAG)
#define Clr_SPI3_RXCRCR(FLAG)                (*(uint32_t*)0x40003c14 |= ~FLAG)
#define Set_SPI3_TXCRCR(FLAG)                (*(uint32_t*)0x40003c18 &= FLAG)
#define Clr_SPI3_TXCRCR(FLAG)                (*(uint32_t*)0x40003c18 |= ~FLAG)
#define Set_SPI3_I2SCFGR(FLAG)               (*(uint32_t*)0x40003c1c &= FLAG)
#define Clr_SPI3_I2SCFGR(FLAG)               (*(uint32_t*)0x40003c1c |= ~FLAG)
#define Set_SPI3_I2SPR(FLAG)                 (*(uint32_t*)0x40003c20 &= FLAG)
#define Clr_SPI3_I2SPR(FLAG)                 (*(uint32_t*)0x40003c20 |= ~FLAG)
#define Set_SPI1_CR1(FLAG)                   (*(uint32_t*)0x40013000 &= FLAG)
#define Clr_SPI1_CR1(FLAG)                   (*(uint32_t*)0x40013000 |= ~FLAG)
#define Set_SPI1_CR2(FLAG)                   (*(uint32_t*)0x40013004 &= FLAG)
#define Clr_SPI1_CR2(FLAG)                   (*(uint32_t*)0x40013004 |= ~FLAG)
#define Set_SPI1_SR(FLAG)                    (*(uint32_t*)0x40013008 &= FLAG)
#define Clr_SPI1_SR(FLAG)                    (*(uint32_t*)0x40013008 |= ~FLAG)
#define Set_SPI1_DR(FLAG)                    (*(uint32_t*)0x4001300c &= FLAG)
#define Clr_SPI1_DR(FLAG)                    (*(uint32_t*)0x4001300c |= ~FLAG)
#define Set_SPI1_CRCPR(FLAG)                 (*(uint32_t*)0x40013010 &= FLAG)
#define Clr_SPI1_CRCPR(FLAG)                 (*(uint32_t*)0x40013010 |= ~FLAG)
#define Set_SPI1_RXCRCR(FLAG)                (*(uint32_t*)0x40013014 &= FLAG)
#define Clr_SPI1_RXCRCR(FLAG)                (*(uint32_t*)0x40013014 |= ~FLAG)
#define Set_SPI1_TXCRCR(FLAG)                (*(uint32_t*)0x40013018 &= FLAG)
#define Clr_SPI1_TXCRCR(FLAG)                (*(uint32_t*)0x40013018 |= ~FLAG)
#define Set_SPI1_I2SCFGR(FLAG)               (*(uint32_t*)0x4001301c &= FLAG)
#define Clr_SPI1_I2SCFGR(FLAG)               (*(uint32_t*)0x4001301c |= ~FLAG)
#define Set_SPI1_I2SPR(FLAG)                 (*(uint32_t*)0x40013020 &= FLAG)
#define Clr_SPI1_I2SPR(FLAG)                 (*(uint32_t*)0x40013020 |= ~FLAG)
#define Set_SPI4_CR1(FLAG)                   (*(uint32_t*)0x40013400 &= FLAG)
#define Clr_SPI4_CR1(FLAG)                   (*(uint32_t*)0x40013400 |= ~FLAG)
#define Set_SPI4_CR2(FLAG)                   (*(uint32_t*)0x40013404 &= FLAG)
#define Clr_SPI4_CR2(FLAG)                   (*(uint32_t*)0x40013404 |= ~FLAG)
#define Set_SPI4_SR(FLAG)                    (*(uint32_t*)0x40013408 &= FLAG)
#define Clr_SPI4_SR(FLAG)                    (*(uint32_t*)0x40013408 |= ~FLAG)
#define Set_SPI4_DR(FLAG)                    (*(uint32_t*)0x4001340c &= FLAG)
#define Clr_SPI4_DR(FLAG)                    (*(uint32_t*)0x4001340c |= ~FLAG)
#define Set_SPI4_CRCPR(FLAG)                 (*(uint32_t*)0x40013410 &= FLAG)
#define Clr_SPI4_CRCPR(FLAG)                 (*(uint32_t*)0x40013410 |= ~FLAG)
#define Set_SPI4_RXCRCR(FLAG)                (*(uint32_t*)0x40013414 &= FLAG)
#define Clr_SPI4_RXCRCR(FLAG)                (*(uint32_t*)0x40013414 |= ~FLAG)
#define Set_SPI4_TXCRCR(FLAG)                (*(uint32_t*)0x40013418 &= FLAG)
#define Clr_SPI4_TXCRCR(FLAG)                (*(uint32_t*)0x40013418 |= ~FLAG)
#define Set_SPI4_I2SCFGR(FLAG)               (*(uint32_t*)0x4001341c &= FLAG)
#define Clr_SPI4_I2SCFGR(FLAG)               (*(uint32_t*)0x4001341c |= ~FLAG)
#define Set_SPI4_I2SPR(FLAG)                 (*(uint32_t*)0x40013420 &= FLAG)
#define Clr_SPI4_I2SPR(FLAG)                 (*(uint32_t*)0x40013420 |= ~FLAG)
#define Set_SPI5_CR1(FLAG)                   (*(uint32_t*)0x40015000 &= FLAG)
#define Clr_SPI5_CR1(FLAG)                   (*(uint32_t*)0x40015000 |= ~FLAG)
#define Set_SPI5_CR2(FLAG)                   (*(uint32_t*)0x40015004 &= FLAG)
#define Clr_SPI5_CR2(FLAG)                   (*(uint32_t*)0x40015004 |= ~FLAG)
#define Set_SPI5_SR(FLAG)                    (*(uint32_t*)0x40015008 &= FLAG)
#define Clr_SPI5_SR(FLAG)                    (*(uint32_t*)0x40015008 |= ~FLAG)
#define Set_SPI5_DR(FLAG)                    (*(uint32_t*)0x4001500c &= FLAG)
#define Clr_SPI5_DR(FLAG)                    (*(uint32_t*)0x4001500c |= ~FLAG)
#define Set_SPI5_CRCPR(FLAG)                 (*(uint32_t*)0x40015010 &= FLAG)
#define Clr_SPI5_CRCPR(FLAG)                 (*(uint32_t*)0x40015010 |= ~FLAG)
#define Set_SPI5_RXCRCR(FLAG)                (*(uint32_t*)0x40015014 &= FLAG)
#define Clr_SPI5_RXCRCR(FLAG)                (*(uint32_t*)0x40015014 |= ~FLAG)
#define Set_SPI5_TXCRCR(FLAG)                (*(uint32_t*)0x40015018 &= FLAG)
#define Clr_SPI5_TXCRCR(FLAG)                (*(uint32_t*)0x40015018 |= ~FLAG)
#define Set_SPI5_I2SCFGR(FLAG)               (*(uint32_t*)0x4001501c &= FLAG)
#define Clr_SPI5_I2SCFGR(FLAG)               (*(uint32_t*)0x4001501c |= ~FLAG)
#define Set_SPI5_I2SPR(FLAG)                 (*(uint32_t*)0x40015020 &= FLAG)
#define Clr_SPI5_I2SPR(FLAG)                 (*(uint32_t*)0x40015020 |= ~FLAG)
#define Set_SPI6_CR1(FLAG)                   (*(uint32_t*)0x40015400 &= FLAG)
#define Clr_SPI6_CR1(FLAG)                   (*(uint32_t*)0x40015400 |= ~FLAG)
#define Set_SPI6_CR2(FLAG)                   (*(uint32_t*)0x40015404 &= FLAG)
#define Clr_SPI6_CR2(FLAG)                   (*(uint32_t*)0x40015404 |= ~FLAG)
#define Set_SPI6_SR(FLAG)                    (*(uint32_t*)0x40015408 &= FLAG)
#define Clr_SPI6_SR(FLAG)                    (*(uint32_t*)0x40015408 |= ~FLAG)
#define Set_SPI6_DR(FLAG)                    (*(uint32_t*)0x4001540c &= FLAG)
#define Clr_SPI6_DR(FLAG)                    (*(uint32_t*)0x4001540c |= ~FLAG)
#define Set_SPI6_CRCPR(FLAG)                 (*(uint32_t*)0x40015410 &= FLAG)
#define Clr_SPI6_CRCPR(FLAG)                 (*(uint32_t*)0x40015410 |= ~FLAG)
#define Set_SPI6_RXCRCR(FLAG)                (*(uint32_t*)0x40015414 &= FLAG)
#define Clr_SPI6_RXCRCR(FLAG)                (*(uint32_t*)0x40015414 |= ~FLAG)
#define Set_SPI6_TXCRCR(FLAG)                (*(uint32_t*)0x40015418 &= FLAG)
#define Clr_SPI6_TXCRCR(FLAG)                (*(uint32_t*)0x40015418 |= ~FLAG)
#define Set_SPI6_I2SCFGR(FLAG)               (*(uint32_t*)0x4001541c &= FLAG)
#define Clr_SPI6_I2SCFGR(FLAG)               (*(uint32_t*)0x4001541c |= ~FLAG)
#define Set_SPI6_I2SPR(FLAG)                 (*(uint32_t*)0x40015420 &= FLAG)
#define Clr_SPI6_I2SPR(FLAG)                 (*(uint32_t*)0x40015420 |= ~FLAG)

// Flags
#define  _SPI2_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
　
　drivers/inc/stm32f767xx_SYSCFG.h
#define Get_SYSCFG_EXTICR3(FLAG)             (*(uint32_t*)0x40013810 |= FLAG)
#define Get_SYSCFG_EXTICR4(FLAG)             (*(uint32_t*)0x40013814 |= FLAG)
#define Get_SYSCFG_CMPCR(FLAG)               (*(uint32_t*)0x40013820 |= FLAG)
#define Set_SYSCFG_MEMRM(FLAG)               (*(uint32_t*)0x40013800 &= FLAG)
#define Clr_SYSCFG_MEMRM(FLAG)               (*(uint32_t*)0x40013800 |= ~FLAG)
#define Set_SYSCFG_PMC(FLAG)                 (*(uint32_t*)0x40013804 &= FLAG)
#define Clr_SYSCFG_PMC(FLAG)                 (*(uint32_t*)0x40013804 |= ~FLAG)
#define Set_SYSCFG_EXTICR1(FLAG)             (*(uint32_t*)0x40013808 &= FLAG)
#define Clr_SYSCFG_EXTICR1(FLAG)             (*(uint32_t*)0x40013808 |= ~FLAG)
#define Set_SYSCFG_EXTICR2(FLAG)             (*(uint32_t*)0x4001380c &= FLAG)
#define Clr_SYSCFG_EXTICR2(FLAG)             (*(uint32_t*)0x4001380c |= ~FLAG)
#define Set_SYSCFG_EXTICR3(FLAG)             (*(uint32_t*)0x40013810 &= FLAG)
#define Clr_SYSCFG_EXTICR3(FLAG)             (*(uint32_t*)0x40013810 |= ~FLAG)
#define Set_SYSCFG_EXTICR4(FLAG)             (*(uint32_t*)0x40013814 &= FLAG)
#define Clr_SYSCFG_EXTICR4(FLAG)             (*(uint32_t*)0x40013814 |= ~FLAG)
#define Set_SYSCFG_CMPCR(FLAG)               (*(uint32_t*)0x40013820 &= FLAG)
#define Clr_SYSCFG_CMPCR(FLAG)               (*(uint32_t*)0x40013820 |= ~FLAG)
#define  _SYSCFG_MEMRM_MEM_MODE                              (0x7 << 0)    // Memory mapping selection
#define  _SYSCFG_MEMRM_FB_MODE                               (0x1 << 8)    // Flash bank mode selection
#define  _SYSCFG_MEMRM_SWP_FMC                               (0x3 << 10)    // FMC memory mapping swap
　
　drivers/inc/stm32f767xx_WWDG.h
#define Get_WWDG_CR(FLAG)                    (*(uint32_t*)0x40002c00 |= FLAG)
#define Get_WWDG_CFR(FLAG)                   (*(uint32_t*)0x40002c04 |= FLAG)
#define Get_WWDG_SR(FLAG)                    (*(uint32_t*)0x40002c08 |= FLAG)
#define Set_WWDG_CR(FLAG)                    (*(uint32_t*)0x40002c00 &= FLAG)
#define Clr_WWDG_CR(FLAG)                    (*(uint32_t*)0x40002c00 |= ~FLAG)
#define Set_WWDG_CFR(FLAG)                   (*(uint32_t*)0x40002c04 &= FLAG)
#define Clr_WWDG_CFR(FLAG)                   (*(uint32_t*)0x40002c04 |= ~FLAG)
#define Set_WWDG_SR(FLAG)                    (*(uint32_t*)0x40002c08 &= FLAG)
#define Clr_WWDG_SR(FLAG)                    (*(uint32_t*)0x40002c08 |= ~FLAG)
#define  _WWDG_CR_WDGA                                       (0x1 << 7)    // Activation bit
#define  _WWDG_CR_T                                          (0x7f << 0)    // 7-bit counter (MSB to LSB)
#define  _WWDG_CFR_EWI                                       (0x1 << 9)    // Early wakeup interrupt
　
　drivers/inc/stm32f767xx_QUADSPI.h
#define Get_QUADSPI_PSMAR(FLAG)              (*(uint32_t*)0xa0001028 |= FLAG)
#define Get_QUADSPI_PIR(FLAG)                (*(uint32_t*)0xa000102c |= FLAG)
#define Get_QUADSPI_LPTR(FLAG)               (*(uint32_t*)0xa0001030 |= FLAG)
#define Set_QUADSPI_CR(FLAG)                 (*(uint32_t*)0xa0001000 &= FLAG)
#define Clr_QUADSPI_CR(FLAG)                 (*(uint32_t*)0xa0001000 |= ~FLAG)
#define Set_QUADSPI_DCR(FLAG)                (*(uint32_t*)0xa0001004 &= FLAG)
#define Clr_QUADSPI_DCR(FLAG)                (*(uint32_t*)0xa0001004 |= ~FLAG)
#define Set_QUADSPI_SR(FLAG)                 (*(uint32_t*)0xa0001008 &= FLAG)
#define Clr_QUADSPI_SR(FLAG)                 (*(uint32_t*)0xa0001008 |= ~FLAG)
#define Set_QUADSPI_FCR(FLAG)                (*(uint32_t*)0xa000100c &= FLAG)
#define Clr_QUADSPI_FCR(FLAG)                (*(uint32_t*)0xa000100c |= ~FLAG)
#define Set_QUADSPI_DLR(FLAG)                (*(uint32_t*)0xa0001010 &= FLAG)
#define Clr_QUADSPI_DLR(FLAG)                (*(uint32_t*)0xa0001010 |= ~FLAG)
#define Set_QUADSPI_CCR(FLAG)                (*(uint32_t*)0xa0001014 &= FLAG)
#define Clr_QUADSPI_CCR(FLAG)                (*(uint32_t*)0xa0001014 |= ~FLAG)
#define Set_QUADSPI_AR(FLAG)                 (*(uint32_t*)0xa0001018 &= FLAG)
#define Clr_QUADSPI_AR(FLAG)                 (*(uint32_t*)0xa0001018 |= ~FLAG)
#define Set_QUADSPI_ABR(FLAG)                (*(uint32_t*)0xa000101c &= FLAG)
#define Clr_QUADSPI_ABR(FLAG)                (*(uint32_t*)0xa000101c |= ~FLAG)
#define Set_QUADSPI_DR(FLAG)                 (*(uint32_t*)0xa0001020 &= FLAG)
#define Clr_QUADSPI_DR(FLAG)                 (*(uint32_t*)0xa0001020 |= ~FLAG)
#define Set_QUADSPI_PSMKR(FLAG)              (*(uint32_t*)0xa0001024 &= FLAG)
#define Clr_QUADSPI_PSMKR(FLAG)              (*(uint32_t*)0xa0001024 |= ~FLAG)
#define Set_QUADSPI_PSMAR(FLAG)              (*(uint32_t*)0xa0001028 &= FLAG)
#define Clr_QUADSPI_PSMAR(FLAG)              (*(uint32_t*)0xa0001028 |= ~FLAG)
#define Set_QUADSPI_PIR(FLAG)                (*(uint32_t*)0xa000102c &= FLAG)
#define Clr_QUADSPI_PIR(FLAG)                (*(uint32_t*)0xa000102c |= ~FLAG)
#define Set_QUADSPI_LPTR(FLAG)               (*(uint32_t*)0xa0001030 &= FLAG)
#define Clr_QUADSPI_LPTR(FLAG)               (*(uint32_t*)0xa0001030 |= ~FLAG)
#define  _QUADSPI_CR_PRESCALER                               (0xff << 24)    // Clock prescaler
#define  _QUADSPI_CR_PMM                                     (0x1 << 23)    // Polling match mode
#define  _QUADSPI_CR_APMS                                    (0x1 << 22)    // Automatic poll mode stop
　
　drivers/inc/stm32f767xx_DBGMCU.h
#define Get_DBGMCU_IDCODE(FLAG)              (*(uint32_t*)0xe0042000 |= FLAG)
#define Set_DBGMCU_IDCODE(FLAG)              (*(uint32_t*)0xe0042000 &= FLAG)
#define Clr_DBGMCU_IDCODE(FLAG)              (*(uint32_t*)0xe0042000 |= ~FLAG)
#define  _DBGMCU_IDCODE_DEV_ID                               (0xfff << 0)    // Device identifier
#define  _DBGMCU_IDCODE_REV_ID                               (0xffff << 16)    // Revision identifie
　
　drivers/inc/stm32f767xx_DSI.h
#define Get_DSI_DSI_WPCR4(FLAG)              (*(uint32_t*)0x40017024 |= FLAG)
#define Get_DSI_DSI_WPCR5(FLAG)              (*(uint32_t*)0x40017028 |= FLAG)
#define Get_DSI_DSI_WRPCR(FLAG)              (*(uint32_t*)0x40017030 |= FLAG)
#define Set_DSI_DSI_VR(FLAG)                 (*(uint32_t*)0x40016c00 &= FLAG)
#define Clr_DSI_DSI_VR(FLAG)                 (*(uint32_t*)0x40016c00 |= ~FLAG)
#define Set_DSI_DSI_CR(FLAG)                 (*(uint32_t*)0x40016c04 &= FLAG)
#define Clr_DSI_DSI_CR(FLAG)                 (*(uint32_t*)0x40016c04 |= ~FLAG)
#define Set_DSI_DSI_CCR(FLAG)                (*(uint32_t*)0x40016c08 &= FLAG)
#define Clr_DSI_DSI_CCR(FLAG)                (*(uint32_t*)0x40016c08 |= ~FLAG)
#define Set_DSI_DSI_LVCIDR(FLAG)             (*(uint32_t*)0x40016c0c &= FLAG)
#define Clr_DSI_DSI_LVCIDR(FLAG)             (*(uint32_t*)0x40016c0c |= ~FLAG)
#define Set_DSI_DSI_LCOLCR(FLAG)             (*(uint32_t*)0x40016c10 &= FLAG)
#define Clr_DSI_DSI_LCOLCR(FLAG)             (*(uint32_t*)0x40016c10 |= ~FLAG)
#define Set_DSI_DSI_LPCR(FLAG)               (*(uint32_t*)0x40016c14 &= FLAG)
#define Clr_DSI_DSI_LPCR(FLAG)               (*(uint32_t*)0x40016c14 |= ~FLAG)
#define Set_DSI_DSI_LPMCR(FLAG)              (*(uint32_t*)0x40016c18 &= FLAG)
#define Clr_DSI_DSI_LPMCR(FLAG)              (*(uint32_t*)0x40016c18 |= ~FLAG)
#define Set_DSI_DSI_PCR(FLAG)                (*(uint32_t*)0x40016c2c &= FLAG)
#define Clr_DSI_DSI_PCR(FLAG)                (*(uint32_t*)0x40016c2c |= ~FLAG)
#define Set_DSI_DSI_GVCIDR(FLAG)             (*(uint32_t*)0x40016c30 &= FLAG)
#define Clr_DSI_DSI_GVCIDR(FLAG)             (*(uint32_t*)0x40016c30 |= ~FLAG)
#define Set_DSI_DSI_MCR(FLAG)                (*(uint32_t*)0x40016c34 &= FLAG)
#define Clr_DSI_DSI_MCR(FLAG)                (*(uint32_t*)0x40016c34 |= ~FLAG)
#define Set_DSI_DSI_VMCR(FLAG)               (*(uint32_t*)0x40016c38 &= FLAG)
#define Clr_DSI_DSI_VMCR(FLAG)               (*(uint32_t*)0x40016c38 |= ~FLAG)
#define Set_DSI_DSI_VPCR(FLAG)               (*(uint32_t*)0x40016c3c &= FLAG)
#define Clr_DSI_DSI_VPCR(FLAG)               (*(uint32_t*)0x40016c3c |= ~FLAG)
#define Set_DSI_DSI_VCCR(FLAG)               (*(uint32_t*)0x40016c40 &= FLAG)
#define Clr_DSI_DSI_VCCR(FLAG)               (*(uint32_t*)0x40016c40 |= ~FLAG)
#define Set_DSI_DSI_VNPCR(FLAG)              (*(uint32_t*)0x40016c44 &= FLAG)
#define Clr_DSI_DSI_VNPCR(FLAG)              (*(uint32_t*)0x40016c44 |= ~FLAG)
#define Set_DSI_DSI_VHSACR(FLAG)             (*(uint32_t*)0x40016c48 &= FLAG)
#define Clr_DSI_DSI_VHSACR(FLAG)             (*(uint32_t*)0x40016c48 |= ~FLAG)
#define Set_DSI_DSI_VHBPCR(FLAG)             (*(uint32_t*)0x40016c4c &= FLAG)
#define Clr_DSI_DSI_VHBPCR(FLAG)             (*(uint32_t*)0x40016c4c |= ~FLAG)
#define Set_DSI_DSI_VLCR(FLAG)               (*(uint32_t*)0x40016c50 &= FLAG)
#define Clr_DSI_DSI_VLCR(FLAG)               (*(uint32_t*)0x40016c50 |= ~FLAG)
#define Set_DSI_DSI_VVSACR(FLAG)             (*(uint32_t*)0x40016c54 &= FLAG)
#define Clr_DSI_DSI_VVSACR(FLAG)             (*(uint32_t*)0x40016c54 |= ~FLAG)
#define Set_DSI_DSI_VVBPCR(FLAG)             (*(uint32_t*)0x40016c58 &= FLAG)
#define Clr_DSI_DSI_VVBPCR(FLAG)             (*(uint32_t*)0x40016c58 |= ~FLAG)
#define Set_DSI_DSI_VVFPCR(FLAG)             (*(uint32_t*)0x40016c5c &= FLAG)
#define Clr_DSI_DSI_VVFPCR(FLAG)             (*(uint32_t*)0x40016c5c |= ~FLAG)
#define Set_DSI_DSI_VVACR(FLAG)              (*(uint32_t*)0x40016c60 &= FLAG)
#define Clr_DSI_DSI_VVACR(FLAG)              (*(uint32_t*)0x40016c60 |= ~FLAG)
#define Set_DSI_DSI_LCCR(FLAG)               (*(uint32_t*)0x40016c64 &= FLAG)
#define Clr_DSI_DSI_LCCR(FLAG)               (*(uint32_t*)0x40016c64 |= ~FLAG)
#define Set_DSI_DSI_CMCR(FLAG)               (*(uint32_t*)0x40016c68 &= FLAG)
#define Clr_DSI_DSI_CMCR(FLAG)               (*(uint32_t*)0x40016c68 |= ~FLAG)
#define Set_DSI_DSI_GHCR(FLAG)               (*(uint32_t*)0x40016c6c &= FLAG)
#define Clr_DSI_DSI_GHCR(FLAG)               (*(uint32_t*)0x40016c6c |= ~FLAG)
#define Set_DSI_DSI_GPDR(FLAG)               (*(uint32_t*)0x40016c70 &= FLAG)
#define Clr_DSI_DSI_GPDR(FLAG)               (*(uint32_t*)0x40016c70 |= ~FLAG)
#define Set_DSI_DSI_GPSR(FLAG)               (*(uint32_t*)0x40016c74 &= FLAG)
#define Clr_DSI_DSI_GPSR(FLAG)               (*(uint32_t*)0x40016c74 |= ~FLAG)
#define Set_DSI_DSI_TCCR0(FLAG)              (*(uint32_t*)0x40016c78 &= FLAG)
#define Clr_DSI_DSI_TCCR0(FLAG)              (*(uint32_t*)0x40016c78 |= ~FLAG)
#define Set_DSI_DSI_TCCR1(FLAG)              (*(uint32_t*)0x40016c7c &= FLAG)
#define Clr_DSI_DSI_TCCR1(FLAG)              (*(uint32_t*)0x40016c7c |= ~FLAG)
#define Set_DSI_DSI_TCCR2(FLAG)              (*(uint32_t*)0x40016c80 &= FLAG)
#define Clr_DSI_DSI_TCCR2(FLAG)              (*(uint32_t*)0x40016c80 |= ~FLAG)
#define Set_DSI_DSI_TCCR3(FLAG)              (*(uint32_t*)0x40016c84 &= FLAG)
#define Clr_DSI_DSI_TCCR3(FLAG)              (*(uint32_t*)0x40016c84 |= ~FLAG)
#define Set_DSI_DSI_TCCR4(FLAG)              (*(uint32_t*)0x40016c88 &= FLAG)
#define Clr_DSI_DSI_TCCR4(FLAG)              (*(uint32_t*)0x40016c88 |= ~FLAG)
#define Set_DSI_DSI_TCCR5(FLAG)              (*(uint32_t*)0x40016c8c &= FLAG)
#define Clr_DSI_DSI_TCCR5(FLAG)              (*(uint32_t*)0x40016c8c |= ~FLAG)
#define Set_DSI_DSI_CLCR(FLAG)               (*(uint32_t*)0x40016c94 &= FLAG)
#define Clr_DSI_DSI_CLCR(FLAG)               (*(uint32_t*)0x40016c94 |= ~FLAG)
#define Set_DSI_DSI_CLTCR(FLAG)              (*(uint32_t*)0x40016c98 &= FLAG)
#define Clr_DSI_DSI_CLTCR(FLAG)              (*(uint32_t*)0x40016c98 |= ~FLAG)
#define Set_DSI_DSI_DLTCR(FLAG)              (*(uint32_t*)0x40016c9c &= FLAG)
#define Clr_DSI_DSI_DLTCR(FLAG)              (*(uint32_t*)0x40016c9c |= ~FLAG)
#define Set_DSI_DSI_PCTLR(FLAG)              (*(uint32_t*)0x40016ca0 &= FLAG)
#define Clr_DSI_DSI_PCTLR(FLAG)              (*(uint32_t*)0x40016ca0 |= ~FLAG)
#define Set_DSI_DSI_PCONFR(FLAG)             (*(uint32_t*)0x40016ca4 &= FLAG)
#define Clr_DSI_DSI_PCONFR(FLAG)             (*(uint32_t*)0x40016ca4 |= ~FLAG)
#define Set_DSI_DSI_PUCR(FLAG)               (*(uint32_t*)0x40016ca8 &= FLAG)
#define Clr_DSI_DSI_PUCR(FLAG)               (*(uint32_t*)0x40016ca8 |= ~FLAG)
#define Set_DSI_DSI_PTTCR(FLAG)              (*(uint32_t*)0x40016cac &= FLAG)
#define Clr_DSI_DSI_PTTCR(FLAG)              (*(uint32_t*)0x40016cac |= ~FLAG)
#define Set_DSI_DSI_PSR(FLAG)                (*(uint32_t*)0x40016cb0 &= FLAG)
#define Clr_DSI_DSI_PSR(FLAG)                (*(uint32_t*)0x40016cb0 |= ~FLAG)
#define Set_DSI_DSI_ISR0(FLAG)               (*(uint32_t*)0x40016cbc &= FLAG)
#define Clr_DSI_DSI_ISR0(FLAG)               (*(uint32_t*)0x40016cbc |= ~FLAG)
#define Set_DSI_DSI_ISR1(FLAG)               (*(uint32_t*)0x40016cc0 &= FLAG)
#define Clr_DSI_DSI_ISR1(FLAG)               (*(uint32_t*)0x40016cc0 |= ~FLAG)
#define Set_DSI_DSI_IER0(FLAG)               (*(uint32_t*)0x40016cc4 &= FLAG)
#define Clr_DSI_DSI_IER0(FLAG)               (*(uint32_t*)0x40016cc4 |= ~FLAG)
#define Set_DSI_DSI_IER1(FLAG)               (*(uint32_t*)0x40016cc8 &= FLAG)
#define Clr_DSI_DSI_IER1(FLAG)               (*(uint32_t*)0x40016cc8 |= ~FLAG)
#define Set_DSI_DSI_FIR0(FLAG)               (*(uint32_t*)0x40016cd8 &= FLAG)
#define Clr_DSI_DSI_FIR0(FLAG)               (*(uint32_t*)0x40016cd8 |= ~FLAG)
#define Set_DSI_DSI_FIR1(FLAG)               (*(uint32_t*)0x40016cdc &= FLAG)
#define Clr_DSI_DSI_FIR1(FLAG)               (*(uint32_t*)0x40016cdc |= ~FLAG)
#define Set_DSI_DSI_VSCR(FLAG)               (*(uint32_t*)0x40016d00 &= FLAG)
#define Clr_DSI_DSI_VSCR(FLAG)               (*(uint32_t*)0x40016d00 |= ~FLAG)
#define Set_DSI_DSI_LCVCIDR(FLAG)            (*(uint32_t*)0x40016d0c &= FLAG)
#define Clr_DSI_DSI_LCVCIDR(FLAG)            (*(uint32_t*)0x40016d0c |= ~FLAG)
#define Set_DSI_DSI_LCCCR(FLAG)              (*(uint32_t*)0x40016d10 &= FLAG)
#define Clr_DSI_DSI_LCCCR(FLAG)              (*(uint32_t*)0x40016d10 |= ~FLAG)
#define Set_DSI_DSI_LPMCCR(FLAG)             (*(uint32_t*)0x40016d18 &= FLAG)
#define Clr_DSI_DSI_LPMCCR(FLAG)             (*(uint32_t*)0x40016d18 |= ~FLAG)
#define Set_DSI_DSI_VMCCR(FLAG)              (*(uint32_t*)0x40016d38 &= FLAG)
#define Clr_DSI_DSI_VMCCR(FLAG)              (*(uint32_t*)0x40016d38 |= ~FLAG)
#define Set_DSI_DSI_VPCCR(FLAG)              (*(uint32_t*)0x40016d3c &= FLAG)
#define Clr_DSI_DSI_VPCCR(FLAG)              (*(uint32_t*)0x40016d3c |= ~FLAG)
#define Set_DSI_DSI_VCCCR(FLAG)              (*(uint32_t*)0x40016d40 &= FLAG)
#define Clr_DSI_DSI_VCCCR(FLAG)              (*(uint32_t*)0x40016d40 |= ~FLAG)
#define Set_DSI_DSI_VNPCCR(FLAG)             (*(uint32_t*)0x40016d44 &= FLAG)
#define Clr_DSI_DSI_VNPCCR(FLAG)             (*(uint32_t*)0x40016d44 |= ~FLAG)
#define Set_DSI_DSI_VHSACCR(FLAG)            (*(uint32_t*)0x40016d48 &= FLAG)
#define Clr_DSI_DSI_VHSACCR(FLAG)            (*(uint32_t*)0x40016d48 |= ~FLAG)
#define Set_DSI_DSI_VHBPCCR(FLAG)            (*(uint32_t*)0x40016d4c &= FLAG)
#define Clr_DSI_DSI_VHBPCCR(FLAG)            (*(uint32_t*)0x40016d4c |= ~FLAG)
#define Set_DSI_DSI_VLCCR(FLAG)              (*(uint32_t*)0x40016d50 &= FLAG)
#define Clr_DSI_DSI_VLCCR(FLAG)              (*(uint32_t*)0x40016d50 |= ~FLAG)
#define Set_DSI_DSI_VVSACCR(FLAG)            (*(uint32_t*)0x40016d54 &= FLAG)
#define Clr_DSI_DSI_VVSACCR(FLAG)            (*(uint32_t*)0x40016d54 |= ~FLAG)
#define Set_DSI_DSI_VVBPCCR(FLAG)            (*(uint32_t*)0x40016d58 &= FLAG)
#define Clr_DSI_DSI_VVBPCCR(FLAG)            (*(uint32_t*)0x40016d58 |= ~FLAG)
#define Set_DSI_DSI_VVFPCCR(FLAG)            (*(uint32_t*)0x40016d5c &= FLAG)
#define Clr_DSI_DSI_VVFPCCR(FLAG)            (*(uint32_t*)0x40016d5c |= ~FLAG)
#define Set_DSI_DSI_VVACCR(FLAG)             (*(uint32_t*)0x40016d60 &= FLAG)
#define Clr_DSI_DSI_VVACCR(FLAG)             (*(uint32_t*)0x40016d60 |= ~FLAG)
#define Set_DSI_DSI_WCFGR(FLAG)              (*(uint32_t*)0x40017000 &= FLAG)
#define Clr_DSI_DSI_WCFGR(FLAG)              (*(uint32_t*)0x40017000 |= ~FLAG)
#define Set_DSI_DSI_WCR(FLAG)                (*(uint32_t*)0x40017004 &= FLAG)
#define Clr_DSI_DSI_WCR(FLAG)                (*(uint32_t*)0x40017004 |= ~FLAG)
#define Set_DSI_DSI_WIER(FLAG)               (*(uint32_t*)0x40017008 &= FLAG)
#define Clr_DSI_DSI_WIER(FLAG)               (*(uint32_t*)0x40017008 |= ~FLAG)
#define Set_DSI_DSI_WISR(FLAG)               (*(uint32_t*)0x4001700c &= FLAG)
#define Clr_DSI_DSI_WISR(FLAG)               (*(uint32_t*)0x4001700c |= ~FLAG)
#define Set_DSI_DSI_WIFCR(FLAG)              (*(uint32_t*)0x40017010 &= FLAG)
#define Clr_DSI_DSI_WIFCR(FLAG)              (*(uint32_t*)0x40017010 |= ~FLAG)
#define Set_DSI_DSI_WPCR1(FLAG)              (*(uint32_t*)0x40017018 &= FLAG)
#define Clr_DSI_DSI_WPCR1(FLAG)              (*(uint32_t*)0x40017018 |= ~FLAG)
#define Set_DSI_DSI_WPCR2(FLAG)              (*(uint32_t*)0x4001701c &= FLAG)
#define Clr_DSI_DSI_WPCR2(FLAG)              (*(uint32_t*)0x4001701c |= ~FLAG)
#define Set_DSI_DSI_WPCR3(FLAG)              (*(uint32_t*)0x40017020 &= FLAG)
#define Clr_DSI_DSI_WPCR3(FLAG)              (*(uint32_t*)0x40017020 |= ~FLAG)
#define Set_DSI_DSI_WPCR4(FLAG)              (*(uint32_t*)0x40017024 &= FLAG)
#define Clr_DSI_DSI_WPCR4(FLAG)              (*(uint32_t*)0x40017024 |= ~FLAG)
#define Set_DSI_DSI_WPCR5(FLAG)              (*(uint32_t*)0x40017028 &= FLAG)
#define Clr_DSI_DSI_WPCR5(FLAG)              (*(uint32_t*)0x40017028 |= ~FLAG)
#define Set_DSI_DSI_WRPCR(FLAG)              (*(uint32_t*)0x40017030 &= FLAG)
#define Clr_DSI_DSI_WRPCR(FLAG)              (*(uint32_t*)0x40017030 |= ~FLAG)
#define  _DSI_DSI_VR_VERSION                                 (0xffffffff << 0)    // Version of the DSI Host
#define  _DSI_DSI_CR_EN                                      (0x1 << 0)    // Enable
#define  _DSI_DSI_CCR_TXECKDIV                               (0xff << 0)    // TX Escape Clock Division
　
　drivers/inc/stm32f767xx_Ethernet.h
#define Get_Ethernet_DMA_DMACHRDR(FLAG)      (*(uint32_t*)0x4002904c |= FLAG)
#define Get_Ethernet_DMA_DMACHTBAR(FLAG)     (*(uint32_t*)0x40029050 |= FLAG)
#define Get_Ethernet_DMA_DMACHRBAR(FLAG)     (*(uint32_t*)0x40029054 |= FLAG)
#define Set_Ethernet_MAC_MACCR(FLAG)         (*(uint32_t*)0x40028000 &= FLAG)
#define Clr_Ethernet_MAC_MACCR(FLAG)         (*(uint32_t*)0x40028000 |= ~FLAG)
#define Set_Ethernet_MAC_MACFFR(FLAG)        (*(uint32_t*)0x40028004 &= FLAG)
#define Clr_Ethernet_MAC_MACFFR(FLAG)        (*(uint32_t*)0x40028004 |= ~FLAG)
#define Set_Ethernet_MAC_MACHTHR(FLAG)       (*(uint32_t*)0x40028008 &= FLAG)
#define Clr_Ethernet_MAC_MACHTHR(FLAG)       (*(uint32_t*)0x40028008 |= ~FLAG)
#define Set_Ethernet_MAC_MACHTLR(FLAG)       (*(uint32_t*)0x4002800c &= FLAG)
#define Clr_Ethernet_MAC_MACHTLR(FLAG)       (*(uint32_t*)0x4002800c |= ~FLAG)
#define Set_Ethernet_MAC_MACMIIAR(FLAG)      (*(uint32_t*)0x40028010 &= FLAG)
#define Clr_Ethernet_MAC_MACMIIAR(FLAG)      (*(uint32_t*)0x40028010 |= ~FLAG)
#define Set_Ethernet_MAC_MACMIIDR(FLAG)      (*(uint32_t*)0x40028014 &= FLAG)
#define Clr_Ethernet_MAC_MACMIIDR(FLAG)      (*(uint32_t*)0x40028014 |= ~FLAG)
#define Set_Ethernet_MAC_MACFCR(FLAG)        (*(uint32_t*)0x40028018 &= FLAG)
#define Clr_Ethernet_MAC_MACFCR(FLAG)        (*(uint32_t*)0x40028018 |= ~FLAG)
#define Set_Ethernet_MAC_MACVLANTR(FLAG)     (*(uint32_t*)0x4002801c &= FLAG)
#define Clr_Ethernet_MAC_MACVLANTR(FLAG)     (*(uint32_t*)0x4002801c |= ~FLAG)
#define Set_Ethernet_MAC_MACPMTCSR(FLAG)     (*(uint32_t*)0x4002802c &= FLAG)
#define Clr_Ethernet_MAC_MACPMTCSR(FLAG)     (*(uint32_t*)0x4002802c |= ~FLAG)
#define Set_Ethernet_MAC_MACDBGR(FLAG)       (*(uint32_t*)0x40028034 &= FLAG)
#define Clr_Ethernet_MAC_MACDBGR(FLAG)       (*(uint32_t*)0x40028034 |= ~FLAG)
#define Set_Ethernet_MAC_MACSR(FLAG)         (*(uint32_t*)0x40028038 &= FLAG)
#define Clr_Ethernet_MAC_MACSR(FLAG)         (*(uint32_t*)0x40028038 |= ~FLAG)
#define Set_Ethernet_MAC_MACIMR(FLAG)        (*(uint32_t*)0x4002803c &= FLAG)
#define Clr_Ethernet_MAC_MACIMR(FLAG)        (*(uint32_t*)0x4002803c |= ~FLAG)
#define Set_Ethernet_MAC_MACA0HR(FLAG)       (*(uint32_t*)0x40028040 &= FLAG)
#define Clr_Ethernet_MAC_MACA0HR(FLAG)       (*(uint32_t*)0x40028040 |= ~FLAG)
#define Set_Ethernet_MAC_MACA0LR(FLAG)       (*(uint32_t*)0x40028044 &= FLAG)
#define Clr_Ethernet_MAC_MACA0LR(FLAG)       (*(uint32_t*)0x40028044 |= ~FLAG)
#define Set_Ethernet_MAC_MACA1HR(FLAG)       (*(uint32_t*)0x40028048 &= FLAG)
#define Clr_Ethernet_MAC_MACA1HR(FLAG)       (*(uint32_t*)0x40028048 |= ~FLAG)
#define Set_Ethernet_MAC_MACA1LR(FLAG)       (*(uint32_t*)0x4002804c &= FLAG)
#define Clr_Ethernet_MAC_MACA1LR(FLAG)       (*(uint32_t*)0x4002804c |= ~FLAG)
#define Set_Ethernet_MAC_MACA2HR(FLAG)       (*(uint32_t*)0x40028050 &= FLAG)
#define Clr_Ethernet_MAC_MACA2HR(FLAG)       (*(uint32_t*)0x40028050 |= ~FLAG)
#define Set_Ethernet_MAC_MACA2LR(FLAG)       (*(uint32_t*)0x40028054 &= FLAG)
#define Clr_Ethernet_MAC_MACA2LR(FLAG)       (*(uint32_t*)0x40028054 |= ~FLAG)
#define Set_Ethernet_MAC_MACA3HR(FLAG)       (*(uint32_t*)0x40028058 &= FLAG)
#define Clr_Ethernet_MAC_MACA3HR(FLAG)       (*(uint32_t*)0x40028058 |= ~FLAG)
#define Set_Ethernet_MAC_MACA3LR(FLAG)       (*(uint32_t*)0x4002805c &= FLAG)
#define Clr_Ethernet_MAC_MACA3LR(FLAG)       (*(uint32_t*)0x4002805c |= ~FLAG)
#define Set_Ethernet_MAC_MACRWUFFER(FLAG)    (*(uint32_t*)0x40028060 &= FLAG)
#define Clr_Ethernet_MAC_MACRWUFFER(FLAG)    (*(uint32_t*)0x40028060 |= ~FLAG)
#define Set_Ethernet_MMC_MMCCR(FLAG)         (*(uint32_t*)0x40028100 &= FLAG)
#define Clr_Ethernet_MMC_MMCCR(FLAG)         (*(uint32_t*)0x40028100 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRIR(FLAG)        (*(uint32_t*)0x40028104 &= FLAG)
#define Clr_Ethernet_MMC_MMCRIR(FLAG)        (*(uint32_t*)0x40028104 |= ~FLAG)
#define Set_Ethernet_MMC_MMCTIR(FLAG)        (*(uint32_t*)0x40028108 &= FLAG)
#define Clr_Ethernet_MMC_MMCTIR(FLAG)        (*(uint32_t*)0x40028108 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRIMR(FLAG)       (*(uint32_t*)0x4002810c &= FLAG)
#define Clr_Ethernet_MMC_MMCRIMR(FLAG)       (*(uint32_t*)0x4002810c |= ~FLAG)
#define Set_Ethernet_MMC_MMCTIMR(FLAG)       (*(uint32_t*)0x40028110 &= FLAG)
#define Clr_Ethernet_MMC_MMCTIMR(FLAG)       (*(uint32_t*)0x40028110 |= ~FLAG)
#define Set_Ethernet_MMC_MMCTGFSCCR(FLAG)    (*(uint32_t*)0x4002814c &= FLAG)
#define Clr_Ethernet_MMC_MMCTGFSCCR(FLAG)    (*(uint32_t*)0x4002814c |= ~FLAG)
#define Set_Ethernet_MMC_MMCTGFMSCCR(FLAG)   (*(uint32_t*)0x40028150 &= FLAG)
#define Clr_Ethernet_MMC_MMCTGFMSCCR(FLAG)   (*(uint32_t*)0x40028150 |= ~FLAG)
#define Set_Ethernet_MMC_MMCTGFCR(FLAG)      (*(uint32_t*)0x40028168 &= FLAG)
#define Clr_Ethernet_MMC_MMCTGFCR(FLAG)      (*(uint32_t*)0x40028168 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRFCECR(FLAG)     (*(uint32_t*)0x40028194 &= FLAG)
#define Clr_Ethernet_MMC_MMCRFCECR(FLAG)     (*(uint32_t*)0x40028194 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRFAECR(FLAG)     (*(uint32_t*)0x40028198 &= FLAG)
#define Clr_Ethernet_MMC_MMCRFAECR(FLAG)     (*(uint32_t*)0x40028198 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRGUFCR(FLAG)     (*(uint32_t*)0x400281c4 &= FLAG)
#define Clr_Ethernet_MMC_MMCRGUFCR(FLAG)     (*(uint32_t*)0x400281c4 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSCR(FLAG)       (*(uint32_t*)0x40028700 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSCR(FLAG)       (*(uint32_t*)0x40028700 |= ~FLAG)
#define Set_Ethernet_PTP_PTPSSIR(FLAG)       (*(uint32_t*)0x40028704 &= FLAG)
#define Clr_Ethernet_PTP_PTPSSIR(FLAG)       (*(uint32_t*)0x40028704 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSHR(FLAG)       (*(uint32_t*)0x40028708 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSHR(FLAG)       (*(uint32_t*)0x40028708 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSLR(FLAG)       (*(uint32_t*)0x4002870c &= FLAG)
#define Clr_Ethernet_PTP_PTPTSLR(FLAG)       (*(uint32_t*)0x4002870c |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSHUR(FLAG)      (*(uint32_t*)0x40028710 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSHUR(FLAG)      (*(uint32_t*)0x40028710 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSLUR(FLAG)      (*(uint32_t*)0x40028714 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSLUR(FLAG)      (*(uint32_t*)0x40028714 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSAR(FLAG)       (*(uint32_t*)0x40028718 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSAR(FLAG)       (*(uint32_t*)0x40028718 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTTHR(FLAG)       (*(uint32_t*)0x4002871c &= FLAG)
#define Clr_Ethernet_PTP_PTPTTHR(FLAG)       (*(uint32_t*)0x4002871c |= ~FLAG)
#define Set_Ethernet_PTP_PTPTTLR(FLAG)       (*(uint32_t*)0x40028720 &= FLAG)
#define Clr_Ethernet_PTP_PTPTTLR(FLAG)       (*(uint32_t*)0x40028720 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSSR(FLAG)       (*(uint32_t*)0x40028728 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSSR(FLAG)       (*(uint32_t*)0x40028728 |= ~FLAG)
#define Set_Ethernet_PTP_PTPPPSCR(FLAG)      (*(uint32_t*)0x4002872c &= FLAG)
#define Clr_Ethernet_PTP_PTPPPSCR(FLAG)      (*(uint32_t*)0x4002872c |= ~FLAG)
#define Set_Ethernet_DMA_DMABMR(FLAG)        (*(uint32_t*)0x40029000 &= FLAG)
#define Clr_Ethernet_DMA_DMABMR(FLAG)        (*(uint32_t*)0x40029000 |= ~FLAG)
#define Set_Ethernet_DMA_DMATPDR(FLAG)       (*(uint32_t*)0x40029004 &= FLAG)
#define Clr_Ethernet_DMA_DMATPDR(FLAG)       (*(uint32_t*)0x40029004 |= ~FLAG)
#define Set_Ethernet_DMA_DMARPDR(FLAG)       (*(uint32_t*)0x40029008 &= FLAG)
#define Clr_Ethernet_DMA_DMARPDR(FLAG)       (*(uint32_t*)0x40029008 |= ~FLAG)
#define Set_Ethernet_DMA_DMARDLAR(FLAG)      (*(uint32_t*)0x4002900c &= FLAG)
#define Clr_Ethernet_DMA_DMARDLAR(FLAG)      (*(uint32_t*)0x4002900c |= ~FLAG)
#define Set_Ethernet_DMA_DMATDLAR(FLAG)      (*(uint32_t*)0x40029010 &= FLAG)
#define Clr_Ethernet_DMA_DMATDLAR(FLAG)      (*(uint32_t*)0x40029010 |= ~FLAG)
#define Set_Ethernet_DMA_DMASR(FLAG)         (*(uint32_t*)0x40029014 &= FLAG)
#define Clr_Ethernet_DMA_DMASR(FLAG)         (*(uint32_t*)0x40029014 |= ~FLAG)
#define Set_Ethernet_DMA_DMAOMR(FLAG)        (*(uint32_t*)0x40029018 &= FLAG)
#define Clr_Ethernet_DMA_DMAOMR(FLAG)        (*(uint32_t*)0x40029018 |= ~FLAG)
#define Set_Ethernet_DMA_DMAIER(FLAG)        (*(uint32_t*)0x4002901c &= FLAG)
#define Clr_Ethernet_DMA_DMAIER(FLAG)        (*(uint32_t*)0x4002901c |= ~FLAG)
#define Set_Ethernet_DMA_DMAMFBOCR(FLAG)     (*(uint32_t*)0x40029020 &= FLAG)
#define Clr_Ethernet_DMA_DMAMFBOCR(FLAG)     (*(uint32_t*)0x40029020 |= ~FLAG)
#define Set_Ethernet_DMA_DMARSWTR(FLAG)      (*(uint32_t*)0x40029024 &= FLAG)
#define Clr_Ethernet_DMA_DMARSWTR(FLAG)      (*(uint32_t*)0x40029024 |= ~FLAG)
#define Set_Ethernet_DMA_DMACHTDR(FLAG)      (*(uint32_t*)0x40029048 &= FLAG)
#define Clr_Ethernet_DMA_DMACHTDR(FLAG)      (*(uint32_t*)0x40029048 |= ~FLAG)
#define Set_Ethernet_DMA_DMACHRDR(FLAG)      (*(uint32_t*)0x4002904c &= FLAG)
#define Clr_Ethernet_DMA_DMACHRDR(FLAG)      (*(uint32_t*)0x4002904c |= ~FLAG)
#define Set_Ethernet_DMA_DMACHTBAR(FLAG)     (*(uint32_t*)0x40029050 &= FLAG)
#define Clr_Ethernet_DMA_DMACHTBAR(FLAG)     (*(uint32_t*)0x40029050 |= ~FLAG)
#define Set_Ethernet_DMA_DMACHRBAR(FLAG)     (*(uint32_t*)0x40029054 &= FLAG)
#define Clr_Ethernet_DMA_DMACHRBAR(FLAG)     (*(uint32_t*)0x40029054 |= ~FLAG)
#define  _Ethernet_MAC_MACCR_RE                              (0x1 << 2)    // RE
#define  _Ethernet_MAC_MACCR_TE                              (0x1 << 3)    // TE
#define  _Ethernet_MAC_MACCR_DC                              (0x1 << 4)    // DC
　
　drivers/inc/stm32f767xx_USART.h
#define Get_USART6_ICR(FLAG)                 (*(uint32_t*)0x40011420 |= FLAG)
#define Get_USART6_RDR(FLAG)                 (*(uint32_t*)0x40011424 |= FLAG)
#define Get_USART6_TDR(FLAG)                 (*(uint32_t*)0x40011428 |= FLAG)
#define Set_USART2_CR1(FLAG)                 (*(uint32_t*)0x40004400 &= FLAG)
#define Clr_USART2_CR1(FLAG)                 (*(uint32_t*)0x40004400 |= ~FLAG)
#define Set_USART2_CR2(FLAG)                 (*(uint32_t*)0x40004404 &= FLAG)
#define Clr_USART2_CR2(FLAG)                 (*(uint32_t*)0x40004404 |= ~FLAG)
#define Set_USART2_CR3(FLAG)                 (*(uint32_t*)0x40004408 &= FLAG)
#define Clr_USART2_CR3(FLAG)                 (*(uint32_t*)0x40004408 |= ~FLAG)
#define Set_USART2_BRR(FLAG)                 (*(uint32_t*)0x4000440c &= FLAG)
#define Clr_USART2_BRR(FLAG)                 (*(uint32_t*)0x4000440c |= ~FLAG)
#define Set_USART2_GTPR(FLAG)                (*(uint32_t*)0x40004410 &= FLAG)
#define Clr_USART2_GTPR(FLAG)                (*(uint32_t*)0x40004410 |= ~FLAG)
#define Set_USART2_RTOR(FLAG)                (*(uint32_t*)0x40004414 &= FLAG)
#define Clr_USART2_RTOR(FLAG)                (*(uint32_t*)0x40004414 |= ~FLAG)
#define Set_USART2_RQR(FLAG)                 (*(uint32_t*)0x40004418 &= FLAG)
#define Clr_USART2_RQR(FLAG)                 (*(uint32_t*)0x40004418 |= ~FLAG)
#define Set_USART2_ISR(FLAG)                 (*(uint32_t*)0x4000441c &= FLAG)
#define Clr_USART2_ISR(FLAG)                 (*(uint32_t*)0x4000441c |= ~FLAG)
#define Set_USART2_ICR(FLAG)                 (*(uint32_t*)0x40004420 &= FLAG)
#define Clr_USART2_ICR(FLAG)                 (*(uint32_t*)0x40004420 |= ~FLAG)
#define Set_USART2_RDR(FLAG)                 (*(uint32_t*)0x40004424 &= FLAG)
#define Clr_USART2_RDR(FLAG)                 (*(uint32_t*)0x40004424 |= ~FLAG)
#define Set_USART2_TDR(FLAG)                 (*(uint32_t*)0x40004428 &= FLAG)
#define Clr_USART2_TDR(FLAG)                 (*(uint32_t*)0x40004428 |= ~FLAG)
#define Set_USART3_CR1(FLAG)                 (*(uint32_t*)0x40004800 &= FLAG)
#define Clr_USART3_CR1(FLAG)                 (*(uint32_t*)0x40004800 |= ~FLAG)
#define Set_USART3_CR2(FLAG)                 (*(uint32_t*)0x40004804 &= FLAG)
#define Clr_USART3_CR2(FLAG)                 (*(uint32_t*)0x40004804 |= ~FLAG)
#define Set_USART3_CR3(FLAG)                 (*(uint32_t*)0x40004808 &= FLAG)
#define Clr_USART3_CR3(FLAG)                 (*(uint32_t*)0x40004808 |= ~FLAG)
#define Set_USART3_BRR(FLAG)                 (*(uint32_t*)0x4000480c &= FLAG)
#define Clr_USART3_BRR(FLAG)                 (*(uint32_t*)0x4000480c |= ~FLAG)
#define Set_USART3_GTPR(FLAG)                (*(uint32_t*)0x40004810 &= FLAG)
#define Clr_USART3_GTPR(FLAG)                (*(uint32_t*)0x40004810 |= ~FLAG)
#define Set_USART3_RTOR(FLAG)                (*(uint32_t*)0x40004814 &= FLAG)
#define Clr_USART3_RTOR(FLAG)                (*(uint32_t*)0x40004814 |= ~FLAG)
#define Set_USART3_RQR(FLAG)                 (*(uint32_t*)0x40004818 &= FLAG)
#define Clr_USART3_RQR(FLAG)                 (*(uint32_t*)0x40004818 |= ~FLAG)
#define Set_USART3_ISR(FLAG)                 (*(uint32_t*)0x4000481c &= FLAG)
#define Clr_USART3_ISR(FLAG)                 (*(uint32_t*)0x4000481c |= ~FLAG)
#define Set_USART3_ICR(FLAG)                 (*(uint32_t*)0x40004820 &= FLAG)
#define Clr_USART3_ICR(FLAG)                 (*(uint32_t*)0x40004820 |= ~FLAG)
#define Set_USART3_RDR(FLAG)                 (*(uint32_t*)0x40004824 &= FLAG)
#define Clr_USART3_RDR(FLAG)                 (*(uint32_t*)0x40004824 |= ~FLAG)
#define Set_USART3_TDR(FLAG)                 (*(uint32_t*)0x40004828 &= FLAG)
#define Clr_USART3_TDR(FLAG)                 (*(uint32_t*)0x40004828 |= ~FLAG)
#define Set_UART4_CR1(FLAG)                  (*(uint32_t*)0x40004c00 &= FLAG)
#define Clr_UART4_CR1(FLAG)                  (*(uint32_t*)0x40004c00 |= ~FLAG)
#define Set_UART4_CR2(FLAG)                  (*(uint32_t*)0x40004c04 &= FLAG)
#define Clr_UART4_CR2(FLAG)                  (*(uint32_t*)0x40004c04 |= ~FLAG)
#define Set_UART4_CR3(FLAG)                  (*(uint32_t*)0x40004c08 &= FLAG)
#define Clr_UART4_CR3(FLAG)                  (*(uint32_t*)0x40004c08 |= ~FLAG)
#define Set_UART4_BRR(FLAG)                  (*(uint32_t*)0x40004c0c &= FLAG)
#define Clr_UART4_BRR(FLAG)                  (*(uint32_t*)0x40004c0c |= ~FLAG)
#define Set_UART4_GTPR(FLAG)                 (*(uint32_t*)0x40004c10 &= FLAG)
#define Clr_UART4_GTPR(FLAG)                 (*(uint32_t*)0x40004c10 |= ~FLAG)
#define Set_UART4_RTOR(FLAG)                 (*(uint32_t*)0x40004c14 &= FLAG)
#define Clr_UART4_RTOR(FLAG)                 (*(uint32_t*)0x40004c14 |= ~FLAG)
#define Set_UART4_RQR(FLAG)                  (*(uint32_t*)0x40004c18 &= FLAG)
#define Clr_UART4_RQR(FLAG)                  (*(uint32_t*)0x40004c18 |= ~FLAG)
#define Set_UART4_ISR(FLAG)                  (*(uint32_t*)0x40004c1c &= FLAG)
#define Clr_UART4_ISR(FLAG)                  (*(uint32_t*)0x40004c1c |= ~FLAG)
#define Set_UART4_ICR(FLAG)                  (*(uint32_t*)0x40004c20 &= FLAG)
#define Clr_UART4_ICR(FLAG)                  (*(uint32_t*)0x40004c20 |= ~FLAG)
#define Set_UART4_RDR(FLAG)                  (*(uint32_t*)0x40004c24 &= FLAG)
#define Clr_UART4_RDR(FLAG)                  (*(uint32_t*)0x40004c24 |= ~FLAG)
#define Set_UART4_TDR(FLAG)                  (*(uint32_t*)0x40004c28 &= FLAG)
#define Clr_UART4_TDR(FLAG)                  (*(uint32_t*)0x40004c28 |= ~FLAG)
#define Set_UART5_CR1(FLAG)                  (*(uint32_t*)0x40005000 &= FLAG)
#define Clr_UART5_CR1(FLAG)                  (*(uint32_t*)0x40005000 |= ~FLAG)
#define Set_UART5_CR2(FLAG)                  (*(uint32_t*)0x40005004 &= FLAG)
#define Clr_UART5_CR2(FLAG)                  (*(uint32_t*)0x40005004 |= ~FLAG)
#define Set_UART5_CR3(FLAG)                  (*(uint32_t*)0x40005008 &= FLAG)
#define Clr_UART5_CR3(FLAG)                  (*(uint32_t*)0x40005008 |= ~FLAG)
#define Set_UART5_BRR(FLAG)                  (*(uint32_t*)0x4000500c &= FLAG)
#define Clr_UART5_BRR(FLAG)                  (*(uint32_t*)0x4000500c |= ~FLAG)
#define Set_UART5_GTPR(FLAG)                 (*(uint32_t*)0x40005010 &= FLAG)
#define Clr_UART5_GTPR(FLAG)                 (*(uint32_t*)0x40005010 |= ~FLAG)
#define Set_UART5_RTOR(FLAG)                 (*(uint32_t*)0x40005014 &= FLAG)
#define Clr_UART5_RTOR(FLAG)                 (*(uint32_t*)0x40005014 |= ~FLAG)
#define Set_UART5_RQR(FLAG)                  (*(uint32_t*)0x40005018 &= FLAG)
#define Clr_UART5_RQR(FLAG)                  (*(uint32_t*)0x40005018 |= ~FLAG)
#define Set_UART5_ISR(FLAG)                  (*(uint32_t*)0x4000501c &= FLAG)
#define Clr_UART5_ISR(FLAG)                  (*(uint32_t*)0x4000501c |= ~FLAG)
#define Set_UART5_ICR(FLAG)                  (*(uint32_t*)0x40005020 &= FLAG)
#define Clr_UART5_ICR(FLAG)                  (*(uint32_t*)0x40005020 |= ~FLAG)
#define Set_UART5_RDR(FLAG)                  (*(uint32_t*)0x40005024 &= FLAG)
#define Clr_UART5_RDR(FLAG)                  (*(uint32_t*)0x40005024 |= ~FLAG)
#define Set_UART5_TDR(FLAG)                  (*(uint32_t*)0x40005028 &= FLAG)
#define Clr_UART5_TDR(FLAG)                  (*(uint32_t*)0x40005028 |= ~FLAG)
#define Set_UART7_CR1(FLAG)                  (*(uint32_t*)0x40007800 &= FLAG)
#define Clr_UART7_CR1(FLAG)                  (*(uint32_t*)0x40007800 |= ~FLAG)
#define Set_UART7_CR2(FLAG)                  (*(uint32_t*)0x40007804 &= FLAG)
#define Clr_UART7_CR2(FLAG)                  (*(uint32_t*)0x40007804 |= ~FLAG)
#define Set_UART7_CR3(FLAG)                  (*(uint32_t*)0x40007808 &= FLAG)
#define Clr_UART7_CR3(FLAG)                  (*(uint32_t*)0x40007808 |= ~FLAG)
#define Set_UART7_BRR(FLAG)                  (*(uint32_t*)0x4000780c &= FLAG)
#define Clr_UART7_BRR(FLAG)                  (*(uint32_t*)0x4000780c |= ~FLAG)
#define Set_UART7_GTPR(FLAG)                 (*(uint32_t*)0x40007810 &= FLAG)
#define Clr_UART7_GTPR(FLAG)                 (*(uint32_t*)0x40007810 |= ~FLAG)
#define Set_UART7_RTOR(FLAG)                 (*(uint32_t*)0x40007814 &= FLAG)
#define Clr_UART7_RTOR(FLAG)                 (*(uint32_t*)0x40007814 |= ~FLAG)
#define Set_UART7_RQR(FLAG)                  (*(uint32_t*)0x40007818 &= FLAG)
#define Clr_UART7_RQR(FLAG)                  (*(uint32_t*)0x40007818 |= ~FLAG)
#define Set_UART7_ISR(FLAG)                  (*(uint32_t*)0x4000781c &= FLAG)
#define Clr_UART7_ISR(FLAG)                  (*(uint32_t*)0x4000781c |= ~FLAG)
#define Set_UART7_ICR(FLAG)                  (*(uint32_t*)0x40007820 &= FLAG)
#define Clr_UART7_ICR(FLAG)                  (*(uint32_t*)0x40007820 |= ~FLAG)
#define Set_UART7_RDR(FLAG)                  (*(uint32_t*)0x40007824 &= FLAG)
#define Clr_UART7_RDR(FLAG)                  (*(uint32_t*)0x40007824 |= ~FLAG)
#define Set_UART7_TDR(FLAG)                  (*(uint32_t*)0x40007828 &= FLAG)
#define Clr_UART7_TDR(FLAG)                  (*(uint32_t*)0x40007828 |= ~FLAG)
#define Set_UART8_CR1(FLAG)                  (*(uint32_t*)0x40007c00 &= FLAG)
#define Clr_UART8_CR1(FLAG)                  (*(uint32_t*)0x40007c00 |= ~FLAG)
#define Set_UART8_CR2(FLAG)                  (*(uint32_t*)0x40007c04 &= FLAG)
#define Clr_UART8_CR2(FLAG)                  (*(uint32_t*)0x40007c04 |= ~FLAG)
#define Set_UART8_CR3(FLAG)                  (*(uint32_t*)0x40007c08 &= FLAG)
#define Clr_UART8_CR3(FLAG)                  (*(uint32_t*)0x40007c08 |= ~FLAG)
#define Set_UART8_BRR(FLAG)                  (*(uint32_t*)0x40007c0c &= FLAG)
#define Clr_UART8_BRR(FLAG)                  (*(uint32_t*)0x40007c0c |= ~FLAG)
#define Set_UART8_GTPR(FLAG)                 (*(uint32_t*)0x40007c10 &= FLAG)
#define Clr_UART8_GTPR(FLAG)                 (*(uint32_t*)0x40007c10 |= ~FLAG)
#define Set_UART8_RTOR(FLAG)                 (*(uint32_t*)0x40007c14 &= FLAG)
#define Clr_UART8_RTOR(FLAG)                 (*(uint32_t*)0x40007c14 |= ~FLAG)
#define Set_UART8_RQR(FLAG)                  (*(uint32_t*)0x40007c18 &= FLAG)
#define Clr_UART8_RQR(FLAG)                  (*(uint32_t*)0x40007c18 |= ~FLAG)
#define Set_UART8_ISR(FLAG)                  (*(uint32_t*)0x40007c1c &= FLAG)
#define Clr_UART8_ISR(FLAG)                  (*(uint32_t*)0x40007c1c |= ~FLAG)
#define Set_UART8_ICR(FLAG)                  (*(uint32_t*)0x40007c20 &= FLAG)
#define Clr_UART8_ICR(FLAG)                  (*(uint32_t*)0x40007c20 |= ~FLAG)
#define Set_UART8_RDR(FLAG)                  (*(uint32_t*)0x40007c24 &= FLAG)
#define Clr_UART8_RDR(FLAG)                  (*(uint32_t*)0x40007c24 |= ~FLAG)
#define Set_UART8_TDR(FLAG)                  (*(uint32_t*)0x40007c28 &= FLAG)
#define Clr_UART8_TDR(FLAG)                  (*(uint32_t*)0x40007c28 |= ~FLAG)
#define Set_USART1_CR1(FLAG)                 (*(uint32_t*)0x40011000 &= FLAG)
#define Clr_USART1_CR1(FLAG)                 (*(uint32_t*)0x40011000 |= ~FLAG)
#define Set_USART1_CR2(FLAG)                 (*(uint32_t*)0x40011004 &= FLAG)
#define Clr_USART1_CR2(FLAG)                 (*(uint32_t*)0x40011004 |= ~FLAG)
#define Set_USART1_CR3(FLAG)                 (*(uint32_t*)0x40011008 &= FLAG)
#define Clr_USART1_CR3(FLAG)                 (*(uint32_t*)0x40011008 |= ~FLAG)
#define Set_USART1_BRR(FLAG)                 (*(uint32_t*)0x4001100c &= FLAG)
#define Clr_USART1_BRR(FLAG)                 (*(uint32_t*)0x4001100c |= ~FLAG)
#define Set_USART1_GTPR(FLAG)                (*(uint32_t*)0x40011010 &= FLAG)
#define Clr_USART1_GTPR(FLAG)                (*(uint32_t*)0x40011010 |= ~FLAG)
#define Set_USART1_RTOR(FLAG)                (*(uint32_t*)0x40011014 &= FLAG)
#define Clr_USART1_RTOR(FLAG)                (*(uint32_t*)0x40011014 |= ~FLAG)
#define Set_USART1_RQR(FLAG)                 (*(uint32_t*)0x40011018 &= FLAG)
#define Clr_USART1_RQR(FLAG)                 (*(uint32_t*)0x40011018 |= ~FLAG)
#define Set_USART1_ISR(FLAG)                 (*(uint32_t*)0x4001101c &= FLAG)
#define Clr_USART1_ISR(FLAG)                 (*(uint32_t*)0x4001101c |= ~FLAG)
#define Set_USART1_ICR(FLAG)                 (*(uint32_t*)0x40011020 &= FLAG)
#define Clr_USART1_ICR(FLAG)                 (*(uint32_t*)0x40011020 |= ~FLAG)
#define Set_USART1_RDR(FLAG)                 (*(uint32_t*)0x40011024 &= FLAG)
#define Clr_USART1_RDR(FLAG)                 (*(uint32_t*)0x40011024 |= ~FLAG)
#define Set_USART1_TDR(FLAG)                 (*(uint32_t*)0x40011028 &= FLAG)
#define Clr_USART1_TDR(FLAG)                 (*(uint32_t*)0x40011028 |= ~FLAG)
#define Set_USART6_CR1(FLAG)                 (*(uint32_t*)0x40011400 &= FLAG)
#define Clr_USART6_CR1(FLAG)                 (*(uint32_t*)0x40011400 |= ~FLAG)
#define Set_USART6_CR2(FLAG)                 (*(uint32_t*)0x40011404 &= FLAG)
#define Clr_USART6_CR2(FLAG)                 (*(uint32_t*)0x40011404 |= ~FLAG)
#define Set_USART6_CR3(FLAG)                 (*(uint32_t*)0x40011408 &= FLAG)
#define Clr_USART6_CR3(FLAG)                 (*(uint32_t*)0x40011408 |= ~FLAG)
#define Set_USART6_BRR(FLAG)                 (*(uint32_t*)0x4001140c &= FLAG)
#define Clr_USART6_BRR(FLAG)                 (*(uint32_t*)0x4001140c |= ~FLAG)
#define Set_USART6_GTPR(FLAG)                (*(uint32_t*)0x40011410 &= FLAG)
#define Clr_USART6_GTPR(FLAG)                (*(uint32_t*)0x40011410 |= ~FLAG)
#define Set_USART6_RTOR(FLAG)                (*(uint32_t*)0x40011414 &= FLAG)
#define Clr_USART6_RTOR(FLAG)                (*(uint32_t*)0x40011414 |= ~FLAG)
#define Set_USART6_RQR(FLAG)                 (*(uint32_t*)0x40011418 &= FLAG)
#define Clr_USART6_RQR(FLAG)                 (*(uint32_t*)0x40011418 |= ~FLAG)
#define Set_USART6_ISR(FLAG)                 (*(uint32_t*)0x4001141c &= FLAG)
#define Clr_USART6_ISR(FLAG)                 (*(uint32_t*)0x4001141c |= ~FLAG)
#define Set_USART6_ICR(FLAG)                 (*(uint32_t*)0x40011420 &= FLAG)
#define Clr_USART6_ICR(FLAG)                 (*(uint32_t*)0x40011420 |= ~FLAG)
#define Set_USART6_RDR(FLAG)                 (*(uint32_t*)0x40011424 &= FLAG)
#define Clr_USART6_RDR(FLAG)                 (*(uint32_t*)0x40011424 |= ~FLAG)
#define Set_USART6_TDR(FLAG)                 (*(uint32_t*)0x40011428 &= FLAG)
#define Clr_USART6_TDR(FLAG)                 (*(uint32_t*)0x40011428 |= ~FLAG)
#define  _USART2_CR1_M1                                      (0x1 << 28)    // Word length
#define  _USART2_CR1_EOBIE                                   (0x1 << 27)    // End of Block interrupt enable
#define  _USART2_CR1_RTOIE                                   (0x1 << 26)    // Receiver timeout interrupt enable
　
　drivers/inc/stm32f767xx_CRYP.h
#define Get_CRYP_CSGCM5R(FLAG)               (*(uint32_t*)0x50060084 |= FLAG)
#define Get_CRYP_CSGCM6R(FLAG)               (*(uint32_t*)0x50060088 |= FLAG)
#define Get_CRYP_CSGCM7R(FLAG)               (*(uint32_t*)0x5006008c |= FLAG)
#define Set_CRYP_CR(FLAG)                    (*(uint32_t*)0x50060000 &= FLAG)
#define Clr_CRYP_CR(FLAG)                    (*(uint32_t*)0x50060000 |= ~FLAG)
#define Set_CRYP_SR(FLAG)                    (*(uint32_t*)0x50060004 &= FLAG)
#define Clr_CRYP_SR(FLAG)                    (*(uint32_t*)0x50060004 |= ~FLAG)
#define Set_CRYP_DIN(FLAG)                   (*(uint32_t*)0x50060008 &= FLAG)
#define Clr_CRYP_DIN(FLAG)                   (*(uint32_t*)0x50060008 |= ~FLAG)
#define Set_CRYP_DOUT(FLAG)                  (*(uint32_t*)0x5006000c &= FLAG)
#define Clr_CRYP_DOUT(FLAG)                  (*(uint32_t*)0x5006000c |= ~FLAG)
#define Set_CRYP_DMACR(FLAG)                 (*(uint32_t*)0x50060010 &= FLAG)
#define Clr_CRYP_DMACR(FLAG)                 (*(uint32_t*)0x50060010 |= ~FLAG)
#define Set_CRYP_IMSCR(FLAG)                 (*(uint32_t*)0x50060014 &= FLAG)
#define Clr_CRYP_IMSCR(FLAG)                 (*(uint32_t*)0x50060014 |= ~FLAG)
#define Set_CRYP_RISR(FLAG)                  (*(uint32_t*)0x50060018 &= FLAG)
#define Clr_CRYP_RISR(FLAG)                  (*(uint32_t*)0x50060018 |= ~FLAG)
#define Set_CRYP_MISR(FLAG)                  (*(uint32_t*)0x5006001c &= FLAG)
#define Clr_CRYP_MISR(FLAG)                  (*(uint32_t*)0x5006001c |= ~FLAG)
#define Set_CRYP_K0LR(FLAG)                  (*(uint32_t*)0x50060020 &= FLAG)
#define Clr_CRYP_K0LR(FLAG)                  (*(uint32_t*)0x50060020 |= ~FLAG)
#define Set_CRYP_K0RR(FLAG)                  (*(uint32_t*)0x50060024 &= FLAG)
#define Clr_CRYP_K0RR(FLAG)                  (*(uint32_t*)0x50060024 |= ~FLAG)
#define Set_CRYP_K1LR(FLAG)                  (*(uint32_t*)0x50060028 &= FLAG)
#define Clr_CRYP_K1LR(FLAG)                  (*(uint32_t*)0x50060028 |= ~FLAG)
#define Set_CRYP_K1RR(FLAG)                  (*(uint32_t*)0x5006002c &= FLAG)
#define Clr_CRYP_K1RR(FLAG)                  (*(uint32_t*)0x5006002c |= ~FLAG)
#define Set_CRYP_K2LR(FLAG)                  (*(uint32_t*)0x50060030 &= FLAG)
#define Clr_CRYP_K2LR(FLAG)                  (*(uint32_t*)0x50060030 |= ~FLAG)
#define Set_CRYP_K2RR(FLAG)                  (*(uint32_t*)0x50060034 &= FLAG)
#define Clr_CRYP_K2RR(FLAG)                  (*(uint32_t*)0x50060034 |= ~FLAG)
#define Set_CRYP_K3LR(FLAG)                  (*(uint32_t*)0x50060038 &= FLAG)
#define Clr_CRYP_K3LR(FLAG)                  (*(uint32_t*)0x50060038 |= ~FLAG)
#define Set_CRYP_K3RR(FLAG)                  (*(uint32_t*)0x5006003c &= FLAG)
#define Clr_CRYP_K3RR(FLAG)                  (*(uint32_t*)0x5006003c |= ~FLAG)
#define Set_CRYP_IV0LR(FLAG)                 (*(uint32_t*)0x50060040 &= FLAG)
#define Clr_CRYP_IV0LR(FLAG)                 (*(uint32_t*)0x50060040 |= ~FLAG)
#define Set_CRYP_IV0RR(FLAG)                 (*(uint32_t*)0x50060044 &= FLAG)
#define Clr_CRYP_IV0RR(FLAG)                 (*(uint32_t*)0x50060044 |= ~FLAG)
#define Set_CRYP_IV1LR(FLAG)                 (*(uint32_t*)0x50060048 &= FLAG)
#define Clr_CRYP_IV1LR(FLAG)                 (*(uint32_t*)0x50060048 |= ~FLAG)
#define Set_CRYP_IV1RR(FLAG)                 (*(uint32_t*)0x5006004c &= FLAG)
#define Clr_CRYP_IV1RR(FLAG)                 (*(uint32_t*)0x5006004c |= ~FLAG)
#define Set_CRYP_CSGCMCCM0R(FLAG)            (*(uint32_t*)0x50060050 &= FLAG)
#define Clr_CRYP_CSGCMCCM0R(FLAG)            (*(uint32_t*)0x50060050 |= ~FLAG)
#define Set_CRYP_CSGCMCCM1R(FLAG)            (*(uint32_t*)0x50060054 &= FLAG)
#define Clr_CRYP_CSGCMCCM1R(FLAG)            (*(uint32_t*)0x50060054 |= ~FLAG)
#define Set_CRYP_CSGCMCCM2R(FLAG)            (*(uint32_t*)0x50060058 &= FLAG)
#define Clr_CRYP_CSGCMCCM2R(FLAG)            (*(uint32_t*)0x50060058 |= ~FLAG)
#define Set_CRYP_CSGCMCCM3R(FLAG)            (*(uint32_t*)0x5006005c &= FLAG)
#define Clr_CRYP_CSGCMCCM3R(FLAG)            (*(uint32_t*)0x5006005c |= ~FLAG)
#define Set_CRYP_CSGCMCCM4R(FLAG)            (*(uint32_t*)0x50060060 &= FLAG)
#define Clr_CRYP_CSGCMCCM4R(FLAG)            (*(uint32_t*)0x50060060 |= ~FLAG)
#define Set_CRYP_CSGCMCCM5R(FLAG)            (*(uint32_t*)0x50060064 &= FLAG)
#define Clr_CRYP_CSGCMCCM5R(FLAG)            (*(uint32_t*)0x50060064 |= ~FLAG)
#define Set_CRYP_CSGCMCCM6R(FLAG)            (*(uint32_t*)0x50060068 &= FLAG)
#define Clr_CRYP_CSGCMCCM6R(FLAG)            (*(uint32_t*)0x50060068 |= ~FLAG)
#define Set_CRYP_CSGCMCCM7R(FLAG)            (*(uint32_t*)0x5006006c &= FLAG)
#define Clr_CRYP_CSGCMCCM7R(FLAG)            (*(uint32_t*)0x5006006c |= ~FLAG)
#define Set_CRYP_CSGCM0R(FLAG)               (*(uint32_t*)0x50060070 &= FLAG)
#define Clr_CRYP_CSGCM0R(FLAG)               (*(uint32_t*)0x50060070 |= ~FLAG)
#define Set_CRYP_CSGCM1R(FLAG)               (*(uint32_t*)0x50060074 &= FLAG)
#define Clr_CRYP_CSGCM1R(FLAG)               (*(uint32_t*)0x50060074 |= ~FLAG)
#define Set_CRYP_CSGCM2R(FLAG)               (*(uint32_t*)0x50060078 &= FLAG)
#define Clr_CRYP_CSGCM2R(FLAG)               (*(uint32_t*)0x50060078 |= ~FLAG)
#define Set_CRYP_CSGCM3R(FLAG)               (*(uint32_t*)0x5006007c &= FLAG)
#define Clr_CRYP_CSGCM3R(FLAG)               (*(uint32_t*)0x5006007c |= ~FLAG)
#define Set_CRYP_CSGCM4R(FLAG)               (*(uint32_t*)0x50060080 &= FLAG)
#define Clr_CRYP_CSGCM4R(FLAG)               (*(uint32_t*)0x50060080 |= ~FLAG)
#define Set_CRYP_CSGCM5R(FLAG)               (*(uint32_t*)0x50060084 &= FLAG)
#define Clr_CRYP_CSGCM5R(FLAG)               (*(uint32_t*)0x50060084 |= ~FLAG)
#define Set_CRYP_CSGCM6R(FLAG)               (*(uint32_t*)0x50060088 &= FLAG)
#define Clr_CRYP_CSGCM6R(FLAG)               (*(uint32_t*)0x50060088 |= ~FLAG)
#define Set_CRYP_CSGCM7R(FLAG)               (*(uint32_t*)0x5006008c &= FLAG)
#define Clr_CRYP_CSGCM7R(FLAG)               (*(uint32_t*)0x5006008c |= ~FLAG)
#define  _CRYP_CR_ALGODIR                                    (0x1 << 2)    // Algorithm direction
#define  _CRYP_CR_ALGOMODE0                                  (0x7 << 3)    // Algorithm mode
#define  _CRYP_CR_DATATYPE                                   (0x3 << 6)    // Data type selection
　
　drivers/inc/stm32f767xx_ADC.h
#define Get_ADC3_JDR3(FLAG)                  (*(uint32_t*)0x40012244 |= FLAG)
#define Get_ADC3_JDR4(FLAG)                  (*(uint32_t*)0x40012248 |= FLAG)
#define Get_ADC3_DR(FLAG)                    (*(uint32_t*)0x4001224c |= FLAG)
#define Set_ADC1_SR(FLAG)                    (*(uint32_t*)0x40012000 &= FLAG)
#define Clr_ADC1_SR(FLAG)                    (*(uint32_t*)0x40012000 |= ~FLAG)
#define Set_ADC1_CR1(FLAG)                   (*(uint32_t*)0x40012004 &= FLAG)
#define Clr_ADC1_CR1(FLAG)                   (*(uint32_t*)0x40012004 |= ~FLAG)
#define Set_ADC1_CR2(FLAG)                   (*(uint32_t*)0x40012008 &= FLAG)
#define Clr_ADC1_CR2(FLAG)                   (*(uint32_t*)0x40012008 |= ~FLAG)
#define Set_ADC1_SMPR1(FLAG)                 (*(uint32_t*)0x4001200c &= FLAG)
#define Clr_ADC1_SMPR1(FLAG)                 (*(uint32_t*)0x4001200c |= ~FLAG)
#define Set_ADC1_SMPR2(FLAG)                 (*(uint32_t*)0x40012010 &= FLAG)
#define Clr_ADC1_SMPR2(FLAG)                 (*(uint32_t*)0x40012010 |= ~FLAG)
#define Set_ADC1_JOFR1(FLAG)                 (*(uint32_t*)0x40012014 &= FLAG)
#define Clr_ADC1_JOFR1(FLAG)                 (*(uint32_t*)0x40012014 |= ~FLAG)
#define Set_ADC1_JOFR2(FLAG)                 (*(uint32_t*)0x40012018 &= FLAG)
#define Clr_ADC1_JOFR2(FLAG)                 (*(uint32_t*)0x40012018 |= ~FLAG)
#define Set_ADC1_JOFR3(FLAG)                 (*(uint32_t*)0x4001201c &= FLAG)
#define Clr_ADC1_JOFR3(FLAG)                 (*(uint32_t*)0x4001201c |= ~FLAG)
#define Set_ADC1_JOFR4(FLAG)                 (*(uint32_t*)0x40012020 &= FLAG)
#define Clr_ADC1_JOFR4(FLAG)                 (*(uint32_t*)0x40012020 |= ~FLAG)
#define Set_ADC1_HTR(FLAG)                   (*(uint32_t*)0x40012024 &= FLAG)
#define Clr_ADC1_HTR(FLAG)                   (*(uint32_t*)0x40012024 |= ~FLAG)
#define Set_ADC1_LTR(FLAG)                   (*(uint32_t*)0x40012028 &= FLAG)
#define Clr_ADC1_LTR(FLAG)                   (*(uint32_t*)0x40012028 |= ~FLAG)
#define Set_ADC1_SQR1(FLAG)                  (*(uint32_t*)0x4001202c &= FLAG)
#define Clr_ADC1_SQR1(FLAG)                  (*(uint32_t*)0x4001202c |= ~FLAG)
#define Set_ADC1_SQR2(FLAG)                  (*(uint32_t*)0x40012030 &= FLAG)
#define Clr_ADC1_SQR2(FLAG)                  (*(uint32_t*)0x40012030 |= ~FLAG)
#define Set_ADC1_SQR3(FLAG)                  (*(uint32_t*)0x40012034 &= FLAG)
#define Clr_ADC1_SQR3(FLAG)                  (*(uint32_t*)0x40012034 |= ~FLAG)
#define Set_ADC1_JSQR(FLAG)                  (*(uint32_t*)0x40012038 &= FLAG)
#define Clr_ADC1_JSQR(FLAG)                  (*(uint32_t*)0x40012038 |= ~FLAG)
#define Set_ADC1_JDR1(FLAG)                  (*(uint32_t*)0x4001203c &= FLAG)
#define Clr_ADC1_JDR1(FLAG)                  (*(uint32_t*)0x4001203c |= ~FLAG)
#define Set_ADC1_JDR2(FLAG)                  (*(uint32_t*)0x40012040 &= FLAG)
#define Clr_ADC1_JDR2(FLAG)                  (*(uint32_t*)0x40012040 |= ~FLAG)
#define Set_ADC1_JDR3(FLAG)                  (*(uint32_t*)0x40012044 &= FLAG)
#define Clr_ADC1_JDR3(FLAG)                  (*(uint32_t*)0x40012044 |= ~FLAG)
#define Set_ADC1_JDR4(FLAG)                  (*(uint32_t*)0x40012048 &= FLAG)
#define Clr_ADC1_JDR4(FLAG)                  (*(uint32_t*)0x40012048 |= ~FLAG)
#define Set_ADC1_DR(FLAG)                    (*(uint32_t*)0x4001204c &= FLAG)
#define Clr_ADC1_DR(FLAG)                    (*(uint32_t*)0x4001204c |= ~FLAG)
#define Set_ADC2_SR(FLAG)                    (*(uint32_t*)0x40012100 &= FLAG)
#define Clr_ADC2_SR(FLAG)                    (*(uint32_t*)0x40012100 |= ~FLAG)
#define Set_ADC2_CR1(FLAG)                   (*(uint32_t*)0x40012104 &= FLAG)
#define Clr_ADC2_CR1(FLAG)                   (*(uint32_t*)0x40012104 |= ~FLAG)
#define Set_ADC2_CR2(FLAG)                   (*(uint32_t*)0x40012108 &= FLAG)
#define Clr_ADC2_CR2(FLAG)                   (*(uint32_t*)0x40012108 |= ~FLAG)
#define Set_ADC2_SMPR1(FLAG)                 (*(uint32_t*)0x4001210c &= FLAG)
#define Clr_ADC2_SMPR1(FLAG)                 (*(uint32_t*)0x4001210c |= ~FLAG)
#define Set_ADC2_SMPR2(FLAG)                 (*(uint32_t*)0x40012110 &= FLAG)
#define Clr_ADC2_SMPR2(FLAG)                 (*(uint32_t*)0x40012110 |= ~FLAG)
#define Set_ADC2_JOFR1(FLAG)                 (*(uint32_t*)0x40012114 &= FLAG)
#define Clr_ADC2_JOFR1(FLAG)                 (*(uint32_t*)0x40012114 |= ~FLAG)
#define Set_ADC2_JOFR2(FLAG)                 (*(uint32_t*)0x40012118 &= FLAG)
#define Clr_ADC2_JOFR2(FLAG)                 (*(uint32_t*)0x40012118 |= ~FLAG)
#define Set_ADC2_JOFR3(FLAG)                 (*(uint32_t*)0x4001211c &= FLAG)
#define Clr_ADC2_JOFR3(FLAG)                 (*(uint32_t*)0x4001211c |= ~FLAG)
#define Set_ADC2_JOFR4(FLAG)                 (*(uint32_t*)0x40012120 &= FLAG)
#define Clr_ADC2_JOFR4(FLAG)                 (*(uint32_t*)0x40012120 |= ~FLAG)
#define Set_ADC2_HTR(FLAG)                   (*(uint32_t*)0x40012124 &= FLAG)
#define Clr_ADC2_HTR(FLAG)                   (*(uint32_t*)0x40012124 |= ~FLAG)
#define Set_ADC2_LTR(FLAG)                   (*(uint32_t*)0x40012128 &= FLAG)
#define Clr_ADC2_LTR(FLAG)                   (*(uint32_t*)0x40012128 |= ~FLAG)
#define Set_ADC2_SQR1(FLAG)                  (*(uint32_t*)0x4001212c &= FLAG)
#define Clr_ADC2_SQR1(FLAG)                  (*(uint32_t*)0x4001212c |= ~FLAG)
#define Set_ADC2_SQR2(FLAG)                  (*(uint32_t*)0x40012130 &= FLAG)
#define Clr_ADC2_SQR2(FLAG)                  (*(uint32_t*)0x40012130 |= ~FLAG)
#define Set_ADC2_SQR3(FLAG)                  (*(uint32_t*)0x40012134 &= FLAG)
#define Clr_ADC2_SQR3(FLAG)                  (*(uint32_t*)0x40012134 |= ~FLAG)
#define Set_ADC2_JSQR(FLAG)                  (*(uint32_t*)0x40012138 &= FLAG)
#define Clr_ADC2_JSQR(FLAG)                  (*(uint32_t*)0x40012138 |= ~FLAG)
#define Set_ADC2_JDR1(FLAG)                  (*(uint32_t*)0x4001213c &= FLAG)
#define Clr_ADC2_JDR1(FLAG)                  (*(uint32_t*)0x4001213c |= ~FLAG)
#define Set_ADC2_JDR2(FLAG)                  (*(uint32_t*)0x40012140 &= FLAG)
#define Clr_ADC2_JDR2(FLAG)                  (*(uint32_t*)0x40012140 |= ~FLAG)
#define Set_ADC2_JDR3(FLAG)                  (*(uint32_t*)0x40012144 &= FLAG)
#define Clr_ADC2_JDR3(FLAG)                  (*(uint32_t*)0x40012144 |= ~FLAG)
#define Set_ADC2_JDR4(FLAG)                  (*(uint32_t*)0x40012148 &= FLAG)
#define Clr_ADC2_JDR4(FLAG)                  (*(uint32_t*)0x40012148 |= ~FLAG)
#define Set_ADC2_DR(FLAG)                    (*(uint32_t*)0x4001214c &= FLAG)
#define Clr_ADC2_DR(FLAG)                    (*(uint32_t*)0x4001214c |= ~FLAG)
#define Set_ADC3_SR(FLAG)                    (*(uint32_t*)0x40012200 &= FLAG)
#define Clr_ADC3_SR(FLAG)                    (*(uint32_t*)0x40012200 |= ~FLAG)
#define Set_ADC3_CR1(FLAG)                   (*(uint32_t*)0x40012204 &= FLAG)
#define Clr_ADC3_CR1(FLAG)                   (*(uint32_t*)0x40012204 |= ~FLAG)
#define Set_ADC3_CR2(FLAG)                   (*(uint32_t*)0x40012208 &= FLAG)
#define Clr_ADC3_CR2(FLAG)                   (*(uint32_t*)0x40012208 |= ~FLAG)
#define Set_ADC3_SMPR1(FLAG)                 (*(uint32_t*)0x4001220c &= FLAG)
#define Clr_ADC3_SMPR1(FLAG)                 (*(uint32_t*)0x4001220c |= ~FLAG)
#define Set_ADC3_SMPR2(FLAG)                 (*(uint32_t*)0x40012210 &= FLAG)
#define Clr_ADC3_SMPR2(FLAG)                 (*(uint32_t*)0x40012210 |= ~FLAG)
#define Set_ADC3_JOFR1(FLAG)                 (*(uint32_t*)0x40012214 &= FLAG)
#define Clr_ADC3_JOFR1(FLAG)                 (*(uint32_t*)0x40012214 |= ~FLAG)
#define Set_ADC3_JOFR2(FLAG)                 (*(uint32_t*)0x40012218 &= FLAG)
#define Clr_ADC3_JOFR2(FLAG)                 (*(uint32_t*)0x40012218 |= ~FLAG)
#define Set_ADC3_JOFR3(FLAG)                 (*(uint32_t*)0x4001221c &= FLAG)
#define Clr_ADC3_JOFR3(FLAG)                 (*(uint32_t*)0x4001221c |= ~FLAG)
#define Set_ADC3_JOFR4(FLAG)                 (*(uint32_t*)0x40012220 &= FLAG)
#define Clr_ADC3_JOFR4(FLAG)                 (*(uint32_t*)0x40012220 |= ~FLAG)
#define Set_ADC3_HTR(FLAG)                   (*(uint32_t*)0x40012224 &= FLAG)
#define Clr_ADC3_HTR(FLAG)                   (*(uint32_t*)0x40012224 |= ~FLAG)
#define Set_ADC3_LTR(FLAG)                   (*(uint32_t*)0x40012228 &= FLAG)
#define Clr_ADC3_LTR(FLAG)                   (*(uint32_t*)0x40012228 |= ~FLAG)
#define Set_ADC3_SQR1(FLAG)                  (*(uint32_t*)0x4001222c &= FLAG)
#define Clr_ADC3_SQR1(FLAG)                  (*(uint32_t*)0x4001222c |= ~FLAG)
#define Set_ADC3_SQR2(FLAG)                  (*(uint32_t*)0x40012230 &= FLAG)
#define Clr_ADC3_SQR2(FLAG)                  (*(uint32_t*)0x40012230 |= ~FLAG)
#define Set_ADC3_SQR3(FLAG)                  (*(uint32_t*)0x40012234 &= FLAG)
#define Clr_ADC3_SQR3(FLAG)                  (*(uint32_t*)0x40012234 |= ~FLAG)
#define Set_ADC3_JSQR(FLAG)                  (*(uint32_t*)0x40012238 &= FLAG)
#define Clr_ADC3_JSQR(FLAG)                  (*(uint32_t*)0x40012238 |= ~FLAG)
#define Set_ADC3_JDR1(FLAG)                  (*(uint32_t*)0x4001223c &= FLAG)
#define Clr_ADC3_JDR1(FLAG)                  (*(uint32_t*)0x4001223c |= ~FLAG)
#define Set_ADC3_JDR2(FLAG)                  (*(uint32_t*)0x40012240 &= FLAG)
#define Clr_ADC3_JDR2(FLAG)                  (*(uint32_t*)0x40012240 |= ~FLAG)
#define Set_ADC3_JDR3(FLAG)                  (*(uint32_t*)0x40012244 &= FLAG)
#define Clr_ADC3_JDR3(FLAG)                  (*(uint32_t*)0x40012244 |= ~FLAG)
#define Set_ADC3_JDR4(FLAG)                  (*(uint32_t*)0x40012248 &= FLAG)
#define Clr_ADC3_JDR4(FLAG)                  (*(uint32_t*)0x40012248 |= ~FLAG)
#define Set_ADC3_DR(FLAG)                    (*(uint32_t*)0x4001224c &= FLAG)
#define Clr_ADC3_DR(FLAG)                    (*(uint32_t*)0x4001224c |= ~FLAG)
#define  _ADC1_SR_OVR                                        (0x1 << 5)    // Overrun
#define  _ADC1_SR_STRT                                       (0x1 << 4)    // Regular channel start flag
#define  _ADC1_SR_JSTRT                                      (0x1 << 3)    // Injected channel start flag
　
　drivers/inc/stm32f767xx_USB_OTG_HS.h
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 |= FLAG)
#define Get_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 |= FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 |= ~FLAG)
#define Set_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 &= FLAG)
#define Clr_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 |= ~FLAG)
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS                (0x1 << 0)    // Session request success
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ                   (0x1 << 1)    // Session request
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS                (0x1 << 8)    // Host negotiation success
　
　drivers/inc/stm32f767xx_FPU.h
#define Get_FPU_FPCCR(FLAG)                  (*(uint32_t*)0xe000ef34 |= FLAG)
#define Get_FPU_FPCAR(FLAG)                  (*(uint32_t*)0xe000ef38 |= FLAG)
#define Get_FPU_FPSCR(FLAG)                  (*(uint32_t*)0xe000ef3c |= FLAG)
#define Set_FPU_CPACR_CPACR(FLAG)            (*(uint32_t*)0xe000ed88 &= FLAG)
#define Clr_FPU_CPACR_CPACR(FLAG)            (*(uint32_t*)0xe000ed88 |= ~FLAG)
#define Set_FPU_FPCCR(FLAG)                  (*(uint32_t*)0xe000ef34 &= FLAG)
#define Clr_FPU_FPCCR(FLAG)                  (*(uint32_t*)0xe000ef34 |= ~FLAG)
#define Set_FPU_FPCAR(FLAG)                  (*(uint32_t*)0xe000ef38 &= FLAG)
#define Clr_FPU_FPCAR(FLAG)                  (*(uint32_t*)0xe000ef38 |= ~FLAG)
#define Set_FPU_FPSCR(FLAG)                  (*(uint32_t*)0xe000ef3c &= FLAG)
#define Clr_FPU_FPSCR(FLAG)                  (*(uint32_t*)0xe000ef3c |= ~FLAG)
#define  _FPU_CPACR_CPACR_CP                                 (0xf << 20)    // CP
#define  _FPU_FPCCR_LSPACT                                   (0x1 << 0)    // LSPACT
#define  _FPU_FPCCR_USER                                     (0x1 << 1)    // USER
　
　drivers/inc/stm32f767xx_CAN.h
#define Get_CAN2_F26R2(FLAG)                 (*(uint32_t*)0x40006b14 |= FLAG)
#define Get_CAN2_F27R1(FLAG)                 (*(uint32_t*)0x40006b18 |= FLAG)
#define Get_CAN2_F27R2(FLAG)                 (*(uint32_t*)0x40006b1c |= FLAG)
#define Set_CAN3_MCR(FLAG)                   (*(uint32_t*)0x40003400 &= FLAG)
#define Clr_CAN3_MCR(FLAG)                   (*(uint32_t*)0x40003400 |= ~FLAG)
#define Set_CAN3_MSR(FLAG)                   (*(uint32_t*)0x40003404 &= FLAG)
#define Clr_CAN3_MSR(FLAG)                   (*(uint32_t*)0x40003404 |= ~FLAG)
#define Set_CAN3_TSR(FLAG)                   (*(uint32_t*)0x40003408 &= FLAG)
#define Clr_CAN3_TSR(FLAG)                   (*(uint32_t*)0x40003408 |= ~FLAG)
#define Set_CAN3_RF0R(FLAG)                  (*(uint32_t*)0x4000340c &= FLAG)
#define Clr_CAN3_RF0R(FLAG)                  (*(uint32_t*)0x4000340c |= ~FLAG)
#define Set_CAN3_RF1R(FLAG)                  (*(uint32_t*)0x40003410 &= FLAG)
#define Clr_CAN3_RF1R(FLAG)                  (*(uint32_t*)0x40003410 |= ~FLAG)
#define Set_CAN3_IER(FLAG)                   (*(uint32_t*)0x40003414 &= FLAG)
#define Clr_CAN3_IER(FLAG)                   (*(uint32_t*)0x40003414 |= ~FLAG)
#define Set_CAN3_ESR(FLAG)                   (*(uint32_t*)0x40003418 &= FLAG)
#define Clr_CAN3_ESR(FLAG)                   (*(uint32_t*)0x40003418 |= ~FLAG)
#define Set_CAN3_BTR(FLAG)                   (*(uint32_t*)0x4000341c &= FLAG)
#define Clr_CAN3_BTR(FLAG)                   (*(uint32_t*)0x4000341c |= ~FLAG)
#define Set_CAN3_TI0R(FLAG)                  (*(uint32_t*)0x40003580 &= FLAG)
#define Clr_CAN3_TI0R(FLAG)                  (*(uint32_t*)0x40003580 |= ~FLAG)
#define Set_CAN3_TDT0R(FLAG)                 (*(uint32_t*)0x40003584 &= FLAG)
#define Clr_CAN3_TDT0R(FLAG)                 (*(uint32_t*)0x40003584 |= ~FLAG)
#define Set_CAN3_TDL0R(FLAG)                 (*(uint32_t*)0x40003588 &= FLAG)
#define Clr_CAN3_TDL0R(FLAG)                 (*(uint32_t*)0x40003588 |= ~FLAG)
#define Set_CAN3_TDH0R(FLAG)                 (*(uint32_t*)0x4000358c &= FLAG)
#define Clr_CAN3_TDH0R(FLAG)                 (*(uint32_t*)0x4000358c |= ~FLAG)
#define Set_CAN3_TI1R(FLAG)                  (*(uint32_t*)0x40003590 &= FLAG)
#define Clr_CAN3_TI1R(FLAG)                  (*(uint32_t*)0x40003590 |= ~FLAG)
#define Set_CAN3_TDT1R(FLAG)                 (*(uint32_t*)0x40003594 &= FLAG)
#define Clr_CAN3_TDT1R(FLAG)                 (*(uint32_t*)0x40003594 |= ~FLAG)
#define Set_CAN3_TDL1R(FLAG)                 (*(uint32_t*)0x40003598 &= FLAG)
#define Clr_CAN3_TDL1R(FLAG)                 (*(uint32_t*)0x40003598 |= ~FLAG)
#define Set_CAN3_TDH1R(FLAG)                 (*(uint32_t*)0x4000359c &= FLAG)
#define Clr_CAN3_TDH1R(FLAG)                 (*(uint32_t*)0x4000359c |= ~FLAG)
#define Set_CAN3_TI2R(FLAG)                  (*(uint32_t*)0x400035a0 &= FLAG)
#define Clr_CAN3_TI2R(FLAG)                  (*(uint32_t*)0x400035a0 |= ~FLAG)
#define Set_CAN3_TDT2R(FLAG)                 (*(uint32_t*)0x400035a4 &= FLAG)
#define Clr_CAN3_TDT2R(FLAG)                 (*(uint32_t*)0x400035a4 |= ~FLAG)
#define Set_CAN3_TDL2R(FLAG)                 (*(uint32_t*)0x400035a8 &= FLAG)
#define Clr_CAN3_TDL2R(FLAG)                 (*(uint32_t*)0x400035a8 |= ~FLAG)
#define Set_CAN3_TDH2R(FLAG)                 (*(uint32_t*)0x400035ac &= FLAG)
#define Clr_CAN3_TDH2R(FLAG)                 (*(uint32_t*)0x400035ac |= ~FLAG)
#define Set_CAN3_RI0R(FLAG)                  (*(uint32_t*)0x400035b0 &= FLAG)
#define Clr_CAN3_RI0R(FLAG)                  (*(uint32_t*)0x400035b0 |= ~FLAG)
#define Set_CAN3_RDT0R(FLAG)                 (*(uint32_t*)0x400035b4 &= FLAG)
#define Clr_CAN3_RDT0R(FLAG)                 (*(uint32_t*)0x400035b4 |= ~FLAG)
#define Set_CAN3_RDL0R(FLAG)                 (*(uint32_t*)0x400035b8 &= FLAG)
#define Clr_CAN3_RDL0R(FLAG)                 (*(uint32_t*)0x400035b8 |= ~FLAG)
#define Set_CAN3_RDH0R(FLAG)                 (*(uint32_t*)0x400035bc &= FLAG)
#define Clr_CAN3_RDH0R(FLAG)                 (*(uint32_t*)0x400035bc |= ~FLAG)
#define Set_CAN3_RI1R(FLAG)                  (*(uint32_t*)0x400035c0 &= FLAG)
#define Clr_CAN3_RI1R(FLAG)                  (*(uint32_t*)0x400035c0 |= ~FLAG)
#define Set_CAN3_RDT1R(FLAG)                 (*(uint32_t*)0x400035c4 &= FLAG)
#define Clr_CAN3_RDT1R(FLAG)                 (*(uint32_t*)0x400035c4 |= ~FLAG)
#define Set_CAN3_RDL1R(FLAG)                 (*(uint32_t*)0x400035c8 &= FLAG)
#define Clr_CAN3_RDL1R(FLAG)                 (*(uint32_t*)0x400035c8 |= ~FLAG)
#define Set_CAN3_RDH1R(FLAG)                 (*(uint32_t*)0x400035cc &= FLAG)
#define Clr_CAN3_RDH1R(FLAG)                 (*(uint32_t*)0x400035cc |= ~FLAG)
#define Set_CAN3_FMR(FLAG)                   (*(uint32_t*)0x40003600 &= FLAG)
#define Clr_CAN3_FMR(FLAG)                   (*(uint32_t*)0x40003600 |= ~FLAG)
#define Set_CAN3_FM1R(FLAG)                  (*(uint32_t*)0x40003604 &= FLAG)
#define Clr_CAN3_FM1R(FLAG)                  (*(uint32_t*)0x40003604 |= ~FLAG)
#define Set_CAN3_FS1R(FLAG)                  (*(uint32_t*)0x4000360c &= FLAG)
#define Clr_CAN3_FS1R(FLAG)                  (*(uint32_t*)0x4000360c |= ~FLAG)
#define Set_CAN3_FFA1R(FLAG)                 (*(uint32_t*)0x40003614 &= FLAG)
#define Clr_CAN3_FFA1R(FLAG)                 (*(uint32_t*)0x40003614 |= ~FLAG)
#define Set_CAN3_FA1R(FLAG)                  (*(uint32_t*)0x4000361c &= FLAG)
#define Clr_CAN3_FA1R(FLAG)                  (*(uint32_t*)0x4000361c |= ~FLAG)
#define Set_CAN3_F0R1(FLAG)                  (*(uint32_t*)0x40003640 &= FLAG)
#define Clr_CAN3_F0R1(FLAG)                  (*(uint32_t*)0x40003640 |= ~FLAG)
#define Set_CAN3_F0R2(FLAG)                  (*(uint32_t*)0x40003644 &= FLAG)
#define Clr_CAN3_F0R2(FLAG)                  (*(uint32_t*)0x40003644 |= ~FLAG)
#define Set_CAN3_F1R1(FLAG)                  (*(uint32_t*)0x40003648 &= FLAG)
#define Clr_CAN3_F1R1(FLAG)                  (*(uint32_t*)0x40003648 |= ~FLAG)
#define Set_CAN3_F1R2(FLAG)                  (*(uint32_t*)0x4000364c &= FLAG)
#define Clr_CAN3_F1R2(FLAG)                  (*(uint32_t*)0x4000364c |= ~FLAG)
#define Set_CAN3_F2R1(FLAG)                  (*(uint32_t*)0x40003650 &= FLAG)
#define Clr_CAN3_F2R1(FLAG)                  (*(uint32_t*)0x40003650 |= ~FLAG)
#define Set_CAN3_F2R2(FLAG)                  (*(uint32_t*)0x40003654 &= FLAG)
#define Clr_CAN3_F2R2(FLAG)                  (*(uint32_t*)0x40003654 |= ~FLAG)
#define Set_CAN3_F3R1(FLAG)                  (*(uint32_t*)0x40003658 &= FLAG)
#define Clr_CAN3_F3R1(FLAG)                  (*(uint32_t*)0x40003658 |= ~FLAG)
#define Set_CAN3_F3R2(FLAG)                  (*(uint32_t*)0x4000365c &= FLAG)
#define Clr_CAN3_F3R2(FLAG)                  (*(uint32_t*)0x4000365c |= ~FLAG)
#define Set_CAN3_F4R1(FLAG)                  (*(uint32_t*)0x40003660 &= FLAG)
#define Clr_CAN3_F4R1(FLAG)                  (*(uint32_t*)0x40003660 |= ~FLAG)
#define Set_CAN3_F4R2(FLAG)                  (*(uint32_t*)0x40003664 &= FLAG)
#define Clr_CAN3_F4R2(FLAG)                  (*(uint32_t*)0x40003664 |= ~FLAG)
#define Set_CAN3_F5R1(FLAG)                  (*(uint32_t*)0x40003668 &= FLAG)
#define Clr_CAN3_F5R1(FLAG)                  (*(uint32_t*)0x40003668 |= ~FLAG)
#define Set_CAN3_F5R2(FLAG)                  (*(uint32_t*)0x4000366c &= FLAG)
#define Clr_CAN3_F5R2(FLAG)                  (*(uint32_t*)0x4000366c |= ~FLAG)
#define Set_CAN3_F6R1(FLAG)                  (*(uint32_t*)0x40003670 &= FLAG)
#define Clr_CAN3_F6R1(FLAG)                  (*(uint32_t*)0x40003670 |= ~FLAG)
#define Set_CAN3_F6R2(FLAG)                  (*(uint32_t*)0x40003674 &= FLAG)
#define Clr_CAN3_F6R2(FLAG)                  (*(uint32_t*)0x40003674 |= ~FLAG)
#define Set_CAN3_F7R1(FLAG)                  (*(uint32_t*)0x40003678 &= FLAG)
#define Clr_CAN3_F7R1(FLAG)                  (*(uint32_t*)0x40003678 |= ~FLAG)
#define Set_CAN3_F7R2(FLAG)                  (*(uint32_t*)0x4000367c &= FLAG)
#define Clr_CAN3_F7R2(FLAG)                  (*(uint32_t*)0x4000367c |= ~FLAG)
#define Set_CAN3_F8R1(FLAG)                  (*(uint32_t*)0x40003680 &= FLAG)
#define Clr_CAN3_F8R1(FLAG)                  (*(uint32_t*)0x40003680 |= ~FLAG)
#define Set_CAN3_F8R2(FLAG)                  (*(uint32_t*)0x40003684 &= FLAG)
#define Clr_CAN3_F8R2(FLAG)                  (*(uint32_t*)0x40003684 |= ~FLAG)
#define Set_CAN3_F9R1(FLAG)                  (*(uint32_t*)0x40003688 &= FLAG)
#define Clr_CAN3_F9R1(FLAG)                  (*(uint32_t*)0x40003688 |= ~FLAG)
#define Set_CAN3_F9R2(FLAG)                  (*(uint32_t*)0x4000368c &= FLAG)
#define Clr_CAN3_F9R2(FLAG)                  (*(uint32_t*)0x4000368c |= ~FLAG)
#define Set_CAN3_F10R1(FLAG)                 (*(uint32_t*)0x40003690 &= FLAG)
#define Clr_CAN3_F10R1(FLAG)                 (*(uint32_t*)0x40003690 |= ~FLAG)
#define Set_CAN3_F10R2(FLAG)                 (*(uint32_t*)0x40003694 &= FLAG)
#define Clr_CAN3_F10R2(FLAG)                 (*(uint32_t*)0x40003694 |= ~FLAG)
#define Set_CAN3_F11R1(FLAG)                 (*(uint32_t*)0x40003698 &= FLAG)
#define Clr_CAN3_F11R1(FLAG)                 (*(uint32_t*)0x40003698 |= ~FLAG)
#define Set_CAN3_F11R2(FLAG)                 (*(uint32_t*)0x4000369c &= FLAG)
#define Clr_CAN3_F11R2(FLAG)                 (*(uint32_t*)0x4000369c |= ~FLAG)
#define Set_CAN3_F12R1(FLAG)                 (*(uint32_t*)0x400036a0 &= FLAG)
#define Clr_CAN3_F12R1(FLAG)                 (*(uint32_t*)0x400036a0 |= ~FLAG)
#define Set_CAN3_F12R2(FLAG)                 (*(uint32_t*)0x400036a4 &= FLAG)
#define Clr_CAN3_F12R2(FLAG)                 (*(uint32_t*)0x400036a4 |= ~FLAG)
#define Set_CAN3_F13R1(FLAG)                 (*(uint32_t*)0x400036a8 &= FLAG)
#define Clr_CAN3_F13R1(FLAG)                 (*(uint32_t*)0x400036a8 |= ~FLAG)
#define Set_CAN3_F13R2(FLAG)                 (*(uint32_t*)0x400036ac &= FLAG)
#define Clr_CAN3_F13R2(FLAG)                 (*(uint32_t*)0x400036ac |= ~FLAG)
#define Set_CAN3_F14R1(FLAG)                 (*(uint32_t*)0x400036b0 &= FLAG)
#define Clr_CAN3_F14R1(FLAG)                 (*(uint32_t*)0x400036b0 |= ~FLAG)
#define Set_CAN3_F14R2(FLAG)                 (*(uint32_t*)0x400036b4 &= FLAG)
#define Clr_CAN3_F14R2(FLAG)                 (*(uint32_t*)0x400036b4 |= ~FLAG)
#define Set_CAN3_F15R1(FLAG)                 (*(uint32_t*)0x400036b8 &= FLAG)
#define Clr_CAN3_F15R1(FLAG)                 (*(uint32_t*)0x400036b8 |= ~FLAG)
#define Set_CAN3_F15R2(FLAG)                 (*(uint32_t*)0x400036bc &= FLAG)
#define Clr_CAN3_F15R2(FLAG)                 (*(uint32_t*)0x400036bc |= ~FLAG)
#define Set_CAN3_F16R1(FLAG)                 (*(uint32_t*)0x400036c0 &= FLAG)
#define Clr_CAN3_F16R1(FLAG)                 (*(uint32_t*)0x400036c0 |= ~FLAG)
#define Set_CAN3_F16R2(FLAG)                 (*(uint32_t*)0x400036c4 &= FLAG)
#define Clr_CAN3_F16R2(FLAG)                 (*(uint32_t*)0x400036c4 |= ~FLAG)
#define Set_CAN3_F17R1(FLAG)                 (*(uint32_t*)0x400036c8 &= FLAG)
#define Clr_CAN3_F17R1(FLAG)                 (*(uint32_t*)0x400036c8 |= ~FLAG)
#define Set_CAN3_F17R2(FLAG)                 (*(uint32_t*)0x400036cc &= FLAG)
#define Clr_CAN3_F17R2(FLAG)                 (*(uint32_t*)0x400036cc |= ~FLAG)
#define Set_CAN3_F18R1(FLAG)                 (*(uint32_t*)0x400036d0 &= FLAG)
#define Clr_CAN3_F18R1(FLAG)                 (*(uint32_t*)0x400036d0 |= ~FLAG)
#define Set_CAN3_F18R2(FLAG)                 (*(uint32_t*)0x400036d4 &= FLAG)
#define Clr_CAN3_F18R2(FLAG)                 (*(uint32_t*)0x400036d4 |= ~FLAG)
#define Set_CAN3_F19R1(FLAG)                 (*(uint32_t*)0x400036d8 &= FLAG)
#define Clr_CAN3_F19R1(FLAG)                 (*(uint32_t*)0x400036d8 |= ~FLAG)
#define Set_CAN3_F19R2(FLAG)                 (*(uint32_t*)0x400036dc &= FLAG)
#define Clr_CAN3_F19R2(FLAG)                 (*(uint32_t*)0x400036dc |= ~FLAG)
#define Set_CAN3_F20R1(FLAG)                 (*(uint32_t*)0x400036e0 &= FLAG)
#define Clr_CAN3_F20R1(FLAG)                 (*(uint32_t*)0x400036e0 |= ~FLAG)
#define Set_CAN3_F20R2(FLAG)                 (*(uint32_t*)0x400036e4 &= FLAG)
#define Clr_CAN3_F20R2(FLAG)                 (*(uint32_t*)0x400036e4 |= ~FLAG)
#define Set_CAN3_F21R1(FLAG)                 (*(uint32_t*)0x400036e8 &= FLAG)
#define Clr_CAN3_F21R1(FLAG)                 (*(uint32_t*)0x400036e8 |= ~FLAG)
#define Set_CAN3_F21R2(FLAG)                 (*(uint32_t*)0x400036ec &= FLAG)
#define Clr_CAN3_F21R2(FLAG)                 (*(uint32_t*)0x400036ec |= ~FLAG)
#define Set_CAN3_F22R1(FLAG)                 (*(uint32_t*)0x400036f0 &= FLAG)
#define Clr_CAN3_F22R1(FLAG)                 (*(uint32_t*)0x400036f0 |= ~FLAG)
#define Set_CAN3_F22R2(FLAG)                 (*(uint32_t*)0x400036f4 &= FLAG)
#define Clr_CAN3_F22R2(FLAG)                 (*(uint32_t*)0x400036f4 |= ~FLAG)
#define Set_CAN3_F23R1(FLAG)                 (*(uint32_t*)0x400036f8 &= FLAG)
#define Clr_CAN3_F23R1(FLAG)                 (*(uint32_t*)0x400036f8 |= ~FLAG)
#define Set_CAN3_F23R2(FLAG)                 (*(uint32_t*)0x400036fc &= FLAG)
#define Clr_CAN3_F23R2(FLAG)                 (*(uint32_t*)0x400036fc |= ~FLAG)
#define Set_CAN3_F24R1(FLAG)                 (*(uint32_t*)0x40003700 &= FLAG)
#define Clr_CAN3_F24R1(FLAG)                 (*(uint32_t*)0x40003700 |= ~FLAG)
#define Set_CAN3_F24R2(FLAG)                 (*(uint32_t*)0x40003704 &= FLAG)
#define Clr_CAN3_F24R2(FLAG)                 (*(uint32_t*)0x40003704 |= ~FLAG)
#define Set_CAN3_F25R1(FLAG)                 (*(uint32_t*)0x40003708 &= FLAG)
#define Clr_CAN3_F25R1(FLAG)                 (*(uint32_t*)0x40003708 |= ~FLAG)
#define Set_CAN3_F25R2(FLAG)                 (*(uint32_t*)0x4000370c &= FLAG)
#define Clr_CAN3_F25R2(FLAG)                 (*(uint32_t*)0x4000370c |= ~FLAG)
#define Set_CAN3_F26R1(FLAG)                 (*(uint32_t*)0x40003710 &= FLAG)
#define Clr_CAN3_F26R1(FLAG)                 (*(uint32_t*)0x40003710 |= ~FLAG)
#define Set_CAN3_F26R2(FLAG)                 (*(uint32_t*)0x40003714 &= FLAG)
#define Clr_CAN3_F26R2(FLAG)                 (*(uint32_t*)0x40003714 |= ~FLAG)
#define Set_CAN3_F27R1(FLAG)                 (*(uint32_t*)0x40003718 &= FLAG)
#define Clr_CAN3_F27R1(FLAG)                 (*(uint32_t*)0x40003718 |= ~FLAG)
#define Set_CAN3_F27R2(FLAG)                 (*(uint32_t*)0x4000371c &= FLAG)
#define Clr_CAN3_F27R2(FLAG)                 (*(uint32_t*)0x4000371c |= ~FLAG)
#define Set_CAN1_MCR(FLAG)                   (*(uint32_t*)0x40006400 &= FLAG)
#define Clr_CAN1_MCR(FLAG)                   (*(uint32_t*)0x40006400 |= ~FLAG)
#define Set_CAN1_MSR(FLAG)                   (*(uint32_t*)0x40006404 &= FLAG)
#define Clr_CAN1_MSR(FLAG)                   (*(uint32_t*)0x40006404 |= ~FLAG)
#define Set_CAN1_TSR(FLAG)                   (*(uint32_t*)0x40006408 &= FLAG)
#define Clr_CAN1_TSR(FLAG)                   (*(uint32_t*)0x40006408 |= ~FLAG)
#define Set_CAN1_RF0R(FLAG)                  (*(uint32_t*)0x4000640c &= FLAG)
#define Clr_CAN1_RF0R(FLAG)                  (*(uint32_t*)0x4000640c |= ~FLAG)
#define Set_CAN1_RF1R(FLAG)                  (*(uint32_t*)0x40006410 &= FLAG)
#define Clr_CAN1_RF1R(FLAG)                  (*(uint32_t*)0x40006410 |= ~FLAG)
#define Set_CAN1_IER(FLAG)                   (*(uint32_t*)0x40006414 &= FLAG)
#define Clr_CAN1_IER(FLAG)                   (*(uint32_t*)0x40006414 |= ~FLAG)
#define Set_CAN1_ESR(FLAG)                   (*(uint32_t*)0x40006418 &= FLAG)
#define Clr_CAN1_ESR(FLAG)                   (*(uint32_t*)0x40006418 |= ~FLAG)
#define Set_CAN1_BTR(FLAG)                   (*(uint32_t*)0x4000641c &= FLAG)
#define Clr_CAN1_BTR(FLAG)                   (*(uint32_t*)0x4000641c |= ~FLAG)
#define Set_CAN1_TI0R(FLAG)                  (*(uint32_t*)0x40006580 &= FLAG)
#define Clr_CAN1_TI0R(FLAG)                  (*(uint32_t*)0x40006580 |= ~FLAG)
#define Set_CAN1_TDT0R(FLAG)                 (*(uint32_t*)0x40006584 &= FLAG)
#define Clr_CAN1_TDT0R(FLAG)                 (*(uint32_t*)0x40006584 |= ~FLAG)
#define Set_CAN1_TDL0R(FLAG)                 (*(uint32_t*)0x40006588 &= FLAG)
#define Clr_CAN1_TDL0R(FLAG)                 (*(uint32_t*)0x40006588 |= ~FLAG)
#define Set_CAN1_TDH0R(FLAG)                 (*(uint32_t*)0x4000658c &= FLAG)
#define Clr_CAN1_TDH0R(FLAG)                 (*(uint32_t*)0x4000658c |= ~FLAG)
#define Set_CAN1_TI1R(FLAG)                  (*(uint32_t*)0x40006590 &= FLAG)
#define Clr_CAN1_TI1R(FLAG)                  (*(uint32_t*)0x40006590 |= ~FLAG)
#define Set_CAN1_TDT1R(FLAG)                 (*(uint32_t*)0x40006594 &= FLAG)
#define Clr_CAN1_TDT1R(FLAG)                 (*(uint32_t*)0x40006594 |= ~FLAG)
#define Set_CAN1_TDL1R(FLAG)                 (*(uint32_t*)0x40006598 &= FLAG)
#define Clr_CAN1_TDL1R(FLAG)                 (*(uint32_t*)0x40006598 |= ~FLAG)
#define Set_CAN1_TDH1R(FLAG)                 (*(uint32_t*)0x4000659c &= FLAG)
#define Clr_CAN1_TDH1R(FLAG)                 (*(uint32_t*)0x4000659c |= ~FLAG)
#define Set_CAN1_TI2R(FLAG)                  (*(uint32_t*)0x400065a0 &= FLAG)
#define Clr_CAN1_TI2R(FLAG)                  (*(uint32_t*)0x400065a0 |= ~FLAG)
#define Set_CAN1_TDT2R(FLAG)                 (*(uint32_t*)0x400065a4 &= FLAG)
#define Clr_CAN1_TDT2R(FLAG)                 (*(uint32_t*)0x400065a4 |= ~FLAG)
#define Set_CAN1_TDL2R(FLAG)                 (*(uint32_t*)0x400065a8 &= FLAG)
#define Clr_CAN1_TDL2R(FLAG)                 (*(uint32_t*)0x400065a8 |= ~FLAG)
#define Set_CAN1_TDH2R(FLAG)                 (*(uint32_t*)0x400065ac &= FLAG)
#define Clr_CAN1_TDH2R(FLAG)                 (*(uint32_t*)0x400065ac |= ~FLAG)
#define Set_CAN1_RI0R(FLAG)                  (*(uint32_t*)0x400065b0 &= FLAG)
#define Clr_CAN1_RI0R(FLAG)                  (*(uint32_t*)0x400065b0 |= ~FLAG)
#define Set_CAN1_RDT0R(FLAG)                 (*(uint32_t*)0x400065b4 &= FLAG)
#define Clr_CAN1_RDT0R(FLAG)                 (*(uint32_t*)0x400065b4 |= ~FLAG)
#define Set_CAN1_RDL0R(FLAG)                 (*(uint32_t*)0x400065b8 &= FLAG)
#define Clr_CAN1_RDL0R(FLAG)                 (*(uint32_t*)0x400065b8 |= ~FLAG)
#define Set_CAN1_RDH0R(FLAG)                 (*(uint32_t*)0x400065bc &= FLAG)
#define Clr_CAN1_RDH0R(FLAG)                 (*(uint32_t*)0x400065bc |= ~FLAG)
#define Set_CAN1_RI1R(FLAG)                  (*(uint32_t*)0x400065c0 &= FLAG)
#define Clr_CAN1_RI1R(FLAG)                  (*(uint32_t*)0x400065c0 |= ~FLAG)
#define Set_CAN1_RDT1R(FLAG)                 (*(uint32_t*)0x400065c4 &= FLAG)
#define Clr_CAN1_RDT1R(FLAG)                 (*(uint32_t*)0x400065c4 |= ~FLAG)
#define Set_CAN1_RDL1R(FLAG)                 (*(uint32_t*)0x400065c8 &= FLAG)
#define Clr_CAN1_RDL1R(FLAG)                 (*(uint32_t*)0x400065c8 |= ~FLAG)
#define Set_CAN1_RDH1R(FLAG)                 (*(uint32_t*)0x400065cc &= FLAG)
#define Clr_CAN1_RDH1R(FLAG)                 (*(uint32_t*)0x400065cc |= ~FLAG)
#define Set_CAN1_FMR(FLAG)                   (*(uint32_t*)0x40006600 &= FLAG)
#define Clr_CAN1_FMR(FLAG)                   (*(uint32_t*)0x40006600 |= ~FLAG)
#define Set_CAN1_FM1R(FLAG)                  (*(uint32_t*)0x40006604 &= FLAG)
#define Clr_CAN1_FM1R(FLAG)                  (*(uint32_t*)0x40006604 |= ~FLAG)
#define Set_CAN1_FS1R(FLAG)                  (*(uint32_t*)0x4000660c &= FLAG)
#define Clr_CAN1_FS1R(FLAG)                  (*(uint32_t*)0x4000660c |= ~FLAG)
#define Set_CAN1_FFA1R(FLAG)                 (*(uint32_t*)0x40006614 &= FLAG)
#define Clr_CAN1_FFA1R(FLAG)                 (*(uint32_t*)0x40006614 |= ~FLAG)
#define Set_CAN1_FA1R(FLAG)                  (*(uint32_t*)0x4000661c &= FLAG)
#define Clr_CAN1_FA1R(FLAG)                  (*(uint32_t*)0x4000661c |= ~FLAG)
#define Set_CAN1_F0R1(FLAG)                  (*(uint32_t*)0x40006640 &= FLAG)
#define Clr_CAN1_F0R1(FLAG)                  (*(uint32_t*)0x40006640 |= ~FLAG)
#define Set_CAN1_F0R2(FLAG)                  (*(uint32_t*)0x40006644 &= FLAG)
#define Clr_CAN1_F0R2(FLAG)                  (*(uint32_t*)0x40006644 |= ~FLAG)
#define Set_CAN1_F1R1(FLAG)                  (*(uint32_t*)0x40006648 &= FLAG)
#define Clr_CAN1_F1R1(FLAG)                  (*(uint32_t*)0x40006648 |= ~FLAG)
#define Set_CAN1_F1R2(FLAG)                  (*(uint32_t*)0x4000664c &= FLAG)
#define Clr_CAN1_F1R2(FLAG)                  (*(uint32_t*)0x4000664c |= ~FLAG)
#define Set_CAN1_F2R1(FLAG)                  (*(uint32_t*)0x40006650 &= FLAG)
#define Clr_CAN1_F2R1(FLAG)                  (*(uint32_t*)0x40006650 |= ~FLAG)
#define Set_CAN1_F2R2(FLAG)                  (*(uint32_t*)0x40006654 &= FLAG)
#define Clr_CAN1_F2R2(FLAG)                  (*(uint32_t*)0x40006654 |= ~FLAG)
#define Set_CAN1_F3R1(FLAG)                  (*(uint32_t*)0x40006658 &= FLAG)
#define Clr_CAN1_F3R1(FLAG)                  (*(uint32_t*)0x40006658 |= ~FLAG)
#define Set_CAN1_F3R2(FLAG)                  (*(uint32_t*)0x4000665c &= FLAG)
#define Clr_CAN1_F3R2(FLAG)                  (*(uint32_t*)0x4000665c |= ~FLAG)
#define Set_CAN1_F4R1(FLAG)                  (*(uint32_t*)0x40006660 &= FLAG)
#define Clr_CAN1_F4R1(FLAG)                  (*(uint32_t*)0x40006660 |= ~FLAG)
#define Set_CAN1_F4R2(FLAG)                  (*(uint32_t*)0x40006664 &= FLAG)
#define Clr_CAN1_F4R2(FLAG)                  (*(uint32_t*)0x40006664 |= ~FLAG)
#define Set_CAN1_F5R1(FLAG)                  (*(uint32_t*)0x40006668 &= FLAG)
#define Clr_CAN1_F5R1(FLAG)                  (*(uint32_t*)0x40006668 |= ~FLAG)
#define Set_CAN1_F5R2(FLAG)                  (*(uint32_t*)0x4000666c &= FLAG)
#define Clr_CAN1_F5R2(FLAG)                  (*(uint32_t*)0x4000666c |= ~FLAG)
#define Set_CAN1_F6R1(FLAG)                  (*(uint32_t*)0x40006670 &= FLAG)
#define Clr_CAN1_F6R1(FLAG)                  (*(uint32_t*)0x40006670 |= ~FLAG)
#define Set_CAN1_F6R2(FLAG)                  (*(uint32_t*)0x40006674 &= FLAG)
#define Clr_CAN1_F6R2(FLAG)                  (*(uint32_t*)0x40006674 |= ~FLAG)
#define Set_CAN1_F7R1(FLAG)                  (*(uint32_t*)0x40006678 &= FLAG)
#define Clr_CAN1_F7R1(FLAG)                  (*(uint32_t*)0x40006678 |= ~FLAG)
#define Set_CAN1_F7R2(FLAG)                  (*(uint32_t*)0x4000667c &= FLAG)
#define Clr_CAN1_F7R2(FLAG)                  (*(uint32_t*)0x4000667c |= ~FLAG)
#define Set_CAN1_F8R1(FLAG)                  (*(uint32_t*)0x40006680 &= FLAG)
#define Clr_CAN1_F8R1(FLAG)                  (*(uint32_t*)0x40006680 |= ~FLAG)
#define Set_CAN1_F8R2(FLAG)                  (*(uint32_t*)0x40006684 &= FLAG)
#define Clr_CAN1_F8R2(FLAG)                  (*(uint32_t*)0x40006684 |= ~FLAG)
#define Set_CAN1_F9R1(FLAG)                  (*(uint32_t*)0x40006688 &= FLAG)
#define Clr_CAN1_F9R1(FLAG)                  (*(uint32_t*)0x40006688 |= ~FLAG)
#define Set_CAN1_F9R2(FLAG)                  (*(uint32_t*)0x4000668c &= FLAG)
#define Clr_CAN1_F9R2(FLAG)                  (*(uint32_t*)0x4000668c |= ~FLAG)
#define Set_CAN1_F10R1(FLAG)                 (*(uint32_t*)0x40006690 &= FLAG)
#define Clr_CAN1_F10R1(FLAG)                 (*(uint32_t*)0x40006690 |= ~FLAG)
#define Set_CAN1_F10R2(FLAG)                 (*(uint32_t*)0x40006694 &= FLAG)
#define Clr_CAN1_F10R2(FLAG)                 (*(uint32_t*)0x40006694 |= ~FLAG)
#define Set_CAN1_F11R1(FLAG)                 (*(uint32_t*)0x40006698 &= FLAG)
#define Clr_CAN1_F11R1(FLAG)                 (*(uint32_t*)0x40006698 |= ~FLAG)
#define Set_CAN1_F11R2(FLAG)                 (*(uint32_t*)0x4000669c &= FLAG)
#define Clr_CAN1_F11R2(FLAG)                 (*(uint32_t*)0x4000669c |= ~FLAG)
#define Set_CAN1_F12R1(FLAG)                 (*(uint32_t*)0x400066a0 &= FLAG)
#define Clr_CAN1_F12R1(FLAG)                 (*(uint32_t*)0x400066a0 |= ~FLAG)
#define Set_CAN1_F12R2(FLAG)                 (*(uint32_t*)0x400066a4 &= FLAG)
#define Clr_CAN1_F12R2(FLAG)                 (*(uint32_t*)0x400066a4 |= ~FLAG)
#define Set_CAN1_F13R1(FLAG)                 (*(uint32_t*)0x400066a8 &= FLAG)
#define Clr_CAN1_F13R1(FLAG)                 (*(uint32_t*)0x400066a8 |= ~FLAG)
#define Set_CAN1_F13R2(FLAG)                 (*(uint32_t*)0x400066ac &= FLAG)
#define Clr_CAN1_F13R2(FLAG)                 (*(uint32_t*)0x400066ac |= ~FLAG)
#define Set_CAN1_F14R1(FLAG)                 (*(uint32_t*)0x400066b0 &= FLAG)
#define Clr_CAN1_F14R1(FLAG)                 (*(uint32_t*)0x400066b0 |= ~FLAG)
#define Set_CAN1_F14R2(FLAG)                 (*(uint32_t*)0x400066b4 &= FLAG)
#define Clr_CAN1_F14R2(FLAG)                 (*(uint32_t*)0x400066b4 |= ~FLAG)
#define Set_CAN1_F15R1(FLAG)                 (*(uint32_t*)0x400066b8 &= FLAG)
#define Clr_CAN1_F15R1(FLAG)                 (*(uint32_t*)0x400066b8 |= ~FLAG)
#define Set_CAN1_F15R2(FLAG)                 (*(uint32_t*)0x400066bc &= FLAG)
#define Clr_CAN1_F15R2(FLAG)                 (*(uint32_t*)0x400066bc |= ~FLAG)
#define Set_CAN1_F16R1(FLAG)                 (*(uint32_t*)0x400066c0 &= FLAG)
#define Clr_CAN1_F16R1(FLAG)                 (*(uint32_t*)0x400066c0 |= ~FLAG)
#define Set_CAN1_F16R2(FLAG)                 (*(uint32_t*)0x400066c4 &= FLAG)
#define Clr_CAN1_F16R2(FLAG)                 (*(uint32_t*)0x400066c4 |= ~FLAG)
#define Set_CAN1_F17R1(FLAG)                 (*(uint32_t*)0x400066c8 &= FLAG)
#define Clr_CAN1_F17R1(FLAG)                 (*(uint32_t*)0x400066c8 |= ~FLAG)
#define Set_CAN1_F17R2(FLAG)                 (*(uint32_t*)0x400066cc &= FLAG)
#define Clr_CAN1_F17R2(FLAG)                 (*(uint32_t*)0x400066cc |= ~FLAG)
#define Set_CAN1_F18R1(FLAG)                 (*(uint32_t*)0x400066d0 &= FLAG)
#define Clr_CAN1_F18R1(FLAG)                 (*(uint32_t*)0x400066d0 |= ~FLAG)
#define Set_CAN1_F18R2(FLAG)                 (*(uint32_t*)0x400066d4 &= FLAG)
#define Clr_CAN1_F18R2(FLAG)                 (*(uint32_t*)0x400066d4 |= ~FLAG)
#define Set_CAN1_F19R1(FLAG)                 (*(uint32_t*)0x400066d8 &= FLAG)
#define Clr_CAN1_F19R1(FLAG)                 (*(uint32_t*)0x400066d8 |= ~FLAG)
#define Set_CAN1_F19R2(FLAG)                 (*(uint32_t*)0x400066dc &= FLAG)
#define Clr_CAN1_F19R2(FLAG)                 (*(uint32_t*)0x400066dc |= ~FLAG)
#define Set_CAN1_F20R1(FLAG)                 (*(uint32_t*)0x400066e0 &= FLAG)
#define Clr_CAN1_F20R1(FLAG)                 (*(uint32_t*)0x400066e0 |= ~FLAG)
#define Set_CAN1_F20R2(FLAG)                 (*(uint32_t*)0x400066e4 &= FLAG)
#define Clr_CAN1_F20R2(FLAG)                 (*(uint32_t*)0x400066e4 |= ~FLAG)
#define Set_CAN1_F21R1(FLAG)                 (*(uint32_t*)0x400066e8 &= FLAG)
#define Clr_CAN1_F21R1(FLAG)                 (*(uint32_t*)0x400066e8 |= ~FLAG)
#define Set_CAN1_F21R2(FLAG)                 (*(uint32_t*)0x400066ec &= FLAG)
#define Clr_CAN1_F21R2(FLAG)                 (*(uint32_t*)0x400066ec |= ~FLAG)
#define Set_CAN1_F22R1(FLAG)                 (*(uint32_t*)0x400066f0 &= FLAG)
#define Clr_CAN1_F22R1(FLAG)                 (*(uint32_t*)0x400066f0 |= ~FLAG)
#define Set_CAN1_F22R2(FLAG)                 (*(uint32_t*)0x400066f4 &= FLAG)
#define Clr_CAN1_F22R2(FLAG)                 (*(uint32_t*)0x400066f4 |= ~FLAG)
#define Set_CAN1_F23R1(FLAG)                 (*(uint32_t*)0x400066f8 &= FLAG)
#define Clr_CAN1_F23R1(FLAG)                 (*(uint32_t*)0x400066f8 |= ~FLAG)
#define Set_CAN1_F23R2(FLAG)                 (*(uint32_t*)0x400066fc &= FLAG)
#define Clr_CAN1_F23R2(FLAG)                 (*(uint32_t*)0x400066fc |= ~FLAG)
#define Set_CAN1_F24R1(FLAG)                 (*(uint32_t*)0x40006700 &= FLAG)
#define Clr_CAN1_F24R1(FLAG)                 (*(uint32_t*)0x40006700 |= ~FLAG)
#define Set_CAN1_F24R2(FLAG)                 (*(uint32_t*)0x40006704 &= FLAG)
#define Clr_CAN1_F24R2(FLAG)                 (*(uint32_t*)0x40006704 |= ~FLAG)
#define Set_CAN1_F25R1(FLAG)                 (*(uint32_t*)0x40006708 &= FLAG)
#define Clr_CAN1_F25R1(FLAG)                 (*(uint32_t*)0x40006708 |= ~FLAG)
#define Set_CAN1_F25R2(FLAG)                 (*(uint32_t*)0x4000670c &= FLAG)
#define Clr_CAN1_F25R2(FLAG)                 (*(uint32_t*)0x4000670c |= ~FLAG)
#define Set_CAN1_F26R1(FLAG)                 (*(uint32_t*)0x40006710 &= FLAG)
#define Clr_CAN1_F26R1(FLAG)                 (*(uint32_t*)0x40006710 |= ~FLAG)
#define Set_CAN1_F26R2(FLAG)                 (*(uint32_t*)0x40006714 &= FLAG)
#define Clr_CAN1_F26R2(FLAG)                 (*(uint32_t*)0x40006714 |= ~FLAG)
#define Set_CAN1_F27R1(FLAG)                 (*(uint32_t*)0x40006718 &= FLAG)
#define Clr_CAN1_F27R1(FLAG)                 (*(uint32_t*)0x40006718 |= ~FLAG)
#define Set_CAN1_F27R2(FLAG)                 (*(uint32_t*)0x4000671c &= FLAG)
#define Clr_CAN1_F27R2(FLAG)                 (*(uint32_t*)0x4000671c |= ~FLAG)
#define Set_CAN2_MCR(FLAG)                   (*(uint32_t*)0x40006800 &= FLAG)
#define Clr_CAN2_MCR(FLAG)                   (*(uint32_t*)0x40006800 |= ~FLAG)
#define Set_CAN2_MSR(FLAG)                   (*(uint32_t*)0x40006804 &= FLAG)
#define Clr_CAN2_MSR(FLAG)                   (*(uint32_t*)0x40006804 |= ~FLAG)
#define Set_CAN2_TSR(FLAG)                   (*(uint32_t*)0x40006808 &= FLAG)
#define Clr_CAN2_TSR(FLAG)                   (*(uint32_t*)0x40006808 |= ~FLAG)
#define Set_CAN2_RF0R(FLAG)                  (*(uint32_t*)0x4000680c &= FLAG)
#define Clr_CAN2_RF0R(FLAG)                  (*(uint32_t*)0x4000680c |= ~FLAG)
#define Set_CAN2_RF1R(FLAG)                  (*(uint32_t*)0x40006810 &= FLAG)
#define Clr_CAN2_RF1R(FLAG)                  (*(uint32_t*)0x40006810 |= ~FLAG)
#define Set_CAN2_IER(FLAG)                   (*(uint32_t*)0x40006814 &= FLAG)
#define Clr_CAN2_IER(FLAG)                   (*(uint32_t*)0x40006814 |= ~FLAG)
#define Set_CAN2_ESR(FLAG)                   (*(uint32_t*)0x40006818 &= FLAG)
#define Clr_CAN2_ESR(FLAG)                   (*(uint32_t*)0x40006818 |= ~FLAG)
#define Set_CAN2_BTR(FLAG)                   (*(uint32_t*)0x4000681c &= FLAG)
#define Clr_CAN2_BTR(FLAG)                   (*(uint32_t*)0x4000681c |= ~FLAG)
#define Set_CAN2_TI0R(FLAG)                  (*(uint32_t*)0x40006980 &= FLAG)
#define Clr_CAN2_TI0R(FLAG)                  (*(uint32_t*)0x40006980 |= ~FLAG)
#define Set_CAN2_TDT0R(FLAG)                 (*(uint32_t*)0x40006984 &= FLAG)
#define Clr_CAN2_TDT0R(FLAG)                 (*(uint32_t*)0x40006984 |= ~FLAG)
#define Set_CAN2_TDL0R(FLAG)                 (*(uint32_t*)0x40006988 &= FLAG)
#define Clr_CAN2_TDL0R(FLAG)                 (*(uint32_t*)0x40006988 |= ~FLAG)
#define Set_CAN2_TDH0R(FLAG)                 (*(uint32_t*)0x4000698c &= FLAG)
#define Clr_CAN2_TDH0R(FLAG)                 (*(uint32_t*)0x4000698c |= ~FLAG)
#define Set_CAN2_TI1R(FLAG)                  (*(uint32_t*)0x40006990 &= FLAG)
#define Clr_CAN2_TI1R(FLAG)                  (*(uint32_t*)0x40006990 |= ~FLAG)
#define Set_CAN2_TDT1R(FLAG)                 (*(uint32_t*)0x40006994 &= FLAG)
#define Clr_CAN2_TDT1R(FLAG)                 (*(uint32_t*)0x40006994 |= ~FLAG)
#define Set_CAN2_TDL1R(FLAG)                 (*(uint32_t*)0x40006998 &= FLAG)
#define Clr_CAN2_TDL1R(FLAG)                 (*(uint32_t*)0x40006998 |= ~FLAG)
#define Set_CAN2_TDH1R(FLAG)                 (*(uint32_t*)0x4000699c &= FLAG)
#define Clr_CAN2_TDH1R(FLAG)                 (*(uint32_t*)0x4000699c |= ~FLAG)
#define Set_CAN2_TI2R(FLAG)                  (*(uint32_t*)0x400069a0 &= FLAG)
#define Clr_CAN2_TI2R(FLAG)                  (*(uint32_t*)0x400069a0 |= ~FLAG)
#define Set_CAN2_TDT2R(FLAG)                 (*(uint32_t*)0x400069a4 &= FLAG)
#define Clr_CAN2_TDT2R(FLAG)                 (*(uint32_t*)0x400069a4 |= ~FLAG)
#define Set_CAN2_TDL2R(FLAG)                 (*(uint32_t*)0x400069a8 &= FLAG)
#define Clr_CAN2_TDL2R(FLAG)                 (*(uint32_t*)0x400069a8 |= ~FLAG)
#define Set_CAN2_TDH2R(FLAG)                 (*(uint32_t*)0x400069ac &= FLAG)
#define Clr_CAN2_TDH2R(FLAG)                 (*(uint32_t*)0x400069ac |= ~FLAG)
#define Set_CAN2_RI0R(FLAG)                  (*(uint32_t*)0x400069b0 &= FLAG)
#define Clr_CAN2_RI0R(FLAG)                  (*(uint32_t*)0x400069b0 |= ~FLAG)
#define Set_CAN2_RDT0R(FLAG)                 (*(uint32_t*)0x400069b4 &= FLAG)
#define Clr_CAN2_RDT0R(FLAG)                 (*(uint32_t*)0x400069b4 |= ~FLAG)
#define Set_CAN2_RDL0R(FLAG)                 (*(uint32_t*)0x400069b8 &= FLAG)
#define Clr_CAN2_RDL0R(FLAG)                 (*(uint32_t*)0x400069b8 |= ~FLAG)
#define Set_CAN2_RDH0R(FLAG)                 (*(uint32_t*)0x400069bc &= FLAG)
#define Clr_CAN2_RDH0R(FLAG)                 (*(uint32_t*)0x400069bc |= ~FLAG)
#define Set_CAN2_RI1R(FLAG)                  (*(uint32_t*)0x400069c0 &= FLAG)
#define Clr_CAN2_RI1R(FLAG)                  (*(uint32_t*)0x400069c0 |= ~FLAG)
#define Set_CAN2_RDT1R(FLAG)                 (*(uint32_t*)0x400069c4 &= FLAG)
#define Clr_CAN2_RDT1R(FLAG)                 (*(uint32_t*)0x400069c4 |= ~FLAG)
#define Set_CAN2_RDL1R(FLAG)                 (*(uint32_t*)0x400069c8 &= FLAG)
#define Clr_CAN2_RDL1R(FLAG)                 (*(uint32_t*)0x400069c8 |= ~FLAG)
#define Set_CAN2_RDH1R(FLAG)                 (*(uint32_t*)0x400069cc &= FLAG)
#define Clr_CAN2_RDH1R(FLAG)                 (*(uint32_t*)0x400069cc |= ~FLAG)
#define Set_CAN2_FMR(FLAG)                   (*(uint32_t*)0x40006a00 &= FLAG)
#define Clr_CAN2_FMR(FLAG)                   (*(uint32_t*)0x40006a00 |= ~FLAG)
#define Set_CAN2_FM1R(FLAG)                  (*(uint32_t*)0x40006a04 &= FLAG)
#define Clr_CAN2_FM1R(FLAG)                  (*(uint32_t*)0x40006a04 |= ~FLAG)
#define Set_CAN2_FS1R(FLAG)                  (*(uint32_t*)0x40006a0c &= FLAG)
#define Clr_CAN2_FS1R(FLAG)                  (*(uint32_t*)0x40006a0c |= ~FLAG)
#define Set_CAN2_FFA1R(FLAG)                 (*(uint32_t*)0x40006a14 &= FLAG)
#define Clr_CAN2_FFA1R(FLAG)                 (*(uint32_t*)0x40006a14 |= ~FLAG)
#define Set_CAN2_FA1R(FLAG)                  (*(uint32_t*)0x40006a1c &= FLAG)
#define Clr_CAN2_FA1R(FLAG)                  (*(uint32_t*)0x40006a1c |= ~FLAG)
#define Set_CAN2_F0R1(FLAG)                  (*(uint32_t*)0x40006a40 &= FLAG)
#define Clr_CAN2_F0R1(FLAG)                  (*(uint32_t*)0x40006a40 |= ~FLAG)
#define Set_CAN2_F0R2(FLAG)                  (*(uint32_t*)0x40006a44 &= FLAG)
#define Clr_CAN2_F0R2(FLAG)                  (*(uint32_t*)0x40006a44 |= ~FLAG)
#define Set_CAN2_F1R1(FLAG)                  (*(uint32_t*)0x40006a48 &= FLAG)
#define Clr_CAN2_F1R1(FLAG)                  (*(uint32_t*)0x40006a48 |= ~FLAG)
#define Set_CAN2_F1R2(FLAG)                  (*(uint32_t*)0x40006a4c &= FLAG)
#define Clr_CAN2_F1R2(FLAG)                  (*(uint32_t*)0x40006a4c |= ~FLAG)
#define Set_CAN2_F2R1(FLAG)                  (*(uint32_t*)0x40006a50 &= FLAG)
#define Clr_CAN2_F2R1(FLAG)                  (*(uint32_t*)0x40006a50 |= ~FLAG)
#define Set_CAN2_F2R2(FLAG)                  (*(uint32_t*)0x40006a54 &= FLAG)
#define Clr_CAN2_F2R2(FLAG)                  (*(uint32_t*)0x40006a54 |= ~FLAG)
#define Set_CAN2_F3R1(FLAG)                  (*(uint32_t*)0x40006a58 &= FLAG)
#define Clr_CAN2_F3R1(FLAG)                  (*(uint32_t*)0x40006a58 |= ~FLAG)
#define Set_CAN2_F3R2(FLAG)                  (*(uint32_t*)0x40006a5c &= FLAG)
#define Clr_CAN2_F3R2(FLAG)                  (*(uint32_t*)0x40006a5c |= ~FLAG)
#define Set_CAN2_F4R1(FLAG)                  (*(uint32_t*)0x40006a60 &= FLAG)
#define Clr_CAN2_F4R1(FLAG)                  (*(uint32_t*)0x40006a60 |= ~FLAG)
#define Set_CAN2_F4R2(FLAG)                  (*(uint32_t*)0x40006a64 &= FLAG)
#define Clr_CAN2_F4R2(FLAG)                  (*(uint32_t*)0x40006a64 |= ~FLAG)
#define Set_CAN2_F5R1(FLAG)                  (*(uint32_t*)0x40006a68 &= FLAG)
#define Clr_CAN2_F5R1(FLAG)                  (*(uint32_t*)0x40006a68 |= ~FLAG)
#define Set_CAN2_F5R2(FLAG)                  (*(uint32_t*)0x40006a6c &= FLAG)
#define Clr_CAN2_F5R2(FLAG)                  (*(uint32_t*)0x40006a6c |= ~FLAG)
#define Set_CAN2_F6R1(FLAG)                  (*(uint32_t*)0x40006a70 &= FLAG)
#define Clr_CAN2_F6R1(FLAG)                  (*(uint32_t*)0x40006a70 |= ~FLAG)
#define Set_CAN2_F6R2(FLAG)                  (*(uint32_t*)0x40006a74 &= FLAG)
#define Clr_CAN2_F6R2(FLAG)                  (*(uint32_t*)0x40006a74 |= ~FLAG)
#define Set_CAN2_F7R1(FLAG)                  (*(uint32_t*)0x40006a78 &= FLAG)
#define Clr_CAN2_F7R1(FLAG)                  (*(uint32_t*)0x40006a78 |= ~FLAG)
#define Set_CAN2_F7R2(FLAG)                  (*(uint32_t*)0x40006a7c &= FLAG)
#define Clr_CAN2_F7R2(FLAG)                  (*(uint32_t*)0x40006a7c |= ~FLAG)
#define Set_CAN2_F8R1(FLAG)                  (*(uint32_t*)0x40006a80 &= FLAG)
#define Clr_CAN2_F8R1(FLAG)                  (*(uint32_t*)0x40006a80 |= ~FLAG)
#define Set_CAN2_F8R2(FLAG)                  (*(uint32_t*)0x40006a84 &= FLAG)
#define Clr_CAN2_F8R2(FLAG)                  (*(uint32_t*)0x40006a84 |= ~FLAG)
#define Set_CAN2_F9R1(FLAG)                  (*(uint32_t*)0x40006a88 &= FLAG)
#define Clr_CAN2_F9R1(FLAG)                  (*(uint32_t*)0x40006a88 |= ~FLAG)
#define Set_CAN2_F9R2(FLAG)                  (*(uint32_t*)0x40006a8c &= FLAG)
#define Clr_CAN2_F9R2(FLAG)                  (*(uint32_t*)0x40006a8c |= ~FLAG)
#define Set_CAN2_F10R1(FLAG)                 (*(uint32_t*)0x40006a90 &= FLAG)
#define Clr_CAN2_F10R1(FLAG)                 (*(uint32_t*)0x40006a90 |= ~FLAG)
#define Set_CAN2_F10R2(FLAG)                 (*(uint32_t*)0x40006a94 &= FLAG)
#define Clr_CAN2_F10R2(FLAG)                 (*(uint32_t*)0x40006a94 |= ~FLAG)
#define Set_CAN2_F11R1(FLAG)                 (*(uint32_t*)0x40006a98 &= FLAG)
#define Clr_CAN2_F11R1(FLAG)                 (*(uint32_t*)0x40006a98 |= ~FLAG)
#define Set_CAN2_F11R2(FLAG)                 (*(uint32_t*)0x40006a9c &= FLAG)
#define Clr_CAN2_F11R2(FLAG)                 (*(uint32_t*)0x40006a9c |= ~FLAG)
#define Set_CAN2_F12R1(FLAG)                 (*(uint32_t*)0x40006aa0 &= FLAG)
#define Clr_CAN2_F12R1(FLAG)                 (*(uint32_t*)0x40006aa0 |= ~FLAG)
#define Set_CAN2_F12R2(FLAG)                 (*(uint32_t*)0x40006aa4 &= FLAG)
#define Clr_CAN2_F12R2(FLAG)                 (*(uint32_t*)0x40006aa4 |= ~FLAG)
#define Set_CAN2_F13R1(FLAG)                 (*(uint32_t*)0x40006aa8 &= FLAG)
#define Clr_CAN2_F13R1(FLAG)                 (*(uint32_t*)0x40006aa8 |= ~FLAG)
#define Set_CAN2_F13R2(FLAG)                 (*(uint32_t*)0x40006aac &= FLAG)
#define Clr_CAN2_F13R2(FLAG)                 (*(uint32_t*)0x40006aac |= ~FLAG)
#define Set_CAN2_F14R1(FLAG)                 (*(uint32_t*)0x40006ab0 &= FLAG)
#define Clr_CAN2_F14R1(FLAG)                 (*(uint32_t*)0x40006ab0 |= ~FLAG)
#define Set_CAN2_F14R2(FLAG)                 (*(uint32_t*)0x40006ab4 &= FLAG)
#define Clr_CAN2_F14R2(FLAG)                 (*(uint32_t*)0x40006ab4 |= ~FLAG)
#define Set_CAN2_F15R1(FLAG)                 (*(uint32_t*)0x40006ab8 &= FLAG)
#define Clr_CAN2_F15R1(FLAG)                 (*(uint32_t*)0x40006ab8 |= ~FLAG)
#define Set_CAN2_F15R2(FLAG)                 (*(uint32_t*)0x40006abc &= FLAG)
#define Clr_CAN2_F15R2(FLAG)                 (*(uint32_t*)0x40006abc |= ~FLAG)
#define Set_CAN2_F16R1(FLAG)                 (*(uint32_t*)0x40006ac0 &= FLAG)
#define Clr_CAN2_F16R1(FLAG)                 (*(uint32_t*)0x40006ac0 |= ~FLAG)
#define Set_CAN2_F16R2(FLAG)                 (*(uint32_t*)0x40006ac4 &= FLAG)
#define Clr_CAN2_F16R2(FLAG)                 (*(uint32_t*)0x40006ac4 |= ~FLAG)
#define Set_CAN2_F17R1(FLAG)                 (*(uint32_t*)0x40006ac8 &= FLAG)
#define Clr_CAN2_F17R1(FLAG)                 (*(uint32_t*)0x40006ac8 |= ~FLAG)
#define Set_CAN2_F17R2(FLAG)                 (*(uint32_t*)0x40006acc &= FLAG)
#define Clr_CAN2_F17R2(FLAG)                 (*(uint32_t*)0x40006acc |= ~FLAG)
#define Set_CAN2_F18R1(FLAG)                 (*(uint32_t*)0x40006ad0 &= FLAG)
#define Clr_CAN2_F18R1(FLAG)                 (*(uint32_t*)0x40006ad0 |= ~FLAG)
#define Set_CAN2_F18R2(FLAG)                 (*(uint32_t*)0x40006ad4 &= FLAG)
#define Clr_CAN2_F18R2(FLAG)                 (*(uint32_t*)0x40006ad4 |= ~FLAG)
#define Set_CAN2_F19R1(FLAG)                 (*(uint32_t*)0x40006ad8 &= FLAG)
#define Clr_CAN2_F19R1(FLAG)                 (*(uint32_t*)0x40006ad8 |= ~FLAG)
#define Set_CAN2_F19R2(FLAG)                 (*(uint32_t*)0x40006adc &= FLAG)
#define Clr_CAN2_F19R2(FLAG)                 (*(uint32_t*)0x40006adc |= ~FLAG)
#define Set_CAN2_F20R1(FLAG)                 (*(uint32_t*)0x40006ae0 &= FLAG)
#define Clr_CAN2_F20R1(FLAG)                 (*(uint32_t*)0x40006ae0 |= ~FLAG)
#define Set_CAN2_F20R2(FLAG)                 (*(uint32_t*)0x40006ae4 &= FLAG)
#define Clr_CAN2_F20R2(FLAG)                 (*(uint32_t*)0x40006ae4 |= ~FLAG)
#define Set_CAN2_F21R1(FLAG)                 (*(uint32_t*)0x40006ae8 &= FLAG)
#define Clr_CAN2_F21R1(FLAG)                 (*(uint32_t*)0x40006ae8 |= ~FLAG)
#define Set_CAN2_F21R2(FLAG)                 (*(uint32_t*)0x40006aec &= FLAG)
#define Clr_CAN2_F21R2(FLAG)                 (*(uint32_t*)0x40006aec |= ~FLAG)
#define Set_CAN2_F22R1(FLAG)                 (*(uint32_t*)0x40006af0 &= FLAG)
#define Clr_CAN2_F22R1(FLAG)                 (*(uint32_t*)0x40006af0 |= ~FLAG)
#define Set_CAN2_F22R2(FLAG)                 (*(uint32_t*)0x40006af4 &= FLAG)
#define Clr_CAN2_F22R2(FLAG)                 (*(uint32_t*)0x40006af4 |= ~FLAG)
#define Set_CAN2_F23R1(FLAG)                 (*(uint32_t*)0x40006af8 &= FLAG)
#define Clr_CAN2_F23R1(FLAG)                 (*(uint32_t*)0x40006af8 |= ~FLAG)
#define Set_CAN2_F23R2(FLAG)                 (*(uint32_t*)0x40006afc &= FLAG)
#define Clr_CAN2_F23R2(FLAG)                 (*(uint32_t*)0x40006afc |= ~FLAG)
#define Set_CAN2_F24R1(FLAG)                 (*(uint32_t*)0x40006b00 &= FLAG)
#define Clr_CAN2_F24R1(FLAG)                 (*(uint32_t*)0x40006b00 |= ~FLAG)
#define Set_CAN2_F24R2(FLAG)                 (*(uint32_t*)0x40006b04 &= FLAG)
#define Clr_CAN2_F24R2(FLAG)                 (*(uint32_t*)0x40006b04 |= ~FLAG)
#define Set_CAN2_F25R1(FLAG)                 (*(uint32_t*)0x40006b08 &= FLAG)
#define Clr_CAN2_F25R1(FLAG)                 (*(uint32_t*)0x40006b08 |= ~FLAG)
#define Set_CAN2_F25R2(FLAG)                 (*(uint32_t*)0x40006b0c &= FLAG)
#define Clr_CAN2_F25R2(FLAG)                 (*(uint32_t*)0x40006b0c |= ~FLAG)
#define Set_CAN2_F26R1(FLAG)                 (*(uint32_t*)0x40006b10 &= FLAG)
#define Clr_CAN2_F26R1(FLAG)                 (*(uint32_t*)0x40006b10 |= ~FLAG)
#define Set_CAN2_F26R2(FLAG)                 (*(uint32_t*)0x40006b14 &= FLAG)
#define Clr_CAN2_F26R2(FLAG)                 (*(uint32_t*)0x40006b14 |= ~FLAG)
#define Set_CAN2_F27R1(FLAG)                 (*(uint32_t*)0x40006b18 &= FLAG)
#define Clr_CAN2_F27R1(FLAG)                 (*(uint32_t*)0x40006b18 |= ~FLAG)
#define Set_CAN2_F27R2(FLAG)                 (*(uint32_t*)0x40006b1c &= FLAG)
#define Clr_CAN2_F27R2(FLAG)                 (*(uint32_t*)0x40006b1c |= ~FLAG)
#define  _CAN3_MCR_DBF                                       (0x1 << 16)    // DBF
#define  _CAN3_MCR_RESET                                     (0x1 << 15)    // RESET
#define  _CAN3_MCR_TTCM                                      (0x1 << 7)    // TTCM
　
　drivers/inc/stm32f767xx_CAN.h
#define Get_CAN3_MCR(FLAG)                   (*(uint32_t*)0x40003400 |= FLAG)
#define Get_CAN3_MSR(FLAG)                   (*(uint32_t*)0x40003404 |= FLAG)
#define Get_CAN3_TSR(FLAG)                   (*(uint32_t*)0x40003408 |= FLAG)
#define Get_CAN3_RF0R(FLAG)                  (*(uint32_t*)0x4000340c |= FLAG)
#define Get_CAN3_RF1R(FLAG)                  (*(uint32_t*)0x40003410 |= FLAG)
#define Get_CAN3_IER(FLAG)                   (*(uint32_t*)0x40003414 |= FLAG)
#define Get_CAN3_ESR(FLAG)                   (*(uint32_t*)0x40003418 |= FLAG)
#define Get_CAN3_BTR(FLAG)                   (*(uint32_t*)0x4000341c |= FLAG)
#define Get_CAN3_TI0R(FLAG)                  (*(uint32_t*)0x40003580 |= FLAG)
#define Get_CAN3_TDT0R(FLAG)                 (*(uint32_t*)0x40003584 |= FLAG)
#define Get_CAN3_TDL0R(FLAG)                 (*(uint32_t*)0x40003588 |= FLAG)
#define Get_CAN3_TDH0R(FLAG)                 (*(uint32_t*)0x4000358c |= FLAG)
#define Get_CAN3_TI1R(FLAG)                  (*(uint32_t*)0x40003590 |= FLAG)
#define Get_CAN3_TDT1R(FLAG)                 (*(uint32_t*)0x40003594 |= FLAG)
#define Get_CAN3_TDL1R(FLAG)                 (*(uint32_t*)0x40003598 |= FLAG)
#define Get_CAN3_TDH1R(FLAG)                 (*(uint32_t*)0x4000359c |= FLAG)
#define Get_CAN3_TI2R(FLAG)                  (*(uint32_t*)0x400035a0 |= FLAG)
#define Get_CAN3_TDT2R(FLAG)                 (*(uint32_t*)0x400035a4 |= FLAG)
#define Get_CAN3_TDL2R(FLAG)                 (*(uint32_t*)0x400035a8 |= FLAG)
#define Get_CAN3_TDH2R(FLAG)                 (*(uint32_t*)0x400035ac |= FLAG)
#define Get_CAN3_RI0R(FLAG)                  (*(uint32_t*)0x400035b0 |= FLAG)
#define Get_CAN3_RDT0R(FLAG)                 (*(uint32_t*)0x400035b4 |= FLAG)
#define Get_CAN3_RDL0R(FLAG)                 (*(uint32_t*)0x400035b8 |= FLAG)
#define Get_CAN3_RDH0R(FLAG)                 (*(uint32_t*)0x400035bc |= FLAG)
#define Get_CAN3_RI1R(FLAG)                  (*(uint32_t*)0x400035c0 |= FLAG)
#define Get_CAN3_RDT1R(FLAG)                 (*(uint32_t*)0x400035c4 |= FLAG)
#define Get_CAN3_RDL1R(FLAG)                 (*(uint32_t*)0x400035c8 |= FLAG)
#define Get_CAN3_RDH1R(FLAG)                 (*(uint32_t*)0x400035cc |= FLAG)
#define Get_CAN3_FMR(FLAG)                   (*(uint32_t*)0x40003600 |= FLAG)
#define Get_CAN3_FM1R(FLAG)                  (*(uint32_t*)0x40003604 |= FLAG)
#define Get_CAN3_FS1R(FLAG)                  (*(uint32_t*)0x4000360c |= FLAG)
#define Get_CAN3_FFA1R(FLAG)                 (*(uint32_t*)0x40003614 |= FLAG)
#define Get_CAN3_FA1R(FLAG)                  (*(uint32_t*)0x4000361c |= FLAG)
#define Get_CAN3_F0R1(FLAG)                  (*(uint32_t*)0x40003640 |= FLAG)
#define Get_CAN3_F0R2(FLAG)                  (*(uint32_t*)0x40003644 |= FLAG)
#define Get_CAN3_F1R1(FLAG)                  (*(uint32_t*)0x40003648 |= FLAG)
#define Get_CAN3_F1R2(FLAG)                  (*(uint32_t*)0x4000364c |= FLAG)
#define Get_CAN3_F2R1(FLAG)                  (*(uint32_t*)0x40003650 |= FLAG)
#define Get_CAN3_F2R2(FLAG)                  (*(uint32_t*)0x40003654 |= FLAG)
#define Get_CAN3_F3R1(FLAG)                  (*(uint32_t*)0x40003658 |= FLAG)
#define Get_CAN3_F3R2(FLAG)                  (*(uint32_t*)0x4000365c |= FLAG)
#define Get_CAN3_F4R1(FLAG)                  (*(uint32_t*)0x40003660 |= FLAG)
#define Get_CAN3_F4R2(FLAG)                  (*(uint32_t*)0x40003664 |= FLAG)
#define Get_CAN3_F5R1(FLAG)                  (*(uint32_t*)0x40003668 |= FLAG)
#define Get_CAN3_F5R2(FLAG)                  (*(uint32_t*)0x4000366c |= FLAG)
#define Get_CAN3_F6R1(FLAG)                  (*(uint32_t*)0x40003670 |= FLAG)
#define Get_CAN3_F6R2(FLAG)                  (*(uint32_t*)0x40003674 |= FLAG)
#define Get_CAN3_F7R1(FLAG)                  (*(uint32_t*)0x40003678 |= FLAG)
#define Get_CAN3_F7R2(FLAG)                  (*(uint32_t*)0x4000367c |= FLAG)
#define Get_CAN3_F8R1(FLAG)                  (*(uint32_t*)0x40003680 |= FLAG)
#define Get_CAN3_F8R2(FLAG)                  (*(uint32_t*)0x40003684 |= FLAG)
#define Get_CAN3_F9R1(FLAG)                  (*(uint32_t*)0x40003688 |= FLAG)
#define Get_CAN3_F9R2(FLAG)                  (*(uint32_t*)0x4000368c |= FLAG)
#define Get_CAN3_F10R1(FLAG)                 (*(uint32_t*)0x40003690 |= FLAG)
#define Get_CAN3_F10R2(FLAG)                 (*(uint32_t*)0x40003694 |= FLAG)
#define Get_CAN3_F11R1(FLAG)                 (*(uint32_t*)0x40003698 |= FLAG)
#define Get_CAN3_F11R2(FLAG)                 (*(uint32_t*)0x4000369c |= FLAG)
#define Get_CAN3_F12R1(FLAG)                 (*(uint32_t*)0x400036a0 |= FLAG)
#define Get_CAN3_F12R2(FLAG)                 (*(uint32_t*)0x400036a4 |= FLAG)
#define Get_CAN3_F13R1(FLAG)                 (*(uint32_t*)0x400036a8 |= FLAG)
#define Get_CAN3_F13R2(FLAG)                 (*(uint32_t*)0x400036ac |= FLAG)
#define Get_CAN3_F14R1(FLAG)                 (*(uint32_t*)0x400036b0 |= FLAG)
#define Get_CAN3_F14R2(FLAG)                 (*(uint32_t*)0x400036b4 |= FLAG)
#define Get_CAN3_F15R1(FLAG)                 (*(uint32_t*)0x400036b8 |= FLAG)
#define Get_CAN3_F15R2(FLAG)                 (*(uint32_t*)0x400036bc |= FLAG)
#define Get_CAN3_F16R1(FLAG)                 (*(uint32_t*)0x400036c0 |= FLAG)
#define Get_CAN3_F16R2(FLAG)                 (*(uint32_t*)0x400036c4 |= FLAG)
#define Get_CAN3_F17R1(FLAG)                 (*(uint32_t*)0x400036c8 |= FLAG)
#define Get_CAN3_F17R2(FLAG)                 (*(uint32_t*)0x400036cc |= FLAG)
#define Get_CAN3_F18R1(FLAG)                 (*(uint32_t*)0x400036d0 |= FLAG)
#define Get_CAN3_F18R2(FLAG)                 (*(uint32_t*)0x400036d4 |= FLAG)
#define Get_CAN3_F19R1(FLAG)                 (*(uint32_t*)0x400036d8 |= FLAG)
#define Get_CAN3_F19R2(FLAG)                 (*(uint32_t*)0x400036dc |= FLAG)
#define Get_CAN3_F20R1(FLAG)                 (*(uint32_t*)0x400036e0 |= FLAG)
#define Get_CAN3_F20R2(FLAG)                 (*(uint32_t*)0x400036e4 |= FLAG)
#define Get_CAN3_F21R1(FLAG)                 (*(uint32_t*)0x400036e8 |= FLAG)
#define Get_CAN3_F21R2(FLAG)                 (*(uint32_t*)0x400036ec |= FLAG)
#define Get_CAN3_F22R1(FLAG)                 (*(uint32_t*)0x400036f0 |= FLAG)
#define Get_CAN3_F22R2(FLAG)                 (*(uint32_t*)0x400036f4 |= FLAG)
#define Get_CAN3_F23R1(FLAG)                 (*(uint32_t*)0x400036f8 |= FLAG)
#define Get_CAN3_F23R2(FLAG)                 (*(uint32_t*)0x400036fc |= FLAG)
#define Get_CAN3_F24R1(FLAG)                 (*(uint32_t*)0x40003700 |= FLAG)
#define Get_CAN3_F24R2(FLAG)                 (*(uint32_t*)0x40003704 |= FLAG)
#define Get_CAN3_F25R1(FLAG)                 (*(uint32_t*)0x40003708 |= FLAG)
#define Get_CAN3_F25R2(FLAG)                 (*(uint32_t*)0x4000370c |= FLAG)
#define Get_CAN3_F26R1(FLAG)                 (*(uint32_t*)0x40003710 |= FLAG)
#define Get_CAN3_F26R2(FLAG)                 (*(uint32_t*)0x40003714 |= FLAG)
#define Get_CAN3_F27R1(FLAG)                 (*(uint32_t*)0x40003718 |= FLAG)
#define Get_CAN3_F27R2(FLAG)                 (*(uint32_t*)0x4000371c |= FLAG)
#define Get_CAN1_MCR(FLAG)                   (*(uint32_t*)0x40006400 |= FLAG)
#define Get_CAN1_MSR(FLAG)                   (*(uint32_t*)0x40006404 |= FLAG)
#define Get_CAN1_TSR(FLAG)                   (*(uint32_t*)0x40006408 |= FLAG)
#define Get_CAN1_RF0R(FLAG)                  (*(uint32_t*)0x4000640c |= FLAG)
#define Get_CAN1_RF1R(FLAG)                  (*(uint32_t*)0x40006410 |= FLAG)
#define Get_CAN1_IER(FLAG)                   (*(uint32_t*)0x40006414 |= FLAG)
#define Get_CAN1_ESR(FLAG)                   (*(uint32_t*)0x40006418 |= FLAG)
#define Get_CAN1_BTR(FLAG)                   (*(uint32_t*)0x4000641c |= FLAG)
#define Get_CAN1_TI0R(FLAG)                  (*(uint32_t*)0x40006580 |= FLAG)
#define Get_CAN1_TDT0R(FLAG)                 (*(uint32_t*)0x40006584 |= FLAG)
#define Get_CAN1_TDL0R(FLAG)                 (*(uint32_t*)0x40006588 |= FLAG)
#define Get_CAN1_TDH0R(FLAG)                 (*(uint32_t*)0x4000658c |= FLAG)
#define Get_CAN1_TI1R(FLAG)                  (*(uint32_t*)0x40006590 |= FLAG)
#define Get_CAN1_TDT1R(FLAG)                 (*(uint32_t*)0x40006594 |= FLAG)
#define Get_CAN1_TDL1R(FLAG)                 (*(uint32_t*)0x40006598 |= FLAG)
#define Get_CAN1_TDH1R(FLAG)                 (*(uint32_t*)0x4000659c |= FLAG)
#define Get_CAN1_TI2R(FLAG)                  (*(uint32_t*)0x400065a0 |= FLAG)
#define Get_CAN1_TDT2R(FLAG)                 (*(uint32_t*)0x400065a4 |= FLAG)
#define Get_CAN1_TDL2R(FLAG)                 (*(uint32_t*)0x400065a8 |= FLAG)
#define Get_CAN1_TDH2R(FLAG)                 (*(uint32_t*)0x400065ac |= FLAG)
#define Get_CAN1_RI0R(FLAG)                  (*(uint32_t*)0x400065b0 |= FLAG)
#define Get_CAN1_RDT0R(FLAG)                 (*(uint32_t*)0x400065b4 |= FLAG)
#define Get_CAN1_RDL0R(FLAG)                 (*(uint32_t*)0x400065b8 |= FLAG)
#define Get_CAN1_RDH0R(FLAG)                 (*(uint32_t*)0x400065bc |= FLAG)
#define Get_CAN1_RI1R(FLAG)                  (*(uint32_t*)0x400065c0 |= FLAG)
#define Get_CAN1_RDT1R(FLAG)                 (*(uint32_t*)0x400065c4 |= FLAG)
#define Get_CAN1_RDL1R(FLAG)                 (*(uint32_t*)0x400065c8 |= FLAG)
#define Get_CAN1_RDH1R(FLAG)                 (*(uint32_t*)0x400065cc |= FLAG)
#define Get_CAN1_FMR(FLAG)                   (*(uint32_t*)0x40006600 |= FLAG)
#define Get_CAN1_FM1R(FLAG)                  (*(uint32_t*)0x40006604 |= FLAG)
#define Get_CAN1_FS1R(FLAG)                  (*(uint32_t*)0x4000660c |= FLAG)
#define Get_CAN1_FFA1R(FLAG)                 (*(uint32_t*)0x40006614 |= FLAG)
#define Get_CAN1_FA1R(FLAG)                  (*(uint32_t*)0x4000661c |= FLAG)
#define Get_CAN1_F0R1(FLAG)                  (*(uint32_t*)0x40006640 |= FLAG)
#define Get_CAN1_F0R2(FLAG)                  (*(uint32_t*)0x40006644 |= FLAG)
#define Get_CAN1_F1R1(FLAG)                  (*(uint32_t*)0x40006648 |= FLAG)
#define Get_CAN1_F1R2(FLAG)                  (*(uint32_t*)0x4000664c |= FLAG)
#define Get_CAN1_F2R1(FLAG)                  (*(uint32_t*)0x40006650 |= FLAG)
#define Get_CAN1_F2R2(FLAG)                  (*(uint32_t*)0x40006654 |= FLAG)
#define Get_CAN1_F3R1(FLAG)                  (*(uint32_t*)0x40006658 |= FLAG)
#define Get_CAN1_F3R2(FLAG)                  (*(uint32_t*)0x4000665c |= FLAG)
#define Get_CAN1_F4R1(FLAG)                  (*(uint32_t*)0x40006660 |= FLAG)
#define Get_CAN1_F4R2(FLAG)                  (*(uint32_t*)0x40006664 |= FLAG)
#define Get_CAN1_F5R1(FLAG)                  (*(uint32_t*)0x40006668 |= FLAG)
#define Get_CAN1_F5R2(FLAG)                  (*(uint32_t*)0x4000666c |= FLAG)
#define Get_CAN1_F6R1(FLAG)                  (*(uint32_t*)0x40006670 |= FLAG)
#define Get_CAN1_F6R2(FLAG)                  (*(uint32_t*)0x40006674 |= FLAG)
#define Get_CAN1_F7R1(FLAG)                  (*(uint32_t*)0x40006678 |= FLAG)
#define Get_CAN1_F7R2(FLAG)                  (*(uint32_t*)0x4000667c |= FLAG)
#define Get_CAN1_F8R1(FLAG)                  (*(uint32_t*)0x40006680 |= FLAG)
#define Get_CAN1_F8R2(FLAG)                  (*(uint32_t*)0x40006684 |= FLAG)
#define Get_CAN1_F9R1(FLAG)                  (*(uint32_t*)0x40006688 |= FLAG)
#define Get_CAN1_F9R2(FLAG)                  (*(uint32_t*)0x4000668c |= FLAG)
#define Get_CAN1_F10R1(FLAG)                 (*(uint32_t*)0x40006690 |= FLAG)
#define Get_CAN1_F10R2(FLAG)                 (*(uint32_t*)0x40006694 |= FLAG)
#define Get_CAN1_F11R1(FLAG)                 (*(uint32_t*)0x40006698 |= FLAG)
#define Get_CAN1_F11R2(FLAG)                 (*(uint32_t*)0x4000669c |= FLAG)
#define Get_CAN1_F12R1(FLAG)                 (*(uint32_t*)0x400066a0 |= FLAG)
#define Get_CAN1_F12R2(FLAG)                 (*(uint32_t*)0x400066a4 |= FLAG)
#define Get_CAN1_F13R1(FLAG)                 (*(uint32_t*)0x400066a8 |= FLAG)
#define Get_CAN1_F13R2(FLAG)                 (*(uint32_t*)0x400066ac |= FLAG)
#define Get_CAN1_F14R1(FLAG)                 (*(uint32_t*)0x400066b0 |= FLAG)
#define Get_CAN1_F14R2(FLAG)                 (*(uint32_t*)0x400066b4 |= FLAG)
#define Get_CAN1_F15R1(FLAG)                 (*(uint32_t*)0x400066b8 |= FLAG)
#define Get_CAN1_F15R2(FLAG)                 (*(uint32_t*)0x400066bc |= FLAG)
#define Get_CAN1_F16R1(FLAG)                 (*(uint32_t*)0x400066c0 |= FLAG)
#define Get_CAN1_F16R2(FLAG)                 (*(uint32_t*)0x400066c4 |= FLAG)
#define Get_CAN1_F17R1(FLAG)                 (*(uint32_t*)0x400066c8 |= FLAG)
#define Get_CAN1_F17R2(FLAG)                 (*(uint32_t*)0x400066cc |= FLAG)
#define Get_CAN1_F18R1(FLAG)                 (*(uint32_t*)0x400066d0 |= FLAG)
#define Get_CAN1_F18R2(FLAG)                 (*(uint32_t*)0x400066d4 |= FLAG)
#define Get_CAN1_F19R1(FLAG)                 (*(uint32_t*)0x400066d8 |= FLAG)
#define Get_CAN1_F19R2(FLAG)                 (*(uint32_t*)0x400066dc |= FLAG)
#define Get_CAN1_F20R1(FLAG)                 (*(uint32_t*)0x400066e0 |= FLAG)
#define Get_CAN1_F20R2(FLAG)                 (*(uint32_t*)0x400066e4 |= FLAG)
#define Get_CAN1_F21R1(FLAG)                 (*(uint32_t*)0x400066e8 |= FLAG)
#define Get_CAN1_F21R2(FLAG)                 (*(uint32_t*)0x400066ec |= FLAG)
#define Get_CAN1_F22R1(FLAG)                 (*(uint32_t*)0x400066f0 |= FLAG)
#define Get_CAN1_F22R2(FLAG)                 (*(uint32_t*)0x400066f4 |= FLAG)
#define Get_CAN1_F23R1(FLAG)                 (*(uint32_t*)0x400066f8 |= FLAG)
#define Get_CAN1_F23R2(FLAG)                 (*(uint32_t*)0x400066fc |= FLAG)
#define Get_CAN1_F24R1(FLAG)                 (*(uint32_t*)0x40006700 |= FLAG)
#define Get_CAN1_F24R2(FLAG)                 (*(uint32_t*)0x40006704 |= FLAG)
#define Get_CAN1_F25R1(FLAG)                 (*(uint32_t*)0x40006708 |= FLAG)
#define Get_CAN1_F25R2(FLAG)                 (*(uint32_t*)0x4000670c |= FLAG)
#define Get_CAN1_F26R1(FLAG)                 (*(uint32_t*)0x40006710 |= FLAG)
#define Get_CAN1_F26R2(FLAG)                 (*(uint32_t*)0x40006714 |= FLAG)
#define Get_CAN1_F27R1(FLAG)                 (*(uint32_t*)0x40006718 |= FLAG)
#define Get_CAN1_F27R2(FLAG)                 (*(uint32_t*)0x4000671c |= FLAG)
#define Get_CAN2_MCR(FLAG)                   (*(uint32_t*)0x40006800 |= FLAG)
#define Get_CAN2_MSR(FLAG)                   (*(uint32_t*)0x40006804 |= FLAG)
#define Get_CAN2_TSR(FLAG)                   (*(uint32_t*)0x40006808 |= FLAG)
#define Get_CAN2_RF0R(FLAG)                  (*(uint32_t*)0x4000680c |= FLAG)
#define Get_CAN2_RF1R(FLAG)                  (*(uint32_t*)0x40006810 |= FLAG)
#define Get_CAN2_IER(FLAG)                   (*(uint32_t*)0x40006814 |= FLAG)
#define Get_CAN2_ESR(FLAG)                   (*(uint32_t*)0x40006818 |= FLAG)
#define Get_CAN2_BTR(FLAG)                   (*(uint32_t*)0x4000681c |= FLAG)
#define Get_CAN2_TI0R(FLAG)                  (*(uint32_t*)0x40006980 |= FLAG)
#define Get_CAN2_TDT0R(FLAG)                 (*(uint32_t*)0x40006984 |= FLAG)
#define Get_CAN2_TDL0R(FLAG)                 (*(uint32_t*)0x40006988 |= FLAG)
#define Get_CAN2_TDH0R(FLAG)                 (*(uint32_t*)0x4000698c |= FLAG)
#define Get_CAN2_TI1R(FLAG)                  (*(uint32_t*)0x40006990 |= FLAG)
#define Get_CAN2_TDT1R(FLAG)                 (*(uint32_t*)0x40006994 |= FLAG)
#define Get_CAN2_TDL1R(FLAG)                 (*(uint32_t*)0x40006998 |= FLAG)
#define Get_CAN2_TDH1R(FLAG)                 (*(uint32_t*)0x4000699c |= FLAG)
#define Get_CAN2_TI2R(FLAG)                  (*(uint32_t*)0x400069a0 |= FLAG)
#define Get_CAN2_TDT2R(FLAG)                 (*(uint32_t*)0x400069a4 |= FLAG)
#define Get_CAN2_TDL2R(FLAG)                 (*(uint32_t*)0x400069a8 |= FLAG)
#define Get_CAN2_TDH2R(FLAG)                 (*(uint32_t*)0x400069ac |= FLAG)
#define Get_CAN2_RI0R(FLAG)                  (*(uint32_t*)0x400069b0 |= FLAG)
#define Get_CAN2_RDT0R(FLAG)                 (*(uint32_t*)0x400069b4 |= FLAG)
#define Get_CAN2_RDL0R(FLAG)                 (*(uint32_t*)0x400069b8 |= FLAG)
#define Get_CAN2_RDH0R(FLAG)                 (*(uint32_t*)0x400069bc |= FLAG)
#define Get_CAN2_RI1R(FLAG)                  (*(uint32_t*)0x400069c0 |= FLAG)
#define Get_CAN2_RDT1R(FLAG)                 (*(uint32_t*)0x400069c4 |= FLAG)
#define Get_CAN2_RDL1R(FLAG)                 (*(uint32_t*)0x400069c8 |= FLAG)
#define Get_CAN2_RDH1R(FLAG)                 (*(uint32_t*)0x400069cc |= FLAG)
#define Get_CAN2_FMR(FLAG)                   (*(uint32_t*)0x40006a00 |= FLAG)
#define Get_CAN2_FM1R(FLAG)                  (*(uint32_t*)0x40006a04 |= FLAG)
#define Get_CAN2_FS1R(FLAG)                  (*(uint32_t*)0x40006a0c |= FLAG)
#define Get_CAN2_FFA1R(FLAG)                 (*(uint32_t*)0x40006a14 |= FLAG)
#define Get_CAN2_FA1R(FLAG)                  (*(uint32_t*)0x40006a1c |= FLAG)
#define Get_CAN2_F0R1(FLAG)                  (*(uint32_t*)0x40006a40 |= FLAG)
#define Get_CAN2_F0R2(FLAG)                  (*(uint32_t*)0x40006a44 |= FLAG)
#define Get_CAN2_F1R1(FLAG)                  (*(uint32_t*)0x40006a48 |= FLAG)
#define Get_CAN2_F1R2(FLAG)                  (*(uint32_t*)0x40006a4c |= FLAG)
#define Get_CAN2_F2R1(FLAG)                  (*(uint32_t*)0x40006a50 |= FLAG)
#define Get_CAN2_F2R2(FLAG)                  (*(uint32_t*)0x40006a54 |= FLAG)
#define Get_CAN2_F3R1(FLAG)                  (*(uint32_t*)0x40006a58 |= FLAG)
#define Get_CAN2_F3R2(FLAG)                  (*(uint32_t*)0x40006a5c |= FLAG)
#define Get_CAN2_F4R1(FLAG)                  (*(uint32_t*)0x40006a60 |= FLAG)
#define Get_CAN2_F4R2(FLAG)                  (*(uint32_t*)0x40006a64 |= FLAG)
#define Get_CAN2_F5R1(FLAG)                  (*(uint32_t*)0x40006a68 |= FLAG)
#define Get_CAN2_F5R2(FLAG)                  (*(uint32_t*)0x40006a6c |= FLAG)
#define Get_CAN2_F6R1(FLAG)                  (*(uint32_t*)0x40006a70 |= FLAG)
#define Get_CAN2_F6R2(FLAG)                  (*(uint32_t*)0x40006a74 |= FLAG)
#define Get_CAN2_F7R1(FLAG)                  (*(uint32_t*)0x40006a78 |= FLAG)
#define Get_CAN2_F7R2(FLAG)                  (*(uint32_t*)0x40006a7c |= FLAG)
#define Get_CAN2_F8R1(FLAG)                  (*(uint32_t*)0x40006a80 |= FLAG)
#define Get_CAN2_F8R2(FLAG)                  (*(uint32_t*)0x40006a84 |= FLAG)
#define Get_CAN2_F9R1(FLAG)                  (*(uint32_t*)0x40006a88 |= FLAG)
#define Get_CAN2_F9R2(FLAG)                  (*(uint32_t*)0x40006a8c |= FLAG)
#define Get_CAN2_F10R1(FLAG)                 (*(uint32_t*)0x40006a90 |= FLAG)
#define Get_CAN2_F10R2(FLAG)                 (*(uint32_t*)0x40006a94 |= FLAG)
#define Get_CAN2_F11R1(FLAG)                 (*(uint32_t*)0x40006a98 |= FLAG)
#define Get_CAN2_F11R2(FLAG)                 (*(uint32_t*)0x40006a9c |= FLAG)
#define Get_CAN2_F12R1(FLAG)                 (*(uint32_t*)0x40006aa0 |= FLAG)
#define Get_CAN2_F12R2(FLAG)                 (*(uint32_t*)0x40006aa4 |= FLAG)
#define Get_CAN2_F13R1(FLAG)                 (*(uint32_t*)0x40006aa8 |= FLAG)
#define Get_CAN2_F13R2(FLAG)                 (*(uint32_t*)0x40006aac |= FLAG)
#define Get_CAN2_F14R1(FLAG)                 (*(uint32_t*)0x40006ab0 |= FLAG)
#define Get_CAN2_F14R2(FLAG)                 (*(uint32_t*)0x40006ab4 |= FLAG)
#define Get_CAN2_F15R1(FLAG)                 (*(uint32_t*)0x40006ab8 |= FLAG)
#define Get_CAN2_F15R2(FLAG)                 (*(uint32_t*)0x40006abc |= FLAG)
#define Get_CAN2_F16R1(FLAG)                 (*(uint32_t*)0x40006ac0 |= FLAG)
#define Get_CAN2_F16R2(FLAG)                 (*(uint32_t*)0x40006ac4 |= FLAG)
#define Get_CAN2_F17R1(FLAG)                 (*(uint32_t*)0x40006ac8 |= FLAG)
#define Get_CAN2_F17R2(FLAG)                 (*(uint32_t*)0x40006acc |= FLAG)
#define Get_CAN2_F18R1(FLAG)                 (*(uint32_t*)0x40006ad0 |= FLAG)
#define Get_CAN2_F18R2(FLAG)                 (*(uint32_t*)0x40006ad4 |= FLAG)
#define Get_CAN2_F19R1(FLAG)                 (*(uint32_t*)0x40006ad8 |= FLAG)
#define Get_CAN2_F19R2(FLAG)                 (*(uint32_t*)0x40006adc |= FLAG)
#define Get_CAN2_F20R1(FLAG)                 (*(uint32_t*)0x40006ae0 |= FLAG)
#define Get_CAN2_F20R2(FLAG)                 (*(uint32_t*)0x40006ae4 |= FLAG)
#define Get_CAN2_F21R1(FLAG)                 (*(uint32_t*)0x40006ae8 |= FLAG)
#define Get_CAN2_F21R2(FLAG)                 (*(uint32_t*)0x40006aec |= FLAG)
#define Get_CAN2_F22R1(FLAG)                 (*(uint32_t*)0x40006af0 |= FLAG)
#define Get_CAN2_F22R2(FLAG)                 (*(uint32_t*)0x40006af4 |= FLAG)
#define Get_CAN2_F23R1(FLAG)                 (*(uint32_t*)0x40006af8 |= FLAG)
#define Get_CAN2_F23R2(FLAG)                 (*(uint32_t*)0x40006afc |= FLAG)
#define Get_CAN2_F24R1(FLAG)                 (*(uint32_t*)0x40006b00 |= FLAG)
#define Get_CAN2_F24R2(FLAG)                 (*(uint32_t*)0x40006b04 |= FLAG)
#define Get_CAN2_F25R1(FLAG)                 (*(uint32_t*)0x40006b08 |= FLAG)
#define Get_CAN2_F25R2(FLAG)                 (*(uint32_t*)0x40006b0c |= FLAG)
#define Get_CAN2_F26R1(FLAG)                 (*(uint32_t*)0x40006b10 |= FLAG)
#define Get_CAN2_F26R2(FLAG)                 (*(uint32_t*)0x40006b14 |= FLAG)
#define Get_CAN2_F27R1(FLAG)                 (*(uint32_t*)0x40006b18 |= FLAG)
#define Get_CAN2_F27R2(FLAG)                 (*(uint32_t*)0x40006b1c |= FLAG)
#define Set_CAN3_MCR(FLAG)                   (*(uint32_t*)0x40003400 &= FLAG)
#define Clr_CAN3_MCR(FLAG)                   (*(uint32_t*)0x40003400 |= ~FLAG)
#define Set_CAN3_MSR(FLAG)                   (*(uint32_t*)0x40003404 &= FLAG)
#define Clr_CAN3_MSR(FLAG)                   (*(uint32_t*)0x40003404 |= ~FLAG)
#define Set_CAN3_TSR(FLAG)                   (*(uint32_t*)0x40003408 &= FLAG)
#define Clr_CAN3_TSR(FLAG)                   (*(uint32_t*)0x40003408 |= ~FLAG)
#define Set_CAN3_RF0R(FLAG)                  (*(uint32_t*)0x4000340c &= FLAG)
#define Clr_CAN3_RF0R(FLAG)                  (*(uint32_t*)0x4000340c |= ~FLAG)
#define Set_CAN3_RF1R(FLAG)                  (*(uint32_t*)0x40003410 &= FLAG)
#define Clr_CAN3_RF1R(FLAG)                  (*(uint32_t*)0x40003410 |= ~FLAG)
#define Set_CAN3_IER(FLAG)                   (*(uint32_t*)0x40003414 &= FLAG)
#define Clr_CAN3_IER(FLAG)                   (*(uint32_t*)0x40003414 |= ~FLAG)
#define Set_CAN3_ESR(FLAG)                   (*(uint32_t*)0x40003418 &= FLAG)
#define Clr_CAN3_ESR(FLAG)                   (*(uint32_t*)0x40003418 |= ~FLAG)
#define Set_CAN3_BTR(FLAG)                   (*(uint32_t*)0x4000341c &= FLAG)
#define Clr_CAN3_BTR(FLAG)                   (*(uint32_t*)0x4000341c |= ~FLAG)
#define Set_CAN3_TI0R(FLAG)                  (*(uint32_t*)0x40003580 &= FLAG)
#define Clr_CAN3_TI0R(FLAG)                  (*(uint32_t*)0x40003580 |= ~FLAG)
#define Set_CAN3_TDT0R(FLAG)                 (*(uint32_t*)0x40003584 &= FLAG)
#define Clr_CAN3_TDT0R(FLAG)                 (*(uint32_t*)0x40003584 |= ~FLAG)
#define Set_CAN3_TDL0R(FLAG)                 (*(uint32_t*)0x40003588 &= FLAG)
#define Clr_CAN3_TDL0R(FLAG)                 (*(uint32_t*)0x40003588 |= ~FLAG)
#define Set_CAN3_TDH0R(FLAG)                 (*(uint32_t*)0x4000358c &= FLAG)
#define Clr_CAN3_TDH0R(FLAG)                 (*(uint32_t*)0x4000358c |= ~FLAG)
#define Set_CAN3_TI1R(FLAG)                  (*(uint32_t*)0x40003590 &= FLAG)
#define Clr_CAN3_TI1R(FLAG)                  (*(uint32_t*)0x40003590 |= ~FLAG)
#define Set_CAN3_TDT1R(FLAG)                 (*(uint32_t*)0x40003594 &= FLAG)
#define Clr_CAN3_TDT1R(FLAG)                 (*(uint32_t*)0x40003594 |= ~FLAG)
#define Set_CAN3_TDL1R(FLAG)                 (*(uint32_t*)0x40003598 &= FLAG)
#define Clr_CAN3_TDL1R(FLAG)                 (*(uint32_t*)0x40003598 |= ~FLAG)
#define Set_CAN3_TDH1R(FLAG)                 (*(uint32_t*)0x4000359c &= FLAG)
#define Clr_CAN3_TDH1R(FLAG)                 (*(uint32_t*)0x4000359c |= ~FLAG)
#define Set_CAN3_TI2R(FLAG)                  (*(uint32_t*)0x400035a0 &= FLAG)
#define Clr_CAN3_TI2R(FLAG)                  (*(uint32_t*)0x400035a0 |= ~FLAG)
#define Set_CAN3_TDT2R(FLAG)                 (*(uint32_t*)0x400035a4 &= FLAG)
#define Clr_CAN3_TDT2R(FLAG)                 (*(uint32_t*)0x400035a4 |= ~FLAG)
#define Set_CAN3_TDL2R(FLAG)                 (*(uint32_t*)0x400035a8 &= FLAG)
#define Clr_CAN3_TDL2R(FLAG)                 (*(uint32_t*)0x400035a8 |= ~FLAG)
#define Set_CAN3_TDH2R(FLAG)                 (*(uint32_t*)0x400035ac &= FLAG)
#define Clr_CAN3_TDH2R(FLAG)                 (*(uint32_t*)0x400035ac |= ~FLAG)
#define Set_CAN3_RI0R(FLAG)                  (*(uint32_t*)0x400035b0 &= FLAG)
#define Clr_CAN3_RI0R(FLAG)                  (*(uint32_t*)0x400035b0 |= ~FLAG)
#define Set_CAN3_RDT0R(FLAG)                 (*(uint32_t*)0x400035b4 &= FLAG)
#define Clr_CAN3_RDT0R(FLAG)                 (*(uint32_t*)0x400035b4 |= ~FLAG)
#define Set_CAN3_RDL0R(FLAG)                 (*(uint32_t*)0x400035b8 &= FLAG)
#define Clr_CAN3_RDL0R(FLAG)                 (*(uint32_t*)0x400035b8 |= ~FLAG)
#define Set_CAN3_RDH0R(FLAG)                 (*(uint32_t*)0x400035bc &= FLAG)
#define Clr_CAN3_RDH0R(FLAG)                 (*(uint32_t*)0x400035bc |= ~FLAG)
#define Set_CAN3_RI1R(FLAG)                  (*(uint32_t*)0x400035c0 &= FLAG)
#define Clr_CAN3_RI1R(FLAG)                  (*(uint32_t*)0x400035c0 |= ~FLAG)
#define Set_CAN3_RDT1R(FLAG)                 (*(uint32_t*)0x400035c4 &= FLAG)
#define Clr_CAN3_RDT1R(FLAG)                 (*(uint32_t*)0x400035c4 |= ~FLAG)
#define Set_CAN3_RDL1R(FLAG)                 (*(uint32_t*)0x400035c8 &= FLAG)
#define Clr_CAN3_RDL1R(FLAG)                 (*(uint32_t*)0x400035c8 |= ~FLAG)
#define Set_CAN3_RDH1R(FLAG)                 (*(uint32_t*)0x400035cc &= FLAG)
#define Clr_CAN3_RDH1R(FLAG)                 (*(uint32_t*)0x400035cc |= ~FLAG)
#define Set_CAN3_FMR(FLAG)                   (*(uint32_t*)0x40003600 &= FLAG)
#define Clr_CAN3_FMR(FLAG)                   (*(uint32_t*)0x40003600 |= ~FLAG)
#define Set_CAN3_FM1R(FLAG)                  (*(uint32_t*)0x40003604 &= FLAG)
#define Clr_CAN3_FM1R(FLAG)                  (*(uint32_t*)0x40003604 |= ~FLAG)
#define Set_CAN3_FS1R(FLAG)                  (*(uint32_t*)0x4000360c &= FLAG)
#define Clr_CAN3_FS1R(FLAG)                  (*(uint32_t*)0x4000360c |= ~FLAG)
#define Set_CAN3_FFA1R(FLAG)                 (*(uint32_t*)0x40003614 &= FLAG)
#define Clr_CAN3_FFA1R(FLAG)                 (*(uint32_t*)0x40003614 |= ~FLAG)
#define Set_CAN3_FA1R(FLAG)                  (*(uint32_t*)0x4000361c &= FLAG)
#define Clr_CAN3_FA1R(FLAG)                  (*(uint32_t*)0x4000361c |= ~FLAG)
#define Set_CAN3_F0R1(FLAG)                  (*(uint32_t*)0x40003640 &= FLAG)
#define Clr_CAN3_F0R1(FLAG)                  (*(uint32_t*)0x40003640 |= ~FLAG)
#define Set_CAN3_F0R2(FLAG)                  (*(uint32_t*)0x40003644 &= FLAG)
#define Clr_CAN3_F0R2(FLAG)                  (*(uint32_t*)0x40003644 |= ~FLAG)
#define Set_CAN3_F1R1(FLAG)                  (*(uint32_t*)0x40003648 &= FLAG)
#define Clr_CAN3_F1R1(FLAG)                  (*(uint32_t*)0x40003648 |= ~FLAG)
#define Set_CAN3_F1R2(FLAG)                  (*(uint32_t*)0x4000364c &= FLAG)
#define Clr_CAN3_F1R2(FLAG)                  (*(uint32_t*)0x4000364c |= ~FLAG)
#define Set_CAN3_F2R1(FLAG)                  (*(uint32_t*)0x40003650 &= FLAG)
#define Clr_CAN3_F2R1(FLAG)                  (*(uint32_t*)0x40003650 |= ~FLAG)
#define Set_CAN3_F2R2(FLAG)                  (*(uint32_t*)0x40003654 &= FLAG)
#define Clr_CAN3_F2R2(FLAG)                  (*(uint32_t*)0x40003654 |= ~FLAG)
#define Set_CAN3_F3R1(FLAG)                  (*(uint32_t*)0x40003658 &= FLAG)
#define Clr_CAN3_F3R1(FLAG)                  (*(uint32_t*)0x40003658 |= ~FLAG)
#define Set_CAN3_F3R2(FLAG)                  (*(uint32_t*)0x4000365c &= FLAG)
#define Clr_CAN3_F3R2(FLAG)                  (*(uint32_t*)0x4000365c |= ~FLAG)
#define Set_CAN3_F4R1(FLAG)                  (*(uint32_t*)0x40003660 &= FLAG)
#define Clr_CAN3_F4R1(FLAG)                  (*(uint32_t*)0x40003660 |= ~FLAG)
#define Set_CAN3_F4R2(FLAG)                  (*(uint32_t*)0x40003664 &= FLAG)
#define Clr_CAN3_F4R2(FLAG)                  (*(uint32_t*)0x40003664 |= ~FLAG)
#define Set_CAN3_F5R1(FLAG)                  (*(uint32_t*)0x40003668 &= FLAG)
#define Clr_CAN3_F5R1(FLAG)                  (*(uint32_t*)0x40003668 |= ~FLAG)
#define Set_CAN3_F5R2(FLAG)                  (*(uint32_t*)0x4000366c &= FLAG)
#define Clr_CAN3_F5R2(FLAG)                  (*(uint32_t*)0x4000366c |= ~FLAG)
#define Set_CAN3_F6R1(FLAG)                  (*(uint32_t*)0x40003670 &= FLAG)
#define Clr_CAN3_F6R1(FLAG)                  (*(uint32_t*)0x40003670 |= ~FLAG)
#define Set_CAN3_F6R2(FLAG)                  (*(uint32_t*)0x40003674 &= FLAG)
#define Clr_CAN3_F6R2(FLAG)                  (*(uint32_t*)0x40003674 |= ~FLAG)
#define Set_CAN3_F7R1(FLAG)                  (*(uint32_t*)0x40003678 &= FLAG)
#define Clr_CAN3_F7R1(FLAG)                  (*(uint32_t*)0x40003678 |= ~FLAG)
#define Set_CAN3_F7R2(FLAG)                  (*(uint32_t*)0x4000367c &= FLAG)
#define Clr_CAN3_F7R2(FLAG)                  (*(uint32_t*)0x4000367c |= ~FLAG)
#define Set_CAN3_F8R1(FLAG)                  (*(uint32_t*)0x40003680 &= FLAG)
#define Clr_CAN3_F8R1(FLAG)                  (*(uint32_t*)0x40003680 |= ~FLAG)
#define Set_CAN3_F8R2(FLAG)                  (*(uint32_t*)0x40003684 &= FLAG)
#define Clr_CAN3_F8R2(FLAG)                  (*(uint32_t*)0x40003684 |= ~FLAG)
#define Set_CAN3_F9R1(FLAG)                  (*(uint32_t*)0x40003688 &= FLAG)
#define Clr_CAN3_F9R1(FLAG)                  (*(uint32_t*)0x40003688 |= ~FLAG)
#define Set_CAN3_F9R2(FLAG)                  (*(uint32_t*)0x4000368c &= FLAG)
#define Clr_CAN3_F9R2(FLAG)                  (*(uint32_t*)0x4000368c |= ~FLAG)
#define Set_CAN3_F10R1(FLAG)                 (*(uint32_t*)0x40003690 &= FLAG)
#define Clr_CAN3_F10R1(FLAG)                 (*(uint32_t*)0x40003690 |= ~FLAG)
#define Set_CAN3_F10R2(FLAG)                 (*(uint32_t*)0x40003694 &= FLAG)
#define Clr_CAN3_F10R2(FLAG)                 (*(uint32_t*)0x40003694 |= ~FLAG)
#define Set_CAN3_F11R1(FLAG)                 (*(uint32_t*)0x40003698 &= FLAG)
#define Clr_CAN3_F11R1(FLAG)                 (*(uint32_t*)0x40003698 |= ~FLAG)
#define Set_CAN3_F11R2(FLAG)                 (*(uint32_t*)0x4000369c &= FLAG)
#define Clr_CAN3_F11R2(FLAG)                 (*(uint32_t*)0x4000369c |= ~FLAG)
#define Set_CAN3_F12R1(FLAG)                 (*(uint32_t*)0x400036a0 &= FLAG)
#define Clr_CAN3_F12R1(FLAG)                 (*(uint32_t*)0x400036a0 |= ~FLAG)
#define Set_CAN3_F12R2(FLAG)                 (*(uint32_t*)0x400036a4 &= FLAG)
#define Clr_CAN3_F12R2(FLAG)                 (*(uint32_t*)0x400036a4 |= ~FLAG)
#define Set_CAN3_F13R1(FLAG)                 (*(uint32_t*)0x400036a8 &= FLAG)
#define Clr_CAN3_F13R1(FLAG)                 (*(uint32_t*)0x400036a8 |= ~FLAG)
#define Set_CAN3_F13R2(FLAG)                 (*(uint32_t*)0x400036ac &= FLAG)
#define Clr_CAN3_F13R2(FLAG)                 (*(uint32_t*)0x400036ac |= ~FLAG)
#define Set_CAN3_F14R1(FLAG)                 (*(uint32_t*)0x400036b0 &= FLAG)
#define Clr_CAN3_F14R1(FLAG)                 (*(uint32_t*)0x400036b0 |= ~FLAG)
#define Set_CAN3_F14R2(FLAG)                 (*(uint32_t*)0x400036b4 &= FLAG)
#define Clr_CAN3_F14R2(FLAG)                 (*(uint32_t*)0x400036b4 |= ~FLAG)
#define Set_CAN3_F15R1(FLAG)                 (*(uint32_t*)0x400036b8 &= FLAG)
#define Clr_CAN3_F15R1(FLAG)                 (*(uint32_t*)0x400036b8 |= ~FLAG)
#define Set_CAN3_F15R2(FLAG)                 (*(uint32_t*)0x400036bc &= FLAG)
#define Clr_CAN3_F15R2(FLAG)                 (*(uint32_t*)0x400036bc |= ~FLAG)
#define Set_CAN3_F16R1(FLAG)                 (*(uint32_t*)0x400036c0 &= FLAG)
#define Clr_CAN3_F16R1(FLAG)                 (*(uint32_t*)0x400036c0 |= ~FLAG)
#define Set_CAN3_F16R2(FLAG)                 (*(uint32_t*)0x400036c4 &= FLAG)
#define Clr_CAN3_F16R2(FLAG)                 (*(uint32_t*)0x400036c4 |= ~FLAG)
#define Set_CAN3_F17R1(FLAG)                 (*(uint32_t*)0x400036c8 &= FLAG)
#define Clr_CAN3_F17R1(FLAG)                 (*(uint32_t*)0x400036c8 |= ~FLAG)
#define Set_CAN3_F17R2(FLAG)                 (*(uint32_t*)0x400036cc &= FLAG)
#define Clr_CAN3_F17R2(FLAG)                 (*(uint32_t*)0x400036cc |= ~FLAG)
#define Set_CAN3_F18R1(FLAG)                 (*(uint32_t*)0x400036d0 &= FLAG)
#define Clr_CAN3_F18R1(FLAG)                 (*(uint32_t*)0x400036d0 |= ~FLAG)
#define Set_CAN3_F18R2(FLAG)                 (*(uint32_t*)0x400036d4 &= FLAG)
#define Clr_CAN3_F18R2(FLAG)                 (*(uint32_t*)0x400036d4 |= ~FLAG)
#define Set_CAN3_F19R1(FLAG)                 (*(uint32_t*)0x400036d8 &= FLAG)
#define Clr_CAN3_F19R1(FLAG)                 (*(uint32_t*)0x400036d8 |= ~FLAG)
#define Set_CAN3_F19R2(FLAG)                 (*(uint32_t*)0x400036dc &= FLAG)
#define Clr_CAN3_F19R2(FLAG)                 (*(uint32_t*)0x400036dc |= ~FLAG)
#define Set_CAN3_F20R1(FLAG)                 (*(uint32_t*)0x400036e0 &= FLAG)
#define Clr_CAN3_F20R1(FLAG)                 (*(uint32_t*)0x400036e0 |= ~FLAG)
#define Set_CAN3_F20R2(FLAG)                 (*(uint32_t*)0x400036e4 &= FLAG)
#define Clr_CAN3_F20R2(FLAG)                 (*(uint32_t*)0x400036e4 |= ~FLAG)
#define Set_CAN3_F21R1(FLAG)                 (*(uint32_t*)0x400036e8 &= FLAG)
#define Clr_CAN3_F21R1(FLAG)                 (*(uint32_t*)0x400036e8 |= ~FLAG)
#define Set_CAN3_F21R2(FLAG)                 (*(uint32_t*)0x400036ec &= FLAG)
#define Clr_CAN3_F21R2(FLAG)                 (*(uint32_t*)0x400036ec |= ~FLAG)
#define Set_CAN3_F22R1(FLAG)                 (*(uint32_t*)0x400036f0 &= FLAG)
#define Clr_CAN3_F22R1(FLAG)                 (*(uint32_t*)0x400036f0 |= ~FLAG)
#define Set_CAN3_F22R2(FLAG)                 (*(uint32_t*)0x400036f4 &= FLAG)
#define Clr_CAN3_F22R2(FLAG)                 (*(uint32_t*)0x400036f4 |= ~FLAG)
#define Set_CAN3_F23R1(FLAG)                 (*(uint32_t*)0x400036f8 &= FLAG)
#define Clr_CAN3_F23R1(FLAG)                 (*(uint32_t*)0x400036f8 |= ~FLAG)
#define Set_CAN3_F23R2(FLAG)                 (*(uint32_t*)0x400036fc &= FLAG)
#define Clr_CAN3_F23R2(FLAG)                 (*(uint32_t*)0x400036fc |= ~FLAG)
#define Set_CAN3_F24R1(FLAG)                 (*(uint32_t*)0x40003700 &= FLAG)
#define Clr_CAN3_F24R1(FLAG)                 (*(uint32_t*)0x40003700 |= ~FLAG)
#define Set_CAN3_F24R2(FLAG)                 (*(uint32_t*)0x40003704 &= FLAG)
#define Clr_CAN3_F24R2(FLAG)                 (*(uint32_t*)0x40003704 |= ~FLAG)
#define Set_CAN3_F25R1(FLAG)                 (*(uint32_t*)0x40003708 &= FLAG)
#define Clr_CAN3_F25R1(FLAG)                 (*(uint32_t*)0x40003708 |= ~FLAG)
#define Set_CAN3_F25R2(FLAG)                 (*(uint32_t*)0x4000370c &= FLAG)
#define Clr_CAN3_F25R2(FLAG)                 (*(uint32_t*)0x4000370c |= ~FLAG)
#define Set_CAN3_F26R1(FLAG)                 (*(uint32_t*)0x40003710 &= FLAG)
#define Clr_CAN3_F26R1(FLAG)                 (*(uint32_t*)0x40003710 |= ~FLAG)
#define Set_CAN3_F26R2(FLAG)                 (*(uint32_t*)0x40003714 &= FLAG)
#define Clr_CAN3_F26R2(FLAG)                 (*(uint32_t*)0x40003714 |= ~FLAG)
#define Set_CAN3_F27R1(FLAG)                 (*(uint32_t*)0x40003718 &= FLAG)
#define Clr_CAN3_F27R1(FLAG)                 (*(uint32_t*)0x40003718 |= ~FLAG)
#define Set_CAN3_F27R2(FLAG)                 (*(uint32_t*)0x4000371c &= FLAG)
#define Clr_CAN3_F27R2(FLAG)                 (*(uint32_t*)0x4000371c |= ~FLAG)
#define Set_CAN1_MCR(FLAG)                   (*(uint32_t*)0x40006400 &= FLAG)
#define Clr_CAN1_MCR(FLAG)                   (*(uint32_t*)0x40006400 |= ~FLAG)
#define Set_CAN1_MSR(FLAG)                   (*(uint32_t*)0x40006404 &= FLAG)
#define Clr_CAN1_MSR(FLAG)                   (*(uint32_t*)0x40006404 |= ~FLAG)
#define Set_CAN1_TSR(FLAG)                   (*(uint32_t*)0x40006408 &= FLAG)
#define Clr_CAN1_TSR(FLAG)                   (*(uint32_t*)0x40006408 |= ~FLAG)
#define Set_CAN1_RF0R(FLAG)                  (*(uint32_t*)0x4000640c &= FLAG)
#define Clr_CAN1_RF0R(FLAG)                  (*(uint32_t*)0x4000640c |= ~FLAG)
#define Set_CAN1_RF1R(FLAG)                  (*(uint32_t*)0x40006410 &= FLAG)
#define Clr_CAN1_RF1R(FLAG)                  (*(uint32_t*)0x40006410 |= ~FLAG)
#define Set_CAN1_IER(FLAG)                   (*(uint32_t*)0x40006414 &= FLAG)
#define Clr_CAN1_IER(FLAG)                   (*(uint32_t*)0x40006414 |= ~FLAG)
#define Set_CAN1_ESR(FLAG)                   (*(uint32_t*)0x40006418 &= FLAG)
#define Clr_CAN1_ESR(FLAG)                   (*(uint32_t*)0x40006418 |= ~FLAG)
#define Set_CAN1_BTR(FLAG)                   (*(uint32_t*)0x4000641c &= FLAG)
#define Clr_CAN1_BTR(FLAG)                   (*(uint32_t*)0x4000641c |= ~FLAG)
#define Set_CAN1_TI0R(FLAG)                  (*(uint32_t*)0x40006580 &= FLAG)
#define Clr_CAN1_TI0R(FLAG)                  (*(uint32_t*)0x40006580 |= ~FLAG)
#define Set_CAN1_TDT0R(FLAG)                 (*(uint32_t*)0x40006584 &= FLAG)
#define Clr_CAN1_TDT0R(FLAG)                 (*(uint32_t*)0x40006584 |= ~FLAG)
#define Set_CAN1_TDL0R(FLAG)                 (*(uint32_t*)0x40006588 &= FLAG)
#define Clr_CAN1_TDL0R(FLAG)                 (*(uint32_t*)0x40006588 |= ~FLAG)
#define Set_CAN1_TDH0R(FLAG)                 (*(uint32_t*)0x4000658c &= FLAG)
#define Clr_CAN1_TDH0R(FLAG)                 (*(uint32_t*)0x4000658c |= ~FLAG)
#define Set_CAN1_TI1R(FLAG)                  (*(uint32_t*)0x40006590 &= FLAG)
#define Clr_CAN1_TI1R(FLAG)                  (*(uint32_t*)0x40006590 |= ~FLAG)
#define Set_CAN1_TDT1R(FLAG)                 (*(uint32_t*)0x40006594 &= FLAG)
#define Clr_CAN1_TDT1R(FLAG)                 (*(uint32_t*)0x40006594 |= ~FLAG)
#define Set_CAN1_TDL1R(FLAG)                 (*(uint32_t*)0x40006598 &= FLAG)
#define Clr_CAN1_TDL1R(FLAG)                 (*(uint32_t*)0x40006598 |= ~FLAG)
#define Set_CAN1_TDH1R(FLAG)                 (*(uint32_t*)0x4000659c &= FLAG)
#define Clr_CAN1_TDH1R(FLAG)                 (*(uint32_t*)0x4000659c |= ~FLAG)
#define Set_CAN1_TI2R(FLAG)                  (*(uint32_t*)0x400065a0 &= FLAG)
#define Clr_CAN1_TI2R(FLAG)                  (*(uint32_t*)0x400065a0 |= ~FLAG)
#define Set_CAN1_TDT2R(FLAG)                 (*(uint32_t*)0x400065a4 &= FLAG)
#define Clr_CAN1_TDT2R(FLAG)                 (*(uint32_t*)0x400065a4 |= ~FLAG)
#define Set_CAN1_TDL2R(FLAG)                 (*(uint32_t*)0x400065a8 &= FLAG)
#define Clr_CAN1_TDL2R(FLAG)                 (*(uint32_t*)0x400065a8 |= ~FLAG)
#define Set_CAN1_TDH2R(FLAG)                 (*(uint32_t*)0x400065ac &= FLAG)
#define Clr_CAN1_TDH2R(FLAG)                 (*(uint32_t*)0x400065ac |= ~FLAG)
#define Set_CAN1_RI0R(FLAG)                  (*(uint32_t*)0x400065b0 &= FLAG)
#define Clr_CAN1_RI0R(FLAG)                  (*(uint32_t*)0x400065b0 |= ~FLAG)
#define Set_CAN1_RDT0R(FLAG)                 (*(uint32_t*)0x400065b4 &= FLAG)
#define Clr_CAN1_RDT0R(FLAG)                 (*(uint32_t*)0x400065b4 |= ~FLAG)
#define Set_CAN1_RDL0R(FLAG)                 (*(uint32_t*)0x400065b8 &= FLAG)
#define Clr_CAN1_RDL0R(FLAG)                 (*(uint32_t*)0x400065b8 |= ~FLAG)
#define Set_CAN1_RDH0R(FLAG)                 (*(uint32_t*)0x400065bc &= FLAG)
#define Clr_CAN1_RDH0R(FLAG)                 (*(uint32_t*)0x400065bc |= ~FLAG)
#define Set_CAN1_RI1R(FLAG)                  (*(uint32_t*)0x400065c0 &= FLAG)
#define Clr_CAN1_RI1R(FLAG)                  (*(uint32_t*)0x400065c0 |= ~FLAG)
#define Set_CAN1_RDT1R(FLAG)                 (*(uint32_t*)0x400065c4 &= FLAG)
#define Clr_CAN1_RDT1R(FLAG)                 (*(uint32_t*)0x400065c4 |= ~FLAG)
#define Set_CAN1_RDL1R(FLAG)                 (*(uint32_t*)0x400065c8 &= FLAG)
#define Clr_CAN1_RDL1R(FLAG)                 (*(uint32_t*)0x400065c8 |= ~FLAG)
#define Set_CAN1_RDH1R(FLAG)                 (*(uint32_t*)0x400065cc &= FLAG)
#define Clr_CAN1_RDH1R(FLAG)                 (*(uint32_t*)0x400065cc |= ~FLAG)
#define Set_CAN1_FMR(FLAG)                   (*(uint32_t*)0x40006600 &= FLAG)
#define Clr_CAN1_FMR(FLAG)                   (*(uint32_t*)0x40006600 |= ~FLAG)
#define Set_CAN1_FM1R(FLAG)                  (*(uint32_t*)0x40006604 &= FLAG)
#define Clr_CAN1_FM1R(FLAG)                  (*(uint32_t*)0x40006604 |= ~FLAG)
#define Set_CAN1_FS1R(FLAG)                  (*(uint32_t*)0x4000660c &= FLAG)
#define Clr_CAN1_FS1R(FLAG)                  (*(uint32_t*)0x4000660c |= ~FLAG)
#define Set_CAN1_FFA1R(FLAG)                 (*(uint32_t*)0x40006614 &= FLAG)
#define Clr_CAN1_FFA1R(FLAG)                 (*(uint32_t*)0x40006614 |= ~FLAG)
#define Set_CAN1_FA1R(FLAG)                  (*(uint32_t*)0x4000661c &= FLAG)
#define Clr_CAN1_FA1R(FLAG)                  (*(uint32_t*)0x4000661c |= ~FLAG)
#define Set_CAN1_F0R1(FLAG)                  (*(uint32_t*)0x40006640 &= FLAG)
#define Clr_CAN1_F0R1(FLAG)                  (*(uint32_t*)0x40006640 |= ~FLAG)
#define Set_CAN1_F0R2(FLAG)                  (*(uint32_t*)0x40006644 &= FLAG)
#define Clr_CAN1_F0R2(FLAG)                  (*(uint32_t*)0x40006644 |= ~FLAG)
#define Set_CAN1_F1R1(FLAG)                  (*(uint32_t*)0x40006648 &= FLAG)
#define Clr_CAN1_F1R1(FLAG)                  (*(uint32_t*)0x40006648 |= ~FLAG)
#define Set_CAN1_F1R2(FLAG)                  (*(uint32_t*)0x4000664c &= FLAG)
#define Clr_CAN1_F1R2(FLAG)                  (*(uint32_t*)0x4000664c |= ~FLAG)
#define Set_CAN1_F2R1(FLAG)                  (*(uint32_t*)0x40006650 &= FLAG)
#define Clr_CAN1_F2R1(FLAG)                  (*(uint32_t*)0x40006650 |= ~FLAG)
#define Set_CAN1_F2R2(FLAG)                  (*(uint32_t*)0x40006654 &= FLAG)
#define Clr_CAN1_F2R2(FLAG)                  (*(uint32_t*)0x40006654 |= ~FLAG)
#define Set_CAN1_F3R1(FLAG)                  (*(uint32_t*)0x40006658 &= FLAG)
#define Clr_CAN1_F3R1(FLAG)                  (*(uint32_t*)0x40006658 |= ~FLAG)
#define Set_CAN1_F3R2(FLAG)                  (*(uint32_t*)0x4000665c &= FLAG)
#define Clr_CAN1_F3R2(FLAG)                  (*(uint32_t*)0x4000665c |= ~FLAG)
#define Set_CAN1_F4R1(FLAG)                  (*(uint32_t*)0x40006660 &= FLAG)
#define Clr_CAN1_F4R1(FLAG)                  (*(uint32_t*)0x40006660 |= ~FLAG)
#define Set_CAN1_F4R2(FLAG)                  (*(uint32_t*)0x40006664 &= FLAG)
#define Clr_CAN1_F4R2(FLAG)                  (*(uint32_t*)0x40006664 |= ~FLAG)
#define Set_CAN1_F5R1(FLAG)                  (*(uint32_t*)0x40006668 &= FLAG)
#define Clr_CAN1_F5R1(FLAG)                  (*(uint32_t*)0x40006668 |= ~FLAG)
#define Set_CAN1_F5R2(FLAG)                  (*(uint32_t*)0x4000666c &= FLAG)
#define Clr_CAN1_F5R2(FLAG)                  (*(uint32_t*)0x4000666c |= ~FLAG)
#define Set_CAN1_F6R1(FLAG)                  (*(uint32_t*)0x40006670 &= FLAG)
#define Clr_CAN1_F6R1(FLAG)                  (*(uint32_t*)0x40006670 |= ~FLAG)
#define Set_CAN1_F6R2(FLAG)                  (*(uint32_t*)0x40006674 &= FLAG)
#define Clr_CAN1_F6R2(FLAG)                  (*(uint32_t*)0x40006674 |= ~FLAG)
#define Set_CAN1_F7R1(FLAG)                  (*(uint32_t*)0x40006678 &= FLAG)
#define Clr_CAN1_F7R1(FLAG)                  (*(uint32_t*)0x40006678 |= ~FLAG)
#define Set_CAN1_F7R2(FLAG)                  (*(uint32_t*)0x4000667c &= FLAG)
#define Clr_CAN1_F7R2(FLAG)                  (*(uint32_t*)0x4000667c |= ~FLAG)
#define Set_CAN1_F8R1(FLAG)                  (*(uint32_t*)0x40006680 &= FLAG)
#define Clr_CAN1_F8R1(FLAG)                  (*(uint32_t*)0x40006680 |= ~FLAG)
#define Set_CAN1_F8R2(FLAG)                  (*(uint32_t*)0x40006684 &= FLAG)
#define Clr_CAN1_F8R2(FLAG)                  (*(uint32_t*)0x40006684 |= ~FLAG)
#define Set_CAN1_F9R1(FLAG)                  (*(uint32_t*)0x40006688 &= FLAG)
#define Clr_CAN1_F9R1(FLAG)                  (*(uint32_t*)0x40006688 |= ~FLAG)
#define Set_CAN1_F9R2(FLAG)                  (*(uint32_t*)0x4000668c &= FLAG)
#define Clr_CAN1_F9R2(FLAG)                  (*(uint32_t*)0x4000668c |= ~FLAG)
#define Set_CAN1_F10R1(FLAG)                 (*(uint32_t*)0x40006690 &= FLAG)
#define Clr_CAN1_F10R1(FLAG)                 (*(uint32_t*)0x40006690 |= ~FLAG)
#define Set_CAN1_F10R2(FLAG)                 (*(uint32_t*)0x40006694 &= FLAG)
#define Clr_CAN1_F10R2(FLAG)                 (*(uint32_t*)0x40006694 |= ~FLAG)
#define Set_CAN1_F11R1(FLAG)                 (*(uint32_t*)0x40006698 &= FLAG)
#define Clr_CAN1_F11R1(FLAG)                 (*(uint32_t*)0x40006698 |= ~FLAG)
#define Set_CAN1_F11R2(FLAG)                 (*(uint32_t*)0x4000669c &= FLAG)
#define Clr_CAN1_F11R2(FLAG)                 (*(uint32_t*)0x4000669c |= ~FLAG)
#define Set_CAN1_F12R1(FLAG)                 (*(uint32_t*)0x400066a0 &= FLAG)
#define Clr_CAN1_F12R1(FLAG)                 (*(uint32_t*)0x400066a0 |= ~FLAG)
#define Set_CAN1_F12R2(FLAG)                 (*(uint32_t*)0x400066a4 &= FLAG)
#define Clr_CAN1_F12R2(FLAG)                 (*(uint32_t*)0x400066a4 |= ~FLAG)
#define Set_CAN1_F13R1(FLAG)                 (*(uint32_t*)0x400066a8 &= FLAG)
#define Clr_CAN1_F13R1(FLAG)                 (*(uint32_t*)0x400066a8 |= ~FLAG)
#define Set_CAN1_F13R2(FLAG)                 (*(uint32_t*)0x400066ac &= FLAG)
#define Clr_CAN1_F13R2(FLAG)                 (*(uint32_t*)0x400066ac |= ~FLAG)
#define Set_CAN1_F14R1(FLAG)                 (*(uint32_t*)0x400066b0 &= FLAG)
#define Clr_CAN1_F14R1(FLAG)                 (*(uint32_t*)0x400066b0 |= ~FLAG)
#define Set_CAN1_F14R2(FLAG)                 (*(uint32_t*)0x400066b4 &= FLAG)
#define Clr_CAN1_F14R2(FLAG)                 (*(uint32_t*)0x400066b4 |= ~FLAG)
#define Set_CAN1_F15R1(FLAG)                 (*(uint32_t*)0x400066b8 &= FLAG)
#define Clr_CAN1_F15R1(FLAG)                 (*(uint32_t*)0x400066b8 |= ~FLAG)
#define Set_CAN1_F15R2(FLAG)                 (*(uint32_t*)0x400066bc &= FLAG)
#define Clr_CAN1_F15R2(FLAG)                 (*(uint32_t*)0x400066bc |= ~FLAG)
#define Set_CAN1_F16R1(FLAG)                 (*(uint32_t*)0x400066c0 &= FLAG)
#define Clr_CAN1_F16R1(FLAG)                 (*(uint32_t*)0x400066c0 |= ~FLAG)
#define Set_CAN1_F16R2(FLAG)                 (*(uint32_t*)0x400066c4 &= FLAG)
#define Clr_CAN1_F16R2(FLAG)                 (*(uint32_t*)0x400066c4 |= ~FLAG)
#define Set_CAN1_F17R1(FLAG)                 (*(uint32_t*)0x400066c8 &= FLAG)
#define Clr_CAN1_F17R1(FLAG)                 (*(uint32_t*)0x400066c8 |= ~FLAG)
#define Set_CAN1_F17R2(FLAG)                 (*(uint32_t*)0x400066cc &= FLAG)
#define Clr_CAN1_F17R2(FLAG)                 (*(uint32_t*)0x400066cc |= ~FLAG)
#define Set_CAN1_F18R1(FLAG)                 (*(uint32_t*)0x400066d0 &= FLAG)
#define Clr_CAN1_F18R1(FLAG)                 (*(uint32_t*)0x400066d0 |= ~FLAG)
#define Set_CAN1_F18R2(FLAG)                 (*(uint32_t*)0x400066d4 &= FLAG)
#define Clr_CAN1_F18R2(FLAG)                 (*(uint32_t*)0x400066d4 |= ~FLAG)
#define Set_CAN1_F19R1(FLAG)                 (*(uint32_t*)0x400066d8 &= FLAG)
#define Clr_CAN1_F19R1(FLAG)                 (*(uint32_t*)0x400066d8 |= ~FLAG)
#define Set_CAN1_F19R2(FLAG)                 (*(uint32_t*)0x400066dc &= FLAG)
#define Clr_CAN1_F19R2(FLAG)                 (*(uint32_t*)0x400066dc |= ~FLAG)
#define Set_CAN1_F20R1(FLAG)                 (*(uint32_t*)0x400066e0 &= FLAG)
#define Clr_CAN1_F20R1(FLAG)                 (*(uint32_t*)0x400066e0 |= ~FLAG)
#define Set_CAN1_F20R2(FLAG)                 (*(uint32_t*)0x400066e4 &= FLAG)
#define Clr_CAN1_F20R2(FLAG)                 (*(uint32_t*)0x400066e4 |= ~FLAG)
#define Set_CAN1_F21R1(FLAG)                 (*(uint32_t*)0x400066e8 &= FLAG)
#define Clr_CAN1_F21R1(FLAG)                 (*(uint32_t*)0x400066e8 |= ~FLAG)
#define Set_CAN1_F21R2(FLAG)                 (*(uint32_t*)0x400066ec &= FLAG)
#define Clr_CAN1_F21R2(FLAG)                 (*(uint32_t*)0x400066ec |= ~FLAG)
#define Set_CAN1_F22R1(FLAG)                 (*(uint32_t*)0x400066f0 &= FLAG)
#define Clr_CAN1_F22R1(FLAG)                 (*(uint32_t*)0x400066f0 |= ~FLAG)
#define Set_CAN1_F22R2(FLAG)                 (*(uint32_t*)0x400066f4 &= FLAG)
#define Clr_CAN1_F22R2(FLAG)                 (*(uint32_t*)0x400066f4 |= ~FLAG)
#define Set_CAN1_F23R1(FLAG)                 (*(uint32_t*)0x400066f8 &= FLAG)
#define Clr_CAN1_F23R1(FLAG)                 (*(uint32_t*)0x400066f8 |= ~FLAG)
#define Set_CAN1_F23R2(FLAG)                 (*(uint32_t*)0x400066fc &= FLAG)
#define Clr_CAN1_F23R2(FLAG)                 (*(uint32_t*)0x400066fc |= ~FLAG)
#define Set_CAN1_F24R1(FLAG)                 (*(uint32_t*)0x40006700 &= FLAG)
#define Clr_CAN1_F24R1(FLAG)                 (*(uint32_t*)0x40006700 |= ~FLAG)
#define Set_CAN1_F24R2(FLAG)                 (*(uint32_t*)0x40006704 &= FLAG)
#define Clr_CAN1_F24R2(FLAG)                 (*(uint32_t*)0x40006704 |= ~FLAG)
#define Set_CAN1_F25R1(FLAG)                 (*(uint32_t*)0x40006708 &= FLAG)
#define Clr_CAN1_F25R1(FLAG)                 (*(uint32_t*)0x40006708 |= ~FLAG)
#define Set_CAN1_F25R2(FLAG)                 (*(uint32_t*)0x4000670c &= FLAG)
#define Clr_CAN1_F25R2(FLAG)                 (*(uint32_t*)0x4000670c |= ~FLAG)
#define Set_CAN1_F26R1(FLAG)                 (*(uint32_t*)0x40006710 &= FLAG)
#define Clr_CAN1_F26R1(FLAG)                 (*(uint32_t*)0x40006710 |= ~FLAG)
#define Set_CAN1_F26R2(FLAG)                 (*(uint32_t*)0x40006714 &= FLAG)
#define Clr_CAN1_F26R2(FLAG)                 (*(uint32_t*)0x40006714 |= ~FLAG)
#define Set_CAN1_F27R1(FLAG)                 (*(uint32_t*)0x40006718 &= FLAG)
#define Clr_CAN1_F27R1(FLAG)                 (*(uint32_t*)0x40006718 |= ~FLAG)
#define Set_CAN1_F27R2(FLAG)                 (*(uint32_t*)0x4000671c &= FLAG)
#define Clr_CAN1_F27R2(FLAG)                 (*(uint32_t*)0x4000671c |= ~FLAG)
#define Set_CAN2_MCR(FLAG)                   (*(uint32_t*)0x40006800 &= FLAG)
#define Clr_CAN2_MCR(FLAG)                   (*(uint32_t*)0x40006800 |= ~FLAG)
#define Set_CAN2_MSR(FLAG)                   (*(uint32_t*)0x40006804 &= FLAG)
#define Clr_CAN2_MSR(FLAG)                   (*(uint32_t*)0x40006804 |= ~FLAG)
#define Set_CAN2_TSR(FLAG)                   (*(uint32_t*)0x40006808 &= FLAG)
#define Clr_CAN2_TSR(FLAG)                   (*(uint32_t*)0x40006808 |= ~FLAG)
#define Set_CAN2_RF0R(FLAG)                  (*(uint32_t*)0x4000680c &= FLAG)
#define Clr_CAN2_RF0R(FLAG)                  (*(uint32_t*)0x4000680c |= ~FLAG)
#define Set_CAN2_RF1R(FLAG)                  (*(uint32_t*)0x40006810 &= FLAG)
#define Clr_CAN2_RF1R(FLAG)                  (*(uint32_t*)0x40006810 |= ~FLAG)
#define Set_CAN2_IER(FLAG)                   (*(uint32_t*)0x40006814 &= FLAG)
#define Clr_CAN2_IER(FLAG)                   (*(uint32_t*)0x40006814 |= ~FLAG)
#define Set_CAN2_ESR(FLAG)                   (*(uint32_t*)0x40006818 &= FLAG)
#define Clr_CAN2_ESR(FLAG)                   (*(uint32_t*)0x40006818 |= ~FLAG)
#define Set_CAN2_BTR(FLAG)                   (*(uint32_t*)0x4000681c &= FLAG)
#define Clr_CAN2_BTR(FLAG)                   (*(uint32_t*)0x4000681c |= ~FLAG)
#define Set_CAN2_TI0R(FLAG)                  (*(uint32_t*)0x40006980 &= FLAG)
#define Clr_CAN2_TI0R(FLAG)                  (*(uint32_t*)0x40006980 |= ~FLAG)
#define Set_CAN2_TDT0R(FLAG)                 (*(uint32_t*)0x40006984 &= FLAG)
#define Clr_CAN2_TDT0R(FLAG)                 (*(uint32_t*)0x40006984 |= ~FLAG)
#define Set_CAN2_TDL0R(FLAG)                 (*(uint32_t*)0x40006988 &= FLAG)
#define Clr_CAN2_TDL0R(FLAG)                 (*(uint32_t*)0x40006988 |= ~FLAG)
#define Set_CAN2_TDH0R(FLAG)                 (*(uint32_t*)0x4000698c &= FLAG)
#define Clr_CAN2_TDH0R(FLAG)                 (*(uint32_t*)0x4000698c |= ~FLAG)
#define Set_CAN2_TI1R(FLAG)                  (*(uint32_t*)0x40006990 &= FLAG)
#define Clr_CAN2_TI1R(FLAG)                  (*(uint32_t*)0x40006990 |= ~FLAG)
#define Set_CAN2_TDT1R(FLAG)                 (*(uint32_t*)0x40006994 &= FLAG)
#define Clr_CAN2_TDT1R(FLAG)                 (*(uint32_t*)0x40006994 |= ~FLAG)
#define Set_CAN2_TDL1R(FLAG)                 (*(uint32_t*)0x40006998 &= FLAG)
#define Clr_CAN2_TDL1R(FLAG)                 (*(uint32_t*)0x40006998 |= ~FLAG)
#define Set_CAN2_TDH1R(FLAG)                 (*(uint32_t*)0x4000699c &= FLAG)
#define Clr_CAN2_TDH1R(FLAG)                 (*(uint32_t*)0x4000699c |= ~FLAG)
#define Set_CAN2_TI2R(FLAG)                  (*(uint32_t*)0x400069a0 &= FLAG)
#define Clr_CAN2_TI2R(FLAG)                  (*(uint32_t*)0x400069a0 |= ~FLAG)
#define Set_CAN2_TDT2R(FLAG)                 (*(uint32_t*)0x400069a4 &= FLAG)
#define Clr_CAN2_TDT2R(FLAG)                 (*(uint32_t*)0x400069a4 |= ~FLAG)
#define Set_CAN2_TDL2R(FLAG)                 (*(uint32_t*)0x400069a8 &= FLAG)
#define Clr_CAN2_TDL2R(FLAG)                 (*(uint32_t*)0x400069a8 |= ~FLAG)
#define Set_CAN2_TDH2R(FLAG)                 (*(uint32_t*)0x400069ac &= FLAG)
#define Clr_CAN2_TDH2R(FLAG)                 (*(uint32_t*)0x400069ac |= ~FLAG)
#define Set_CAN2_RI0R(FLAG)                  (*(uint32_t*)0x400069b0 &= FLAG)
#define Clr_CAN2_RI0R(FLAG)                  (*(uint32_t*)0x400069b0 |= ~FLAG)
#define Set_CAN2_RDT0R(FLAG)                 (*(uint32_t*)0x400069b4 &= FLAG)
#define Clr_CAN2_RDT0R(FLAG)                 (*(uint32_t*)0x400069b4 |= ~FLAG)
#define Set_CAN2_RDL0R(FLAG)                 (*(uint32_t*)0x400069b8 &= FLAG)
#define Clr_CAN2_RDL0R(FLAG)                 (*(uint32_t*)0x400069b8 |= ~FLAG)
#define Set_CAN2_RDH0R(FLAG)                 (*(uint32_t*)0x400069bc &= FLAG)
#define Clr_CAN2_RDH0R(FLAG)                 (*(uint32_t*)0x400069bc |= ~FLAG)
#define Set_CAN2_RI1R(FLAG)                  (*(uint32_t*)0x400069c0 &= FLAG)
#define Clr_CAN2_RI1R(FLAG)                  (*(uint32_t*)0x400069c0 |= ~FLAG)
#define Set_CAN2_RDT1R(FLAG)                 (*(uint32_t*)0x400069c4 &= FLAG)
#define Clr_CAN2_RDT1R(FLAG)                 (*(uint32_t*)0x400069c4 |= ~FLAG)
#define Set_CAN2_RDL1R(FLAG)                 (*(uint32_t*)0x400069c8 &= FLAG)
#define Clr_CAN2_RDL1R(FLAG)                 (*(uint32_t*)0x400069c8 |= ~FLAG)
#define Set_CAN2_RDH1R(FLAG)                 (*(uint32_t*)0x400069cc &= FLAG)
#define Clr_CAN2_RDH1R(FLAG)                 (*(uint32_t*)0x400069cc |= ~FLAG)
#define Set_CAN2_FMR(FLAG)                   (*(uint32_t*)0x40006a00 &= FLAG)
#define Clr_CAN2_FMR(FLAG)                   (*(uint32_t*)0x40006a00 |= ~FLAG)
#define Set_CAN2_FM1R(FLAG)                  (*(uint32_t*)0x40006a04 &= FLAG)
#define Clr_CAN2_FM1R(FLAG)                  (*(uint32_t*)0x40006a04 |= ~FLAG)
#define Set_CAN2_FS1R(FLAG)                  (*(uint32_t*)0x40006a0c &= FLAG)
#define Clr_CAN2_FS1R(FLAG)                  (*(uint32_t*)0x40006a0c |= ~FLAG)
#define Set_CAN2_FFA1R(FLAG)                 (*(uint32_t*)0x40006a14 &= FLAG)
#define Clr_CAN2_FFA1R(FLAG)                 (*(uint32_t*)0x40006a14 |= ~FLAG)
#define Set_CAN2_FA1R(FLAG)                  (*(uint32_t*)0x40006a1c &= FLAG)
#define Clr_CAN2_FA1R(FLAG)                  (*(uint32_t*)0x40006a1c |= ~FLAG)
#define Set_CAN2_F0R1(FLAG)                  (*(uint32_t*)0x40006a40 &= FLAG)
#define Clr_CAN2_F0R1(FLAG)                  (*(uint32_t*)0x40006a40 |= ~FLAG)
#define Set_CAN2_F0R2(FLAG)                  (*(uint32_t*)0x40006a44 &= FLAG)
#define Clr_CAN2_F0R2(FLAG)                  (*(uint32_t*)0x40006a44 |= ~FLAG)
#define Set_CAN2_F1R1(FLAG)                  (*(uint32_t*)0x40006a48 &= FLAG)
#define Clr_CAN2_F1R1(FLAG)                  (*(uint32_t*)0x40006a48 |= ~FLAG)
#define Set_CAN2_F1R2(FLAG)                  (*(uint32_t*)0x40006a4c &= FLAG)
#define Clr_CAN2_F1R2(FLAG)                  (*(uint32_t*)0x40006a4c |= ~FLAG)
#define Set_CAN2_F2R1(FLAG)                  (*(uint32_t*)0x40006a50 &= FLAG)
#define Clr_CAN2_F2R1(FLAG)                  (*(uint32_t*)0x40006a50 |= ~FLAG)
#define Set_CAN2_F2R2(FLAG)                  (*(uint32_t*)0x40006a54 &= FLAG)
#define Clr_CAN2_F2R2(FLAG)                  (*(uint32_t*)0x40006a54 |= ~FLAG)
#define Set_CAN2_F3R1(FLAG)                  (*(uint32_t*)0x40006a58 &= FLAG)
#define Clr_CAN2_F3R1(FLAG)                  (*(uint32_t*)0x40006a58 |= ~FLAG)
#define Set_CAN2_F3R2(FLAG)                  (*(uint32_t*)0x40006a5c &= FLAG)
#define Clr_CAN2_F3R2(FLAG)                  (*(uint32_t*)0x40006a5c |= ~FLAG)
#define Set_CAN2_F4R1(FLAG)                  (*(uint32_t*)0x40006a60 &= FLAG)
#define Clr_CAN2_F4R1(FLAG)                  (*(uint32_t*)0x40006a60 |= ~FLAG)
#define Set_CAN2_F4R2(FLAG)                  (*(uint32_t*)0x40006a64 &= FLAG)
#define Clr_CAN2_F4R2(FLAG)                  (*(uint32_t*)0x40006a64 |= ~FLAG)
#define Set_CAN2_F5R1(FLAG)                  (*(uint32_t*)0x40006a68 &= FLAG)
#define Clr_CAN2_F5R1(FLAG)                  (*(uint32_t*)0x40006a68 |= ~FLAG)
#define Set_CAN2_F5R2(FLAG)                  (*(uint32_t*)0x40006a6c &= FLAG)
#define Clr_CAN2_F5R2(FLAG)                  (*(uint32_t*)0x40006a6c |= ~FLAG)
#define Set_CAN2_F6R1(FLAG)                  (*(uint32_t*)0x40006a70 &= FLAG)
#define Clr_CAN2_F6R1(FLAG)                  (*(uint32_t*)0x40006a70 |= ~FLAG)
#define Set_CAN2_F6R2(FLAG)                  (*(uint32_t*)0x40006a74 &= FLAG)
#define Clr_CAN2_F6R2(FLAG)                  (*(uint32_t*)0x40006a74 |= ~FLAG)
#define Set_CAN2_F7R1(FLAG)                  (*(uint32_t*)0x40006a78 &= FLAG)
#define Clr_CAN2_F7R1(FLAG)                  (*(uint32_t*)0x40006a78 |= ~FLAG)
#define Set_CAN2_F7R2(FLAG)                  (*(uint32_t*)0x40006a7c &= FLAG)
#define Clr_CAN2_F7R2(FLAG)                  (*(uint32_t*)0x40006a7c |= ~FLAG)
#define Set_CAN2_F8R1(FLAG)                  (*(uint32_t*)0x40006a80 &= FLAG)
#define Clr_CAN2_F8R1(FLAG)                  (*(uint32_t*)0x40006a80 |= ~FLAG)
#define Set_CAN2_F8R2(FLAG)                  (*(uint32_t*)0x40006a84 &= FLAG)
#define Clr_CAN2_F8R2(FLAG)                  (*(uint32_t*)0x40006a84 |= ~FLAG)
#define Set_CAN2_F9R1(FLAG)                  (*(uint32_t*)0x40006a88 &= FLAG)
#define Clr_CAN2_F9R1(FLAG)                  (*(uint32_t*)0x40006a88 |= ~FLAG)
#define Set_CAN2_F9R2(FLAG)                  (*(uint32_t*)0x40006a8c &= FLAG)
#define Clr_CAN2_F9R2(FLAG)                  (*(uint32_t*)0x40006a8c |= ~FLAG)
#define Set_CAN2_F10R1(FLAG)                 (*(uint32_t*)0x40006a90 &= FLAG)
#define Clr_CAN2_F10R1(FLAG)                 (*(uint32_t*)0x40006a90 |= ~FLAG)
#define Set_CAN2_F10R2(FLAG)                 (*(uint32_t*)0x40006a94 &= FLAG)
#define Clr_CAN2_F10R2(FLAG)                 (*(uint32_t*)0x40006a94 |= ~FLAG)
#define Set_CAN2_F11R1(FLAG)                 (*(uint32_t*)0x40006a98 &= FLAG)
#define Clr_CAN2_F11R1(FLAG)                 (*(uint32_t*)0x40006a98 |= ~FLAG)
#define Set_CAN2_F11R2(FLAG)                 (*(uint32_t*)0x40006a9c &= FLAG)
#define Clr_CAN2_F11R2(FLAG)                 (*(uint32_t*)0x40006a9c |= ~FLAG)
#define Set_CAN2_F12R1(FLAG)                 (*(uint32_t*)0x40006aa0 &= FLAG)
#define Clr_CAN2_F12R1(FLAG)                 (*(uint32_t*)0x40006aa0 |= ~FLAG)
#define Set_CAN2_F12R2(FLAG)                 (*(uint32_t*)0x40006aa4 &= FLAG)
#define Clr_CAN2_F12R2(FLAG)                 (*(uint32_t*)0x40006aa4 |= ~FLAG)
#define Set_CAN2_F13R1(FLAG)                 (*(uint32_t*)0x40006aa8 &= FLAG)
#define Clr_CAN2_F13R1(FLAG)                 (*(uint32_t*)0x40006aa8 |= ~FLAG)
#define Set_CAN2_F13R2(FLAG)                 (*(uint32_t*)0x40006aac &= FLAG)
#define Clr_CAN2_F13R2(FLAG)                 (*(uint32_t*)0x40006aac |= ~FLAG)
#define Set_CAN2_F14R1(FLAG)                 (*(uint32_t*)0x40006ab0 &= FLAG)
#define Clr_CAN2_F14R1(FLAG)                 (*(uint32_t*)0x40006ab0 |= ~FLAG)
#define Set_CAN2_F14R2(FLAG)                 (*(uint32_t*)0x40006ab4 &= FLAG)
#define Clr_CAN2_F14R2(FLAG)                 (*(uint32_t*)0x40006ab4 |= ~FLAG)
#define Set_CAN2_F15R1(FLAG)                 (*(uint32_t*)0x40006ab8 &= FLAG)
#define Clr_CAN2_F15R1(FLAG)                 (*(uint32_t*)0x40006ab8 |= ~FLAG)
#define Set_CAN2_F15R2(FLAG)                 (*(uint32_t*)0x40006abc &= FLAG)
#define Clr_CAN2_F15R2(FLAG)                 (*(uint32_t*)0x40006abc |= ~FLAG)
#define Set_CAN2_F16R1(FLAG)                 (*(uint32_t*)0x40006ac0 &= FLAG)
#define Clr_CAN2_F16R1(FLAG)                 (*(uint32_t*)0x40006ac0 |= ~FLAG)
#define Set_CAN2_F16R2(FLAG)                 (*(uint32_t*)0x40006ac4 &= FLAG)
#define Clr_CAN2_F16R2(FLAG)                 (*(uint32_t*)0x40006ac4 |= ~FLAG)
#define Set_CAN2_F17R1(FLAG)                 (*(uint32_t*)0x40006ac8 &= FLAG)
#define Clr_CAN2_F17R1(FLAG)                 (*(uint32_t*)0x40006ac8 |= ~FLAG)
#define Set_CAN2_F17R2(FLAG)                 (*(uint32_t*)0x40006acc &= FLAG)
#define Clr_CAN2_F17R2(FLAG)                 (*(uint32_t*)0x40006acc |= ~FLAG)
#define Set_CAN2_F18R1(FLAG)                 (*(uint32_t*)0x40006ad0 &= FLAG)
#define Clr_CAN2_F18R1(FLAG)                 (*(uint32_t*)0x40006ad0 |= ~FLAG)
#define Set_CAN2_F18R2(FLAG)                 (*(uint32_t*)0x40006ad4 &= FLAG)
#define Clr_CAN2_F18R2(FLAG)                 (*(uint32_t*)0x40006ad4 |= ~FLAG)
#define Set_CAN2_F19R1(FLAG)                 (*(uint32_t*)0x40006ad8 &= FLAG)
#define Clr_CAN2_F19R1(FLAG)                 (*(uint32_t*)0x40006ad8 |= ~FLAG)
#define Set_CAN2_F19R2(FLAG)                 (*(uint32_t*)0x40006adc &= FLAG)
#define Clr_CAN2_F19R2(FLAG)                 (*(uint32_t*)0x40006adc |= ~FLAG)
#define Set_CAN2_F20R1(FLAG)                 (*(uint32_t*)0x40006ae0 &= FLAG)
#define Clr_CAN2_F20R1(FLAG)                 (*(uint32_t*)0x40006ae0 |= ~FLAG)
#define Set_CAN2_F20R2(FLAG)                 (*(uint32_t*)0x40006ae4 &= FLAG)
#define Clr_CAN2_F20R2(FLAG)                 (*(uint32_t*)0x40006ae4 |= ~FLAG)
#define Set_CAN2_F21R1(FLAG)                 (*(uint32_t*)0x40006ae8 &= FLAG)
#define Clr_CAN2_F21R1(FLAG)                 (*(uint32_t*)0x40006ae8 |= ~FLAG)
#define Set_CAN2_F21R2(FLAG)                 (*(uint32_t*)0x40006aec &= FLAG)
#define Clr_CAN2_F21R2(FLAG)                 (*(uint32_t*)0x40006aec |= ~FLAG)
#define Set_CAN2_F22R1(FLAG)                 (*(uint32_t*)0x40006af0 &= FLAG)
#define Clr_CAN2_F22R1(FLAG)                 (*(uint32_t*)0x40006af0 |= ~FLAG)
#define Set_CAN2_F22R2(FLAG)                 (*(uint32_t*)0x40006af4 &= FLAG)
#define Clr_CAN2_F22R2(FLAG)                 (*(uint32_t*)0x40006af4 |= ~FLAG)
#define Set_CAN2_F23R1(FLAG)                 (*(uint32_t*)0x40006af8 &= FLAG)
#define Clr_CAN2_F23R1(FLAG)                 (*(uint32_t*)0x40006af8 |= ~FLAG)
#define Set_CAN2_F23R2(FLAG)                 (*(uint32_t*)0x40006afc &= FLAG)
#define Clr_CAN2_F23R2(FLAG)                 (*(uint32_t*)0x40006afc |= ~FLAG)
#define Set_CAN2_F24R1(FLAG)                 (*(uint32_t*)0x40006b00 &= FLAG)
#define Clr_CAN2_F24R1(FLAG)                 (*(uint32_t*)0x40006b00 |= ~FLAG)
#define Set_CAN2_F24R2(FLAG)                 (*(uint32_t*)0x40006b04 &= FLAG)
#define Clr_CAN2_F24R2(FLAG)                 (*(uint32_t*)0x40006b04 |= ~FLAG)
#define Set_CAN2_F25R1(FLAG)                 (*(uint32_t*)0x40006b08 &= FLAG)
#define Clr_CAN2_F25R1(FLAG)                 (*(uint32_t*)0x40006b08 |= ~FLAG)
#define Set_CAN2_F25R2(FLAG)                 (*(uint32_t*)0x40006b0c &= FLAG)
#define Clr_CAN2_F25R2(FLAG)                 (*(uint32_t*)0x40006b0c |= ~FLAG)
#define Set_CAN2_F26R1(FLAG)                 (*(uint32_t*)0x40006b10 &= FLAG)
#define Clr_CAN2_F26R1(FLAG)                 (*(uint32_t*)0x40006b10 |= ~FLAG)
#define Set_CAN2_F26R2(FLAG)                 (*(uint32_t*)0x40006b14 &= FLAG)
#define Clr_CAN2_F26R2(FLAG)                 (*(uint32_t*)0x40006b14 |= ~FLAG)
#define Set_CAN2_F27R1(FLAG)                 (*(uint32_t*)0x40006b18 &= FLAG)
#define Clr_CAN2_F27R1(FLAG)                 (*(uint32_t*)0x40006b18 |= ~FLAG)
#define Set_CAN2_F27R2(FLAG)                 (*(uint32_t*)0x40006b1c &= FLAG)
#define Clr_CAN2_F27R2(FLAG)                 (*(uint32_t*)0x40006b1c |= ~FLAG)
#define  _CAN3_MCR_DBF                                       (0x1 << 16)    // DBF
#define  _CAN3_MCR_RESET                                     (0x1 << 15)    // RESET
#define  _CAN3_MCR_TTCM                                      (0x1 << 7)    // TTCM
#define  _CAN3_MCR_ABOM                                      (0x1 << 6)    // ABOM
#define  _CAN3_MCR_AWUM                                      (0x1 << 5)    // AWUM
#define  _CAN3_MCR_NART                                      (0x1 << 4)    // NART
#define  _CAN3_MCR_RFLM                                      (0x1 << 3)    // RFLM
#define  _CAN3_MCR_TXFP                                      (0x1 << 2)    // TXFP
#define  _CAN3_MCR_SLEEP                                     (0x1 << 1)    // SLEEP
#define  _CAN3_MCR_INRQ                                      (0x1 << 0)    // INRQ
#define  _CAN3_MSR_RX                                        (0x1 << 11)    // RX
#define  _CAN3_MSR_SAMP                                      (0x1 << 10)    // SAMP
#define  _CAN3_MSR_RXM                                       (0x1 << 9)    // RXM
#define  _CAN3_MSR_TXM                                       (0x1 << 8)    // TXM
#define  _CAN3_MSR_SLAKI                                     (0x1 << 4)    // SLAKI
#define  _CAN3_MSR_WKUI                                      (0x1 << 3)    // WKUI
#define  _CAN3_MSR_ERRI                                      (0x1 << 2)    // ERRI
#define  _CAN3_MSR_SLAK                                      (0x1 << 1)    // SLAK
#define  _CAN3_MSR_INAK                                      (0x1 << 0)    // INAK
#define  _CAN3_TSR_LOW2                                      (0x1 << 31)    // Lowest priority flag for mailbox 2
#define  _CAN3_TSR_LOW1                                      (0x1 << 30)    // Lowest priority flag for mailbox 1
#define  _CAN3_TSR_LOW0                                      (0x1 << 29)    // Lowest priority flag for mailbox 0
#define  _CAN3_TSR_TME2                                      (0x1 << 28)    // Lowest priority flag for mailbox 2
#define  _CAN3_TSR_TME1                                      (0x1 << 27)    // Lowest priority flag for mailbox 1
#define  _CAN3_TSR_TME0                                      (0x1 << 26)    // Lowest priority flag for mailbox 0
#define  _CAN3_TSR_CODE                                      (0x3 << 24)    // CODE
#define  _CAN3_TSR_ABRQ2                                     (0x1 << 23)    // ABRQ2
#define  _CAN3_TSR_TERR2                                     (0x1 << 19)    // TERR2
#define  _CAN3_TSR_ALST2                                     (0x1 << 18)    // ALST2
#define  _CAN3_TSR_TXOK2                                     (0x1 << 17)    // TXOK2
#define  _CAN3_TSR_RQCP2                                     (0x1 << 16)    // RQCP2
#define  _CAN3_TSR_ABRQ1                                     (0x1 << 15)    // ABRQ1
#define  _CAN3_TSR_TERR1                                     (0x1 << 11)    // TERR1
#define  _CAN3_TSR_ALST1                                     (0x1 << 10)    // ALST1
#define  _CAN3_TSR_TXOK1                                     (0x1 << 9)    // TXOK1
#define  _CAN3_TSR_RQCP1                                     (0x1 << 8)    // RQCP1
#define  _CAN3_TSR_ABRQ0                                     (0x1 << 7)    // ABRQ0
#define  _CAN3_TSR_TERR0                                     (0x1 << 3)    // TERR0
#define  _CAN3_TSR_ALST0                                     (0x1 << 2)    // ALST0
#define  _CAN3_TSR_TXOK0                                     (0x1 << 1)    // TXOK0
#define  _CAN3_TSR_RQCP0                                     (0x1 << 0)    // RQCP0
#define  _CAN3_RF0R_RFOM0                                    (0x1 << 5)    // RFOM0
#define  _CAN3_RF0R_FOVR0                                    (0x1 << 4)    // FOVR0
#define  _CAN3_RF0R_FULL0                                    (0x1 << 3)    // FULL0
#define  _CAN3_RF0R_FMP0                                     (0x3 << 0)    // FMP0
#define  _CAN3_RF1R_RFOM1                                    (0x1 << 5)    // RFOM1
#define  _CAN3_RF1R_FOVR1                                    (0x1 << 4)    // FOVR1
#define  _CAN3_RF1R_FULL1                                    (0x1 << 3)    // FULL1
#define  _CAN3_RF1R_FMP1                                     (0x3 << 0)    // FMP1
#define  _CAN3_IER_SLKIE                                     (0x1 << 17)    // SLKIE
#define  _CAN3_IER_WKUIE                                     (0x1 << 16)    // WKUIE
#define  _CAN3_IER_ERRIE                                     (0x1 << 15)    // ERRIE
#define  _CAN3_IER_LECIE                                     (0x1 << 11)    // LECIE
#define  _CAN3_IER_BOFIE                                     (0x1 << 10)    // BOFIE
#define  _CAN3_IER_EPVIE                                     (0x1 << 9)    // EPVIE
#define  _CAN3_IER_EWGIE                                     (0x1 << 8)    // EWGIE
#define  _CAN3_IER_FOVIE1                                    (0x1 << 6)    // FOVIE1
#define  _CAN3_IER_FFIE1                                     (0x1 << 5)    // FFIE1
#define  _CAN3_IER_FMPIE1                                    (0x1 << 4)    // FMPIE1
#define  _CAN3_IER_FOVIE0                                    (0x1 << 3)    // FOVIE0
#define  _CAN3_IER_FFIE0                                     (0x1 << 2)    // FFIE0
#define  _CAN3_IER_FMPIE0                                    (0x1 << 1)    // FMPIE0
#define  _CAN3_IER_TMEIE                                     (0x1 << 0)    // TMEIE
#define  _CAN3_ESR_REC                                       (0xff << 24)    // REC
#define  _CAN3_ESR_TEC                                       (0xff << 16)    // TEC
#define  _CAN3_ESR_LEC                                       (0x7 << 4)    // LEC
#define  _CAN3_ESR_BOFF                                      (0x1 << 2)    // BOFF
#define  _CAN3_ESR_EPVF                                      (0x1 << 1)    // EPVF
#define  _CAN3_ESR_EWGF                                      (0x1 << 0)    // EWGF
#define  _CAN3_BTR_SILM                                      (0x1 << 31)    // SILM
#define  _CAN3_BTR_LBKM                                      (0x1 << 30)    // LBKM
#define  _CAN3_BTR_SJW                                       (0x3 << 24)    // SJW
#define  _CAN3_BTR_TS2                                       (0x7 << 20)    // TS2
#define  _CAN3_BTR_TS1                                       (0xf << 16)    // TS1
#define  _CAN3_BTR_BRP                                       (0x3ff << 0)    // BRP
#define  _CAN3_TI0R_STID                                     (0x7ff << 21)    // STID
#define  _CAN3_TI0R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN3_TI0R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN3_TI0R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN3_TI0R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN3_TDT0R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN3_TDT0R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN3_TDT0R_DLC                                     (0xf << 0)    // DLC
#define  _CAN3_TDL0R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN3_TDL0R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN3_TDL0R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN3_TDL0R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN3_TDH0R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN3_TDH0R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN3_TDH0R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN3_TDH0R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN3_TI1R_STID                                     (0x7ff << 21)    // STID
#define  _CAN3_TI1R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN3_TI1R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN3_TI1R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN3_TI1R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN3_TDT1R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN3_TDT1R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN3_TDT1R_DLC                                     (0xf << 0)    // DLC
#define  _CAN3_TDL1R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN3_TDL1R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN3_TDL1R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN3_TDL1R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN3_TDH1R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN3_TDH1R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN3_TDH1R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN3_TDH1R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN3_TI2R_STID                                     (0x7ff << 21)    // STID
#define  _CAN3_TI2R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN3_TI2R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN3_TI2R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN3_TI2R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN3_TDT2R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN3_TDT2R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN3_TDT2R_DLC                                     (0xf << 0)    // DLC
#define  _CAN3_TDL2R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN3_TDL2R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN3_TDL2R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN3_TDL2R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN3_TDH2R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN3_TDH2R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN3_TDH2R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN3_TDH2R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN3_RI0R_STID                                     (0x7ff << 21)    // STID
#define  _CAN3_RI0R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN3_RI0R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN3_RI0R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN3_RDT0R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN3_RDT0R_FMI                                     (0xff << 8)    // FMI
#define  _CAN3_RDT0R_DLC                                     (0xf << 0)    // DLC
#define  _CAN3_RDL0R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN3_RDL0R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN3_RDL0R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN3_RDL0R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN3_RDH0R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN3_RDH0R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN3_RDH0R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN3_RDH0R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN3_RI1R_STID                                     (0x7ff << 21)    // STID
#define  _CAN3_RI1R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN3_RI1R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN3_RI1R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN3_RDT1R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN3_RDT1R_FMI                                     (0xff << 8)    // FMI
#define  _CAN3_RDT1R_DLC                                     (0xf << 0)    // DLC
#define  _CAN3_RDL1R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN3_RDL1R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN3_RDL1R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN3_RDL1R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN3_RDH1R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN3_RDH1R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN3_RDH1R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN3_RDH1R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN3_FMR_CAN2SB                                    (0x3f << 8)    // CAN2SB
#define  _CAN3_FMR_FINIT                                     (0x1 << 0)    // FINIT
#define  _CAN3_FM1R_FBM0                                     (0x1 << 0)    // Filter mode
#define  _CAN3_FM1R_FBM1                                     (0x1 << 1)    // Filter mode
#define  _CAN3_FM1R_FBM2                                     (0x1 << 2)    // Filter mode
#define  _CAN3_FM1R_FBM3                                     (0x1 << 3)    // Filter mode
#define  _CAN3_FM1R_FBM4                                     (0x1 << 4)    // Filter mode
#define  _CAN3_FM1R_FBM5                                     (0x1 << 5)    // Filter mode
#define  _CAN3_FM1R_FBM6                                     (0x1 << 6)    // Filter mode
#define  _CAN3_FM1R_FBM7                                     (0x1 << 7)    // Filter mode
#define  _CAN3_FM1R_FBM8                                     (0x1 << 8)    // Filter mode
#define  _CAN3_FM1R_FBM9                                     (0x1 << 9)    // Filter mode
#define  _CAN3_FM1R_FBM10                                    (0x1 << 10)    // Filter mode
#define  _CAN3_FM1R_FBM11                                    (0x1 << 11)    // Filter mode
#define  _CAN3_FM1R_FBM12                                    (0x1 << 12)    // Filter mode
#define  _CAN3_FM1R_FBM13                                    (0x1 << 13)    // Filter mode
#define  _CAN3_FM1R_FBM14                                    (0x1 << 14)    // Filter mode
#define  _CAN3_FM1R_FBM15                                    (0x1 << 15)    // Filter mode
#define  _CAN3_FM1R_FBM16                                    (0x1 << 16)    // Filter mode
#define  _CAN3_FM1R_FBM17                                    (0x1 << 17)    // Filter mode
#define  _CAN3_FM1R_FBM18                                    (0x1 << 18)    // Filter mode
#define  _CAN3_FM1R_FBM19                                    (0x1 << 19)    // Filter mode
#define  _CAN3_FM1R_FBM20                                    (0x1 << 20)    // Filter mode
#define  _CAN3_FM1R_FBM21                                    (0x1 << 21)    // Filter mode
#define  _CAN3_FM1R_FBM22                                    (0x1 << 22)    // Filter mode
#define  _CAN3_FM1R_FBM23                                    (0x1 << 23)    // Filter mode
#define  _CAN3_FM1R_FBM24                                    (0x1 << 24)    // Filter mode
#define  _CAN3_FM1R_FBM25                                    (0x1 << 25)    // Filter mode
#define  _CAN3_FM1R_FBM26                                    (0x1 << 26)    // Filter mode
#define  _CAN3_FM1R_FBM27                                    (0x1 << 27)    // Filter mode
#define  _CAN3_FS1R_FSC0                                     (0x1 << 0)    // Filter scale configuration
#define  _CAN3_FS1R_FSC1                                     (0x1 << 1)    // Filter scale configuration
#define  _CAN3_FS1R_FSC2                                     (0x1 << 2)    // Filter scale configuration
#define  _CAN3_FS1R_FSC3                                     (0x1 << 3)    // Filter scale configuration
#define  _CAN3_FS1R_FSC4                                     (0x1 << 4)    // Filter scale configuration
#define  _CAN3_FS1R_FSC5                                     (0x1 << 5)    // Filter scale configuration
#define  _CAN3_FS1R_FSC6                                     (0x1 << 6)    // Filter scale configuration
#define  _CAN3_FS1R_FSC7                                     (0x1 << 7)    // Filter scale configuration
#define  _CAN3_FS1R_FSC8                                     (0x1 << 8)    // Filter scale configuration
#define  _CAN3_FS1R_FSC9                                     (0x1 << 9)    // Filter scale configuration
#define  _CAN3_FS1R_FSC10                                    (0x1 << 10)    // Filter scale configuration
#define  _CAN3_FS1R_FSC11                                    (0x1 << 11)    // Filter scale configuration
#define  _CAN3_FS1R_FSC12                                    (0x1 << 12)    // Filter scale configuration
#define  _CAN3_FS1R_FSC13                                    (0x1 << 13)    // Filter scale configuration
#define  _CAN3_FS1R_FSC14                                    (0x1 << 14)    // Filter scale configuration
#define  _CAN3_FS1R_FSC15                                    (0x1 << 15)    // Filter scale configuration
#define  _CAN3_FS1R_FSC16                                    (0x1 << 16)    // Filter scale configuration
#define  _CAN3_FS1R_FSC17                                    (0x1 << 17)    // Filter scale configuration
#define  _CAN3_FS1R_FSC18                                    (0x1 << 18)    // Filter scale configuration
#define  _CAN3_FS1R_FSC19                                    (0x1 << 19)    // Filter scale configuration
#define  _CAN3_FS1R_FSC20                                    (0x1 << 20)    // Filter scale configuration
#define  _CAN3_FS1R_FSC21                                    (0x1 << 21)    // Filter scale configuration
#define  _CAN3_FS1R_FSC22                                    (0x1 << 22)    // Filter scale configuration
#define  _CAN3_FS1R_FSC23                                    (0x1 << 23)    // Filter scale configuration
#define  _CAN3_FS1R_FSC24                                    (0x1 << 24)    // Filter scale configuration
#define  _CAN3_FS1R_FSC25                                    (0x1 << 25)    // Filter scale configuration
#define  _CAN3_FS1R_FSC26                                    (0x1 << 26)    // Filter scale configuration
#define  _CAN3_FS1R_FSC27                                    (0x1 << 27)    // Filter scale configuration
#define  _CAN3_FFA1R_FFA0                                    (0x1 << 0)    // Filter FIFO assignment for filter 0
#define  _CAN3_FFA1R_FFA1                                    (0x1 << 1)    // Filter FIFO assignment for filter 1
#define  _CAN3_FFA1R_FFA2                                    (0x1 << 2)    // Filter FIFO assignment for filter 2
#define  _CAN3_FFA1R_FFA3                                    (0x1 << 3)    // Filter FIFO assignment for filter 3
#define  _CAN3_FFA1R_FFA4                                    (0x1 << 4)    // Filter FIFO assignment for filter 4
#define  _CAN3_FFA1R_FFA5                                    (0x1 << 5)    // Filter FIFO assignment for filter 5
#define  _CAN3_FFA1R_FFA6                                    (0x1 << 6)    // Filter FIFO assignment for filter 6
#define  _CAN3_FFA1R_FFA7                                    (0x1 << 7)    // Filter FIFO assignment for filter 7
#define  _CAN3_FFA1R_FFA8                                    (0x1 << 8)    // Filter FIFO assignment for filter 8
#define  _CAN3_FFA1R_FFA9                                    (0x1 << 9)    // Filter FIFO assignment for filter 9
#define  _CAN3_FFA1R_FFA10                                   (0x1 << 10)    // Filter FIFO assignment for filter 10
#define  _CAN3_FFA1R_FFA11                                   (0x1 << 11)    // Filter FIFO assignment for filter 11
#define  _CAN3_FFA1R_FFA12                                   (0x1 << 12)    // Filter FIFO assignment for filter 12
#define  _CAN3_FFA1R_FFA13                                   (0x1 << 13)    // Filter FIFO assignment for filter 13
#define  _CAN3_FFA1R_FFA14                                   (0x1 << 14)    // Filter FIFO assignment for filter 14
#define  _CAN3_FFA1R_FFA15                                   (0x1 << 15)    // Filter FIFO assignment for filter 15
#define  _CAN3_FFA1R_FFA16                                   (0x1 << 16)    // Filter FIFO assignment for filter 16
#define  _CAN3_FFA1R_FFA17                                   (0x1 << 17)    // Filter FIFO assignment for filter 17
#define  _CAN3_FFA1R_FFA18                                   (0x1 << 18)    // Filter FIFO assignment for filter 18
#define  _CAN3_FFA1R_FFA19                                   (0x1 << 19)    // Filter FIFO assignment for filter 19
#define  _CAN3_FFA1R_FFA20                                   (0x1 << 20)    // Filter FIFO assignment for filter 20
#define  _CAN3_FFA1R_FFA21                                   (0x1 << 21)    // Filter FIFO assignment for filter 21
#define  _CAN3_FFA1R_FFA22                                   (0x1 << 22)    // Filter FIFO assignment for filter 22
#define  _CAN3_FFA1R_FFA23                                   (0x1 << 23)    // Filter FIFO assignment for filter 23
#define  _CAN3_FFA1R_FFA24                                   (0x1 << 24)    // Filter FIFO assignment for filter 24
#define  _CAN3_FFA1R_FFA25                                   (0x1 << 25)    // Filter FIFO assignment for filter 25
#define  _CAN3_FFA1R_FFA26                                   (0x1 << 26)    // Filter FIFO assignment for filter 26
#define  _CAN3_FFA1R_FFA27                                   (0x1 << 27)    // Filter FIFO assignment for filter 27
#define  _CAN3_FA1R_FACT0                                    (0x1 << 0)    // Filter active
#define  _CAN3_FA1R_FACT1                                    (0x1 << 1)    // Filter active
#define  _CAN3_FA1R_FACT2                                    (0x1 << 2)    // Filter active
#define  _CAN3_FA1R_FACT3                                    (0x1 << 3)    // Filter active
#define  _CAN3_FA1R_FACT4                                    (0x1 << 4)    // Filter active
#define  _CAN3_FA1R_FACT5                                    (0x1 << 5)    // Filter active
#define  _CAN3_FA1R_FACT6                                    (0x1 << 6)    // Filter active
#define  _CAN3_FA1R_FACT7                                    (0x1 << 7)    // Filter active
#define  _CAN3_FA1R_FACT8                                    (0x1 << 8)    // Filter active
#define  _CAN3_FA1R_FACT9                                    (0x1 << 9)    // Filter active
#define  _CAN3_FA1R_FACT10                                   (0x1 << 10)    // Filter active
#define  _CAN3_FA1R_FACT11                                   (0x1 << 11)    // Filter active
#define  _CAN3_FA1R_FACT12                                   (0x1 << 12)    // Filter active
#define  _CAN3_FA1R_FACT13                                   (0x1 << 13)    // Filter active
#define  _CAN3_FA1R_FACT14                                   (0x1 << 14)    // Filter active
#define  _CAN3_FA1R_FACT15                                   (0x1 << 15)    // Filter active
#define  _CAN3_FA1R_FACT16                                   (0x1 << 16)    // Filter active
#define  _CAN3_FA1R_FACT17                                   (0x1 << 17)    // Filter active
#define  _CAN3_FA1R_FACT18                                   (0x1 << 18)    // Filter active
#define  _CAN3_FA1R_FACT19                                   (0x1 << 19)    // Filter active
#define  _CAN3_FA1R_FACT20                                   (0x1 << 20)    // Filter active
#define  _CAN3_FA1R_FACT21                                   (0x1 << 21)    // Filter active
#define  _CAN3_FA1R_FACT22                                   (0x1 << 22)    // Filter active
#define  _CAN3_FA1R_FACT23                                   (0x1 << 23)    // Filter active
#define  _CAN3_FA1R_FACT24                                   (0x1 << 24)    // Filter active
#define  _CAN3_FA1R_FACT25                                   (0x1 << 25)    // Filter active
#define  _CAN3_FA1R_FACT26                                   (0x1 << 26)    // Filter active
#define  _CAN3_FA1R_FACT27                                   (0x1 << 27)    // Filter active
#define  _CAN3_F0R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F0R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F0R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F0R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F0R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F0R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F0R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F0R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F0R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F0R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F0R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F0R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F0R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F0R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F0R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F0R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F0R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F0R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F0R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F0R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F0R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F0R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F0R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F0R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F0R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F0R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F0R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F0R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F0R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F0R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F0R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F0R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F0R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F0R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F0R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F0R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F0R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F0R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F0R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F0R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F0R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F0R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F0R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F0R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F0R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F0R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F0R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F0R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F0R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F0R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F0R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F0R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F0R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F0R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F0R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F0R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F0R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F0R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F0R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F0R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F0R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F0R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F0R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F0R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F1R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F1R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F1R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F1R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F1R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F1R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F1R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F1R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F1R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F1R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F1R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F1R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F1R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F1R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F1R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F1R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F1R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F1R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F1R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F1R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F1R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F1R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F1R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F1R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F1R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F1R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F1R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F1R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F1R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F1R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F1R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F1R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F1R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F1R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F1R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F1R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F1R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F1R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F1R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F1R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F1R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F1R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F1R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F1R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F1R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F1R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F1R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F1R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F1R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F1R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F1R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F1R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F1R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F1R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F1R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F1R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F1R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F1R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F1R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F1R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F1R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F1R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F1R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F1R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F2R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F2R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F2R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F2R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F2R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F2R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F2R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F2R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F2R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F2R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F2R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F2R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F2R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F2R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F2R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F2R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F2R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F2R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F2R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F2R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F2R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F2R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F2R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F2R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F2R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F2R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F2R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F2R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F2R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F2R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F2R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F2R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F2R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F2R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F2R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F2R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F2R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F2R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F2R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F2R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F2R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F2R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F2R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F2R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F2R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F2R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F2R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F2R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F2R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F2R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F2R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F2R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F2R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F2R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F2R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F2R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F2R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F2R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F2R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F2R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F2R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F2R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F2R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F2R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F3R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F3R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F3R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F3R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F3R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F3R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F3R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F3R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F3R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F3R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F3R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F3R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F3R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F3R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F3R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F3R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F3R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F3R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F3R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F3R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F3R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F3R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F3R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F3R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F3R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F3R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F3R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F3R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F3R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F3R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F3R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F3R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F3R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F3R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F3R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F3R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F3R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F3R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F3R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F3R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F3R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F3R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F3R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F3R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F3R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F3R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F3R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F3R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F3R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F3R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F3R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F3R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F3R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F3R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F3R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F3R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F3R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F3R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F3R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F3R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F3R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F3R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F3R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F3R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F4R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F4R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F4R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F4R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F4R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F4R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F4R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F4R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F4R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F4R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F4R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F4R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F4R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F4R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F4R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F4R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F4R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F4R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F4R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F4R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F4R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F4R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F4R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F4R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F4R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F4R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F4R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F4R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F4R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F4R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F4R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F4R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F4R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F4R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F4R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F4R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F4R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F4R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F4R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F4R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F4R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F4R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F4R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F4R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F4R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F4R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F4R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F4R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F4R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F4R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F4R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F4R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F4R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F4R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F4R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F4R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F4R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F4R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F4R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F4R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F4R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F4R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F4R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F4R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F5R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F5R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F5R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F5R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F5R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F5R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F5R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F5R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F5R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F5R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F5R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F5R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F5R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F5R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F5R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F5R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F5R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F5R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F5R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F5R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F5R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F5R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F5R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F5R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F5R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F5R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F5R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F5R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F5R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F5R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F5R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F5R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F5R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F5R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F5R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F5R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F5R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F5R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F5R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F5R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F5R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F5R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F5R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F5R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F5R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F5R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F5R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F5R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F5R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F5R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F5R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F5R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F5R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F5R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F5R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F5R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F5R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F5R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F5R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F5R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F5R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F5R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F5R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F5R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F6R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F6R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F6R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F6R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F6R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F6R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F6R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F6R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F6R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F6R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F6R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F6R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F6R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F6R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F6R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F6R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F6R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F6R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F6R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F6R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F6R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F6R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F6R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F6R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F6R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F6R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F6R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F6R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F6R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F6R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F6R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F6R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F6R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F6R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F6R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F6R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F6R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F6R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F6R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F6R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F6R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F6R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F6R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F6R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F6R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F6R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F6R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F6R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F6R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F6R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F6R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F6R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F6R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F6R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F6R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F6R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F6R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F6R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F6R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F6R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F6R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F6R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F6R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F6R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F7R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F7R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F7R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F7R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F7R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F7R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F7R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F7R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F7R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F7R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F7R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F7R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F7R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F7R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F7R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F7R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F7R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F7R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F7R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F7R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F7R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F7R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F7R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F7R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F7R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F7R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F7R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F7R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F7R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F7R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F7R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F7R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F7R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F7R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F7R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F7R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F7R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F7R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F7R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F7R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F7R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F7R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F7R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F7R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F7R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F7R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F7R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F7R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F7R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F7R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F7R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F7R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F7R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F7R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F7R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F7R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F7R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F7R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F7R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F7R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F7R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F7R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F7R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F7R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F8R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F8R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F8R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F8R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F8R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F8R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F8R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F8R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F8R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F8R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F8R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F8R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F8R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F8R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F8R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F8R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F8R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F8R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F8R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F8R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F8R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F8R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F8R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F8R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F8R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F8R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F8R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F8R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F8R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F8R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F8R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F8R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F8R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F8R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F8R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F8R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F8R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F8R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F8R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F8R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F8R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F8R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F8R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F8R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F8R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F8R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F8R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F8R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F8R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F8R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F8R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F8R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F8R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F8R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F8R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F8R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F8R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F8R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F8R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F8R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F8R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F8R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F8R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F8R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F9R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F9R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F9R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F9R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F9R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F9R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F9R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F9R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F9R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F9R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F9R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F9R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F9R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F9R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F9R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F9R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F9R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F9R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F9R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F9R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F9R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F9R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F9R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F9R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F9R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F9R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F9R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F9R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F9R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F9R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F9R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F9R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F9R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN3_F9R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN3_F9R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN3_F9R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN3_F9R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN3_F9R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN3_F9R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN3_F9R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN3_F9R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN3_F9R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN3_F9R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN3_F9R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN3_F9R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN3_F9R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN3_F9R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN3_F9R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN3_F9R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN3_F9R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN3_F9R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN3_F9R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN3_F9R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN3_F9R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN3_F9R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN3_F9R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN3_F9R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN3_F9R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN3_F9R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN3_F9R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN3_F9R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN3_F9R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN3_F9R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN3_F9R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN3_F10R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F10R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F10R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F10R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F10R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F10R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F10R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F10R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F10R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F10R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F10R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F10R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F10R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F10R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F10R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F10R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F10R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F10R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F10R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F10R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F10R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F10R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F10R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F10R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F10R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F10R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F10R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F10R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F10R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F10R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F10R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F10R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F10R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F10R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F10R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F10R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F10R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F10R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F10R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F10R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F10R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F10R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F10R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F10R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F10R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F10R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F10R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F10R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F10R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F10R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F10R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F10R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F10R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F10R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F10R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F10R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F10R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F10R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F10R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F10R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F10R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F10R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F10R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F10R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F11R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F11R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F11R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F11R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F11R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F11R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F11R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F11R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F11R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F11R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F11R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F11R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F11R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F11R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F11R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F11R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F11R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F11R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F11R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F11R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F11R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F11R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F11R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F11R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F11R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F11R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F11R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F11R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F11R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F11R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F11R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F11R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F11R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F11R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F11R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F11R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F11R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F11R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F11R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F11R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F11R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F11R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F11R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F11R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F11R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F11R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F11R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F11R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F11R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F11R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F11R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F11R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F11R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F11R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F11R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F11R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F11R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F11R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F11R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F11R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F11R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F11R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F11R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F11R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F12R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F12R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F12R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F12R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F12R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F12R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F12R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F12R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F12R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F12R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F12R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F12R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F12R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F12R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F12R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F12R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F12R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F12R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F12R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F12R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F12R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F12R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F12R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F12R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F12R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F12R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F12R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F12R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F12R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F12R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F12R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F12R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F12R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F12R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F12R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F12R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F12R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F12R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F12R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F12R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F12R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F12R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F12R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F12R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F12R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F12R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F12R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F12R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F12R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F12R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F12R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F12R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F12R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F12R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F12R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F12R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F12R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F12R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F12R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F12R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F12R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F12R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F12R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F12R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F13R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F13R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F13R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F13R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F13R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F13R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F13R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F13R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F13R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F13R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F13R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F13R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F13R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F13R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F13R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F13R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F13R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F13R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F13R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F13R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F13R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F13R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F13R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F13R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F13R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F13R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F13R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F13R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F13R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F13R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F13R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F13R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F13R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F13R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F13R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F13R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F13R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F13R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F13R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F13R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F13R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F13R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F13R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F13R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F13R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F13R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F13R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F13R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F13R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F13R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F13R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F13R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F13R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F13R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F13R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F13R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F13R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F13R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F13R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F13R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F13R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F13R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F13R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F13R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F14R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F14R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F14R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F14R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F14R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F14R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F14R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F14R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F14R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F14R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F14R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F14R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F14R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F14R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F14R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F14R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F14R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F14R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F14R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F14R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F14R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F14R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F14R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F14R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F14R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F14R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F14R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F14R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F14R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F14R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F14R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F14R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F14R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F14R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F14R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F14R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F14R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F14R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F14R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F14R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F14R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F14R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F14R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F14R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F14R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F14R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F14R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F14R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F14R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F14R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F14R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F14R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F14R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F14R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F14R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F14R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F14R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F14R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F14R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F14R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F14R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F14R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F14R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F14R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F15R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F15R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F15R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F15R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F15R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F15R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F15R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F15R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F15R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F15R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F15R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F15R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F15R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F15R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F15R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F15R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F15R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F15R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F15R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F15R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F15R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F15R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F15R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F15R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F15R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F15R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F15R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F15R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F15R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F15R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F15R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F15R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F15R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F15R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F15R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F15R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F15R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F15R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F15R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F15R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F15R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F15R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F15R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F15R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F15R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F15R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F15R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F15R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F15R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F15R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F15R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F15R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F15R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F15R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F15R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F15R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F15R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F15R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F15R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F15R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F15R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F15R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F15R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F15R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F16R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F16R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F16R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F16R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F16R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F16R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F16R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F16R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F16R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F16R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F16R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F16R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F16R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F16R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F16R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F16R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F16R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F16R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F16R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F16R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F16R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F16R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F16R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F16R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F16R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F16R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F16R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F16R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F16R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F16R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F16R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F16R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F16R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F16R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F16R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F16R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F16R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F16R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F16R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F16R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F16R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F16R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F16R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F16R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F16R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F16R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F16R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F16R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F16R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F16R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F16R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F16R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F16R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F16R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F16R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F16R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F16R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F16R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F16R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F16R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F16R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F16R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F16R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F16R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F17R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F17R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F17R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F17R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F17R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F17R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F17R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F17R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F17R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F17R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F17R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F17R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F17R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F17R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F17R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F17R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F17R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F17R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F17R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F17R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F17R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F17R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F17R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F17R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F17R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F17R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F17R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F17R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F17R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F17R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F17R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F17R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F17R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F17R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F17R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F17R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F17R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F17R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F17R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F17R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F17R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F17R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F17R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F17R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F17R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F17R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F17R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F17R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F17R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F17R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F17R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F17R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F17R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F17R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F17R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F17R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F17R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F17R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F17R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F17R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F17R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F17R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F17R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F17R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F18R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F18R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F18R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F18R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F18R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F18R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F18R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F18R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F18R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F18R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F18R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F18R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F18R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F18R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F18R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F18R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F18R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F18R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F18R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F18R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F18R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F18R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F18R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F18R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F18R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F18R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F18R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F18R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F18R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F18R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F18R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F18R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F18R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F18R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F18R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F18R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F18R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F18R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F18R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F18R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F18R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F18R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F18R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F18R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F18R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F18R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F18R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F18R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F18R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F18R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F18R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F18R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F18R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F18R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F18R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F18R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F18R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F18R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F18R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F18R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F18R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F18R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F18R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F18R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F19R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F19R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F19R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F19R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F19R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F19R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F19R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F19R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F19R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F19R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F19R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F19R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F19R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F19R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F19R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F19R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F19R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F19R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F19R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F19R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F19R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F19R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F19R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F19R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F19R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F19R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F19R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F19R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F19R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F19R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F19R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F19R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F19R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F19R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F19R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F19R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F19R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F19R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F19R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F19R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F19R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F19R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F19R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F19R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F19R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F19R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F19R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F19R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F19R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F19R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F19R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F19R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F19R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F19R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F19R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F19R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F19R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F19R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F19R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F19R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F19R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F19R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F19R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F19R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F20R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F20R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F20R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F20R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F20R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F20R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F20R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F20R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F20R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F20R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F20R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F20R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F20R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F20R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F20R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F20R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F20R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F20R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F20R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F20R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F20R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F20R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F20R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F20R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F20R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F20R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F20R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F20R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F20R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F20R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F20R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F20R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F20R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F20R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F20R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F20R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F20R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F20R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F20R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F20R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F20R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F20R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F20R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F20R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F20R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F20R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F20R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F20R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F20R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F20R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F20R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F20R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F20R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F20R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F20R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F20R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F20R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F20R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F20R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F20R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F20R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F20R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F20R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F20R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F21R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F21R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F21R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F21R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F21R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F21R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F21R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F21R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F21R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F21R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F21R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F21R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F21R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F21R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F21R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F21R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F21R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F21R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F21R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F21R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F21R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F21R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F21R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F21R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F21R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F21R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F21R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F21R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F21R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F21R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F21R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F21R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F21R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F21R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F21R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F21R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F21R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F21R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F21R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F21R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F21R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F21R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F21R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F21R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F21R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F21R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F21R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F21R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F21R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F21R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F21R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F21R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F21R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F21R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F21R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F21R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F21R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F21R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F21R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F21R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F21R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F21R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F21R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F21R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F22R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F22R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F22R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F22R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F22R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F22R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F22R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F22R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F22R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F22R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F22R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F22R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F22R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F22R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F22R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F22R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F22R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F22R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F22R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F22R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F22R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F22R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F22R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F22R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F22R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F22R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F22R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F22R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F22R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F22R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F22R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F22R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F22R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F22R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F22R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F22R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F22R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F22R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F22R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F22R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F22R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F22R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F22R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F22R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F22R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F22R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F22R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F22R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F22R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F22R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F22R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F22R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F22R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F22R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F22R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F22R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F22R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F22R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F22R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F22R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F22R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F22R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F22R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F22R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F23R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F23R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F23R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F23R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F23R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F23R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F23R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F23R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F23R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F23R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F23R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F23R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F23R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F23R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F23R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F23R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F23R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F23R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F23R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F23R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F23R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F23R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F23R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F23R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F23R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F23R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F23R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F23R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F23R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F23R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F23R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F23R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F23R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F23R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F23R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F23R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F23R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F23R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F23R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F23R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F23R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F23R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F23R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F23R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F23R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F23R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F23R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F23R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F23R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F23R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F23R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F23R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F23R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F23R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F23R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F23R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F23R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F23R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F23R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F23R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F23R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F23R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F23R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F23R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F24R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F24R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F24R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F24R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F24R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F24R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F24R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F24R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F24R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F24R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F24R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F24R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F24R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F24R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F24R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F24R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F24R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F24R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F24R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F24R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F24R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F24R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F24R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F24R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F24R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F24R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F24R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F24R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F24R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F24R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F24R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F24R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F24R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F24R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F24R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F24R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F24R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F24R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F24R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F24R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F24R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F24R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F24R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F24R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F24R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F24R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F24R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F24R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F24R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F24R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F24R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F24R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F24R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F24R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F24R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F24R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F24R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F24R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F24R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F24R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F24R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F24R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F24R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F24R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F25R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F25R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F25R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F25R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F25R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F25R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F25R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F25R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F25R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F25R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F25R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F25R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F25R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F25R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F25R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F25R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F25R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F25R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F25R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F25R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F25R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F25R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F25R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F25R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F25R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F25R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F25R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F25R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F25R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F25R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F25R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F25R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F25R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F25R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F25R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F25R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F25R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F25R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F25R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F25R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F25R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F25R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F25R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F25R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F25R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F25R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F25R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F25R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F25R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F25R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F25R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F25R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F25R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F25R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F25R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F25R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F25R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F25R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F25R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F25R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F25R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F25R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F25R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F25R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F26R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F26R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F26R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F26R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F26R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F26R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F26R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F26R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F26R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F26R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F26R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F26R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F26R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F26R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F26R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F26R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F26R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F26R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F26R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F26R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F26R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F26R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F26R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F26R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F26R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F26R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F26R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F26R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F26R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F26R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F26R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F26R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F26R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F26R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F26R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F26R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F26R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F26R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F26R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F26R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F26R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F26R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F26R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F26R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F26R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F26R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F26R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F26R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F26R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F26R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F26R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F26R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F26R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F26R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F26R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F26R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F26R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F26R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F26R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F26R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F26R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F26R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F26R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F26R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F27R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F27R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F27R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F27R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F27R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F27R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F27R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F27R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F27R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F27R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F27R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F27R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F27R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F27R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F27R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F27R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F27R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F27R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F27R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F27R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F27R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F27R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F27R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F27R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F27R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F27R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F27R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F27R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F27R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F27R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F27R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F27R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN3_F27R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN3_F27R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN3_F27R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN3_F27R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN3_F27R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN3_F27R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN3_F27R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN3_F27R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN3_F27R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN3_F27R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN3_F27R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN3_F27R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN3_F27R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN3_F27R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN3_F27R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN3_F27R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN3_F27R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN3_F27R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN3_F27R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN3_F27R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN3_F27R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN3_F27R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN3_F27R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN3_F27R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN3_F27R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN3_F27R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN3_F27R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN3_F27R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN3_F27R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN3_F27R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN3_F27R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN3_F27R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_MCR_DBF                                       (0x1 << 16)    // DBF
#define  _CAN1_MCR_RESET                                     (0x1 << 15)    // RESET
#define  _CAN1_MCR_TTCM                                      (0x1 << 7)    // TTCM
#define  _CAN1_MCR_ABOM                                      (0x1 << 6)    // ABOM
#define  _CAN1_MCR_AWUM                                      (0x1 << 5)    // AWUM
#define  _CAN1_MCR_NART                                      (0x1 << 4)    // NART
#define  _CAN1_MCR_RFLM                                      (0x1 << 3)    // RFLM
#define  _CAN1_MCR_TXFP                                      (0x1 << 2)    // TXFP
#define  _CAN1_MCR_SLEEP                                     (0x1 << 1)    // SLEEP
#define  _CAN1_MCR_INRQ                                      (0x1 << 0)    // INRQ
#define  _CAN1_MSR_RX                                        (0x1 << 11)    // RX
#define  _CAN1_MSR_SAMP                                      (0x1 << 10)    // SAMP
#define  _CAN1_MSR_RXM                                       (0x1 << 9)    // RXM
#define  _CAN1_MSR_TXM                                       (0x1 << 8)    // TXM
#define  _CAN1_MSR_SLAKI                                     (0x1 << 4)    // SLAKI
#define  _CAN1_MSR_WKUI                                      (0x1 << 3)    // WKUI
#define  _CAN1_MSR_ERRI                                      (0x1 << 2)    // ERRI
#define  _CAN1_MSR_SLAK                                      (0x1 << 1)    // SLAK
#define  _CAN1_MSR_INAK                                      (0x1 << 0)    // INAK
#define  _CAN1_TSR_LOW2                                      (0x1 << 31)    // Lowest priority flag for mailbox 2
#define  _CAN1_TSR_LOW1                                      (0x1 << 30)    // Lowest priority flag for mailbox 1
#define  _CAN1_TSR_LOW0                                      (0x1 << 29)    // Lowest priority flag for mailbox 0
#define  _CAN1_TSR_TME2                                      (0x1 << 28)    // Lowest priority flag for mailbox 2
#define  _CAN1_TSR_TME1                                      (0x1 << 27)    // Lowest priority flag for mailbox 1
#define  _CAN1_TSR_TME0                                      (0x1 << 26)    // Lowest priority flag for mailbox 0
#define  _CAN1_TSR_CODE                                      (0x3 << 24)    // CODE
#define  _CAN1_TSR_ABRQ2                                     (0x1 << 23)    // ABRQ2
#define  _CAN1_TSR_TERR2                                     (0x1 << 19)    // TERR2
#define  _CAN1_TSR_ALST2                                     (0x1 << 18)    // ALST2
#define  _CAN1_TSR_TXOK2                                     (0x1 << 17)    // TXOK2
#define  _CAN1_TSR_RQCP2                                     (0x1 << 16)    // RQCP2
#define  _CAN1_TSR_ABRQ1                                     (0x1 << 15)    // ABRQ1
#define  _CAN1_TSR_TERR1                                     (0x1 << 11)    // TERR1
#define  _CAN1_TSR_ALST1                                     (0x1 << 10)    // ALST1
#define  _CAN1_TSR_TXOK1                                     (0x1 << 9)    // TXOK1
#define  _CAN1_TSR_RQCP1                                     (0x1 << 8)    // RQCP1
#define  _CAN1_TSR_ABRQ0                                     (0x1 << 7)    // ABRQ0
#define  _CAN1_TSR_TERR0                                     (0x1 << 3)    // TERR0
#define  _CAN1_TSR_ALST0                                     (0x1 << 2)    // ALST0
#define  _CAN1_TSR_TXOK0                                     (0x1 << 1)    // TXOK0
#define  _CAN1_TSR_RQCP0                                     (0x1 << 0)    // RQCP0
#define  _CAN1_RF0R_RFOM0                                    (0x1 << 5)    // RFOM0
#define  _CAN1_RF0R_FOVR0                                    (0x1 << 4)    // FOVR0
#define  _CAN1_RF0R_FULL0                                    (0x1 << 3)    // FULL0
#define  _CAN1_RF0R_FMP0                                     (0x3 << 0)    // FMP0
#define  _CAN1_RF1R_RFOM1                                    (0x1 << 5)    // RFOM1
#define  _CAN1_RF1R_FOVR1                                    (0x1 << 4)    // FOVR1
#define  _CAN1_RF1R_FULL1                                    (0x1 << 3)    // FULL1
#define  _CAN1_RF1R_FMP1                                     (0x3 << 0)    // FMP1
#define  _CAN1_IER_SLKIE                                     (0x1 << 17)    // SLKIE
#define  _CAN1_IER_WKUIE                                     (0x1 << 16)    // WKUIE
#define  _CAN1_IER_ERRIE                                     (0x1 << 15)    // ERRIE
#define  _CAN1_IER_LECIE                                     (0x1 << 11)    // LECIE
#define  _CAN1_IER_BOFIE                                     (0x1 << 10)    // BOFIE
#define  _CAN1_IER_EPVIE                                     (0x1 << 9)    // EPVIE
#define  _CAN1_IER_EWGIE                                     (0x1 << 8)    // EWGIE
#define  _CAN1_IER_FOVIE1                                    (0x1 << 6)    // FOVIE1
#define  _CAN1_IER_FFIE1                                     (0x1 << 5)    // FFIE1
#define  _CAN1_IER_FMPIE1                                    (0x1 << 4)    // FMPIE1
#define  _CAN1_IER_FOVIE0                                    (0x1 << 3)    // FOVIE0
#define  _CAN1_IER_FFIE0                                     (0x1 << 2)    // FFIE0
#define  _CAN1_IER_FMPIE0                                    (0x1 << 1)    // FMPIE0
#define  _CAN1_IER_TMEIE                                     (0x1 << 0)    // TMEIE
#define  _CAN1_ESR_REC                                       (0xff << 24)    // REC
#define  _CAN1_ESR_TEC                                       (0xff << 16)    // TEC
#define  _CAN1_ESR_LEC                                       (0x7 << 4)    // LEC
#define  _CAN1_ESR_BOFF                                      (0x1 << 2)    // BOFF
#define  _CAN1_ESR_EPVF                                      (0x1 << 1)    // EPVF
#define  _CAN1_ESR_EWGF                                      (0x1 << 0)    // EWGF
#define  _CAN1_BTR_SILM                                      (0x1 << 31)    // SILM
#define  _CAN1_BTR_LBKM                                      (0x1 << 30)    // LBKM
#define  _CAN1_BTR_SJW                                       (0x3 << 24)    // SJW
#define  _CAN1_BTR_TS2                                       (0x7 << 20)    // TS2
#define  _CAN1_BTR_TS1                                       (0xf << 16)    // TS1
#define  _CAN1_BTR_BRP                                       (0x3ff << 0)    // BRP
#define  _CAN1_TI0R_STID                                     (0x7ff << 21)    // STID
#define  _CAN1_TI0R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN1_TI0R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN1_TI0R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN1_TI0R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN1_TDT0R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN1_TDT0R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN1_TDT0R_DLC                                     (0xf << 0)    // DLC
#define  _CAN1_TDL0R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN1_TDL0R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN1_TDL0R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN1_TDL0R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN1_TDH0R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN1_TDH0R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN1_TDH0R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN1_TDH0R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN1_TI1R_STID                                     (0x7ff << 21)    // STID
#define  _CAN1_TI1R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN1_TI1R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN1_TI1R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN1_TI1R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN1_TDT1R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN1_TDT1R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN1_TDT1R_DLC                                     (0xf << 0)    // DLC
#define  _CAN1_TDL1R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN1_TDL1R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN1_TDL1R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN1_TDL1R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN1_TDH1R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN1_TDH1R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN1_TDH1R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN1_TDH1R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN1_TI2R_STID                                     (0x7ff << 21)    // STID
#define  _CAN1_TI2R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN1_TI2R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN1_TI2R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN1_TI2R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN1_TDT2R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN1_TDT2R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN1_TDT2R_DLC                                     (0xf << 0)    // DLC
#define  _CAN1_TDL2R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN1_TDL2R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN1_TDL2R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN1_TDL2R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN1_TDH2R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN1_TDH2R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN1_TDH2R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN1_TDH2R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN1_RI0R_STID                                     (0x7ff << 21)    // STID
#define  _CAN1_RI0R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN1_RI0R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN1_RI0R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN1_RDT0R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN1_RDT0R_FMI                                     (0xff << 8)    // FMI
#define  _CAN1_RDT0R_DLC                                     (0xf << 0)    // DLC
#define  _CAN1_RDL0R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN1_RDL0R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN1_RDL0R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN1_RDL0R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN1_RDH0R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN1_RDH0R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN1_RDH0R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN1_RDH0R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN1_RI1R_STID                                     (0x7ff << 21)    // STID
#define  _CAN1_RI1R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN1_RI1R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN1_RI1R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN1_RDT1R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN1_RDT1R_FMI                                     (0xff << 8)    // FMI
#define  _CAN1_RDT1R_DLC                                     (0xf << 0)    // DLC
#define  _CAN1_RDL1R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN1_RDL1R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN1_RDL1R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN1_RDL1R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN1_RDH1R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN1_RDH1R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN1_RDH1R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN1_RDH1R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN1_FMR_CAN2SB                                    (0x3f << 8)    // CAN2SB
#define  _CAN1_FMR_FINIT                                     (0x1 << 0)    // FINIT
#define  _CAN1_FM1R_FBM0                                     (0x1 << 0)    // Filter mode
#define  _CAN1_FM1R_FBM1                                     (0x1 << 1)    // Filter mode
#define  _CAN1_FM1R_FBM2                                     (0x1 << 2)    // Filter mode
#define  _CAN1_FM1R_FBM3                                     (0x1 << 3)    // Filter mode
#define  _CAN1_FM1R_FBM4                                     (0x1 << 4)    // Filter mode
#define  _CAN1_FM1R_FBM5                                     (0x1 << 5)    // Filter mode
#define  _CAN1_FM1R_FBM6                                     (0x1 << 6)    // Filter mode
#define  _CAN1_FM1R_FBM7                                     (0x1 << 7)    // Filter mode
#define  _CAN1_FM1R_FBM8                                     (0x1 << 8)    // Filter mode
#define  _CAN1_FM1R_FBM9                                     (0x1 << 9)    // Filter mode
#define  _CAN1_FM1R_FBM10                                    (0x1 << 10)    // Filter mode
#define  _CAN1_FM1R_FBM11                                    (0x1 << 11)    // Filter mode
#define  _CAN1_FM1R_FBM12                                    (0x1 << 12)    // Filter mode
#define  _CAN1_FM1R_FBM13                                    (0x1 << 13)    // Filter mode
#define  _CAN1_FM1R_FBM14                                    (0x1 << 14)    // Filter mode
#define  _CAN1_FM1R_FBM15                                    (0x1 << 15)    // Filter mode
#define  _CAN1_FM1R_FBM16                                    (0x1 << 16)    // Filter mode
#define  _CAN1_FM1R_FBM17                                    (0x1 << 17)    // Filter mode
#define  _CAN1_FM1R_FBM18                                    (0x1 << 18)    // Filter mode
#define  _CAN1_FM1R_FBM19                                    (0x1 << 19)    // Filter mode
#define  _CAN1_FM1R_FBM20                                    (0x1 << 20)    // Filter mode
#define  _CAN1_FM1R_FBM21                                    (0x1 << 21)    // Filter mode
#define  _CAN1_FM1R_FBM22                                    (0x1 << 22)    // Filter mode
#define  _CAN1_FM1R_FBM23                                    (0x1 << 23)    // Filter mode
#define  _CAN1_FM1R_FBM24                                    (0x1 << 24)    // Filter mode
#define  _CAN1_FM1R_FBM25                                    (0x1 << 25)    // Filter mode
#define  _CAN1_FM1R_FBM26                                    (0x1 << 26)    // Filter mode
#define  _CAN1_FM1R_FBM27                                    (0x1 << 27)    // Filter mode
#define  _CAN1_FS1R_FSC0                                     (0x1 << 0)    // Filter scale configuration
#define  _CAN1_FS1R_FSC1                                     (0x1 << 1)    // Filter scale configuration
#define  _CAN1_FS1R_FSC2                                     (0x1 << 2)    // Filter scale configuration
#define  _CAN1_FS1R_FSC3                                     (0x1 << 3)    // Filter scale configuration
#define  _CAN1_FS1R_FSC4                                     (0x1 << 4)    // Filter scale configuration
#define  _CAN1_FS1R_FSC5                                     (0x1 << 5)    // Filter scale configuration
#define  _CAN1_FS1R_FSC6                                     (0x1 << 6)    // Filter scale configuration
#define  _CAN1_FS1R_FSC7                                     (0x1 << 7)    // Filter scale configuration
#define  _CAN1_FS1R_FSC8                                     (0x1 << 8)    // Filter scale configuration
#define  _CAN1_FS1R_FSC9                                     (0x1 << 9)    // Filter scale configuration
#define  _CAN1_FS1R_FSC10                                    (0x1 << 10)    // Filter scale configuration
#define  _CAN1_FS1R_FSC11                                    (0x1 << 11)    // Filter scale configuration
#define  _CAN1_FS1R_FSC12                                    (0x1 << 12)    // Filter scale configuration
#define  _CAN1_FS1R_FSC13                                    (0x1 << 13)    // Filter scale configuration
#define  _CAN1_FS1R_FSC14                                    (0x1 << 14)    // Filter scale configuration
#define  _CAN1_FS1R_FSC15                                    (0x1 << 15)    // Filter scale configuration
#define  _CAN1_FS1R_FSC16                                    (0x1 << 16)    // Filter scale configuration
#define  _CAN1_FS1R_FSC17                                    (0x1 << 17)    // Filter scale configuration
#define  _CAN1_FS1R_FSC18                                    (0x1 << 18)    // Filter scale configuration
#define  _CAN1_FS1R_FSC19                                    (0x1 << 19)    // Filter scale configuration
#define  _CAN1_FS1R_FSC20                                    (0x1 << 20)    // Filter scale configuration
#define  _CAN1_FS1R_FSC21                                    (0x1 << 21)    // Filter scale configuration
#define  _CAN1_FS1R_FSC22                                    (0x1 << 22)    // Filter scale configuration
#define  _CAN1_FS1R_FSC23                                    (0x1 << 23)    // Filter scale configuration
#define  _CAN1_FS1R_FSC24                                    (0x1 << 24)    // Filter scale configuration
#define  _CAN1_FS1R_FSC25                                    (0x1 << 25)    // Filter scale configuration
#define  _CAN1_FS1R_FSC26                                    (0x1 << 26)    // Filter scale configuration
#define  _CAN1_FS1R_FSC27                                    (0x1 << 27)    // Filter scale configuration
#define  _CAN1_FFA1R_FFA0                                    (0x1 << 0)    // Filter FIFO assignment for filter 0
#define  _CAN1_FFA1R_FFA1                                    (0x1 << 1)    // Filter FIFO assignment for filter 1
#define  _CAN1_FFA1R_FFA2                                    (0x1 << 2)    // Filter FIFO assignment for filter 2
#define  _CAN1_FFA1R_FFA3                                    (0x1 << 3)    // Filter FIFO assignment for filter 3
#define  _CAN1_FFA1R_FFA4                                    (0x1 << 4)    // Filter FIFO assignment for filter 4
#define  _CAN1_FFA1R_FFA5                                    (0x1 << 5)    // Filter FIFO assignment for filter 5
#define  _CAN1_FFA1R_FFA6                                    (0x1 << 6)    // Filter FIFO assignment for filter 6
#define  _CAN1_FFA1R_FFA7                                    (0x1 << 7)    // Filter FIFO assignment for filter 7
#define  _CAN1_FFA1R_FFA8                                    (0x1 << 8)    // Filter FIFO assignment for filter 8
#define  _CAN1_FFA1R_FFA9                                    (0x1 << 9)    // Filter FIFO assignment for filter 9
#define  _CAN1_FFA1R_FFA10                                   (0x1 << 10)    // Filter FIFO assignment for filter 10
#define  _CAN1_FFA1R_FFA11                                   (0x1 << 11)    // Filter FIFO assignment for filter 11
#define  _CAN1_FFA1R_FFA12                                   (0x1 << 12)    // Filter FIFO assignment for filter 12
#define  _CAN1_FFA1R_FFA13                                   (0x1 << 13)    // Filter FIFO assignment for filter 13
#define  _CAN1_FFA1R_FFA14                                   (0x1 << 14)    // Filter FIFO assignment for filter 14
#define  _CAN1_FFA1R_FFA15                                   (0x1 << 15)    // Filter FIFO assignment for filter 15
#define  _CAN1_FFA1R_FFA16                                   (0x1 << 16)    // Filter FIFO assignment for filter 16
#define  _CAN1_FFA1R_FFA17                                   (0x1 << 17)    // Filter FIFO assignment for filter 17
#define  _CAN1_FFA1R_FFA18                                   (0x1 << 18)    // Filter FIFO assignment for filter 18
#define  _CAN1_FFA1R_FFA19                                   (0x1 << 19)    // Filter FIFO assignment for filter 19
#define  _CAN1_FFA1R_FFA20                                   (0x1 << 20)    // Filter FIFO assignment for filter 20
#define  _CAN1_FFA1R_FFA21                                   (0x1 << 21)    // Filter FIFO assignment for filter 21
#define  _CAN1_FFA1R_FFA22                                   (0x1 << 22)    // Filter FIFO assignment for filter 22
#define  _CAN1_FFA1R_FFA23                                   (0x1 << 23)    // Filter FIFO assignment for filter 23
#define  _CAN1_FFA1R_FFA24                                   (0x1 << 24)    // Filter FIFO assignment for filter 24
#define  _CAN1_FFA1R_FFA25                                   (0x1 << 25)    // Filter FIFO assignment for filter 25
#define  _CAN1_FFA1R_FFA26                                   (0x1 << 26)    // Filter FIFO assignment for filter 26
#define  _CAN1_FFA1R_FFA27                                   (0x1 << 27)    // Filter FIFO assignment for filter 27
#define  _CAN1_FA1R_FACT0                                    (0x1 << 0)    // Filter active
#define  _CAN1_FA1R_FACT1                                    (0x1 << 1)    // Filter active
#define  _CAN1_FA1R_FACT2                                    (0x1 << 2)    // Filter active
#define  _CAN1_FA1R_FACT3                                    (0x1 << 3)    // Filter active
#define  _CAN1_FA1R_FACT4                                    (0x1 << 4)    // Filter active
#define  _CAN1_FA1R_FACT5                                    (0x1 << 5)    // Filter active
#define  _CAN1_FA1R_FACT6                                    (0x1 << 6)    // Filter active
#define  _CAN1_FA1R_FACT7                                    (0x1 << 7)    // Filter active
#define  _CAN1_FA1R_FACT8                                    (0x1 << 8)    // Filter active
#define  _CAN1_FA1R_FACT9                                    (0x1 << 9)    // Filter active
#define  _CAN1_FA1R_FACT10                                   (0x1 << 10)    // Filter active
#define  _CAN1_FA1R_FACT11                                   (0x1 << 11)    // Filter active
#define  _CAN1_FA1R_FACT12                                   (0x1 << 12)    // Filter active
#define  _CAN1_FA1R_FACT13                                   (0x1 << 13)    // Filter active
#define  _CAN1_FA1R_FACT14                                   (0x1 << 14)    // Filter active
#define  _CAN1_FA1R_FACT15                                   (0x1 << 15)    // Filter active
#define  _CAN1_FA1R_FACT16                                   (0x1 << 16)    // Filter active
#define  _CAN1_FA1R_FACT17                                   (0x1 << 17)    // Filter active
#define  _CAN1_FA1R_FACT18                                   (0x1 << 18)    // Filter active
#define  _CAN1_FA1R_FACT19                                   (0x1 << 19)    // Filter active
#define  _CAN1_FA1R_FACT20                                   (0x1 << 20)    // Filter active
#define  _CAN1_FA1R_FACT21                                   (0x1 << 21)    // Filter active
#define  _CAN1_FA1R_FACT22                                   (0x1 << 22)    // Filter active
#define  _CAN1_FA1R_FACT23                                   (0x1 << 23)    // Filter active
#define  _CAN1_FA1R_FACT24                                   (0x1 << 24)    // Filter active
#define  _CAN1_FA1R_FACT25                                   (0x1 << 25)    // Filter active
#define  _CAN1_FA1R_FACT26                                   (0x1 << 26)    // Filter active
#define  _CAN1_FA1R_FACT27                                   (0x1 << 27)    // Filter active
#define  _CAN1_F0R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F0R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F0R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F0R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F0R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F0R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F0R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F0R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F0R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F0R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F0R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F0R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F0R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F0R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F0R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F0R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F0R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F0R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F0R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F0R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F0R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F0R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F0R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F0R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F0R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F0R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F0R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F0R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F0R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F0R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F0R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F0R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F0R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F0R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F0R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F0R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F0R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F0R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F0R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F0R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F0R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F0R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F0R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F0R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F0R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F0R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F0R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F0R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F0R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F0R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F0R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F0R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F0R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F0R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F0R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F0R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F0R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F0R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F0R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F0R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F0R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F0R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F0R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F0R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F1R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F1R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F1R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F1R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F1R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F1R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F1R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F1R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F1R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F1R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F1R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F1R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F1R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F1R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F1R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F1R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F1R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F1R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F1R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F1R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F1R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F1R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F1R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F1R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F1R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F1R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F1R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F1R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F1R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F1R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F1R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F1R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F1R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F1R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F1R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F1R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F1R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F1R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F1R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F1R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F1R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F1R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F1R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F1R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F1R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F1R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F1R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F1R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F1R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F1R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F1R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F1R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F1R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F1R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F1R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F1R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F1R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F1R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F1R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F1R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F1R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F1R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F1R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F1R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F2R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F2R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F2R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F2R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F2R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F2R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F2R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F2R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F2R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F2R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F2R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F2R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F2R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F2R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F2R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F2R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F2R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F2R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F2R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F2R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F2R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F2R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F2R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F2R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F2R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F2R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F2R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F2R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F2R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F2R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F2R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F2R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F2R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F2R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F2R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F2R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F2R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F2R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F2R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F2R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F2R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F2R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F2R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F2R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F2R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F2R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F2R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F2R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F2R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F2R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F2R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F2R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F2R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F2R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F2R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F2R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F2R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F2R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F2R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F2R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F2R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F2R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F2R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F2R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F3R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F3R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F3R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F3R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F3R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F3R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F3R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F3R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F3R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F3R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F3R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F3R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F3R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F3R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F3R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F3R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F3R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F3R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F3R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F3R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F3R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F3R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F3R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F3R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F3R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F3R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F3R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F3R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F3R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F3R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F3R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F3R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F3R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F3R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F3R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F3R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F3R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F3R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F3R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F3R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F3R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F3R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F3R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F3R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F3R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F3R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F3R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F3R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F3R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F3R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F3R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F3R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F3R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F3R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F3R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F3R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F3R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F3R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F3R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F3R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F3R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F3R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F3R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F3R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F4R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F4R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F4R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F4R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F4R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F4R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F4R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F4R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F4R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F4R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F4R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F4R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F4R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F4R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F4R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F4R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F4R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F4R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F4R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F4R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F4R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F4R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F4R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F4R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F4R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F4R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F4R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F4R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F4R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F4R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F4R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F4R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F4R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F4R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F4R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F4R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F4R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F4R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F4R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F4R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F4R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F4R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F4R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F4R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F4R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F4R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F4R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F4R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F4R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F4R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F4R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F4R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F4R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F4R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F4R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F4R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F4R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F4R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F4R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F4R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F4R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F4R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F4R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F4R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F5R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F5R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F5R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F5R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F5R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F5R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F5R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F5R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F5R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F5R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F5R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F5R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F5R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F5R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F5R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F5R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F5R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F5R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F5R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F5R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F5R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F5R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F5R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F5R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F5R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F5R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F5R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F5R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F5R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F5R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F5R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F5R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F5R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F5R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F5R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F5R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F5R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F5R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F5R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F5R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F5R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F5R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F5R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F5R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F5R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F5R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F5R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F5R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F5R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F5R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F5R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F5R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F5R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F5R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F5R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F5R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F5R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F5R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F5R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F5R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F5R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F5R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F5R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F5R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F6R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F6R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F6R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F6R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F6R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F6R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F6R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F6R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F6R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F6R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F6R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F6R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F6R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F6R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F6R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F6R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F6R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F6R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F6R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F6R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F6R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F6R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F6R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F6R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F6R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F6R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F6R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F6R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F6R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F6R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F6R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F6R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F6R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F6R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F6R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F6R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F6R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F6R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F6R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F6R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F6R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F6R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F6R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F6R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F6R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F6R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F6R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F6R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F6R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F6R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F6R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F6R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F6R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F6R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F6R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F6R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F6R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F6R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F6R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F6R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F6R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F6R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F6R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F6R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F7R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F7R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F7R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F7R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F7R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F7R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F7R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F7R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F7R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F7R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F7R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F7R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F7R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F7R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F7R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F7R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F7R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F7R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F7R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F7R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F7R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F7R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F7R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F7R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F7R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F7R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F7R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F7R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F7R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F7R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F7R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F7R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F7R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F7R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F7R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F7R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F7R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F7R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F7R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F7R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F7R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F7R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F7R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F7R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F7R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F7R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F7R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F7R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F7R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F7R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F7R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F7R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F7R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F7R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F7R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F7R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F7R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F7R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F7R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F7R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F7R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F7R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F7R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F7R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F8R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F8R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F8R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F8R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F8R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F8R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F8R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F8R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F8R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F8R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F8R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F8R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F8R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F8R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F8R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F8R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F8R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F8R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F8R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F8R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F8R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F8R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F8R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F8R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F8R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F8R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F8R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F8R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F8R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F8R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F8R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F8R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F8R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F8R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F8R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F8R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F8R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F8R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F8R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F8R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F8R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F8R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F8R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F8R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F8R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F8R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F8R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F8R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F8R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F8R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F8R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F8R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F8R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F8R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F8R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F8R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F8R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F8R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F8R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F8R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F8R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F8R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F8R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F8R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F9R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F9R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F9R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F9R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F9R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F9R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F9R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F9R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F9R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F9R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F9R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F9R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F9R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F9R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F9R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F9R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F9R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F9R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F9R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F9R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F9R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F9R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F9R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F9R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F9R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F9R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F9R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F9R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F9R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F9R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F9R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F9R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F9R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN1_F9R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN1_F9R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN1_F9R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN1_F9R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN1_F9R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN1_F9R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN1_F9R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN1_F9R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN1_F9R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN1_F9R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN1_F9R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN1_F9R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN1_F9R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN1_F9R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN1_F9R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN1_F9R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN1_F9R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN1_F9R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN1_F9R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN1_F9R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN1_F9R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN1_F9R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN1_F9R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN1_F9R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN1_F9R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN1_F9R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN1_F9R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN1_F9R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN1_F9R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN1_F9R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN1_F9R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN1_F10R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F10R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F10R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F10R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F10R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F10R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F10R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F10R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F10R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F10R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F10R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F10R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F10R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F10R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F10R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F10R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F10R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F10R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F10R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F10R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F10R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F10R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F10R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F10R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F10R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F10R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F10R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F10R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F10R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F10R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F10R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F10R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F10R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F10R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F10R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F10R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F10R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F10R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F10R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F10R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F10R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F10R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F10R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F10R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F10R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F10R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F10R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F10R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F10R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F10R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F10R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F10R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F10R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F10R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F10R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F10R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F10R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F10R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F10R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F10R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F10R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F10R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F10R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F10R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F11R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F11R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F11R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F11R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F11R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F11R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F11R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F11R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F11R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F11R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F11R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F11R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F11R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F11R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F11R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F11R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F11R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F11R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F11R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F11R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F11R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F11R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F11R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F11R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F11R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F11R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F11R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F11R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F11R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F11R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F11R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F11R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F11R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F11R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F11R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F11R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F11R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F11R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F11R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F11R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F11R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F11R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F11R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F11R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F11R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F11R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F11R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F11R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F11R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F11R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F11R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F11R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F11R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F11R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F11R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F11R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F11R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F11R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F11R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F11R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F11R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F11R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F11R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F11R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F12R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F12R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F12R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F12R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F12R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F12R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F12R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F12R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F12R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F12R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F12R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F12R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F12R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F12R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F12R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F12R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F12R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F12R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F12R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F12R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F12R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F12R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F12R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F12R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F12R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F12R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F12R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F12R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F12R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F12R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F12R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F12R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F12R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F12R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F12R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F12R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F12R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F12R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F12R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F12R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F12R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F12R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F12R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F12R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F12R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F12R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F12R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F12R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F12R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F12R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F12R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F12R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F12R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F12R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F12R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F12R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F12R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F12R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F12R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F12R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F12R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F12R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F12R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F12R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F13R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F13R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F13R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F13R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F13R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F13R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F13R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F13R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F13R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F13R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F13R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F13R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F13R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F13R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F13R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F13R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F13R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F13R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F13R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F13R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F13R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F13R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F13R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F13R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F13R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F13R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F13R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F13R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F13R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F13R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F13R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F13R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F13R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F13R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F13R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F13R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F13R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F13R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F13R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F13R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F13R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F13R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F13R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F13R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F13R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F13R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F13R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F13R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F13R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F13R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F13R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F13R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F13R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F13R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F13R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F13R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F13R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F13R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F13R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F13R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F13R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F13R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F13R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F13R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F14R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F14R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F14R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F14R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F14R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F14R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F14R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F14R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F14R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F14R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F14R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F14R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F14R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F14R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F14R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F14R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F14R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F14R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F14R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F14R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F14R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F14R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F14R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F14R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F14R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F14R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F14R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F14R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F14R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F14R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F14R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F14R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F14R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F14R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F14R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F14R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F14R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F14R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F14R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F14R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F14R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F14R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F14R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F14R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F14R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F14R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F14R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F14R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F14R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F14R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F14R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F14R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F14R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F14R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F14R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F14R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F14R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F14R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F14R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F14R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F14R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F14R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F14R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F14R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F15R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F15R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F15R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F15R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F15R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F15R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F15R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F15R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F15R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F15R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F15R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F15R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F15R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F15R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F15R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F15R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F15R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F15R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F15R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F15R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F15R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F15R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F15R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F15R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F15R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F15R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F15R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F15R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F15R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F15R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F15R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F15R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F15R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F15R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F15R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F15R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F15R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F15R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F15R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F15R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F15R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F15R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F15R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F15R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F15R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F15R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F15R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F15R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F15R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F15R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F15R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F15R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F15R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F15R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F15R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F15R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F15R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F15R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F15R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F15R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F15R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F15R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F15R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F15R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F16R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F16R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F16R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F16R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F16R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F16R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F16R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F16R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F16R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F16R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F16R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F16R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F16R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F16R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F16R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F16R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F16R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F16R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F16R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F16R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F16R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F16R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F16R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F16R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F16R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F16R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F16R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F16R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F16R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F16R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F16R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F16R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F16R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F16R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F16R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F16R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F16R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F16R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F16R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F16R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F16R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F16R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F16R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F16R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F16R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F16R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F16R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F16R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F16R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F16R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F16R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F16R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F16R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F16R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F16R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F16R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F16R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F16R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F16R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F16R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F16R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F16R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F16R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F16R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F17R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F17R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F17R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F17R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F17R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F17R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F17R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F17R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F17R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F17R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F17R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F17R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F17R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F17R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F17R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F17R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F17R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F17R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F17R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F17R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F17R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F17R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F17R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F17R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F17R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F17R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F17R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F17R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F17R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F17R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F17R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F17R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F17R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F17R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F17R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F17R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F17R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F17R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F17R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F17R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F17R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F17R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F17R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F17R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F17R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F17R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F17R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F17R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F17R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F17R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F17R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F17R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F17R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F17R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F17R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F17R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F17R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F17R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F17R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F17R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F17R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F17R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F17R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F17R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F18R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F18R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F18R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F18R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F18R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F18R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F18R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F18R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F18R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F18R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F18R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F18R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F18R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F18R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F18R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F18R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F18R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F18R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F18R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F18R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F18R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F18R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F18R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F18R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F18R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F18R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F18R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F18R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F18R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F18R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F18R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F18R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F18R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F18R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F18R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F18R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F18R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F18R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F18R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F18R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F18R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F18R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F18R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F18R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F18R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F18R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F18R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F18R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F18R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F18R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F18R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F18R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F18R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F18R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F18R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F18R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F18R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F18R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F18R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F18R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F18R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F18R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F18R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F18R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F19R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F19R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F19R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F19R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F19R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F19R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F19R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F19R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F19R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F19R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F19R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F19R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F19R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F19R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F19R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F19R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F19R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F19R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F19R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F19R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F19R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F19R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F19R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F19R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F19R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F19R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F19R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F19R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F19R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F19R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F19R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F19R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F19R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F19R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F19R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F19R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F19R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F19R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F19R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F19R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F19R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F19R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F19R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F19R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F19R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F19R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F19R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F19R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F19R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F19R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F19R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F19R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F19R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F19R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F19R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F19R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F19R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F19R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F19R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F19R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F19R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F19R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F19R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F19R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F20R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F20R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F20R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F20R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F20R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F20R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F20R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F20R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F20R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F20R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F20R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F20R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F20R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F20R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F20R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F20R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F20R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F20R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F20R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F20R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F20R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F20R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F20R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F20R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F20R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F20R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F20R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F20R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F20R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F20R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F20R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F20R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F20R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F20R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F20R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F20R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F20R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F20R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F20R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F20R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F20R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F20R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F20R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F20R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F20R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F20R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F20R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F20R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F20R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F20R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F20R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F20R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F20R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F20R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F20R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F20R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F20R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F20R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F20R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F20R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F20R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F20R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F20R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F20R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F21R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F21R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F21R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F21R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F21R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F21R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F21R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F21R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F21R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F21R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F21R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F21R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F21R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F21R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F21R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F21R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F21R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F21R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F21R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F21R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F21R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F21R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F21R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F21R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F21R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F21R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F21R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F21R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F21R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F21R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F21R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F21R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F21R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F21R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F21R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F21R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F21R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F21R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F21R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F21R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F21R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F21R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F21R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F21R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F21R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F21R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F21R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F21R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F21R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F21R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F21R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F21R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F21R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F21R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F21R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F21R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F21R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F21R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F21R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F21R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F21R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F21R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F21R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F21R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F22R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F22R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F22R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F22R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F22R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F22R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F22R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F22R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F22R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F22R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F22R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F22R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F22R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F22R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F22R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F22R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F22R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F22R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F22R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F22R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F22R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F22R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F22R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F22R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F22R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F22R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F22R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F22R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F22R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F22R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F22R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F22R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F22R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F22R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F22R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F22R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F22R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F22R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F22R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F22R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F22R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F22R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F22R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F22R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F22R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F22R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F22R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F22R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F22R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F22R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F22R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F22R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F22R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F22R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F22R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F22R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F22R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F22R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F22R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F22R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F22R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F22R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F22R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F22R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F23R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F23R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F23R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F23R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F23R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F23R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F23R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F23R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F23R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F23R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F23R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F23R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F23R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F23R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F23R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F23R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F23R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F23R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F23R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F23R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F23R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F23R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F23R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F23R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F23R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F23R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F23R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F23R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F23R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F23R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F23R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F23R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F23R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F23R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F23R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F23R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F23R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F23R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F23R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F23R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F23R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F23R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F23R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F23R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F23R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F23R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F23R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F23R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F23R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F23R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F23R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F23R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F23R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F23R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F23R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F23R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F23R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F23R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F23R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F23R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F23R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F23R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F23R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F23R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F24R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F24R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F24R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F24R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F24R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F24R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F24R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F24R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F24R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F24R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F24R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F24R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F24R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F24R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F24R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F24R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F24R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F24R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F24R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F24R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F24R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F24R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F24R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F24R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F24R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F24R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F24R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F24R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F24R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F24R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F24R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F24R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F24R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F24R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F24R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F24R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F24R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F24R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F24R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F24R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F24R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F24R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F24R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F24R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F24R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F24R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F24R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F24R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F24R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F24R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F24R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F24R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F24R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F24R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F24R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F24R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F24R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F24R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F24R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F24R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F24R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F24R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F24R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F24R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F25R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F25R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F25R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F25R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F25R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F25R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F25R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F25R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F25R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F25R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F25R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F25R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F25R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F25R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F25R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F25R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F25R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F25R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F25R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F25R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F25R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F25R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F25R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F25R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F25R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F25R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F25R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F25R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F25R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F25R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F25R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F25R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F25R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F25R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F25R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F25R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F25R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F25R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F25R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F25R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F25R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F25R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F25R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F25R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F25R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F25R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F25R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F25R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F25R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F25R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F25R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F25R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F25R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F25R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F25R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F25R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F25R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F25R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F25R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F25R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F25R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F25R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F25R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F25R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F26R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F26R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F26R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F26R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F26R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F26R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F26R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F26R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F26R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F26R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F26R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F26R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F26R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F26R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F26R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F26R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F26R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F26R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F26R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F26R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F26R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F26R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F26R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F26R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F26R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F26R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F26R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F26R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F26R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F26R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F26R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F26R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F26R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F26R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F26R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F26R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F26R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F26R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F26R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F26R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F26R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F26R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F26R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F26R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F26R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F26R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F26R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F26R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F26R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F26R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F26R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F26R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F26R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F26R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F26R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F26R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F26R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F26R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F26R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F26R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F26R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F26R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F26R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F26R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F27R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F27R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F27R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F27R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F27R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F27R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F27R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F27R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F27R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F27R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F27R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F27R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F27R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F27R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F27R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F27R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F27R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F27R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F27R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F27R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F27R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F27R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F27R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F27R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F27R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F27R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F27R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F27R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F27R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F27R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F27R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F27R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN1_F27R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN1_F27R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN1_F27R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN1_F27R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN1_F27R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN1_F27R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN1_F27R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN1_F27R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN1_F27R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN1_F27R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN1_F27R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN1_F27R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN1_F27R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN1_F27R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN1_F27R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN1_F27R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN1_F27R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN1_F27R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN1_F27R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN1_F27R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN1_F27R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN1_F27R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN1_F27R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN1_F27R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN1_F27R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN1_F27R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN1_F27R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN1_F27R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN1_F27R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN1_F27R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN1_F27R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN1_F27R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_MCR_DBF                                       (0x1 << 16)    // DBF
#define  _CAN2_MCR_RESET                                     (0x1 << 15)    // RESET
#define  _CAN2_MCR_TTCM                                      (0x1 << 7)    // TTCM
#define  _CAN2_MCR_ABOM                                      (0x1 << 6)    // ABOM
#define  _CAN2_MCR_AWUM                                      (0x1 << 5)    // AWUM
#define  _CAN2_MCR_NART                                      (0x1 << 4)    // NART
#define  _CAN2_MCR_RFLM                                      (0x1 << 3)    // RFLM
#define  _CAN2_MCR_TXFP                                      (0x1 << 2)    // TXFP
#define  _CAN2_MCR_SLEEP                                     (0x1 << 1)    // SLEEP
#define  _CAN2_MCR_INRQ                                      (0x1 << 0)    // INRQ
#define  _CAN2_MSR_RX                                        (0x1 << 11)    // RX
#define  _CAN2_MSR_SAMP                                      (0x1 << 10)    // SAMP
#define  _CAN2_MSR_RXM                                       (0x1 << 9)    // RXM
#define  _CAN2_MSR_TXM                                       (0x1 << 8)    // TXM
#define  _CAN2_MSR_SLAKI                                     (0x1 << 4)    // SLAKI
#define  _CAN2_MSR_WKUI                                      (0x1 << 3)    // WKUI
#define  _CAN2_MSR_ERRI                                      (0x1 << 2)    // ERRI
#define  _CAN2_MSR_SLAK                                      (0x1 << 1)    // SLAK
#define  _CAN2_MSR_INAK                                      (0x1 << 0)    // INAK
#define  _CAN2_TSR_LOW2                                      (0x1 << 31)    // Lowest priority flag for mailbox 2
#define  _CAN2_TSR_LOW1                                      (0x1 << 30)    // Lowest priority flag for mailbox 1
#define  _CAN2_TSR_LOW0                                      (0x1 << 29)    // Lowest priority flag for mailbox 0
#define  _CAN2_TSR_TME2                                      (0x1 << 28)    // Lowest priority flag for mailbox 2
#define  _CAN2_TSR_TME1                                      (0x1 << 27)    // Lowest priority flag for mailbox 1
#define  _CAN2_TSR_TME0                                      (0x1 << 26)    // Lowest priority flag for mailbox 0
#define  _CAN2_TSR_CODE                                      (0x3 << 24)    // CODE
#define  _CAN2_TSR_ABRQ2                                     (0x1 << 23)    // ABRQ2
#define  _CAN2_TSR_TERR2                                     (0x1 << 19)    // TERR2
#define  _CAN2_TSR_ALST2                                     (0x1 << 18)    // ALST2
#define  _CAN2_TSR_TXOK2                                     (0x1 << 17)    // TXOK2
#define  _CAN2_TSR_RQCP2                                     (0x1 << 16)    // RQCP2
#define  _CAN2_TSR_ABRQ1                                     (0x1 << 15)    // ABRQ1
#define  _CAN2_TSR_TERR1                                     (0x1 << 11)    // TERR1
#define  _CAN2_TSR_ALST1                                     (0x1 << 10)    // ALST1
#define  _CAN2_TSR_TXOK1                                     (0x1 << 9)    // TXOK1
#define  _CAN2_TSR_RQCP1                                     (0x1 << 8)    // RQCP1
#define  _CAN2_TSR_ABRQ0                                     (0x1 << 7)    // ABRQ0
#define  _CAN2_TSR_TERR0                                     (0x1 << 3)    // TERR0
#define  _CAN2_TSR_ALST0                                     (0x1 << 2)    // ALST0
#define  _CAN2_TSR_TXOK0                                     (0x1 << 1)    // TXOK0
#define  _CAN2_TSR_RQCP0                                     (0x1 << 0)    // RQCP0
#define  _CAN2_RF0R_RFOM0                                    (0x1 << 5)    // RFOM0
#define  _CAN2_RF0R_FOVR0                                    (0x1 << 4)    // FOVR0
#define  _CAN2_RF0R_FULL0                                    (0x1 << 3)    // FULL0
#define  _CAN2_RF0R_FMP0                                     (0x3 << 0)    // FMP0
#define  _CAN2_RF1R_RFOM1                                    (0x1 << 5)    // RFOM1
#define  _CAN2_RF1R_FOVR1                                    (0x1 << 4)    // FOVR1
#define  _CAN2_RF1R_FULL1                                    (0x1 << 3)    // FULL1
#define  _CAN2_RF1R_FMP1                                     (0x3 << 0)    // FMP1
#define  _CAN2_IER_SLKIE                                     (0x1 << 17)    // SLKIE
#define  _CAN2_IER_WKUIE                                     (0x1 << 16)    // WKUIE
#define  _CAN2_IER_ERRIE                                     (0x1 << 15)    // ERRIE
#define  _CAN2_IER_LECIE                                     (0x1 << 11)    // LECIE
#define  _CAN2_IER_BOFIE                                     (0x1 << 10)    // BOFIE
#define  _CAN2_IER_EPVIE                                     (0x1 << 9)    // EPVIE
#define  _CAN2_IER_EWGIE                                     (0x1 << 8)    // EWGIE
#define  _CAN2_IER_FOVIE1                                    (0x1 << 6)    // FOVIE1
#define  _CAN2_IER_FFIE1                                     (0x1 << 5)    // FFIE1
#define  _CAN2_IER_FMPIE1                                    (0x1 << 4)    // FMPIE1
#define  _CAN2_IER_FOVIE0                                    (0x1 << 3)    // FOVIE0
#define  _CAN2_IER_FFIE0                                     (0x1 << 2)    // FFIE0
#define  _CAN2_IER_FMPIE0                                    (0x1 << 1)    // FMPIE0
#define  _CAN2_IER_TMEIE                                     (0x1 << 0)    // TMEIE
#define  _CAN2_ESR_REC                                       (0xff << 24)    // REC
#define  _CAN2_ESR_TEC                                       (0xff << 16)    // TEC
#define  _CAN2_ESR_LEC                                       (0x7 << 4)    // LEC
#define  _CAN2_ESR_BOFF                                      (0x1 << 2)    // BOFF
#define  _CAN2_ESR_EPVF                                      (0x1 << 1)    // EPVF
#define  _CAN2_ESR_EWGF                                      (0x1 << 0)    // EWGF
#define  _CAN2_BTR_SILM                                      (0x1 << 31)    // SILM
#define  _CAN2_BTR_LBKM                                      (0x1 << 30)    // LBKM
#define  _CAN2_BTR_SJW                                       (0x3 << 24)    // SJW
#define  _CAN2_BTR_TS2                                       (0x7 << 20)    // TS2
#define  _CAN2_BTR_TS1                                       (0xf << 16)    // TS1
#define  _CAN2_BTR_BRP                                       (0x3ff << 0)    // BRP
#define  _CAN2_TI0R_STID                                     (0x7ff << 21)    // STID
#define  _CAN2_TI0R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN2_TI0R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN2_TI0R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN2_TI0R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN2_TDT0R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN2_TDT0R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN2_TDT0R_DLC                                     (0xf << 0)    // DLC
#define  _CAN2_TDL0R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN2_TDL0R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN2_TDL0R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN2_TDL0R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN2_TDH0R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN2_TDH0R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN2_TDH0R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN2_TDH0R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN2_TI1R_STID                                     (0x7ff << 21)    // STID
#define  _CAN2_TI1R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN2_TI1R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN2_TI1R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN2_TI1R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN2_TDT1R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN2_TDT1R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN2_TDT1R_DLC                                     (0xf << 0)    // DLC
#define  _CAN2_TDL1R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN2_TDL1R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN2_TDL1R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN2_TDL1R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN2_TDH1R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN2_TDH1R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN2_TDH1R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN2_TDH1R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN2_TI2R_STID                                     (0x7ff << 21)    // STID
#define  _CAN2_TI2R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN2_TI2R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN2_TI2R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN2_TI2R_TXRQ                                     (0x1 << 0)    // TXRQ
#define  _CAN2_TDT2R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN2_TDT2R_TGT                                     (0x1 << 8)    // TGT
#define  _CAN2_TDT2R_DLC                                     (0xf << 0)    // DLC
#define  _CAN2_TDL2R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN2_TDL2R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN2_TDL2R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN2_TDL2R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN2_TDH2R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN2_TDH2R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN2_TDH2R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN2_TDH2R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN2_RI0R_STID                                     (0x7ff << 21)    // STID
#define  _CAN2_RI0R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN2_RI0R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN2_RI0R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN2_RDT0R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN2_RDT0R_FMI                                     (0xff << 8)    // FMI
#define  _CAN2_RDT0R_DLC                                     (0xf << 0)    // DLC
#define  _CAN2_RDL0R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN2_RDL0R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN2_RDL0R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN2_RDL0R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN2_RDH0R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN2_RDH0R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN2_RDH0R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN2_RDH0R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN2_RI1R_STID                                     (0x7ff << 21)    // STID
#define  _CAN2_RI1R_EXID                                     (0x3ffff << 3)    // EXID
#define  _CAN2_RI1R_IDE                                      (0x1 << 2)    // IDE
#define  _CAN2_RI1R_RTR                                      (0x1 << 1)    // RTR
#define  _CAN2_RDT1R_TIME                                    (0xffff << 16)    // TIME
#define  _CAN2_RDT1R_FMI                                     (0xff << 8)    // FMI
#define  _CAN2_RDT1R_DLC                                     (0xf << 0)    // DLC
#define  _CAN2_RDL1R_DATA3                                   (0xff << 24)    // DATA3
#define  _CAN2_RDL1R_DATA2                                   (0xff << 16)    // DATA2
#define  _CAN2_RDL1R_DATA1                                   (0xff << 8)    // DATA1
#define  _CAN2_RDL1R_DATA0                                   (0xff << 0)    // DATA0
#define  _CAN2_RDH1R_DATA7                                   (0xff << 24)    // DATA7
#define  _CAN2_RDH1R_DATA6                                   (0xff << 16)    // DATA6
#define  _CAN2_RDH1R_DATA5                                   (0xff << 8)    // DATA5
#define  _CAN2_RDH1R_DATA4                                   (0xff << 0)    // DATA4
#define  _CAN2_FMR_CAN2SB                                    (0x3f << 8)    // CAN2SB
#define  _CAN2_FMR_FINIT                                     (0x1 << 0)    // FINIT
#define  _CAN2_FM1R_FBM0                                     (0x1 << 0)    // Filter mode
#define  _CAN2_FM1R_FBM1                                     (0x1 << 1)    // Filter mode
#define  _CAN2_FM1R_FBM2                                     (0x1 << 2)    // Filter mode
#define  _CAN2_FM1R_FBM3                                     (0x1 << 3)    // Filter mode
#define  _CAN2_FM1R_FBM4                                     (0x1 << 4)    // Filter mode
#define  _CAN2_FM1R_FBM5                                     (0x1 << 5)    // Filter mode
#define  _CAN2_FM1R_FBM6                                     (0x1 << 6)    // Filter mode
#define  _CAN2_FM1R_FBM7                                     (0x1 << 7)    // Filter mode
#define  _CAN2_FM1R_FBM8                                     (0x1 << 8)    // Filter mode
#define  _CAN2_FM1R_FBM9                                     (0x1 << 9)    // Filter mode
#define  _CAN2_FM1R_FBM10                                    (0x1 << 10)    // Filter mode
#define  _CAN2_FM1R_FBM11                                    (0x1 << 11)    // Filter mode
#define  _CAN2_FM1R_FBM12                                    (0x1 << 12)    // Filter mode
#define  _CAN2_FM1R_FBM13                                    (0x1 << 13)    // Filter mode
#define  _CAN2_FM1R_FBM14                                    (0x1 << 14)    // Filter mode
#define  _CAN2_FM1R_FBM15                                    (0x1 << 15)    // Filter mode
#define  _CAN2_FM1R_FBM16                                    (0x1 << 16)    // Filter mode
#define  _CAN2_FM1R_FBM17                                    (0x1 << 17)    // Filter mode
#define  _CAN2_FM1R_FBM18                                    (0x1 << 18)    // Filter mode
#define  _CAN2_FM1R_FBM19                                    (0x1 << 19)    // Filter mode
#define  _CAN2_FM1R_FBM20                                    (0x1 << 20)    // Filter mode
#define  _CAN2_FM1R_FBM21                                    (0x1 << 21)    // Filter mode
#define  _CAN2_FM1R_FBM22                                    (0x1 << 22)    // Filter mode
#define  _CAN2_FM1R_FBM23                                    (0x1 << 23)    // Filter mode
#define  _CAN2_FM1R_FBM24                                    (0x1 << 24)    // Filter mode
#define  _CAN2_FM1R_FBM25                                    (0x1 << 25)    // Filter mode
#define  _CAN2_FM1R_FBM26                                    (0x1 << 26)    // Filter mode
#define  _CAN2_FM1R_FBM27                                    (0x1 << 27)    // Filter mode
#define  _CAN2_FS1R_FSC0                                     (0x1 << 0)    // Filter scale configuration
#define  _CAN2_FS1R_FSC1                                     (0x1 << 1)    // Filter scale configuration
#define  _CAN2_FS1R_FSC2                                     (0x1 << 2)    // Filter scale configuration
#define  _CAN2_FS1R_FSC3                                     (0x1 << 3)    // Filter scale configuration
#define  _CAN2_FS1R_FSC4                                     (0x1 << 4)    // Filter scale configuration
#define  _CAN2_FS1R_FSC5                                     (0x1 << 5)    // Filter scale configuration
#define  _CAN2_FS1R_FSC6                                     (0x1 << 6)    // Filter scale configuration
#define  _CAN2_FS1R_FSC7                                     (0x1 << 7)    // Filter scale configuration
#define  _CAN2_FS1R_FSC8                                     (0x1 << 8)    // Filter scale configuration
#define  _CAN2_FS1R_FSC9                                     (0x1 << 9)    // Filter scale configuration
#define  _CAN2_FS1R_FSC10                                    (0x1 << 10)    // Filter scale configuration
#define  _CAN2_FS1R_FSC11                                    (0x1 << 11)    // Filter scale configuration
#define  _CAN2_FS1R_FSC12                                    (0x1 << 12)    // Filter scale configuration
#define  _CAN2_FS1R_FSC13                                    (0x1 << 13)    // Filter scale configuration
#define  _CAN2_FS1R_FSC14                                    (0x1 << 14)    // Filter scale configuration
#define  _CAN2_FS1R_FSC15                                    (0x1 << 15)    // Filter scale configuration
#define  _CAN2_FS1R_FSC16                                    (0x1 << 16)    // Filter scale configuration
#define  _CAN2_FS1R_FSC17                                    (0x1 << 17)    // Filter scale configuration
#define  _CAN2_FS1R_FSC18                                    (0x1 << 18)    // Filter scale configuration
#define  _CAN2_FS1R_FSC19                                    (0x1 << 19)    // Filter scale configuration
#define  _CAN2_FS1R_FSC20                                    (0x1 << 20)    // Filter scale configuration
#define  _CAN2_FS1R_FSC21                                    (0x1 << 21)    // Filter scale configuration
#define  _CAN2_FS1R_FSC22                                    (0x1 << 22)    // Filter scale configuration
#define  _CAN2_FS1R_FSC23                                    (0x1 << 23)    // Filter scale configuration
#define  _CAN2_FS1R_FSC24                                    (0x1 << 24)    // Filter scale configuration
#define  _CAN2_FS1R_FSC25                                    (0x1 << 25)    // Filter scale configuration
#define  _CAN2_FS1R_FSC26                                    (0x1 << 26)    // Filter scale configuration
#define  _CAN2_FS1R_FSC27                                    (0x1 << 27)    // Filter scale configuration
#define  _CAN2_FFA1R_FFA0                                    (0x1 << 0)    // Filter FIFO assignment for filter 0
#define  _CAN2_FFA1R_FFA1                                    (0x1 << 1)    // Filter FIFO assignment for filter 1
#define  _CAN2_FFA1R_FFA2                                    (0x1 << 2)    // Filter FIFO assignment for filter 2
#define  _CAN2_FFA1R_FFA3                                    (0x1 << 3)    // Filter FIFO assignment for filter 3
#define  _CAN2_FFA1R_FFA4                                    (0x1 << 4)    // Filter FIFO assignment for filter 4
#define  _CAN2_FFA1R_FFA5                                    (0x1 << 5)    // Filter FIFO assignment for filter 5
#define  _CAN2_FFA1R_FFA6                                    (0x1 << 6)    // Filter FIFO assignment for filter 6
#define  _CAN2_FFA1R_FFA7                                    (0x1 << 7)    // Filter FIFO assignment for filter 7
#define  _CAN2_FFA1R_FFA8                                    (0x1 << 8)    // Filter FIFO assignment for filter 8
#define  _CAN2_FFA1R_FFA9                                    (0x1 << 9)    // Filter FIFO assignment for filter 9
#define  _CAN2_FFA1R_FFA10                                   (0x1 << 10)    // Filter FIFO assignment for filter 10
#define  _CAN2_FFA1R_FFA11                                   (0x1 << 11)    // Filter FIFO assignment for filter 11
#define  _CAN2_FFA1R_FFA12                                   (0x1 << 12)    // Filter FIFO assignment for filter 12
#define  _CAN2_FFA1R_FFA13                                   (0x1 << 13)    // Filter FIFO assignment for filter 13
#define  _CAN2_FFA1R_FFA14                                   (0x1 << 14)    // Filter FIFO assignment for filter 14
#define  _CAN2_FFA1R_FFA15                                   (0x1 << 15)    // Filter FIFO assignment for filter 15
#define  _CAN2_FFA1R_FFA16                                   (0x1 << 16)    // Filter FIFO assignment for filter 16
#define  _CAN2_FFA1R_FFA17                                   (0x1 << 17)    // Filter FIFO assignment for filter 17
#define  _CAN2_FFA1R_FFA18                                   (0x1 << 18)    // Filter FIFO assignment for filter 18
#define  _CAN2_FFA1R_FFA19                                   (0x1 << 19)    // Filter FIFO assignment for filter 19
#define  _CAN2_FFA1R_FFA20                                   (0x1 << 20)    // Filter FIFO assignment for filter 20
#define  _CAN2_FFA1R_FFA21                                   (0x1 << 21)    // Filter FIFO assignment for filter 21
#define  _CAN2_FFA1R_FFA22                                   (0x1 << 22)    // Filter FIFO assignment for filter 22
#define  _CAN2_FFA1R_FFA23                                   (0x1 << 23)    // Filter FIFO assignment for filter 23
#define  _CAN2_FFA1R_FFA24                                   (0x1 << 24)    // Filter FIFO assignment for filter 24
#define  _CAN2_FFA1R_FFA25                                   (0x1 << 25)    // Filter FIFO assignment for filter 25
#define  _CAN2_FFA1R_FFA26                                   (0x1 << 26)    // Filter FIFO assignment for filter 26
#define  _CAN2_FFA1R_FFA27                                   (0x1 << 27)    // Filter FIFO assignment for filter 27
#define  _CAN2_FA1R_FACT0                                    (0x1 << 0)    // Filter active
#define  _CAN2_FA1R_FACT1                                    (0x1 << 1)    // Filter active
#define  _CAN2_FA1R_FACT2                                    (0x1 << 2)    // Filter active
#define  _CAN2_FA1R_FACT3                                    (0x1 << 3)    // Filter active
#define  _CAN2_FA1R_FACT4                                    (0x1 << 4)    // Filter active
#define  _CAN2_FA1R_FACT5                                    (0x1 << 5)    // Filter active
#define  _CAN2_FA1R_FACT6                                    (0x1 << 6)    // Filter active
#define  _CAN2_FA1R_FACT7                                    (0x1 << 7)    // Filter active
#define  _CAN2_FA1R_FACT8                                    (0x1 << 8)    // Filter active
#define  _CAN2_FA1R_FACT9                                    (0x1 << 9)    // Filter active
#define  _CAN2_FA1R_FACT10                                   (0x1 << 10)    // Filter active
#define  _CAN2_FA1R_FACT11                                   (0x1 << 11)    // Filter active
#define  _CAN2_FA1R_FACT12                                   (0x1 << 12)    // Filter active
#define  _CAN2_FA1R_FACT13                                   (0x1 << 13)    // Filter active
#define  _CAN2_FA1R_FACT14                                   (0x1 << 14)    // Filter active
#define  _CAN2_FA1R_FACT15                                   (0x1 << 15)    // Filter active
#define  _CAN2_FA1R_FACT16                                   (0x1 << 16)    // Filter active
#define  _CAN2_FA1R_FACT17                                   (0x1 << 17)    // Filter active
#define  _CAN2_FA1R_FACT18                                   (0x1 << 18)    // Filter active
#define  _CAN2_FA1R_FACT19                                   (0x1 << 19)    // Filter active
#define  _CAN2_FA1R_FACT20                                   (0x1 << 20)    // Filter active
#define  _CAN2_FA1R_FACT21                                   (0x1 << 21)    // Filter active
#define  _CAN2_FA1R_FACT22                                   (0x1 << 22)    // Filter active
#define  _CAN2_FA1R_FACT23                                   (0x1 << 23)    // Filter active
#define  _CAN2_FA1R_FACT24                                   (0x1 << 24)    // Filter active
#define  _CAN2_FA1R_FACT25                                   (0x1 << 25)    // Filter active
#define  _CAN2_FA1R_FACT26                                   (0x1 << 26)    // Filter active
#define  _CAN2_FA1R_FACT27                                   (0x1 << 27)    // Filter active
#define  _CAN2_F0R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F0R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F0R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F0R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F0R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F0R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F0R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F0R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F0R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F0R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F0R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F0R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F0R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F0R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F0R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F0R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F0R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F0R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F0R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F0R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F0R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F0R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F0R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F0R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F0R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F0R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F0R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F0R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F0R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F0R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F0R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F0R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F0R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F0R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F0R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F0R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F0R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F0R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F0R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F0R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F0R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F0R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F0R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F0R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F0R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F0R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F0R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F0R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F0R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F0R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F0R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F0R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F0R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F0R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F0R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F0R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F0R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F0R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F0R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F0R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F0R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F0R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F0R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F0R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F1R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F1R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F1R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F1R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F1R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F1R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F1R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F1R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F1R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F1R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F1R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F1R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F1R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F1R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F1R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F1R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F1R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F1R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F1R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F1R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F1R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F1R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F1R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F1R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F1R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F1R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F1R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F1R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F1R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F1R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F1R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F1R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F1R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F1R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F1R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F1R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F1R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F1R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F1R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F1R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F1R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F1R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F1R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F1R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F1R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F1R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F1R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F1R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F1R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F1R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F1R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F1R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F1R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F1R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F1R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F1R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F1R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F1R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F1R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F1R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F1R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F1R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F1R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F1R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F2R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F2R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F2R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F2R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F2R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F2R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F2R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F2R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F2R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F2R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F2R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F2R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F2R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F2R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F2R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F2R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F2R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F2R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F2R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F2R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F2R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F2R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F2R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F2R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F2R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F2R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F2R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F2R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F2R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F2R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F2R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F2R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F2R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F2R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F2R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F2R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F2R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F2R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F2R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F2R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F2R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F2R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F2R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F2R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F2R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F2R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F2R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F2R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F2R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F2R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F2R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F2R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F2R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F2R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F2R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F2R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F2R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F2R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F2R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F2R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F2R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F2R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F2R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F2R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F3R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F3R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F3R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F3R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F3R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F3R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F3R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F3R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F3R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F3R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F3R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F3R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F3R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F3R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F3R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F3R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F3R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F3R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F3R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F3R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F3R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F3R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F3R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F3R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F3R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F3R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F3R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F3R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F3R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F3R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F3R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F3R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F3R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F3R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F3R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F3R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F3R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F3R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F3R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F3R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F3R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F3R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F3R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F3R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F3R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F3R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F3R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F3R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F3R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F3R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F3R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F3R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F3R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F3R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F3R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F3R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F3R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F3R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F3R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F3R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F3R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F3R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F3R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F3R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F4R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F4R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F4R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F4R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F4R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F4R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F4R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F4R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F4R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F4R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F4R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F4R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F4R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F4R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F4R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F4R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F4R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F4R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F4R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F4R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F4R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F4R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F4R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F4R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F4R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F4R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F4R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F4R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F4R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F4R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F4R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F4R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F4R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F4R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F4R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F4R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F4R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F4R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F4R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F4R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F4R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F4R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F4R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F4R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F4R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F4R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F4R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F4R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F4R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F4R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F4R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F4R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F4R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F4R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F4R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F4R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F4R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F4R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F4R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F4R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F4R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F4R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F4R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F4R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F5R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F5R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F5R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F5R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F5R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F5R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F5R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F5R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F5R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F5R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F5R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F5R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F5R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F5R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F5R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F5R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F5R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F5R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F5R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F5R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F5R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F5R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F5R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F5R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F5R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F5R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F5R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F5R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F5R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F5R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F5R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F5R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F5R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F5R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F5R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F5R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F5R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F5R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F5R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F5R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F5R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F5R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F5R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F5R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F5R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F5R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F5R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F5R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F5R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F5R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F5R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F5R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F5R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F5R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F5R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F5R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F5R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F5R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F5R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F5R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F5R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F5R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F5R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F5R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F6R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F6R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F6R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F6R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F6R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F6R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F6R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F6R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F6R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F6R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F6R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F6R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F6R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F6R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F6R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F6R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F6R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F6R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F6R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F6R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F6R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F6R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F6R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F6R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F6R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F6R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F6R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F6R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F6R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F6R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F6R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F6R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F6R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F6R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F6R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F6R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F6R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F6R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F6R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F6R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F6R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F6R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F6R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F6R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F6R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F6R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F6R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F6R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F6R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F6R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F6R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F6R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F6R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F6R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F6R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F6R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F6R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F6R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F6R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F6R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F6R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F6R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F6R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F6R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F7R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F7R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F7R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F7R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F7R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F7R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F7R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F7R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F7R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F7R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F7R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F7R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F7R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F7R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F7R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F7R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F7R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F7R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F7R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F7R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F7R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F7R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F7R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F7R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F7R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F7R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F7R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F7R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F7R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F7R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F7R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F7R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F7R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F7R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F7R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F7R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F7R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F7R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F7R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F7R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F7R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F7R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F7R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F7R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F7R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F7R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F7R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F7R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F7R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F7R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F7R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F7R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F7R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F7R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F7R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F7R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F7R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F7R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F7R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F7R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F7R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F7R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F7R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F7R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F8R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F8R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F8R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F8R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F8R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F8R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F8R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F8R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F8R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F8R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F8R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F8R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F8R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F8R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F8R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F8R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F8R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F8R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F8R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F8R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F8R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F8R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F8R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F8R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F8R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F8R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F8R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F8R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F8R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F8R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F8R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F8R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F8R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F8R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F8R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F8R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F8R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F8R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F8R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F8R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F8R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F8R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F8R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F8R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F8R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F8R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F8R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F8R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F8R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F8R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F8R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F8R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F8R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F8R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F8R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F8R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F8R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F8R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F8R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F8R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F8R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F8R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F8R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F8R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F9R1_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F9R1_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F9R1_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F9R1_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F9R1_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F9R1_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F9R1_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F9R1_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F9R1_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F9R1_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F9R1_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F9R1_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F9R1_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F9R1_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F9R1_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F9R1_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F9R1_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F9R1_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F9R1_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F9R1_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F9R1_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F9R1_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F9R1_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F9R1_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F9R1_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F9R1_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F9R1_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F9R1_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F9R1_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F9R1_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F9R1_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F9R1_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F9R2_FB0                                      (0x1 << 0)    // Filter bits
#define  _CAN2_F9R2_FB1                                      (0x1 << 1)    // Filter bits
#define  _CAN2_F9R2_FB2                                      (0x1 << 2)    // Filter bits
#define  _CAN2_F9R2_FB3                                      (0x1 << 3)    // Filter bits
#define  _CAN2_F9R2_FB4                                      (0x1 << 4)    // Filter bits
#define  _CAN2_F9R2_FB5                                      (0x1 << 5)    // Filter bits
#define  _CAN2_F9R2_FB6                                      (0x1 << 6)    // Filter bits
#define  _CAN2_F9R2_FB7                                      (0x1 << 7)    // Filter bits
#define  _CAN2_F9R2_FB8                                      (0x1 << 8)    // Filter bits
#define  _CAN2_F9R2_FB9                                      (0x1 << 9)    // Filter bits
#define  _CAN2_F9R2_FB10                                     (0x1 << 10)    // Filter bits
#define  _CAN2_F9R2_FB11                                     (0x1 << 11)    // Filter bits
#define  _CAN2_F9R2_FB12                                     (0x1 << 12)    // Filter bits
#define  _CAN2_F9R2_FB13                                     (0x1 << 13)    // Filter bits
#define  _CAN2_F9R2_FB14                                     (0x1 << 14)    // Filter bits
#define  _CAN2_F9R2_FB15                                     (0x1 << 15)    // Filter bits
#define  _CAN2_F9R2_FB16                                     (0x1 << 16)    // Filter bits
#define  _CAN2_F9R2_FB17                                     (0x1 << 17)    // Filter bits
#define  _CAN2_F9R2_FB18                                     (0x1 << 18)    // Filter bits
#define  _CAN2_F9R2_FB19                                     (0x1 << 19)    // Filter bits
#define  _CAN2_F9R2_FB20                                     (0x1 << 20)    // Filter bits
#define  _CAN2_F9R2_FB21                                     (0x1 << 21)    // Filter bits
#define  _CAN2_F9R2_FB22                                     (0x1 << 22)    // Filter bits
#define  _CAN2_F9R2_FB23                                     (0x1 << 23)    // Filter bits
#define  _CAN2_F9R2_FB24                                     (0x1 << 24)    // Filter bits
#define  _CAN2_F9R2_FB25                                     (0x1 << 25)    // Filter bits
#define  _CAN2_F9R2_FB26                                     (0x1 << 26)    // Filter bits
#define  _CAN2_F9R2_FB27                                     (0x1 << 27)    // Filter bits
#define  _CAN2_F9R2_FB28                                     (0x1 << 28)    // Filter bits
#define  _CAN2_F9R2_FB29                                     (0x1 << 29)    // Filter bits
#define  _CAN2_F9R2_FB30                                     (0x1 << 30)    // Filter bits
#define  _CAN2_F9R2_FB31                                     (0x1 << 31)    // Filter bits
#define  _CAN2_F10R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F10R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F10R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F10R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F10R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F10R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F10R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F10R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F10R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F10R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F10R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F10R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F10R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F10R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F10R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F10R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F10R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F10R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F10R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F10R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F10R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F10R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F10R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F10R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F10R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F10R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F10R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F10R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F10R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F10R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F10R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F10R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F10R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F10R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F10R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F10R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F10R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F10R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F10R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F10R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F10R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F10R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F10R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F10R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F10R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F10R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F10R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F10R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F10R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F10R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F10R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F10R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F10R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F10R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F10R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F10R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F10R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F10R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F10R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F10R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F10R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F10R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F10R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F10R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F11R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F11R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F11R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F11R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F11R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F11R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F11R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F11R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F11R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F11R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F11R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F11R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F11R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F11R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F11R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F11R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F11R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F11R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F11R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F11R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F11R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F11R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F11R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F11R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F11R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F11R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F11R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F11R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F11R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F11R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F11R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F11R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F11R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F11R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F11R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F11R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F11R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F11R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F11R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F11R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F11R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F11R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F11R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F11R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F11R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F11R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F11R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F11R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F11R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F11R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F11R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F11R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F11R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F11R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F11R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F11R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F11R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F11R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F11R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F11R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F11R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F11R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F11R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F11R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F12R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F12R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F12R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F12R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F12R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F12R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F12R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F12R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F12R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F12R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F12R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F12R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F12R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F12R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F12R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F12R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F12R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F12R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F12R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F12R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F12R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F12R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F12R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F12R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F12R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F12R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F12R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F12R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F12R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F12R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F12R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F12R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F12R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F12R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F12R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F12R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F12R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F12R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F12R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F12R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F12R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F12R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F12R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F12R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F12R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F12R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F12R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F12R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F12R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F12R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F12R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F12R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F12R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F12R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F12R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F12R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F12R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F12R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F12R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F12R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F12R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F12R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F12R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F12R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F13R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F13R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F13R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F13R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F13R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F13R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F13R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F13R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F13R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F13R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F13R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F13R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F13R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F13R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F13R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F13R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F13R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F13R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F13R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F13R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F13R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F13R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F13R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F13R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F13R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F13R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F13R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F13R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F13R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F13R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F13R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F13R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F13R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F13R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F13R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F13R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F13R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F13R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F13R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F13R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F13R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F13R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F13R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F13R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F13R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F13R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F13R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F13R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F13R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F13R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F13R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F13R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F13R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F13R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F13R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F13R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F13R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F13R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F13R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F13R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F13R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F13R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F13R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F13R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F14R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F14R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F14R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F14R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F14R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F14R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F14R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F14R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F14R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F14R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F14R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F14R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F14R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F14R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F14R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F14R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F14R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F14R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F14R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F14R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F14R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F14R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F14R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F14R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F14R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F14R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F14R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F14R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F14R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F14R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F14R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F14R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F14R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F14R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F14R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F14R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F14R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F14R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F14R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F14R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F14R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F14R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F14R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F14R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F14R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F14R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F14R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F14R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F14R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F14R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F14R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F14R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F14R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F14R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F14R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F14R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F14R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F14R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F14R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F14R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F14R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F14R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F14R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F14R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F15R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F15R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F15R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F15R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F15R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F15R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F15R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F15R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F15R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F15R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F15R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F15R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F15R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F15R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F15R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F15R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F15R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F15R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F15R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F15R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F15R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F15R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F15R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F15R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F15R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F15R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F15R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F15R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F15R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F15R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F15R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F15R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F15R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F15R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F15R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F15R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F15R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F15R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F15R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F15R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F15R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F15R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F15R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F15R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F15R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F15R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F15R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F15R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F15R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F15R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F15R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F15R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F15R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F15R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F15R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F15R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F15R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F15R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F15R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F15R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F15R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F15R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F15R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F15R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F16R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F16R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F16R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F16R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F16R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F16R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F16R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F16R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F16R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F16R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F16R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F16R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F16R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F16R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F16R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F16R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F16R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F16R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F16R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F16R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F16R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F16R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F16R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F16R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F16R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F16R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F16R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F16R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F16R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F16R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F16R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F16R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F16R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F16R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F16R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F16R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F16R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F16R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F16R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F16R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F16R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F16R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F16R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F16R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F16R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F16R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F16R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F16R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F16R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F16R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F16R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F16R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F16R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F16R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F16R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F16R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F16R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F16R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F16R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F16R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F16R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F16R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F16R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F16R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F17R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F17R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F17R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F17R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F17R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F17R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F17R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F17R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F17R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F17R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F17R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F17R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F17R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F17R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F17R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F17R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F17R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F17R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F17R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F17R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F17R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F17R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F17R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F17R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F17R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F17R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F17R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F17R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F17R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F17R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F17R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F17R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F17R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F17R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F17R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F17R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F17R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F17R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F17R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F17R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F17R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F17R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F17R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F17R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F17R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F17R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F17R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F17R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F17R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F17R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F17R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F17R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F17R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F17R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F17R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F17R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F17R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F17R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F17R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F17R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F17R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F17R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F17R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F17R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F18R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F18R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F18R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F18R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F18R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F18R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F18R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F18R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F18R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F18R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F18R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F18R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F18R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F18R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F18R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F18R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F18R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F18R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F18R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F18R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F18R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F18R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F18R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F18R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F18R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F18R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F18R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F18R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F18R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F18R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F18R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F18R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F18R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F18R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F18R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F18R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F18R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F18R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F18R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F18R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F18R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F18R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F18R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F18R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F18R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F18R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F18R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F18R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F18R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F18R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F18R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F18R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F18R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F18R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F18R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F18R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F18R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F18R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F18R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F18R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F18R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F18R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F18R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F18R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F19R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F19R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F19R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F19R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F19R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F19R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F19R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F19R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F19R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F19R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F19R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F19R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F19R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F19R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F19R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F19R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F19R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F19R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F19R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F19R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F19R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F19R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F19R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F19R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F19R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F19R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F19R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F19R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F19R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F19R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F19R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F19R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F19R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F19R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F19R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F19R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F19R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F19R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F19R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F19R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F19R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F19R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F19R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F19R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F19R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F19R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F19R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F19R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F19R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F19R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F19R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F19R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F19R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F19R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F19R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F19R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F19R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F19R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F19R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F19R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F19R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F19R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F19R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F19R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F20R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F20R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F20R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F20R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F20R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F20R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F20R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F20R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F20R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F20R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F20R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F20R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F20R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F20R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F20R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F20R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F20R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F20R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F20R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F20R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F20R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F20R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F20R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F20R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F20R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F20R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F20R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F20R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F20R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F20R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F20R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F20R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F20R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F20R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F20R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F20R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F20R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F20R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F20R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F20R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F20R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F20R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F20R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F20R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F20R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F20R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F20R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F20R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F20R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F20R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F20R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F20R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F20R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F20R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F20R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F20R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F20R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F20R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F20R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F20R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F20R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F20R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F20R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F20R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F21R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F21R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F21R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F21R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F21R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F21R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F21R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F21R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F21R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F21R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F21R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F21R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F21R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F21R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F21R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F21R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F21R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F21R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F21R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F21R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F21R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F21R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F21R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F21R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F21R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F21R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F21R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F21R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F21R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F21R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F21R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F21R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F21R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F21R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F21R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F21R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F21R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F21R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F21R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F21R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F21R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F21R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F21R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F21R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F21R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F21R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F21R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F21R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F21R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F21R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F21R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F21R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F21R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F21R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F21R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F21R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F21R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F21R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F21R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F21R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F21R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F21R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F21R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F21R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F22R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F22R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F22R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F22R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F22R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F22R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F22R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F22R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F22R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F22R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F22R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F22R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F22R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F22R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F22R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F22R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F22R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F22R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F22R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F22R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F22R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F22R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F22R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F22R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F22R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F22R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F22R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F22R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F22R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F22R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F22R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F22R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F22R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F22R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F22R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F22R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F22R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F22R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F22R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F22R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F22R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F22R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F22R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F22R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F22R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F22R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F22R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F22R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F22R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F22R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F22R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F22R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F22R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F22R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F22R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F22R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F22R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F22R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F22R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F22R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F22R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F22R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F22R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F22R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F23R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F23R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F23R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F23R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F23R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F23R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F23R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F23R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F23R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F23R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F23R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F23R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F23R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F23R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F23R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F23R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F23R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F23R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F23R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F23R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F23R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F23R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F23R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F23R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F23R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F23R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F23R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F23R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F23R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F23R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F23R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F23R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F23R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F23R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F23R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F23R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F23R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F23R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F23R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F23R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F23R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F23R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F23R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F23R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F23R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F23R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F23R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F23R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F23R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F23R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F23R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F23R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F23R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F23R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F23R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F23R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F23R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F23R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F23R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F23R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F23R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F23R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F23R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F23R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F24R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F24R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F24R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F24R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F24R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F24R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F24R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F24R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F24R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F24R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F24R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F24R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F24R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F24R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F24R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F24R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F24R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F24R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F24R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F24R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F24R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F24R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F24R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F24R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F24R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F24R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F24R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F24R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F24R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F24R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F24R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F24R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F24R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F24R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F24R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F24R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F24R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F24R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F24R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F24R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F24R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F24R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F24R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F24R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F24R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F24R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F24R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F24R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F24R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F24R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F24R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F24R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F24R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F24R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F24R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F24R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F24R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F24R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F24R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F24R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F24R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F24R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F24R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F24R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F25R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F25R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F25R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F25R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F25R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F25R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F25R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F25R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F25R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F25R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F25R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F25R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F25R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F25R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F25R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F25R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F25R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F25R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F25R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F25R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F25R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F25R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F25R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F25R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F25R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F25R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F25R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F25R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F25R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F25R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F25R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F25R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F25R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F25R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F25R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F25R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F25R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F25R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F25R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F25R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F25R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F25R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F25R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F25R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F25R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F25R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F25R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F25R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F25R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F25R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F25R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F25R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F25R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F25R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F25R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F25R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F25R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F25R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F25R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F25R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F25R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F25R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F25R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F25R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F26R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F26R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F26R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F26R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F26R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F26R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F26R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F26R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F26R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F26R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F26R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F26R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F26R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F26R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F26R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F26R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F26R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F26R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F26R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F26R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F26R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F26R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F26R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F26R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F26R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F26R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F26R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F26R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F26R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F26R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F26R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F26R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F26R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F26R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F26R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F26R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F26R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F26R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F26R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F26R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F26R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F26R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F26R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F26R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F26R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F26R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F26R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F26R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F26R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F26R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F26R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F26R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F26R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F26R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F26R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F26R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F26R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F26R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F26R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F26R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F26R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F26R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F26R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F26R2_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F27R1_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F27R1_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F27R1_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F27R1_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F27R1_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F27R1_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F27R1_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F27R1_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F27R1_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F27R1_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F27R1_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F27R1_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F27R1_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F27R1_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F27R1_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F27R1_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F27R1_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F27R1_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F27R1_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F27R1_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F27R1_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F27R1_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F27R1_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F27R1_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F27R1_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F27R1_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F27R1_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F27R1_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F27R1_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F27R1_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F27R1_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F27R1_FB31                                    (0x1 << 31)    // Filter bits
#define  _CAN2_F27R2_FB0                                     (0x1 << 0)    // Filter bits
#define  _CAN2_F27R2_FB1                                     (0x1 << 1)    // Filter bits
#define  _CAN2_F27R2_FB2                                     (0x1 << 2)    // Filter bits
#define  _CAN2_F27R2_FB3                                     (0x1 << 3)    // Filter bits
#define  _CAN2_F27R2_FB4                                     (0x1 << 4)    // Filter bits
#define  _CAN2_F27R2_FB5                                     (0x1 << 5)    // Filter bits
#define  _CAN2_F27R2_FB6                                     (0x1 << 6)    // Filter bits
#define  _CAN2_F27R2_FB7                                     (0x1 << 7)    // Filter bits
#define  _CAN2_F27R2_FB8                                     (0x1 << 8)    // Filter bits
#define  _CAN2_F27R2_FB9                                     (0x1 << 9)    // Filter bits
#define  _CAN2_F27R2_FB10                                    (0x1 << 10)    // Filter bits
#define  _CAN2_F27R2_FB11                                    (0x1 << 11)    // Filter bits
#define  _CAN2_F27R2_FB12                                    (0x1 << 12)    // Filter bits
#define  _CAN2_F27R2_FB13                                    (0x1 << 13)    // Filter bits
#define  _CAN2_F27R2_FB14                                    (0x1 << 14)    // Filter bits
#define  _CAN2_F27R2_FB15                                    (0x1 << 15)    // Filter bits
#define  _CAN2_F27R2_FB16                                    (0x1 << 16)    // Filter bits
#define  _CAN2_F27R2_FB17                                    (0x1 << 17)    // Filter bits
#define  _CAN2_F27R2_FB18                                    (0x1 << 18)    // Filter bits
#define  _CAN2_F27R2_FB19                                    (0x1 << 19)    // Filter bits
#define  _CAN2_F27R2_FB20                                    (0x1 << 20)    // Filter bits
#define  _CAN2_F27R2_FB21                                    (0x1 << 21)    // Filter bits
#define  _CAN2_F27R2_FB22                                    (0x1 << 22)    // Filter bits
#define  _CAN2_F27R2_FB23                                    (0x1 << 23)    // Filter bits
#define  _CAN2_F27R2_FB24                                    (0x1 << 24)    // Filter bits
#define  _CAN2_F27R2_FB25                                    (0x1 << 25)    // Filter bits
#define  _CAN2_F27R2_FB26                                    (0x1 << 26)    // Filter bits
#define  _CAN2_F27R2_FB27                                    (0x1 << 27)    // Filter bits
#define  _CAN2_F27R2_FB28                                    (0x1 << 28)    // Filter bits
#define  _CAN2_F27R2_FB29                                    (0x1 << 29)    // Filter bits
#define  _CAN2_F27R2_FB30                                    (0x1 << 30)    // Filter bits
#define  _CAN2_F27R2_FB31                                    (0x1 << 31)    // Filter bits
　
　drivers/inc/stm32f767xx_PF.h
#define Get_PF_CLIDR(FLAG)                   (*(uint32_t*)0xe000ed78 |= FLAG)
#define Get_PF_CTR(FLAG)                     (*(uint32_t*)0xe000ed7c |= FLAG)
#define Get_PF_CCSIDR(FLAG)                  (*(uint32_t*)0xe000ed80 |= FLAG)
#define Set_PF_CLIDR(FLAG)                   (*(uint32_t*)0xe000ed78 &= FLAG)
#define Clr_PF_CLIDR(FLAG)                   (*(uint32_t*)0xe000ed78 |= ~FLAG)
#define Set_PF_CTR(FLAG)                     (*(uint32_t*)0xe000ed7c &= FLAG)
#define Clr_PF_CTR(FLAG)                     (*(uint32_t*)0xe000ed7c |= ~FLAG)
#define Set_PF_CCSIDR(FLAG)                  (*(uint32_t*)0xe000ed80 &= FLAG)
#define Clr_PF_CCSIDR(FLAG)                  (*(uint32_t*)0xe000ed80 |= ~FLAG)
#define  _PF_CLIDR_CL1                                       (0x7 << 0)    // CL1
#define  _PF_CLIDR_CL2                                       (0x7 << 3)    // CL2
#define  _PF_CLIDR_CL3                                       (0x7 << 6)    // CL3
#define  _PF_CLIDR_CL4                                       (0x7 << 9)    // CL4
#define  _PF_CLIDR_CL5                                       (0x7 << 12)    // CL5
#define  _PF_CLIDR_CL6                                       (0x7 << 15)    // CL6
#define  _PF_CLIDR_CL7                                       (0x7 << 18)    // CL7
#define  _PF_CLIDR_LoUIS                                     (0x7 << 21)    // LoUIS
#define  _PF_CLIDR_LoC                                       (0x7 << 24)    // LoC
#define  _PF_CLIDR_LoU                                       (0x7 << 27)    // LoU
#define  _PF_CTR__IminLine                                   (0xf << 0)    // IminLine
#define  _PF_CTR_DMinLine                                    (0xf << 16)    // DMinLine
#define  _PF_CTR_ERG                                         (0xf << 20)    // ERG
#define  _PF_CTR_CWG                                         (0xf << 24)    // CWG
#define  _PF_CTR_Format                                      (0x7 << 29)    // Format
#define  _PF_CCSIDR_LineSize                                 (0x7 << 0)    // LineSize
#define  _PF_CCSIDR_Associativity                            (0x3ff << 3)    // Associativity
#define  _PF_CCSIDR_NumSets                                  (0x7fff << 13)    // NumSets
#define  _PF_CCSIDR_WA                                       (0x1 << 28)    // WA
#define  _PF_CCSIDR_RA                                       (0x1 << 29)    // RA
#define  _PF_CCSIDR_WB                                       (0x1 << 30)    // WB
#define  _PF_CCSIDR_WT                                       (0x1 << 31)    // WT
　
　drivers/inc/stm32f767xx_LPTIM.h
#define Get_LPTIM1_ISR(FLAG)                 (*(uint32_t*)0x40002400 |= FLAG)
#define Get_LPTIM1_ICR(FLAG)                 (*(uint32_t*)0x40002404 |= FLAG)
#define Get_LPTIM1_IER(FLAG)                 (*(uint32_t*)0x40002408 |= FLAG)
#define Get_LPTIM1_CFGR(FLAG)                (*(uint32_t*)0x4000240c |= FLAG)
#define Get_LPTIM1_CR(FLAG)                  (*(uint32_t*)0x40002410 |= FLAG)
#define Get_LPTIM1_CMP(FLAG)                 (*(uint32_t*)0x40002414 |= FLAG)
#define Get_LPTIM1_ARR(FLAG)                 (*(uint32_t*)0x40002418 |= FLAG)
#define Get_LPTIM1_CNT(FLAG)                 (*(uint32_t*)0x4000241c |= FLAG)
#define Set_LPTIM1_ISR(FLAG)                 (*(uint32_t*)0x40002400 &= FLAG)
#define Clr_LPTIM1_ISR(FLAG)                 (*(uint32_t*)0x40002400 |= ~FLAG)
#define Set_LPTIM1_ICR(FLAG)                 (*(uint32_t*)0x40002404 &= FLAG)
#define Clr_LPTIM1_ICR(FLAG)                 (*(uint32_t*)0x40002404 |= ~FLAG)
#define Set_LPTIM1_IER(FLAG)                 (*(uint32_t*)0x40002408 &= FLAG)
#define Clr_LPTIM1_IER(FLAG)                 (*(uint32_t*)0x40002408 |= ~FLAG)
#define Set_LPTIM1_CFGR(FLAG)                (*(uint32_t*)0x4000240c &= FLAG)
#define Clr_LPTIM1_CFGR(FLAG)                (*(uint32_t*)0x4000240c |= ~FLAG)
#define Set_LPTIM1_CR(FLAG)                  (*(uint32_t*)0x40002410 &= FLAG)
#define Clr_LPTIM1_CR(FLAG)                  (*(uint32_t*)0x40002410 |= ~FLAG)
#define Set_LPTIM1_CMP(FLAG)                 (*(uint32_t*)0x40002414 &= FLAG)
#define Clr_LPTIM1_CMP(FLAG)                 (*(uint32_t*)0x40002414 |= ~FLAG)
#define Set_LPTIM1_ARR(FLAG)                 (*(uint32_t*)0x40002418 &= FLAG)
#define Clr_LPTIM1_ARR(FLAG)                 (*(uint32_t*)0x40002418 |= ~FLAG)
#define Set_LPTIM1_CNT(FLAG)                 (*(uint32_t*)0x4000241c &= FLAG)
#define Clr_LPTIM1_CNT(FLAG)                 (*(uint32_t*)0x4000241c |= ~FLAG)
#define  _LPTIM1_ISR_DOWN                                    (0x1 << 6)    // Counter direction change up to down
#define  _LPTIM1_ISR_UP                                      (0x1 << 5)    // Counter direction change down to up
#define  _LPTIM1_ISR_ARROK                                   (0x1 << 4)    // Autoreload register update OK
#define  _LPTIM1_ISR_CMPOK                                   (0x1 << 3)    // Compare register update OK
#define  _LPTIM1_ISR_EXTTRIG                                 (0x1 << 2)    // External trigger edge event
#define  _LPTIM1_ISR_ARRM                                    (0x1 << 1)    // Autoreload match
#define  _LPTIM1_ISR_CMPM                                    (0x1 << 0)    // Compare match
#define  _LPTIM1_ICR_DOWNCF                                  (0x1 << 6)    // Direction change to down Clear Flag
#define  _LPTIM1_ICR_UPCF                                    (0x1 << 5)    // Direction change to UP Clear Flag
#define  _LPTIM1_ICR_ARROKCF                                 (0x1 << 4)    // Autoreload register update OK Clear Flag
#define  _LPTIM1_ICR_CMPOKCF                                 (0x1 << 3)    // Compare register update OK Clear Flag
#define  _LPTIM1_ICR_EXTTRIGCF                               (0x1 << 2)    // External trigger valid edge Clear Flag
#define  _LPTIM1_ICR_ARRMCF                                  (0x1 << 1)    // Autoreload match Clear Flag
#define  _LPTIM1_ICR_CMPMCF                                  (0x1 << 0)    // compare match Clear Flag
#define  _LPTIM1_IER_DOWNIE                                  (0x1 << 6)    // Direction change to down Interrupt Enable
#define  _LPTIM1_IER_UPIE                                    (0x1 << 5)    // Direction change to UP Interrupt Enable
#define  _LPTIM1_IER_ARROKIE                                 (0x1 << 4)    // Autoreload register update OK Interrupt Enable
#define  _LPTIM1_IER_CMPOKIE                                 (0x1 << 3)    // Compare register update OK Interrupt Enable
#define  _LPTIM1_IER_EXTTRIGIE                               (0x1 << 2)    // External trigger valid edge Interrupt Enable
#define  _LPTIM1_IER_ARRMIE                                  (0x1 << 1)    // Autoreload match Interrupt Enable
#define  _LPTIM1_IER_CMPMIE                                  (0x1 << 0)    // Compare match Interrupt Enable
#define  _LPTIM1_CFGR_ENC                                    (0x1 << 24)    // Encoder mode enable
#define  _LPTIM1_CFGR_COUNTMODE                              (0x1 << 23)    // counter mode enabled
#define  _LPTIM1_CFGR_PRELOAD                                (0x1 << 22)    // Registers update mode
#define  _LPTIM1_CFGR_WAVPOL                                 (0x1 << 21)    // Waveform shape polarity
#define  _LPTIM1_CFGR_WAVE                                   (0x1 << 20)    // Waveform shape
#define  _LPTIM1_CFGR_TIMOUT                                 (0x1 << 19)    // Timeout enable
#define  _LPTIM1_CFGR_TRIGEN                                 (0x3 << 17)    // Trigger enable and polarity
#define  _LPTIM1_CFGR_TRIGSEL                                (0x7 << 13)    // Trigger selector
#define  _LPTIM1_CFGR_PRESC                                  (0x7 << 9)    // Clock prescaler
#define  _LPTIM1_CFGR_TRGFLT                                 (0x3 << 6)    // Configurable digital filter for trigger
#define  _LPTIM1_CFGR_CKFLT                                  (0x3 << 3)    // Configurable digital filter for external clock
#define  _LPTIM1_CFGR_CKPOL                                  (0x3 << 1)    // Clock Polarity
#define  _LPTIM1_CFGR_CKSEL                                  (0x1 << 0)    // Clock selector
#define  _LPTIM1_CR_CNTSTRT                                  (0x1 << 2)    // Timer start in continuous mode
#define  _LPTIM1_CR_SNGSTRT                                  (0x1 << 1)    // LPTIM start in single mode
#define  _LPTIM1_CR_ENABLE                                   (0x1 << 0)    // LPTIM Enable
#define  _LPTIM1_CMP_CMP                                     (0xffff << 0)    // Compare value
#define  _LPTIM1_ARR_ARR                                     (0xffff << 0)    // Auto reload value
#define  _LPTIM1_CNT_CNT                                     (0xffff << 0)    // Counter value
　
　drivers/inc/stm32f767xx_EXTI.h
#define Get_EXTI_IMR(FLAG)                   (*(uint32_t*)0x40013c00 |= FLAG)
#define Get_EXTI_EMR(FLAG)                   (*(uint32_t*)0x40013c04 |= FLAG)
#define Get_EXTI_RTSR(FLAG)                  (*(uint32_t*)0x40013c08 |= FLAG)
#define Get_EXTI_FTSR(FLAG)                  (*(uint32_t*)0x40013c0c |= FLAG)
#define Get_EXTI_SWIER(FLAG)                 (*(uint32_t*)0x40013c10 |= FLAG)
#define Get_EXTI_PR(FLAG)                    (*(uint32_t*)0x40013c14 |= FLAG)
#define Set_EXTI_IMR(FLAG)                   (*(uint32_t*)0x40013c00 &= FLAG)
#define Clr_EXTI_IMR(FLAG)                   (*(uint32_t*)0x40013c00 |= ~FLAG)
#define Set_EXTI_EMR(FLAG)                   (*(uint32_t*)0x40013c04 &= FLAG)
#define Clr_EXTI_EMR(FLAG)                   (*(uint32_t*)0x40013c04 |= ~FLAG)
#define Set_EXTI_RTSR(FLAG)                  (*(uint32_t*)0x40013c08 &= FLAG)
#define Clr_EXTI_RTSR(FLAG)                  (*(uint32_t*)0x40013c08 |= ~FLAG)
#define Set_EXTI_FTSR(FLAG)                  (*(uint32_t*)0x40013c0c &= FLAG)
#define Clr_EXTI_FTSR(FLAG)                  (*(uint32_t*)0x40013c0c |= ~FLAG)
#define Set_EXTI_SWIER(FLAG)                 (*(uint32_t*)0x40013c10 &= FLAG)
#define Clr_EXTI_SWIER(FLAG)                 (*(uint32_t*)0x40013c10 |= ~FLAG)
#define Set_EXTI_PR(FLAG)                    (*(uint32_t*)0x40013c14 &= FLAG)
#define Clr_EXTI_PR(FLAG)                    (*(uint32_t*)0x40013c14 |= ~FLAG)
#define  _EXTI_IMR_MR0                                       (0x1 << 0)    // Interrupt Mask on line 0
#define  _EXTI_IMR_MR1                                       (0x1 << 1)    // Interrupt Mask on line 1
#define  _EXTI_IMR_MR2                                       (0x1 << 2)    // Interrupt Mask on line 2
#define  _EXTI_IMR_MR3                                       (0x1 << 3)    // Interrupt Mask on line 3
#define  _EXTI_IMR_MR4                                       (0x1 << 4)    // Interrupt Mask on line 4
#define  _EXTI_IMR_MR5                                       (0x1 << 5)    // Interrupt Mask on line 5
#define  _EXTI_IMR_MR6                                       (0x1 << 6)    // Interrupt Mask on line 6
#define  _EXTI_IMR_MR7                                       (0x1 << 7)    // Interrupt Mask on line 7
#define  _EXTI_IMR_MR8                                       (0x1 << 8)    // Interrupt Mask on line 8
#define  _EXTI_IMR_MR9                                       (0x1 << 9)    // Interrupt Mask on line 9
#define  _EXTI_IMR_MR10                                      (0x1 << 10)    // Interrupt Mask on line 10
#define  _EXTI_IMR_MR11                                      (0x1 << 11)    // Interrupt Mask on line 11
#define  _EXTI_IMR_MR12                                      (0x1 << 12)    // Interrupt Mask on line 12
#define  _EXTI_IMR_MR13                                      (0x1 << 13)    // Interrupt Mask on line 13
#define  _EXTI_IMR_MR14                                      (0x1 << 14)    // Interrupt Mask on line 14
#define  _EXTI_IMR_MR15                                      (0x1 << 15)    // Interrupt Mask on line 15
#define  _EXTI_IMR_MR16                                      (0x1 << 16)    // Interrupt Mask on line 16
#define  _EXTI_IMR_MR17                                      (0x1 << 17)    // Interrupt Mask on line 17
#define  _EXTI_IMR_MR18                                      (0x1 << 18)    // Interrupt Mask on line 18
#define  _EXTI_IMR_MR19                                      (0x1 << 19)    // Interrupt Mask on line 19
#define  _EXTI_IMR_MR20                                      (0x1 << 20)    // Interrupt Mask on line 20
#define  _EXTI_IMR_MR21                                      (0x1 << 21)    // Interrupt Mask on line 21
#define  _EXTI_IMR_MR22                                      (0x1 << 22)    // Interrupt Mask on line 22
#define  _EXTI_EMR_MR0                                       (0x1 << 0)    // Event Mask on line 0
#define  _EXTI_EMR_MR1                                       (0x1 << 1)    // Event Mask on line 1
#define  _EXTI_EMR_MR2                                       (0x1 << 2)    // Event Mask on line 2
#define  _EXTI_EMR_MR3                                       (0x1 << 3)    // Event Mask on line 3
#define  _EXTI_EMR_MR4                                       (0x1 << 4)    // Event Mask on line 4
#define  _EXTI_EMR_MR5                                       (0x1 << 5)    // Event Mask on line 5
#define  _EXTI_EMR_MR6                                       (0x1 << 6)    // Event Mask on line 6
#define  _EXTI_EMR_MR7                                       (0x1 << 7)    // Event Mask on line 7
#define  _EXTI_EMR_MR8                                       (0x1 << 8)    // Event Mask on line 8
#define  _EXTI_EMR_MR9                                       (0x1 << 9)    // Event Mask on line 9
#define  _EXTI_EMR_MR10                                      (0x1 << 10)    // Event Mask on line 10
#define  _EXTI_EMR_MR11                                      (0x1 << 11)    // Event Mask on line 11
#define  _EXTI_EMR_MR12                                      (0x1 << 12)    // Event Mask on line 12
#define  _EXTI_EMR_MR13                                      (0x1 << 13)    // Event Mask on line 13
#define  _EXTI_EMR_MR14                                      (0x1 << 14)    // Event Mask on line 14
#define  _EXTI_EMR_MR15                                      (0x1 << 15)    // Event Mask on line 15
#define  _EXTI_EMR_MR16                                      (0x1 << 16)    // Event Mask on line 16
#define  _EXTI_EMR_MR17                                      (0x1 << 17)    // Event Mask on line 17
#define  _EXTI_EMR_MR18                                      (0x1 << 18)    // Event Mask on line 18
#define  _EXTI_EMR_MR19                                      (0x1 << 19)    // Event Mask on line 19
#define  _EXTI_EMR_MR20                                      (0x1 << 20)    // Event Mask on line 20
#define  _EXTI_EMR_MR21                                      (0x1 << 21)    // Event Mask on line 21
#define  _EXTI_EMR_MR22                                      (0x1 << 22)    // Event Mask on line 22
#define  _EXTI_RTSR_TR0                                      (0x1 << 0)    // Rising trigger event configuration of line 0
#define  _EXTI_RTSR_TR1                                      (0x1 << 1)    // Rising trigger event configuration of line 1
#define  _EXTI_RTSR_TR2                                      (0x1 << 2)    // Rising trigger event configuration of line 2
#define  _EXTI_RTSR_TR3                                      (0x1 << 3)    // Rising trigger event configuration of line 3
#define  _EXTI_RTSR_TR4                                      (0x1 << 4)    // Rising trigger event configuration of line 4
#define  _EXTI_RTSR_TR5                                      (0x1 << 5)    // Rising trigger event configuration of line 5
#define  _EXTI_RTSR_TR6                                      (0x1 << 6)    // Rising trigger event configuration of line 6
#define  _EXTI_RTSR_TR7                                      (0x1 << 7)    // Rising trigger event configuration of line 7
#define  _EXTI_RTSR_TR8                                      (0x1 << 8)    // Rising trigger event configuration of line 8
#define  _EXTI_RTSR_TR9                                      (0x1 << 9)    // Rising trigger event configuration of line 9
#define  _EXTI_RTSR_TR10                                     (0x1 << 10)    // Rising trigger event configuration of line 10
#define  _EXTI_RTSR_TR11                                     (0x1 << 11)    // Rising trigger event configuration of line 11
#define  _EXTI_RTSR_TR12                                     (0x1 << 12)    // Rising trigger event configuration of line 12
#define  _EXTI_RTSR_TR13                                     (0x1 << 13)    // Rising trigger event configuration of line 13
#define  _EXTI_RTSR_TR14                                     (0x1 << 14)    // Rising trigger event configuration of line 14
#define  _EXTI_RTSR_TR15                                     (0x1 << 15)    // Rising trigger event configuration of line 15
#define  _EXTI_RTSR_TR16                                     (0x1 << 16)    // Rising trigger event configuration of line 16
#define  _EXTI_RTSR_TR17                                     (0x1 << 17)    // Rising trigger event configuration of line 17
#define  _EXTI_RTSR_TR18                                     (0x1 << 18)    // Rising trigger event configuration of line 18
#define  _EXTI_RTSR_TR19                                     (0x1 << 19)    // Rising trigger event configuration of line 19
#define  _EXTI_RTSR_TR20                                     (0x1 << 20)    // Rising trigger event configuration of line 20
#define  _EXTI_RTSR_TR21                                     (0x1 << 21)    // Rising trigger event configuration of line 21
#define  _EXTI_RTSR_TR22                                     (0x1 << 22)    // Rising trigger event configuration of line 22
#define  _EXTI_FTSR_TR0                                      (0x1 << 0)    // Falling trigger event configuration of line 0
#define  _EXTI_FTSR_TR1                                      (0x1 << 1)    // Falling trigger event configuration of line 1
#define  _EXTI_FTSR_TR2                                      (0x1 << 2)    // Falling trigger event configuration of line 2
#define  _EXTI_FTSR_TR3                                      (0x1 << 3)    // Falling trigger event configuration of line 3
#define  _EXTI_FTSR_TR4                                      (0x1 << 4)    // Falling trigger event configuration of line 4
#define  _EXTI_FTSR_TR5                                      (0x1 << 5)    // Falling trigger event configuration of line 5
#define  _EXTI_FTSR_TR6                                      (0x1 << 6)    // Falling trigger event configuration of line 6
#define  _EXTI_FTSR_TR7                                      (0x1 << 7)    // Falling trigger event configuration of line 7
#define  _EXTI_FTSR_TR8                                      (0x1 << 8)    // Falling trigger event configuration of line 8
#define  _EXTI_FTSR_TR9                                      (0x1 << 9)    // Falling trigger event configuration of line 9
#define  _EXTI_FTSR_TR10                                     (0x1 << 10)    // Falling trigger event configuration of line 10
#define  _EXTI_FTSR_TR11                                     (0x1 << 11)    // Falling trigger event configuration of line 11
#define  _EXTI_FTSR_TR12                                     (0x1 << 12)    // Falling trigger event configuration of line 12
#define  _EXTI_FTSR_TR13                                     (0x1 << 13)    // Falling trigger event configuration of line 13
#define  _EXTI_FTSR_TR14                                     (0x1 << 14)    // Falling trigger event configuration of line 14
#define  _EXTI_FTSR_TR15                                     (0x1 << 15)    // Falling trigger event configuration of line 15
#define  _EXTI_FTSR_TR16                                     (0x1 << 16)    // Falling trigger event configuration of line 16
#define  _EXTI_FTSR_TR17                                     (0x1 << 17)    // Falling trigger event configuration of line 17
#define  _EXTI_FTSR_TR18                                     (0x1 << 18)    // Falling trigger event configuration of line 18
#define  _EXTI_FTSR_TR19                                     (0x1 << 19)    // Falling trigger event configuration of line 19
#define  _EXTI_FTSR_TR20                                     (0x1 << 20)    // Falling trigger event configuration of line 20
#define  _EXTI_FTSR_TR21                                     (0x1 << 21)    // Falling trigger event configuration of line 21
#define  _EXTI_FTSR_TR22                                     (0x1 << 22)    // Falling trigger event configuration of line 22
#define  _EXTI_SWIER_SWIER0                                  (0x1 << 0)    // Software Interrupt on line 0
#define  _EXTI_SWIER_SWIER1                                  (0x1 << 1)    // Software Interrupt on line 1
#define  _EXTI_SWIER_SWIER2                                  (0x1 << 2)    // Software Interrupt on line 2
#define  _EXTI_SWIER_SWIER3                                  (0x1 << 3)    // Software Interrupt on line 3
#define  _EXTI_SWIER_SWIER4                                  (0x1 << 4)    // Software Interrupt on line 4
#define  _EXTI_SWIER_SWIER5                                  (0x1 << 5)    // Software Interrupt on line 5
#define  _EXTI_SWIER_SWIER6                                  (0x1 << 6)    // Software Interrupt on line 6
#define  _EXTI_SWIER_SWIER7                                  (0x1 << 7)    // Software Interrupt on line 7
#define  _EXTI_SWIER_SWIER8                                  (0x1 << 8)    // Software Interrupt on line 8
#define  _EXTI_SWIER_SWIER9                                  (0x1 << 9)    // Software Interrupt on line 9
#define  _EXTI_SWIER_SWIER10                                 (0x1 << 10)    // Software Interrupt on line 10
#define  _EXTI_SWIER_SWIER11                                 (0x1 << 11)    // Software Interrupt on line 11
#define  _EXTI_SWIER_SWIER12                                 (0x1 << 12)    // Software Interrupt on line 12
#define  _EXTI_SWIER_SWIER13                                 (0x1 << 13)    // Software Interrupt on line 13
#define  _EXTI_SWIER_SWIER14                                 (0x1 << 14)    // Software Interrupt on line 14
#define  _EXTI_SWIER_SWIER15                                 (0x1 << 15)    // Software Interrupt on line 15
#define  _EXTI_SWIER_SWIER16                                 (0x1 << 16)    // Software Interrupt on line 16
#define  _EXTI_SWIER_SWIER17                                 (0x1 << 17)    // Software Interrupt on line 17
#define  _EXTI_SWIER_SWIER18                                 (0x1 << 18)    // Software Interrupt on line 18
#define  _EXTI_SWIER_SWIER19                                 (0x1 << 19)    // Software Interrupt on line 19
#define  _EXTI_SWIER_SWIER20                                 (0x1 << 20)    // Software Interrupt on line 20
#define  _EXTI_SWIER_SWIER21                                 (0x1 << 21)    // Software Interrupt on line 21
#define  _EXTI_SWIER_SWIER22                                 (0x1 << 22)    // Software Interrupt on line 22
#define  _EXTI_PR_PR0                                        (0x1 << 0)    // Pending bit 0
#define  _EXTI_PR_PR1                                        (0x1 << 1)    // Pending bit 1
#define  _EXTI_PR_PR2                                        (0x1 << 2)    // Pending bit 2
#define  _EXTI_PR_PR3                                        (0x1 << 3)    // Pending bit 3
#define  _EXTI_PR_PR4                                        (0x1 << 4)    // Pending bit 4
#define  _EXTI_PR_PR5                                        (0x1 << 5)    // Pending bit 5
#define  _EXTI_PR_PR6                                        (0x1 << 6)    // Pending bit 6
#define  _EXTI_PR_PR7                                        (0x1 << 7)    // Pending bit 7
#define  _EXTI_PR_PR8                                        (0x1 << 8)    // Pending bit 8
#define  _EXTI_PR_PR9                                        (0x1 << 9)    // Pending bit 9
#define  _EXTI_PR_PR10                                       (0x1 << 10)    // Pending bit 10
#define  _EXTI_PR_PR11                                       (0x1 << 11)    // Pending bit 11
#define  _EXTI_PR_PR12                                       (0x1 << 12)    // Pending bit 12
#define  _EXTI_PR_PR13                                       (0x1 << 13)    // Pending bit 13
#define  _EXTI_PR_PR14                                       (0x1 << 14)    // Pending bit 14
#define  _EXTI_PR_PR15                                       (0x1 << 15)    // Pending bit 15
#define  _EXTI_PR_PR16                                       (0x1 << 16)    // Pending bit 16
#define  _EXTI_PR_PR17                                       (0x1 << 17)    // Pending bit 17
#define  _EXTI_PR_PR18                                       (0x1 << 18)    // Pending bit 18
#define  _EXTI_PR_PR19                                       (0x1 << 19)    // Pending bit 19
#define  _EXTI_PR_PR20                                       (0x1 << 20)    // Pending bit 20
#define  _EXTI_PR_PR21                                       (0x1 << 21)    // Pending bit 21
#define  _EXTI_PR_PR22                                       (0x1 << 22)    // Pending bit 22
　
　drivers/inc/stm32f767xx_FSMC.h
#define Get_FMC_BCR1(FLAG)                   (*(uint32_t*)0xa0000000 |= FLAG)
#define Get_FMC_BTR1(FLAG)                   (*(uint32_t*)0xa0000004 |= FLAG)
#define Get_FMC_BCR2(FLAG)                   (*(uint32_t*)0xa0000008 |= FLAG)
#define Get_FMC_BTR2(FLAG)                   (*(uint32_t*)0xa000000c |= FLAG)
#define Get_FMC_BCR3(FLAG)                   (*(uint32_t*)0xa0000010 |= FLAG)
#define Get_FMC_BTR3(FLAG)                   (*(uint32_t*)0xa0000014 |= FLAG)
#define Get_FMC_BCR4(FLAG)                   (*(uint32_t*)0xa0000018 |= FLAG)
#define Get_FMC_BTR4(FLAG)                   (*(uint32_t*)0xa000001c |= FLAG)
#define Get_FMC_PCR(FLAG)                    (*(uint32_t*)0xa0000080 |= FLAG)
#define Get_FMC_SR(FLAG)                     (*(uint32_t*)0xa0000084 |= FLAG)
#define Get_FMC_PMEM(FLAG)                   (*(uint32_t*)0xa0000088 |= FLAG)
#define Get_FMC_PATT(FLAG)                   (*(uint32_t*)0xa000008c |= FLAG)
#define Get_FMC_ECCR(FLAG)                   (*(uint32_t*)0xa0000094 |= FLAG)
#define Get_FMC_BWTR1(FLAG)                  (*(uint32_t*)0xa0000104 |= FLAG)
#define Get_FMC_BWTR2(FLAG)                  (*(uint32_t*)0xa000010c |= FLAG)
#define Get_FMC_BWTR3(FLAG)                  (*(uint32_t*)0xa0000114 |= FLAG)
#define Get_FMC_BWTR4(FLAG)                  (*(uint32_t*)0xa000011c |= FLAG)
#define Get_FMC_SDCR1(FLAG)                  (*(uint32_t*)0xa0000140 |= FLAG)
#define Get_FMC_SDCR2(FLAG)                  (*(uint32_t*)0xa0000144 |= FLAG)
#define Get_FMC_SDTR1(FLAG)                  (*(uint32_t*)0xa0000148 |= FLAG)
#define Get_FMC_SDTR2(FLAG)                  (*(uint32_t*)0xa000014c |= FLAG)
#define Get_FMC_SDCMR(FLAG)                  (*(uint32_t*)0xa0000150 |= FLAG)
#define Get_FMC_SDRTR(FLAG)                  (*(uint32_t*)0xa0000154 |= FLAG)
#define Get_FMC_SDSR(FLAG)                   (*(uint32_t*)0xa0000158 |= FLAG)
#define Set_FMC_BCR1(FLAG)                   (*(uint32_t*)0xa0000000 &= FLAG)
#define Clr_FMC_BCR1(FLAG)                   (*(uint32_t*)0xa0000000 |= ~FLAG)
#define Set_FMC_BTR1(FLAG)                   (*(uint32_t*)0xa0000004 &= FLAG)
#define Clr_FMC_BTR1(FLAG)                   (*(uint32_t*)0xa0000004 |= ~FLAG)
#define Set_FMC_BCR2(FLAG)                   (*(uint32_t*)0xa0000008 &= FLAG)
#define Clr_FMC_BCR2(FLAG)                   (*(uint32_t*)0xa0000008 |= ~FLAG)
#define Set_FMC_BTR2(FLAG)                   (*(uint32_t*)0xa000000c &= FLAG)
#define Clr_FMC_BTR2(FLAG)                   (*(uint32_t*)0xa000000c |= ~FLAG)
#define Set_FMC_BCR3(FLAG)                   (*(uint32_t*)0xa0000010 &= FLAG)
#define Clr_FMC_BCR3(FLAG)                   (*(uint32_t*)0xa0000010 |= ~FLAG)
#define Set_FMC_BTR3(FLAG)                   (*(uint32_t*)0xa0000014 &= FLAG)
#define Clr_FMC_BTR3(FLAG)                   (*(uint32_t*)0xa0000014 |= ~FLAG)
#define Set_FMC_BCR4(FLAG)                   (*(uint32_t*)0xa0000018 &= FLAG)
#define Clr_FMC_BCR4(FLAG)                   (*(uint32_t*)0xa0000018 |= ~FLAG)
#define Set_FMC_BTR4(FLAG)                   (*(uint32_t*)0xa000001c &= FLAG)
#define Clr_FMC_BTR4(FLAG)                   (*(uint32_t*)0xa000001c |= ~FLAG)
#define Set_FMC_PCR(FLAG)                    (*(uint32_t*)0xa0000080 &= FLAG)
#define Clr_FMC_PCR(FLAG)                    (*(uint32_t*)0xa0000080 |= ~FLAG)
#define Set_FMC_SR(FLAG)                     (*(uint32_t*)0xa0000084 &= FLAG)
#define Clr_FMC_SR(FLAG)                     (*(uint32_t*)0xa0000084 |= ~FLAG)
#define Set_FMC_PMEM(FLAG)                   (*(uint32_t*)0xa0000088 &= FLAG)
#define Clr_FMC_PMEM(FLAG)                   (*(uint32_t*)0xa0000088 |= ~FLAG)
#define Set_FMC_PATT(FLAG)                   (*(uint32_t*)0xa000008c &= FLAG)
#define Clr_FMC_PATT(FLAG)                   (*(uint32_t*)0xa000008c |= ~FLAG)
#define Set_FMC_ECCR(FLAG)                   (*(uint32_t*)0xa0000094 &= FLAG)
#define Clr_FMC_ECCR(FLAG)                   (*(uint32_t*)0xa0000094 |= ~FLAG)
#define Set_FMC_BWTR1(FLAG)                  (*(uint32_t*)0xa0000104 &= FLAG)
#define Clr_FMC_BWTR1(FLAG)                  (*(uint32_t*)0xa0000104 |= ~FLAG)
#define Set_FMC_BWTR2(FLAG)                  (*(uint32_t*)0xa000010c &= FLAG)
#define Clr_FMC_BWTR2(FLAG)                  (*(uint32_t*)0xa000010c |= ~FLAG)
#define Set_FMC_BWTR3(FLAG)                  (*(uint32_t*)0xa0000114 &= FLAG)
#define Clr_FMC_BWTR3(FLAG)                  (*(uint32_t*)0xa0000114 |= ~FLAG)
#define Set_FMC_BWTR4(FLAG)                  (*(uint32_t*)0xa000011c &= FLAG)
#define Clr_FMC_BWTR4(FLAG)                  (*(uint32_t*)0xa000011c |= ~FLAG)
#define Set_FMC_SDCR1(FLAG)                  (*(uint32_t*)0xa0000140 &= FLAG)
#define Clr_FMC_SDCR1(FLAG)                  (*(uint32_t*)0xa0000140 |= ~FLAG)
#define Set_FMC_SDCR2(FLAG)                  (*(uint32_t*)0xa0000144 &= FLAG)
#define Clr_FMC_SDCR2(FLAG)                  (*(uint32_t*)0xa0000144 |= ~FLAG)
#define Set_FMC_SDTR1(FLAG)                  (*(uint32_t*)0xa0000148 &= FLAG)
#define Clr_FMC_SDTR1(FLAG)                  (*(uint32_t*)0xa0000148 |= ~FLAG)
#define Set_FMC_SDTR2(FLAG)                  (*(uint32_t*)0xa000014c &= FLAG)
#define Clr_FMC_SDTR2(FLAG)                  (*(uint32_t*)0xa000014c |= ~FLAG)
#define Set_FMC_SDCMR(FLAG)                  (*(uint32_t*)0xa0000150 &= FLAG)
#define Clr_FMC_SDCMR(FLAG)                  (*(uint32_t*)0xa0000150 |= ~FLAG)
#define Set_FMC_SDRTR(FLAG)                  (*(uint32_t*)0xa0000154 &= FLAG)
#define Clr_FMC_SDRTR(FLAG)                  (*(uint32_t*)0xa0000154 |= ~FLAG)
#define Set_FMC_SDSR(FLAG)                   (*(uint32_t*)0xa0000158 &= FLAG)
#define Clr_FMC_SDSR(FLAG)                   (*(uint32_t*)0xa0000158 |= ~FLAG)
#define  _FMC_BCR1_CCLKEN                                    (0x1 << 20)    // CCLKEN
#define  _FMC_BCR1_CBURSTRW                                  (0x1 << 19)    // CBURSTRW
#define  _FMC_BCR1_ASYNCWAIT                                 (0x1 << 15)    // ASYNCWAIT
#define  _FMC_BCR1_EXTMOD                                    (0x1 << 14)    // EXTMOD
#define  _FMC_BCR1_WAITEN                                    (0x1 << 13)    // WAITEN
#define  _FMC_BCR1_WREN                                      (0x1 << 12)    // WREN
#define  _FMC_BCR1_WAITCFG                                   (0x1 << 11)    // WAITCFG
#define  _FMC_BCR1_WAITPOL                                   (0x1 << 9)    // WAITPOL
#define  _FMC_BCR1_BURSTEN                                   (0x1 << 8)    // BURSTEN
#define  _FMC_BCR1_FACCEN                                    (0x1 << 6)    // FACCEN
#define  _FMC_BCR1_MWID                                      (0x3 << 4)    // MWID
#define  _FMC_BCR1_MTYP                                      (0x3 << 2)    // MTYP
#define  _FMC_BCR1_MUXEN                                     (0x1 << 1)    // MUXEN
#define  _FMC_BCR1_MBKEN                                     (0x1 << 0)    // MBKEN
#define  _FMC_BTR1_ACCMOD                                    (0x3 << 28)    // ACCMOD
#define  _FMC_BTR1_DATLAT                                    (0xf << 24)    // DATLAT
#define  _FMC_BTR1_CLKDIV                                    (0xf << 20)    // CLKDIV
#define  _FMC_BTR1_BUSTURN                                   (0xf << 16)    // BUSTURN
#define  _FMC_BTR1_DATAST                                    (0xff << 8)    // DATAST
#define  _FMC_BTR1_ADDHLD                                    (0xf << 4)    // ADDHLD
#define  _FMC_BTR1_ADDSET                                    (0xf << 0)    // ADDSET
#define  _FMC_BCR2_CBURSTRW                                  (0x1 << 19)    // CBURSTRW
#define  _FMC_BCR2_ASYNCWAIT                                 (0x1 << 15)    // ASYNCWAIT
#define  _FMC_BCR2_EXTMOD                                    (0x1 << 14)    // EXTMOD
#define  _FMC_BCR2_WAITEN                                    (0x1 << 13)    // WAITEN
#define  _FMC_BCR2_WREN                                      (0x1 << 12)    // WREN
#define  _FMC_BCR2_WAITCFG                                   (0x1 << 11)    // WAITCFG
#define  _FMC_BCR2_WRAPMOD                                   (0x1 << 10)    // WRAPMOD
#define  _FMC_BCR2_WAITPOL                                   (0x1 << 9)    // WAITPOL
#define  _FMC_BCR2_BURSTEN                                   (0x1 << 8)    // BURSTEN
#define  _FMC_BCR2_FACCEN                                    (0x1 << 6)    // FACCEN
#define  _FMC_BCR2_MWID                                      (0x3 << 4)    // MWID
#define  _FMC_BCR2_MTYP                                      (0x3 << 2)    // MTYP
#define  _FMC_BCR2_MUXEN                                     (0x1 << 1)    // MUXEN
#define  _FMC_BCR2_MBKEN                                     (0x1 << 0)    // MBKEN
#define  _FMC_BTR2_ACCMOD                                    (0x3 << 28)    // ACCMOD
#define  _FMC_BTR2_DATLAT                                    (0xf << 24)    // DATLAT
#define  _FMC_BTR2_CLKDIV                                    (0xf << 20)    // CLKDIV
#define  _FMC_BTR2_BUSTURN                                   (0xf << 16)    // BUSTURN
#define  _FMC_BTR2_DATAST                                    (0xff << 8)    // DATAST
#define  _FMC_BTR2_ADDHLD                                    (0xf << 4)    // ADDHLD
#define  _FMC_BTR2_ADDSET                                    (0xf << 0)    // ADDSET
#define  _FMC_BCR3_CBURSTRW                                  (0x1 << 19)    // CBURSTRW
#define  _FMC_BCR3_ASYNCWAIT                                 (0x1 << 15)    // ASYNCWAIT
#define  _FMC_BCR3_EXTMOD                                    (0x1 << 14)    // EXTMOD
#define  _FMC_BCR3_WAITEN                                    (0x1 << 13)    // WAITEN
#define  _FMC_BCR3_WREN                                      (0x1 << 12)    // WREN
#define  _FMC_BCR3_WAITCFG                                   (0x1 << 11)    // WAITCFG
#define  _FMC_BCR3_WRAPMOD                                   (0x1 << 10)    // WRAPMOD
#define  _FMC_BCR3_WAITPOL                                   (0x1 << 9)    // WAITPOL
#define  _FMC_BCR3_BURSTEN                                   (0x1 << 8)    // BURSTEN
#define  _FMC_BCR3_FACCEN                                    (0x1 << 6)    // FACCEN
#define  _FMC_BCR3_MWID                                      (0x3 << 4)    // MWID
#define  _FMC_BCR3_MTYP                                      (0x3 << 2)    // MTYP
#define  _FMC_BCR3_MUXEN                                     (0x1 << 1)    // MUXEN
#define  _FMC_BCR3_MBKEN                                     (0x1 << 0)    // MBKEN
#define  _FMC_BTR3_ACCMOD                                    (0x3 << 28)    // ACCMOD
#define  _FMC_BTR3_DATLAT                                    (0xf << 24)    // DATLAT
#define  _FMC_BTR3_CLKDIV                                    (0xf << 20)    // CLKDIV
#define  _FMC_BTR3_BUSTURN                                   (0xf << 16)    // BUSTURN
#define  _FMC_BTR3_DATAST                                    (0xff << 8)    // DATAST
#define  _FMC_BTR3_ADDHLD                                    (0xf << 4)    // ADDHLD
#define  _FMC_BTR3_ADDSET                                    (0xf << 0)    // ADDSET
#define  _FMC_BCR4_CBURSTRW                                  (0x1 << 19)    // CBURSTRW
#define  _FMC_BCR4_ASYNCWAIT                                 (0x1 << 15)    // ASYNCWAIT
#define  _FMC_BCR4_EXTMOD                                    (0x1 << 14)    // EXTMOD
#define  _FMC_BCR4_WAITEN                                    (0x1 << 13)    // WAITEN
#define  _FMC_BCR4_WREN                                      (0x1 << 12)    // WREN
#define  _FMC_BCR4_WAITCFG                                   (0x1 << 11)    // WAITCFG
#define  _FMC_BCR4_WRAPMOD                                   (0x1 << 10)    // WRAPMOD
#define  _FMC_BCR4_WAITPOL                                   (0x1 << 9)    // WAITPOL
#define  _FMC_BCR4_BURSTEN                                   (0x1 << 8)    // BURSTEN
#define  _FMC_BCR4_FACCEN                                    (0x1 << 6)    // FACCEN
#define  _FMC_BCR4_MWID                                      (0x3 << 4)    // MWID
#define  _FMC_BCR4_MTYP                                      (0x3 << 2)    // MTYP
#define  _FMC_BCR4_MUXEN                                     (0x1 << 1)    // MUXEN
#define  _FMC_BCR4_MBKEN                                     (0x1 << 0)    // MBKEN
#define  _FMC_BTR4_ACCMOD                                    (0x3 << 28)    // ACCMOD
#define  _FMC_BTR4_DATLAT                                    (0xf << 24)    // DATLAT
#define  _FMC_BTR4_CLKDIV                                    (0xf << 20)    // CLKDIV
#define  _FMC_BTR4_BUSTURN                                   (0xf << 16)    // BUSTURN
#define  _FMC_BTR4_DATAST                                    (0xff << 8)    // DATAST
#define  _FMC_BTR4_ADDHLD                                    (0xf << 4)    // ADDHLD
#define  _FMC_BTR4_ADDSET                                    (0xf << 0)    // ADDSET
#define  _FMC_PCR_ECCPS                                      (0x7 << 17)    // ECCPS
#define  _FMC_PCR_TAR                                        (0xf << 13)    // TAR
#define  _FMC_PCR_TCLR                                       (0xf << 9)    // TCLR
#define  _FMC_PCR_ECCEN                                      (0x1 << 6)    // ECCEN
#define  _FMC_PCR_PWID                                       (0x3 << 4)    // PWID
#define  _FMC_PCR_PTYP                                       (0x1 << 3)    // PTYP
#define  _FMC_PCR_PBKEN                                      (0x1 << 2)    // PBKEN
#define  _FMC_PCR_PWAITEN                                    (0x1 << 1)    // PWAITEN
#define  _FMC_SR_FEMPT                                       (0x1 << 6)    // FEMPT
#define  _FMC_SR_IFEN                                        (0x1 << 5)    // IFEN
#define  _FMC_SR_ILEN                                        (0x1 << 4)    // ILEN
#define  _FMC_SR_IREN                                        (0x1 << 3)    // IREN
#define  _FMC_SR_IFS                                         (0x1 << 2)    // IFS
#define  _FMC_SR_ILS                                         (0x1 << 1)    // ILS
#define  _FMC_SR_IRS                                         (0x1 << 0)    // IRS
#define  _FMC_PMEM_MEMHIZx                                   (0xff << 24)    // MEMHIZx
#define  _FMC_PMEM_MEMHOLDx                                  (0xff << 16)    // MEMHOLDx
#define  _FMC_PMEM_MEMWAITx                                  (0xff << 8)    // MEMWAITx
#define  _FMC_PMEM_MEMSETx                                   (0xff << 0)    // MEMSETx
#define  _FMC_PATT_ATTHIZx                                   (0xff << 24)    // ATTHIZx
#define  _FMC_PATT_ATTHOLDx                                  (0xff << 16)    // ATTHOLDx
#define  _FMC_PATT_ATTWAITx                                  (0xff << 8)    // ATTWAITx
#define  _FMC_PATT_ATTSETx                                   (0xff << 0)    // ATTSETx
#define  _FMC_ECCR_ECCx                                      (0xffffffff << 0)    // ECCx
#define  _FMC_BWTR1_ACCMOD                                   (0x3 << 28)    // ACCMOD
#define  _FMC_BWTR1_DATLAT                                   (0xf << 24)    // DATLAT
#define  _FMC_BWTR1_CLKDIV                                   (0xf << 20)    // CLKDIV
#define  _FMC_BWTR1_DATAST                                   (0xff << 8)    // DATAST
#define  _FMC_BWTR1_ADDHLD                                   (0xf << 4)    // ADDHLD
#define  _FMC_BWTR1_ADDSET                                   (0xf << 0)    // ADDSET
#define  _FMC_BWTR2_ACCMOD                                   (0x3 << 28)    // ACCMOD
#define  _FMC_BWTR2_DATLAT                                   (0xf << 24)    // DATLAT
#define  _FMC_BWTR2_CLKDIV                                   (0xf << 20)    // CLKDIV
#define  _FMC_BWTR2_DATAST                                   (0xff << 8)    // DATAST
#define  _FMC_BWTR2_ADDHLD                                   (0xf << 4)    // ADDHLD
#define  _FMC_BWTR2_ADDSET                                   (0xf << 0)    // ADDSET
#define  _FMC_BWTR3_ACCMOD                                   (0x3 << 28)    // ACCMOD
#define  _FMC_BWTR3_DATLAT                                   (0xf << 24)    // DATLAT
#define  _FMC_BWTR3_CLKDIV                                   (0xf << 20)    // CLKDIV
#define  _FMC_BWTR3_DATAST                                   (0xff << 8)    // DATAST
#define  _FMC_BWTR3_ADDHLD                                   (0xf << 4)    // ADDHLD
#define  _FMC_BWTR3_ADDSET                                   (0xf << 0)    // ADDSET
#define  _FMC_BWTR4_ACCMOD                                   (0x3 << 28)    // ACCMOD
#define  _FMC_BWTR4_DATLAT                                   (0xf << 24)    // DATLAT
#define  _FMC_BWTR4_CLKDIV                                   (0xf << 20)    // CLKDIV
#define  _FMC_BWTR4_DATAST                                   (0xff << 8)    // DATAST
#define  _FMC_BWTR4_ADDHLD                                   (0xf << 4)    // ADDHLD
#define  _FMC_BWTR4_ADDSET                                   (0xf << 0)    // ADDSET
#define  _FMC_SDCR1_NC                                       (0x3 << 0)    // Number of column address bits
#define  _FMC_SDCR1_NR                                       (0x3 << 2)    // Number of row address bits
#define  _FMC_SDCR1_MWID                                     (0x3 << 4)    // Memory data bus width
#define  _FMC_SDCR1_NB                                       (0x1 << 6)    // Number of internal banks
#define  _FMC_SDCR1_CAS                                      (0x3 << 7)    // CAS latency
#define  _FMC_SDCR1_WP                                       (0x1 << 9)    // Write protection
#define  _FMC_SDCR1_SDCLK                                    (0x3 << 10)    // SDRAM clock configuration
#define  _FMC_SDCR1_RBURST                                   (0x1 << 12)    // Burst read
#define  _FMC_SDCR1_RPIPE                                    (0x3 << 13)    // Read pipe
#define  _FMC_SDCR2_NC                                       (0x3 << 0)    // Number of column address bits
#define  _FMC_SDCR2_NR                                       (0x3 << 2)    // Number of row address bits
#define  _FMC_SDCR2_MWID                                     (0x3 << 4)    // Memory data bus width
#define  _FMC_SDCR2_NB                                       (0x1 << 6)    // Number of internal banks
#define  _FMC_SDCR2_CAS                                      (0x3 << 7)    // CAS latency
#define  _FMC_SDCR2_WP                                       (0x1 << 9)    // Write protection
#define  _FMC_SDCR2_SDCLK                                    (0x3 << 10)    // SDRAM clock configuration
#define  _FMC_SDCR2_RBURST                                   (0x1 << 12)    // Burst read
#define  _FMC_SDCR2_RPIPE                                    (0x3 << 13)    // Read pipe
#define  _FMC_SDTR1_TMRD                                     (0xf << 0)    // Load Mode Register to Active
#define  _FMC_SDTR1_TXSR                                     (0xf << 4)    // Exit self-refresh delay
#define  _FMC_SDTR1_TRAS                                     (0xf << 8)    // Self refresh time
#define  _FMC_SDTR1_TRC                                      (0xf << 12)    // Row cycle delay
#define  _FMC_SDTR1_TWR                                      (0xf << 16)    // Recovery delay
#define  _FMC_SDTR1_TRP                                      (0xf << 20)    // Row precharge delay
#define  _FMC_SDTR1_TRCD                                     (0xf << 24)    // Row to column delay
#define  _FMC_SDTR2_TMRD                                     (0xf << 0)    // Load Mode Register to Active
#define  _FMC_SDTR2_TXSR                                     (0xf << 4)    // Exit self-refresh delay
#define  _FMC_SDTR2_TRAS                                     (0xf << 8)    // Self refresh time
#define  _FMC_SDTR2_TRC                                      (0xf << 12)    // Row cycle delay
#define  _FMC_SDTR2_TWR                                      (0xf << 16)    // Recovery delay
#define  _FMC_SDTR2_TRP                                      (0xf << 20)    // Row precharge delay
#define  _FMC_SDTR2_TRCD                                     (0xf << 24)    // Row to column delay
#define  _FMC_SDCMR_MODE                                     (0x7 << 0)    // Command mode
#define  _FMC_SDCMR_CTB2                                     (0x1 << 3)    // Command target bank 2
#define  _FMC_SDCMR_CTB1                                     (0x1 << 4)    // Command target bank 1
#define  _FMC_SDCMR_NRFS                                     (0xf << 5)    // Number of Auto-refresh
#define  _FMC_SDCMR_MRD                                      (0x1fff << 9)    // Mode Register definition
#define  _FMC_SDRTR_CRE                                      (0x1 << 0)    // Clear Refresh error flag
#define  _FMC_SDRTR_COUNT                                    (0x1fff << 1)    // Refresh Timer Count
#define  _FMC_SDRTR_REIE                                     (0x1 << 14)    // RES Interrupt Enable
#define  _FMC_SDSR_RE                                        (0x1 << 0)    // Refresh error flag
#define  _FMC_SDSR_MODES1                                    (0x3 << 1)    // Status Mode for Bank 1
#define  _FMC_SDSR_MODES2                                    (0x3 << 3)    // Status Mode for Bank 2
#define  _FMC_SDSR_BUSY                                      (0x1 << 5)    // Busy status
　
　drivers/inc/stm32f767xx_DAC.h
#define Get_DAC_CR(FLAG)                     (*(uint32_t*)0x40007400 |= FLAG)
#define Get_DAC_SWTRIGR(FLAG)                (*(uint32_t*)0x40007404 |= FLAG)
#define Get_DAC_DHR12R1(FLAG)                (*(uint32_t*)0x40007408 |= FLAG)
#define Get_DAC_DHR12L1(FLAG)                (*(uint32_t*)0x4000740c |= FLAG)
#define Get_DAC_DHR8R1(FLAG)                 (*(uint32_t*)0x40007410 |= FLAG)
#define Get_DAC_DHR12R2(FLAG)                (*(uint32_t*)0x40007414 |= FLAG)
#define Get_DAC_DHR12L2(FLAG)                (*(uint32_t*)0x40007418 |= FLAG)
#define Get_DAC_DHR8R2(FLAG)                 (*(uint32_t*)0x4000741c |= FLAG)
#define Get_DAC_DHR12RD(FLAG)                (*(uint32_t*)0x40007420 |= FLAG)
#define Get_DAC_DHR12LD(FLAG)                (*(uint32_t*)0x40007424 |= FLAG)
#define Get_DAC_DHR8RD(FLAG)                 (*(uint32_t*)0x40007428 |= FLAG)
#define Get_DAC_DOR1(FLAG)                   (*(uint32_t*)0x4000742c |= FLAG)
#define Get_DAC_DOR2(FLAG)                   (*(uint32_t*)0x40007430 |= FLAG)
#define Get_DAC_SR(FLAG)                     (*(uint32_t*)0x40007434 |= FLAG)
#define Set_DAC_CR(FLAG)                     (*(uint32_t*)0x40007400 &= FLAG)
#define Clr_DAC_CR(FLAG)                     (*(uint32_t*)0x40007400 |= ~FLAG)
#define Set_DAC_SWTRIGR(FLAG)                (*(uint32_t*)0x40007404 &= FLAG)
#define Clr_DAC_SWTRIGR(FLAG)                (*(uint32_t*)0x40007404 |= ~FLAG)
#define Set_DAC_DHR12R1(FLAG)                (*(uint32_t*)0x40007408 &= FLAG)
#define Clr_DAC_DHR12R1(FLAG)                (*(uint32_t*)0x40007408 |= ~FLAG)
#define Set_DAC_DHR12L1(FLAG)                (*(uint32_t*)0x4000740c &= FLAG)
#define Clr_DAC_DHR12L1(FLAG)                (*(uint32_t*)0x4000740c |= ~FLAG)
#define Set_DAC_DHR8R1(FLAG)                 (*(uint32_t*)0x40007410 &= FLAG)
#define Clr_DAC_DHR8R1(FLAG)                 (*(uint32_t*)0x40007410 |= ~FLAG)
#define Set_DAC_DHR12R2(FLAG)                (*(uint32_t*)0x40007414 &= FLAG)
#define Clr_DAC_DHR12R2(FLAG)                (*(uint32_t*)0x40007414 |= ~FLAG)
#define Set_DAC_DHR12L2(FLAG)                (*(uint32_t*)0x40007418 &= FLAG)
#define Clr_DAC_DHR12L2(FLAG)                (*(uint32_t*)0x40007418 |= ~FLAG)
#define Set_DAC_DHR8R2(FLAG)                 (*(uint32_t*)0x4000741c &= FLAG)
#define Clr_DAC_DHR8R2(FLAG)                 (*(uint32_t*)0x4000741c |= ~FLAG)
#define Set_DAC_DHR12RD(FLAG)                (*(uint32_t*)0x40007420 &= FLAG)
#define Clr_DAC_DHR12RD(FLAG)                (*(uint32_t*)0x40007420 |= ~FLAG)
#define Set_DAC_DHR12LD(FLAG)                (*(uint32_t*)0x40007424 &= FLAG)
#define Clr_DAC_DHR12LD(FLAG)                (*(uint32_t*)0x40007424 |= ~FLAG)
#define Set_DAC_DHR8RD(FLAG)                 (*(uint32_t*)0x40007428 &= FLAG)
#define Clr_DAC_DHR8RD(FLAG)                 (*(uint32_t*)0x40007428 |= ~FLAG)
#define Set_DAC_DOR1(FLAG)                   (*(uint32_t*)0x4000742c &= FLAG)
#define Clr_DAC_DOR1(FLAG)                   (*(uint32_t*)0x4000742c |= ~FLAG)
#define Set_DAC_DOR2(FLAG)                   (*(uint32_t*)0x40007430 &= FLAG)
#define Clr_DAC_DOR2(FLAG)                   (*(uint32_t*)0x40007430 |= ~FLAG)
#define Set_DAC_SR(FLAG)                     (*(uint32_t*)0x40007434 &= FLAG)
#define Clr_DAC_SR(FLAG)                     (*(uint32_t*)0x40007434 |= ~FLAG)
#define  _DAC_CR_DMAUDRIE2                                   (0x1 << 29)    // DAC channel2 DMA underrun interrupt enable
#define  _DAC_CR_DMAEN2                                      (0x1 << 28)    // DAC channel2 DMA enable
#define  _DAC_CR_MAMP2                                       (0xf << 24)    // DAC channel2 mask/amplitude selector
#define  _DAC_CR_WAVE2                                       (0x3 << 22)    // DAC channel2 noise/triangle wave generation enable
#define  _DAC_CR_TSEL2                                       (0x7 << 19)    // DAC channel2 trigger selection
#define  _DAC_CR_TEN2                                        (0x1 << 18)    // DAC channel2 trigger enable
#define  _DAC_CR_BOFF2                                       (0x1 << 17)    // DAC channel2 output buffer disable
#define  _DAC_CR_EN2                                         (0x1 << 16)    // DAC channel2 enable
#define  _DAC_CR_DMAUDRIE1                                   (0x1 << 13)    // DAC channel1 DMA Underrun Interrupt enable
#define  _DAC_CR_DMAEN1                                      (0x1 << 12)    // DAC channel1 DMA enable
#define  _DAC_CR_MAMP1                                       (0xf << 8)    // DAC channel1 mask/amplitude selector
#define  _DAC_CR_WAVE1                                       (0x3 << 6)    // DAC channel1 noise/triangle wave generation enable
#define  _DAC_CR_TSEL1                                       (0x7 << 3)    // DAC channel1 trigger selection
#define  _DAC_CR_TEN1                                        (0x1 << 2)    // DAC channel1 trigger enable
#define  _DAC_CR_BOFF1                                       (0x1 << 1)    // DAC channel1 output buffer disable
#define  _DAC_CR_EN1                                         (0x1 << 0)    // DAC channel1 enable
#define  _DAC_SWTRIGR_SWTRIG2                                (0x1 << 1)    // DAC channel2 software trigger
#define  _DAC_SWTRIGR_SWTRIG1                                (0x1 << 0)    // DAC channel1 software trigger
#define  _DAC_DHR12R1_DACC1DHR                               (0xfff << 0)    // DAC channel1 12-bit right-aligned data
#define  _DAC_DHR12L1_DACC1DHR                               (0xfff << 4)    // DAC channel1 12-bit left-aligned data
#define  _DAC_DHR8R1_DACC1DHR                                (0xff << 0)    // DAC channel1 8-bit right-aligned data
#define  _DAC_DHR12R2_DACC2DHR                               (0xfff << 0)    // DAC channel2 12-bit right-aligned data
#define  _DAC_DHR12L2_DACC2DHR                               (0xfff << 4)    // DAC channel2 12-bit left-aligned data
#define  _DAC_DHR8R2_DACC2DHR                                (0xff << 0)    // DAC channel2 8-bit right-aligned data
#define  _DAC_DHR12RD_DACC2DHR                               (0xfff << 16)    // DAC channel2 12-bit right-aligned data
#define  _DAC_DHR12RD_DACC1DHR                               (0xfff << 0)    // DAC channel1 12-bit right-aligned data
#define  _DAC_DHR12LD_DACC2DHR                               (0xfff << 20)    // DAC channel2 12-bit left-aligned data
#define  _DAC_DHR12LD_DACC1DHR                               (0xfff << 4)    // DAC channel1 12-bit left-aligned data
#define  _DAC_DHR8RD_DACC2DHR                                (0xff << 8)    // DAC channel2 8-bit right-aligned data
#define  _DAC_DHR8RD_DACC1DHR                                (0xff << 0)    // DAC channel1 8-bit right-aligned data
#define  _DAC_DOR1_DACC1DOR                                  (0xfff << 0)    // DAC channel1 data output
#define  _DAC_DOR2_DACC2DOR                                  (0xfff << 0)    // DAC channel2 data output
#define  _DAC_SR_DMAUDR2                                     (0x1 << 29)    // DAC channel2 DMA underrun flag
#define  _DAC_SR_DMAUDR1                                     (0x1 << 13)    // DAC channel1 DMA underrun flag
　
　drivers/inc/stm32f767xx_CEC.h
#define Get_CEC_CR(FLAG)                     (*(uint32_t*)0x40006c00 |= FLAG)
#define Get_CEC_CFGR(FLAG)                   (*(uint32_t*)0x40006c04 |= FLAG)
#define Get_CEC_TXDR(FLAG)                   (*(uint32_t*)0x40006c08 |= FLAG)
#define Get_CEC_RXDR(FLAG)                   (*(uint32_t*)0x40006c0c |= FLAG)
#define Get_CEC_ISR(FLAG)                    (*(uint32_t*)0x40006c10 |= FLAG)
#define Get_CEC_IER(FLAG)                    (*(uint32_t*)0x40006c14 |= FLAG)
#define Set_CEC_CR(FLAG)                     (*(uint32_t*)0x40006c00 &= FLAG)
#define Clr_CEC_CR(FLAG)                     (*(uint32_t*)0x40006c00 |= ~FLAG)
#define Set_CEC_CFGR(FLAG)                   (*(uint32_t*)0x40006c04 &= FLAG)
#define Clr_CEC_CFGR(FLAG)                   (*(uint32_t*)0x40006c04 |= ~FLAG)
#define Set_CEC_TXDR(FLAG)                   (*(uint32_t*)0x40006c08 &= FLAG)
#define Clr_CEC_TXDR(FLAG)                   (*(uint32_t*)0x40006c08 |= ~FLAG)
#define Set_CEC_RXDR(FLAG)                   (*(uint32_t*)0x40006c0c &= FLAG)
#define Clr_CEC_RXDR(FLAG)                   (*(uint32_t*)0x40006c0c |= ~FLAG)
#define Set_CEC_ISR(FLAG)                    (*(uint32_t*)0x40006c10 &= FLAG)
#define Clr_CEC_ISR(FLAG)                    (*(uint32_t*)0x40006c10 |= ~FLAG)
#define Set_CEC_IER(FLAG)                    (*(uint32_t*)0x40006c14 &= FLAG)
#define Clr_CEC_IER(FLAG)                    (*(uint32_t*)0x40006c14 |= ~FLAG)
#define  _CEC_CR_TXEOM                                       (0x1 << 2)    // Tx End Of Message
#define  _CEC_CR_TXSOM                                       (0x1 << 1)    // Tx start of message
#define  _CEC_CR_CECEN                                       (0x1 << 0)    // CEC Enable
#define  _CEC_CFGR_SFT                                       (0x7 << 0)    // Signal Free Time
#define  _CEC_CFGR_RXTOL                                     (0x1 << 3)    // Rx-Tolerance
#define  _CEC_CFGR_BRESTP                                    (0x1 << 4)    // Rx-stop on bit rising error
#define  _CEC_CFGR_BREGEN                                    (0x1 << 5)    // Generate error-bit on bit rising error
#define  _CEC_CFGR_LBPEGEN                                   (0x1 << 6)    // Generate Error-Bit on Long Bit Period Error
#define  _CEC_CFGR_BRDNOGEN                                  (0x1 << 7)    // Avoid Error-Bit Generation in Broadcast
#define  _CEC_CFGR_SFTOP                                     (0x1 << 8)    // SFT Option Bit
#define  _CEC_CFGR_OAR                                       (0x7fff << 16)    // Own addresses configuration
#define  _CEC_CFGR_LSTN                                      (0x1 << 31)    // Listen mode
#define  _CEC_TXDR_TXD                                       (0xff << 0)    // Tx Data register
#define  _CEC_RXDR_RXDR                                      (0xff << 0)    // CEC Rx Data Register
#define  _CEC_ISR_TXACKE                                     (0x1 << 12)    // Tx-Missing acknowledge error
#define  _CEC_ISR_TXERR                                      (0x1 << 11)    // Tx-Error
#define  _CEC_ISR_TXUDR                                      (0x1 << 10)    // Tx-Buffer Underrun
#define  _CEC_ISR_TXEND                                      (0x1 << 9)    // End of Transmission
#define  _CEC_ISR_TXBR                                       (0x1 << 8)    // Tx-Byte Request
#define  _CEC_ISR_ARBLST                                     (0x1 << 7)    // Arbitration Lost
#define  _CEC_ISR_RXACKE                                     (0x1 << 6)    // Rx-Missing Acknowledge
#define  _CEC_ISR_LBPE                                       (0x1 << 5)    // Rx-Long Bit Period Error
#define  _CEC_ISR_SBPE                                       (0x1 << 4)    // Rx-Short Bit period error
#define  _CEC_ISR_BRE                                        (0x1 << 3)    // Rx-Bit rising error
#define  _CEC_ISR_RXOVR                                      (0x1 << 2)    // Rx-Overrun
#define  _CEC_ISR_RXEND                                      (0x1 << 1)    // End Of Reception
#define  _CEC_ISR_RXBR                                       (0x1 << 0)    // Rx-Byte Received
#define  _CEC_IER_TXACKIE                                    (0x1 << 12)    // Tx-Missing Acknowledge Error Interrupt Enable
#define  _CEC_IER_TXERRIE                                    (0x1 << 11)    // Tx-Error Interrupt Enable
#define  _CEC_IER_TXUDRIE                                    (0x1 << 10)    // Tx-Underrun interrupt enable
#define  _CEC_IER_TXENDIE                                    (0x1 << 9)    // Tx-End of message interrupt enable
#define  _CEC_IER_TXBRIE                                     (0x1 << 8)    // Tx-Byte Request Interrupt Enable
#define  _CEC_IER_ARBLSTIE                                   (0x1 << 7)    // Arbitration Lost Interrupt Enable
#define  _CEC_IER_RXACKIE                                    (0x1 << 6)    // Rx-Missing Acknowledge Error Interrupt Enable
#define  _CEC_IER_LBPEIE                                     (0x1 << 5)    // Long Bit Period Error Interrupt Enable
#define  _CEC_IER_SBPEIE                                     (0x1 << 4)    // Short Bit Period Error Interrupt Enable
#define  _CEC_IER_BREIE                                      (0x1 << 3)    // Bit Rising Error Interrupt Enable
#define  _CEC_IER_RXOVRIE                                    (0x1 << 2)    // Rx-Buffer Overrun Interrupt Enable
#define  _CEC_IER_RXENDIE                                    (0x1 << 1)    // End Of Reception Interrupt Enable
#define  _CEC_IER_RXBRIE                                     (0x1 << 0)    // Rx-Byte Received Interrupt Enable
　
　drivers/inc/stm32f767xx_SDMMC.h
#define Get_SDMMC2_POWER(FLAG)               (*(uint32_t*)0x40011c00 |= FLAG)
#define Get_SDMMC2_CLKCR(FLAG)               (*(uint32_t*)0x40011c04 |= FLAG)
#define Get_SDMMC2_ARG(FLAG)                 (*(uint32_t*)0x40011c08 |= FLAG)
#define Get_SDMMC2_CMD(FLAG)                 (*(uint32_t*)0x40011c0c |= FLAG)
#define Get_SDMMC2_RESPCMD(FLAG)             (*(uint32_t*)0x40011c10 |= FLAG)
#define Get_SDMMC2_RESP1(FLAG)               (*(uint32_t*)0x40011c14 |= FLAG)
#define Get_SDMMC2_RESP2(FLAG)               (*(uint32_t*)0x40011c18 |= FLAG)
#define Get_SDMMC2_RESP3(FLAG)               (*(uint32_t*)0x40011c1c |= FLAG)
#define Get_SDMMC2_RESP4(FLAG)               (*(uint32_t*)0x40011c20 |= FLAG)
#define Get_SDMMC2_DTIMER(FLAG)              (*(uint32_t*)0x40011c24 |= FLAG)
#define Get_SDMMC2_DLEN(FLAG)                (*(uint32_t*)0x40011c28 |= FLAG)
#define Get_SDMMC2_DCTRL(FLAG)               (*(uint32_t*)0x40011c2c |= FLAG)
#define Get_SDMMC2_DCOUNT(FLAG)              (*(uint32_t*)0x40011c30 |= FLAG)
#define Get_SDMMC2_STA(FLAG)                 (*(uint32_t*)0x40011c34 |= FLAG)
#define Get_SDMMC2_ICR(FLAG)                 (*(uint32_t*)0x40011c38 |= FLAG)
#define Get_SDMMC2_MASK(FLAG)                (*(uint32_t*)0x40011c3c |= FLAG)
#define Get_SDMMC2_FIFOCNT(FLAG)             (*(uint32_t*)0x40011c48 |= FLAG)
#define Get_SDMMC2_FIFO(FLAG)                (*(uint32_t*)0x40011c80 |= FLAG)
#define Get_SDMMC1_POWER(FLAG)               (*(uint32_t*)0x40012c00 |= FLAG)
#define Get_SDMMC1_CLKCR(FLAG)               (*(uint32_t*)0x40012c04 |= FLAG)
#define Get_SDMMC1_ARG(FLAG)                 (*(uint32_t*)0x40012c08 |= FLAG)
#define Get_SDMMC1_CMD(FLAG)                 (*(uint32_t*)0x40012c0c |= FLAG)
#define Get_SDMMC1_RESPCMD(FLAG)             (*(uint32_t*)0x40012c10 |= FLAG)
#define Get_SDMMC1_RESP1(FLAG)               (*(uint32_t*)0x40012c14 |= FLAG)
#define Get_SDMMC1_RESP2(FLAG)               (*(uint32_t*)0x40012c18 |= FLAG)
#define Get_SDMMC1_RESP3(FLAG)               (*(uint32_t*)0x40012c1c |= FLAG)
#define Get_SDMMC1_RESP4(FLAG)               (*(uint32_t*)0x40012c20 |= FLAG)
#define Get_SDMMC1_DTIMER(FLAG)              (*(uint32_t*)0x40012c24 |= FLAG)
#define Get_SDMMC1_DLEN(FLAG)                (*(uint32_t*)0x40012c28 |= FLAG)
#define Get_SDMMC1_DCTRL(FLAG)               (*(uint32_t*)0x40012c2c |= FLAG)
#define Get_SDMMC1_DCOUNT(FLAG)              (*(uint32_t*)0x40012c30 |= FLAG)
#define Get_SDMMC1_STA(FLAG)                 (*(uint32_t*)0x40012c34 |= FLAG)
#define Get_SDMMC1_ICR(FLAG)                 (*(uint32_t*)0x40012c38 |= FLAG)
#define Get_SDMMC1_MASK(FLAG)                (*(uint32_t*)0x40012c3c |= FLAG)
#define Get_SDMMC1_FIFOCNT(FLAG)             (*(uint32_t*)0x40012c48 |= FLAG)
#define Get_SDMMC1_FIFO(FLAG)                (*(uint32_t*)0x40012c80 |= FLAG)
#define Set_SDMMC2_POWER(FLAG)               (*(uint32_t*)0x40011c00 &= FLAG)
#define Clr_SDMMC2_POWER(FLAG)               (*(uint32_t*)0x40011c00 |= ~FLAG)
#define Set_SDMMC2_CLKCR(FLAG)               (*(uint32_t*)0x40011c04 &= FLAG)
#define Clr_SDMMC2_CLKCR(FLAG)               (*(uint32_t*)0x40011c04 |= ~FLAG)
#define Set_SDMMC2_ARG(FLAG)                 (*(uint32_t*)0x40011c08 &= FLAG)
#define Clr_SDMMC2_ARG(FLAG)                 (*(uint32_t*)0x40011c08 |= ~FLAG)
#define Set_SDMMC2_CMD(FLAG)                 (*(uint32_t*)0x40011c0c &= FLAG)
#define Clr_SDMMC2_CMD(FLAG)                 (*(uint32_t*)0x40011c0c |= ~FLAG)
#define Set_SDMMC2_RESPCMD(FLAG)             (*(uint32_t*)0x40011c10 &= FLAG)
#define Clr_SDMMC2_RESPCMD(FLAG)             (*(uint32_t*)0x40011c10 |= ~FLAG)
#define Set_SDMMC2_RESP1(FLAG)               (*(uint32_t*)0x40011c14 &= FLAG)
#define Clr_SDMMC2_RESP1(FLAG)               (*(uint32_t*)0x40011c14 |= ~FLAG)
#define Set_SDMMC2_RESP2(FLAG)               (*(uint32_t*)0x40011c18 &= FLAG)
#define Clr_SDMMC2_RESP2(FLAG)               (*(uint32_t*)0x40011c18 |= ~FLAG)
#define Set_SDMMC2_RESP3(FLAG)               (*(uint32_t*)0x40011c1c &= FLAG)
#define Clr_SDMMC2_RESP3(FLAG)               (*(uint32_t*)0x40011c1c |= ~FLAG)
#define Set_SDMMC2_RESP4(FLAG)               (*(uint32_t*)0x40011c20 &= FLAG)
#define Clr_SDMMC2_RESP4(FLAG)               (*(uint32_t*)0x40011c20 |= ~FLAG)
#define Set_SDMMC2_DTIMER(FLAG)              (*(uint32_t*)0x40011c24 &= FLAG)
#define Clr_SDMMC2_DTIMER(FLAG)              (*(uint32_t*)0x40011c24 |= ~FLAG)
#define Set_SDMMC2_DLEN(FLAG)                (*(uint32_t*)0x40011c28 &= FLAG)
#define Clr_SDMMC2_DLEN(FLAG)                (*(uint32_t*)0x40011c28 |= ~FLAG)
#define Set_SDMMC2_DCTRL(FLAG)               (*(uint32_t*)0x40011c2c &= FLAG)
#define Clr_SDMMC2_DCTRL(FLAG)               (*(uint32_t*)0x40011c2c |= ~FLAG)
#define Set_SDMMC2_DCOUNT(FLAG)              (*(uint32_t*)0x40011c30 &= FLAG)
#define Clr_SDMMC2_DCOUNT(FLAG)              (*(uint32_t*)0x40011c30 |= ~FLAG)
#define Set_SDMMC2_STA(FLAG)                 (*(uint32_t*)0x40011c34 &= FLAG)
#define Clr_SDMMC2_STA(FLAG)                 (*(uint32_t*)0x40011c34 |= ~FLAG)
#define Set_SDMMC2_ICR(FLAG)                 (*(uint32_t*)0x40011c38 &= FLAG)
#define Clr_SDMMC2_ICR(FLAG)                 (*(uint32_t*)0x40011c38 |= ~FLAG)
#define Set_SDMMC2_MASK(FLAG)                (*(uint32_t*)0x40011c3c &= FLAG)
#define Clr_SDMMC2_MASK(FLAG)                (*(uint32_t*)0x40011c3c |= ~FLAG)
#define Set_SDMMC2_FIFOCNT(FLAG)             (*(uint32_t*)0x40011c48 &= FLAG)
#define Clr_SDMMC2_FIFOCNT(FLAG)             (*(uint32_t*)0x40011c48 |= ~FLAG)
#define Set_SDMMC2_FIFO(FLAG)                (*(uint32_t*)0x40011c80 &= FLAG)
#define Clr_SDMMC2_FIFO(FLAG)                (*(uint32_t*)0x40011c80 |= ~FLAG)
#define Set_SDMMC1_POWER(FLAG)               (*(uint32_t*)0x40012c00 &= FLAG)
#define Clr_SDMMC1_POWER(FLAG)               (*(uint32_t*)0x40012c00 |= ~FLAG)
#define Set_SDMMC1_CLKCR(FLAG)               (*(uint32_t*)0x40012c04 &= FLAG)
#define Clr_SDMMC1_CLKCR(FLAG)               (*(uint32_t*)0x40012c04 |= ~FLAG)
#define Set_SDMMC1_ARG(FLAG)                 (*(uint32_t*)0x40012c08 &= FLAG)
#define Clr_SDMMC1_ARG(FLAG)                 (*(uint32_t*)0x40012c08 |= ~FLAG)
#define Set_SDMMC1_CMD(FLAG)                 (*(uint32_t*)0x40012c0c &= FLAG)
#define Clr_SDMMC1_CMD(FLAG)                 (*(uint32_t*)0x40012c0c |= ~FLAG)
#define Set_SDMMC1_RESPCMD(FLAG)             (*(uint32_t*)0x40012c10 &= FLAG)
#define Clr_SDMMC1_RESPCMD(FLAG)             (*(uint32_t*)0x40012c10 |= ~FLAG)
#define Set_SDMMC1_RESP1(FLAG)               (*(uint32_t*)0x40012c14 &= FLAG)
#define Clr_SDMMC1_RESP1(FLAG)               (*(uint32_t*)0x40012c14 |= ~FLAG)
#define Set_SDMMC1_RESP2(FLAG)               (*(uint32_t*)0x40012c18 &= FLAG)
#define Clr_SDMMC1_RESP2(FLAG)               (*(uint32_t*)0x40012c18 |= ~FLAG)
#define Set_SDMMC1_RESP3(FLAG)               (*(uint32_t*)0x40012c1c &= FLAG)
#define Clr_SDMMC1_RESP3(FLAG)               (*(uint32_t*)0x40012c1c |= ~FLAG)
#define Set_SDMMC1_RESP4(FLAG)               (*(uint32_t*)0x40012c20 &= FLAG)
#define Clr_SDMMC1_RESP4(FLAG)               (*(uint32_t*)0x40012c20 |= ~FLAG)
#define Set_SDMMC1_DTIMER(FLAG)              (*(uint32_t*)0x40012c24 &= FLAG)
#define Clr_SDMMC1_DTIMER(FLAG)              (*(uint32_t*)0x40012c24 |= ~FLAG)
#define Set_SDMMC1_DLEN(FLAG)                (*(uint32_t*)0x40012c28 &= FLAG)
#define Clr_SDMMC1_DLEN(FLAG)                (*(uint32_t*)0x40012c28 |= ~FLAG)
#define Set_SDMMC1_DCTRL(FLAG)               (*(uint32_t*)0x40012c2c &= FLAG)
#define Clr_SDMMC1_DCTRL(FLAG)               (*(uint32_t*)0x40012c2c |= ~FLAG)
#define Set_SDMMC1_DCOUNT(FLAG)              (*(uint32_t*)0x40012c30 &= FLAG)
#define Clr_SDMMC1_DCOUNT(FLAG)              (*(uint32_t*)0x40012c30 |= ~FLAG)
#define Set_SDMMC1_STA(FLAG)                 (*(uint32_t*)0x40012c34 &= FLAG)
#define Clr_SDMMC1_STA(FLAG)                 (*(uint32_t*)0x40012c34 |= ~FLAG)
#define Set_SDMMC1_ICR(FLAG)                 (*(uint32_t*)0x40012c38 &= FLAG)
#define Clr_SDMMC1_ICR(FLAG)                 (*(uint32_t*)0x40012c38 |= ~FLAG)
#define Set_SDMMC1_MASK(FLAG)                (*(uint32_t*)0x40012c3c &= FLAG)
#define Clr_SDMMC1_MASK(FLAG)                (*(uint32_t*)0x40012c3c |= ~FLAG)
#define Set_SDMMC1_FIFOCNT(FLAG)             (*(uint32_t*)0x40012c48 &= FLAG)
#define Clr_SDMMC1_FIFOCNT(FLAG)             (*(uint32_t*)0x40012c48 |= ~FLAG)
#define Set_SDMMC1_FIFO(FLAG)                (*(uint32_t*)0x40012c80 &= FLAG)
#define Clr_SDMMC1_FIFO(FLAG)                (*(uint32_t*)0x40012c80 |= ~FLAG)
#define  _SDMMC2_POWER_PWRCTRL                               (0x3 << 0)    // PWRCTRL
#define  _SDMMC2_CLKCR_HWFC_EN                               (0x1 << 14)    // HW Flow Control enable
#define  _SDMMC2_CLKCR_NEGEDGE                               (0x1 << 13)    // SDIO_CK dephasing selection bit
#define  _SDMMC2_CLKCR_WIDBUS                                (0x3 << 11)    // Wide bus mode enable bit
#define  _SDMMC2_CLKCR_BYPASS                                (0x1 << 10)    // Clock divider bypass enable bit
#define  _SDMMC2_CLKCR_PWRSAV                                (0x1 << 9)    // Power saving configuration bit
#define  _SDMMC2_CLKCR_CLKEN                                 (0x1 << 8)    // Clock enable bit
#define  _SDMMC2_CLKCR_CLKDIV                                (0xff << 0)    // Clock divide factor
#define  _SDMMC2_ARG_CMDARG                                  (0xffffffff << 0)    // Command argument
#define  _SDMMC2_CMD_CE_ATACMD                               (0x1 << 14)    // CE-ATA command
#define  _SDMMC2_CMD_nIEN                                    (0x1 << 13)    // not Interrupt Enable
#define  _SDMMC2_CMD_ENCMDcompl                              (0x1 << 12)    // Enable CMD completion
#define  _SDMMC2_CMD_SDIOSuspend                             (0x1 << 11)    // SD I/O suspend command
#define  _SDMMC2_CMD_CPSMEN                                  (0x1 << 10)    // Command path state machine (CPSM) Enable bit
#define  _SDMMC2_CMD_WAITPEND                                (0x1 << 9)    // CPSM Waits for ends of data transfer (CmdPend internal signal)
#define  _SDMMC2_CMD_WAITINT                                 (0x1 << 8)    // CPSM waits for interrupt request
#define  _SDMMC2_CMD_WAITRESP                                (0x3 << 6)    // Wait for response bits
#define  _SDMMC2_CMD_CMDINDEX                                (0x3f << 0)    // Command index
#define  _SDMMC2_RESPCMD_RESPCMD                             (0x3f << 0)    // Response command index
#define  _SDMMC2_RESP1_CARDSTATUS1                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC2_RESP2_CARDSTATUS2                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC2_RESP3_CARDSTATUS3                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC2_RESP4_CARDSTATUS4                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC2_DTIMER_DATATIME                             (0xffffffff << 0)    // Data timeout period
#define  _SDMMC2_DLEN_DATALENGTH                             (0x1ffffff << 0)    // Data length value
#define  _SDMMC2_DCTRL_SDIOEN                                (0x1 << 11)    // SD I/O enable functions
#define  _SDMMC2_DCTRL_RWMOD                                 (0x1 << 10)    // Read wait mode
#define  _SDMMC2_DCTRL_RWSTOP                                (0x1 << 9)    // Read wait stop
#define  _SDMMC2_DCTRL_RWSTART                               (0x1 << 8)    // Read wait start
#define  _SDMMC2_DCTRL_DBLOCKSIZE                            (0xf << 4)    // Data block size
#define  _SDMMC2_DCTRL_DMAEN                                 (0x1 << 3)    // DMA enable bit
#define  _SDMMC2_DCTRL_DTMODE                                (0x1 << 2)    // Data transfer mode selection 1: Stream or SDIO multibyte data transfer
#define  _SDMMC2_DCTRL_DTDIR                                 (0x1 << 1)    // Data transfer direction selection
#define  _SDMMC2_DCTRL_DTEN                                  (0x1 << 0)    // DTEN
#define  _SDMMC2_DCOUNT_DATACOUNT                            (0x1ffffff << 0)    // Data count value
#define  _SDMMC2_STA_CEATAEND                                (0x1 << 23)    // CE-ATA command completion signal received for CMD61
#define  _SDMMC2_STA_SDIOIT                                  (0x1 << 22)    // SDIO interrupt received
#define  _SDMMC2_STA_RXDAVL                                  (0x1 << 21)    // Data available in receive FIFO
#define  _SDMMC2_STA_TXDAVL                                  (0x1 << 20)    // Data available in transmit FIFO
#define  _SDMMC2_STA_RXFIFOE                                 (0x1 << 19)    // Receive FIFO empty
#define  _SDMMC2_STA_TXFIFOE                                 (0x1 << 18)    // Transmit FIFO empty
#define  _SDMMC2_STA_RXFIFOF                                 (0x1 << 17)    // Receive FIFO full
#define  _SDMMC2_STA_TXFIFOF                                 (0x1 << 16)    // Transmit FIFO full
#define  _SDMMC2_STA_RXFIFOHF                                (0x1 << 15)    // Receive FIFO half full: there are at least 8 words in the FIFO
#define  _SDMMC2_STA_TXFIFOHE                                (0x1 << 14)    // Transmit FIFO half empty: at least 8 words can be written into the FIFO
#define  _SDMMC2_STA_RXACT                                   (0x1 << 13)    // Data receive in progress
#define  _SDMMC2_STA_TXACT                                   (0x1 << 12)    // Data transmit in progress
#define  _SDMMC2_STA_CMDACT                                  (0x1 << 11)    // Command transfer in progress
#define  _SDMMC2_STA_DBCKEND                                 (0x1 << 10)    // Data block sent/received (CRC check passed)
#define  _SDMMC2_STA_STBITERR                                (0x1 << 9)    // Start bit not detected on all data signals in wide bus mode
#define  _SDMMC2_STA_DATAEND                                 (0x1 << 8)    // Data end (data counter, SDIDCOUNT, is zero)
#define  _SDMMC2_STA_CMDSENT                                 (0x1 << 7)    // Command sent (no response required)
#define  _SDMMC2_STA_CMDREND                                 (0x1 << 6)    // Command response received (CRC check passed)
#define  _SDMMC2_STA_RXOVERR                                 (0x1 << 5)    // Received FIFO overrun error
#define  _SDMMC2_STA_TXUNDERR                                (0x1 << 4)    // Transmit FIFO underrun error
#define  _SDMMC2_STA_DTIMEOUT                                (0x1 << 3)    // Data timeout
#define  _SDMMC2_STA_CTIMEOUT                                (0x1 << 2)    // Command response timeout
#define  _SDMMC2_STA_DCRCFAIL                                (0x1 << 1)    // Data block sent/received (CRC check failed)
#define  _SDMMC2_STA_CCRCFAIL                                (0x1 << 0)    // Command response received (CRC check failed)
#define  _SDMMC2_ICR_CEATAENDC                               (0x1 << 23)    // CEATAEND flag clear bit
#define  _SDMMC2_ICR_SDIOITC                                 (0x1 << 22)    // SDIOIT flag clear bit
#define  _SDMMC2_ICR_DBCKENDC                                (0x1 << 10)    // DBCKEND flag clear bit
#define  _SDMMC2_ICR_STBITERRC                               (0x1 << 9)    // STBITERR flag clear bit
#define  _SDMMC2_ICR_DATAENDC                                (0x1 << 8)    // DATAEND flag clear bit
#define  _SDMMC2_ICR_CMDSENTC                                (0x1 << 7)    // CMDSENT flag clear bit
#define  _SDMMC2_ICR_CMDRENDC                                (0x1 << 6)    // CMDREND flag clear bit
#define  _SDMMC2_ICR_RXOVERRC                                (0x1 << 5)    // RXOVERR flag clear bit
#define  _SDMMC2_ICR_TXUNDERRC                               (0x1 << 4)    // TXUNDERR flag clear bit
#define  _SDMMC2_ICR_DTIMEOUTC                               (0x1 << 3)    // DTIMEOUT flag clear bit
#define  _SDMMC2_ICR_CTIMEOUTC                               (0x1 << 2)    // CTIMEOUT flag clear bit
#define  _SDMMC2_ICR_DCRCFAILC                               (0x1 << 1)    // DCRCFAIL flag clear bit
#define  _SDMMC2_ICR_CCRCFAILC                               (0x1 << 0)    // CCRCFAIL flag clear bit
#define  _SDMMC2_MASK_CEATAENDIE                             (0x1 << 23)    // CE-ATA command completion signal received interrupt enable
#define  _SDMMC2_MASK_SDIOITIE                               (0x1 << 22)    // SDIO mode interrupt received interrupt enable
#define  _SDMMC2_MASK_RXDAVLIE                               (0x1 << 21)    // Data available in Rx FIFO interrupt enable
#define  _SDMMC2_MASK_TXDAVLIE                               (0x1 << 20)    // Data available in Tx FIFO interrupt enable
#define  _SDMMC2_MASK_RXFIFOEIE                              (0x1 << 19)    // Rx FIFO empty interrupt enable
#define  _SDMMC2_MASK_TXFIFOEIE                              (0x1 << 18)    // Tx FIFO empty interrupt enable
#define  _SDMMC2_MASK_RXFIFOFIE                              (0x1 << 17)    // Rx FIFO full interrupt enable
#define  _SDMMC2_MASK_TXFIFOFIE                              (0x1 << 16)    // Tx FIFO full interrupt enable
#define  _SDMMC2_MASK_RXFIFOHFIE                             (0x1 << 15)    // Rx FIFO half full interrupt enable
#define  _SDMMC2_MASK_TXFIFOHEIE                             (0x1 << 14)    // Tx FIFO half empty interrupt enable
#define  _SDMMC2_MASK_RXACTIE                                (0x1 << 13)    // Data receive acting interrupt enable
#define  _SDMMC2_MASK_TXACTIE                                (0x1 << 12)    // Data transmit acting interrupt enable
#define  _SDMMC2_MASK_CMDACTIE                               (0x1 << 11)    // Command acting interrupt enable
#define  _SDMMC2_MASK_DBCKENDIE                              (0x1 << 10)    // Data block end interrupt enable
#define  _SDMMC2_MASK_STBITERRIE                             (0x1 << 9)    // Start bit error interrupt enable
#define  _SDMMC2_MASK_DATAENDIE                              (0x1 << 8)    // Data end interrupt enable
#define  _SDMMC2_MASK_CMDSENTIE                              (0x1 << 7)    // Command sent interrupt enable
#define  _SDMMC2_MASK_CMDRENDIE                              (0x1 << 6)    // Command response received interrupt enable
#define  _SDMMC2_MASK_RXOVERRIE                              (0x1 << 5)    // Rx FIFO overrun error interrupt enable
#define  _SDMMC2_MASK_TXUNDERRIE                             (0x1 << 4)    // Tx FIFO underrun error interrupt enable
#define  _SDMMC2_MASK_DTIMEOUTIE                             (0x1 << 3)    // Data timeout interrupt enable
#define  _SDMMC2_MASK_CTIMEOUTIE                             (0x1 << 2)    // Command timeout interrupt enable
#define  _SDMMC2_MASK_DCRCFAILIE                             (0x1 << 1)    // Data CRC fail interrupt enable
#define  _SDMMC2_MASK_CCRCFAILIE                             (0x1 << 0)    // Command CRC fail interrupt enable
#define  _SDMMC2_FIFOCNT_FIFOCOUNT                           (0xffffff << 0)    // Remaining number of words to be written to or read from the FIFO
#define  _SDMMC2_FIFO_FIFOData                               (0xffffffff << 0)    // Receive and transmit FIFO data
#define  _SDMMC1_POWER_PWRCTRL                               (0x3 << 0)    // PWRCTRL
#define  _SDMMC1_CLKCR_HWFC_EN                               (0x1 << 14)    // HW Flow Control enable
#define  _SDMMC1_CLKCR_NEGEDGE                               (0x1 << 13)    // SDIO_CK dephasing selection bit
#define  _SDMMC1_CLKCR_WIDBUS                                (0x3 << 11)    // Wide bus mode enable bit
#define  _SDMMC1_CLKCR_BYPASS                                (0x1 << 10)    // Clock divider bypass enable bit
#define  _SDMMC1_CLKCR_PWRSAV                                (0x1 << 9)    // Power saving configuration bit
#define  _SDMMC1_CLKCR_CLKEN                                 (0x1 << 8)    // Clock enable bit
#define  _SDMMC1_CLKCR_CLKDIV                                (0xff << 0)    // Clock divide factor
#define  _SDMMC1_ARG_CMDARG                                  (0xffffffff << 0)    // Command argument
#define  _SDMMC1_CMD_CE_ATACMD                               (0x1 << 14)    // CE-ATA command
#define  _SDMMC1_CMD_nIEN                                    (0x1 << 13)    // not Interrupt Enable
#define  _SDMMC1_CMD_ENCMDcompl                              (0x1 << 12)    // Enable CMD completion
#define  _SDMMC1_CMD_SDIOSuspend                             (0x1 << 11)    // SD I/O suspend command
#define  _SDMMC1_CMD_CPSMEN                                  (0x1 << 10)    // Command path state machine (CPSM) Enable bit
#define  _SDMMC1_CMD_WAITPEND                                (0x1 << 9)    // CPSM Waits for ends of data transfer (CmdPend internal signal)
#define  _SDMMC1_CMD_WAITINT                                 (0x1 << 8)    // CPSM waits for interrupt request
#define  _SDMMC1_CMD_WAITRESP                                (0x3 << 6)    // Wait for response bits
#define  _SDMMC1_CMD_CMDINDEX                                (0x3f << 0)    // Command index
#define  _SDMMC1_RESPCMD_RESPCMD                             (0x3f << 0)    // Response command index
#define  _SDMMC1_RESP1_CARDSTATUS1                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC1_RESP2_CARDSTATUS2                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC1_RESP3_CARDSTATUS3                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC1_RESP4_CARDSTATUS4                           (0xffffffff << 0)    // see Table 132
#define  _SDMMC1_DTIMER_DATATIME                             (0xffffffff << 0)    // Data timeout period
#define  _SDMMC1_DLEN_DATALENGTH                             (0x1ffffff << 0)    // Data length value
#define  _SDMMC1_DCTRL_SDIOEN                                (0x1 << 11)    // SD I/O enable functions
#define  _SDMMC1_DCTRL_RWMOD                                 (0x1 << 10)    // Read wait mode
#define  _SDMMC1_DCTRL_RWSTOP                                (0x1 << 9)    // Read wait stop
#define  _SDMMC1_DCTRL_RWSTART                               (0x1 << 8)    // Read wait start
#define  _SDMMC1_DCTRL_DBLOCKSIZE                            (0xf << 4)    // Data block size
#define  _SDMMC1_DCTRL_DMAEN                                 (0x1 << 3)    // DMA enable bit
#define  _SDMMC1_DCTRL_DTMODE                                (0x1 << 2)    // Data transfer mode selection 1: Stream or SDIO multibyte data transfer
#define  _SDMMC1_DCTRL_DTDIR                                 (0x1 << 1)    // Data transfer direction selection
#define  _SDMMC1_DCTRL_DTEN                                  (0x1 << 0)    // DTEN
#define  _SDMMC1_DCOUNT_DATACOUNT                            (0x1ffffff << 0)    // Data count value
#define  _SDMMC1_STA_CEATAEND                                (0x1 << 23)    // CE-ATA command completion signal received for CMD61
#define  _SDMMC1_STA_SDIOIT                                  (0x1 << 22)    // SDIO interrupt received
#define  _SDMMC1_STA_RXDAVL                                  (0x1 << 21)    // Data available in receive FIFO
#define  _SDMMC1_STA_TXDAVL                                  (0x1 << 20)    // Data available in transmit FIFO
#define  _SDMMC1_STA_RXFIFOE                                 (0x1 << 19)    // Receive FIFO empty
#define  _SDMMC1_STA_TXFIFOE                                 (0x1 << 18)    // Transmit FIFO empty
#define  _SDMMC1_STA_RXFIFOF                                 (0x1 << 17)    // Receive FIFO full
#define  _SDMMC1_STA_TXFIFOF                                 (0x1 << 16)    // Transmit FIFO full
#define  _SDMMC1_STA_RXFIFOHF                                (0x1 << 15)    // Receive FIFO half full: there are at least 8 words in the FIFO
#define  _SDMMC1_STA_TXFIFOHE                                (0x1 << 14)    // Transmit FIFO half empty: at least 8 words can be written into the FIFO
#define  _SDMMC1_STA_RXACT                                   (0x1 << 13)    // Data receive in progress
#define  _SDMMC1_STA_TXACT                                   (0x1 << 12)    // Data transmit in progress
#define  _SDMMC1_STA_CMDACT                                  (0x1 << 11)    // Command transfer in progress
#define  _SDMMC1_STA_DBCKEND                                 (0x1 << 10)    // Data block sent/received (CRC check passed)
#define  _SDMMC1_STA_STBITERR                                (0x1 << 9)    // Start bit not detected on all data signals in wide bus mode
#define  _SDMMC1_STA_DATAEND                                 (0x1 << 8)    // Data end (data counter, SDIDCOUNT, is zero)
#define  _SDMMC1_STA_CMDSENT                                 (0x1 << 7)    // Command sent (no response required)
#define  _SDMMC1_STA_CMDREND                                 (0x1 << 6)    // Command response received (CRC check passed)
#define  _SDMMC1_STA_RXOVERR                                 (0x1 << 5)    // Received FIFO overrun error
#define  _SDMMC1_STA_TXUNDERR                                (0x1 << 4)    // Transmit FIFO underrun error
#define  _SDMMC1_STA_DTIMEOUT                                (0x1 << 3)    // Data timeout
#define  _SDMMC1_STA_CTIMEOUT                                (0x1 << 2)    // Command response timeout
#define  _SDMMC1_STA_DCRCFAIL                                (0x1 << 1)    // Data block sent/received (CRC check failed)
#define  _SDMMC1_STA_CCRCFAIL                                (0x1 << 0)    // Command response received (CRC check failed)
#define  _SDMMC1_ICR_CEATAENDC                               (0x1 << 23)    // CEATAEND flag clear bit
#define  _SDMMC1_ICR_SDIOITC                                 (0x1 << 22)    // SDIOIT flag clear bit
#define  _SDMMC1_ICR_DBCKENDC                                (0x1 << 10)    // DBCKEND flag clear bit
#define  _SDMMC1_ICR_STBITERRC                               (0x1 << 9)    // STBITERR flag clear bit
#define  _SDMMC1_ICR_DATAENDC                                (0x1 << 8)    // DATAEND flag clear bit
#define  _SDMMC1_ICR_CMDSENTC                                (0x1 << 7)    // CMDSENT flag clear bit
#define  _SDMMC1_ICR_CMDRENDC                                (0x1 << 6)    // CMDREND flag clear bit
#define  _SDMMC1_ICR_RXOVERRC                                (0x1 << 5)    // RXOVERR flag clear bit
#define  _SDMMC1_ICR_TXUNDERRC                               (0x1 << 4)    // TXUNDERR flag clear bit
#define  _SDMMC1_ICR_DTIMEOUTC                               (0x1 << 3)    // DTIMEOUT flag clear bit
#define  _SDMMC1_ICR_CTIMEOUTC                               (0x1 << 2)    // CTIMEOUT flag clear bit
#define  _SDMMC1_ICR_DCRCFAILC                               (0x1 << 1)    // DCRCFAIL flag clear bit
#define  _SDMMC1_ICR_CCRCFAILC                               (0x1 << 0)    // CCRCFAIL flag clear bit
#define  _SDMMC1_MASK_CEATAENDIE                             (0x1 << 23)    // CE-ATA command completion signal received interrupt enable
#define  _SDMMC1_MASK_SDIOITIE                               (0x1 << 22)    // SDIO mode interrupt received interrupt enable
#define  _SDMMC1_MASK_RXDAVLIE                               (0x1 << 21)    // Data available in Rx FIFO interrupt enable
#define  _SDMMC1_MASK_TXDAVLIE                               (0x1 << 20)    // Data available in Tx FIFO interrupt enable
#define  _SDMMC1_MASK_RXFIFOEIE                              (0x1 << 19)    // Rx FIFO empty interrupt enable
#define  _SDMMC1_MASK_TXFIFOEIE                              (0x1 << 18)    // Tx FIFO empty interrupt enable
#define  _SDMMC1_MASK_RXFIFOFIE                              (0x1 << 17)    // Rx FIFO full interrupt enable
#define  _SDMMC1_MASK_TXFIFOFIE                              (0x1 << 16)    // Tx FIFO full interrupt enable
#define  _SDMMC1_MASK_RXFIFOHFIE                             (0x1 << 15)    // Rx FIFO half full interrupt enable
#define  _SDMMC1_MASK_TXFIFOHEIE                             (0x1 << 14)    // Tx FIFO half empty interrupt enable
#define  _SDMMC1_MASK_RXACTIE                                (0x1 << 13)    // Data receive acting interrupt enable
#define  _SDMMC1_MASK_TXACTIE                                (0x1 << 12)    // Data transmit acting interrupt enable
#define  _SDMMC1_MASK_CMDACTIE                               (0x1 << 11)    // Command acting interrupt enable
#define  _SDMMC1_MASK_DBCKENDIE                              (0x1 << 10)    // Data block end interrupt enable
#define  _SDMMC1_MASK_STBITERRIE                             (0x1 << 9)    // Start bit error interrupt enable
#define  _SDMMC1_MASK_DATAENDIE                              (0x1 << 8)    // Data end interrupt enable
#define  _SDMMC1_MASK_CMDSENTIE                              (0x1 << 7)    // Command sent interrupt enable
#define  _SDMMC1_MASK_CMDRENDIE                              (0x1 << 6)    // Command response received interrupt enable
#define  _SDMMC1_MASK_RXOVERRIE                              (0x1 << 5)    // Rx FIFO overrun error interrupt enable
#define  _SDMMC1_MASK_TXUNDERRIE                             (0x1 << 4)    // Tx FIFO underrun error interrupt enable
#define  _SDMMC1_MASK_DTIMEOUTIE                             (0x1 << 3)    // Data timeout interrupt enable
#define  _SDMMC1_MASK_CTIMEOUTIE                             (0x1 << 2)    // Command timeout interrupt enable
#define  _SDMMC1_MASK_DCRCFAILIE                             (0x1 << 1)    // Data CRC fail interrupt enable
#define  _SDMMC1_MASK_CCRCFAILIE                             (0x1 << 0)    // Command CRC fail interrupt enable
#define  _SDMMC1_FIFOCNT_FIFOCOUNT                           (0xffffff << 0)    // Remaining number of words to be written to or read from the FIFO
#define  _SDMMC1_FIFO_FIFOData                               (0xffffffff << 0)    // Receive and transmit FIFO data
　
　drivers/inc/stm32f767xx_STK.h
#define Get_STK_CSR(FLAG)                    (*(uint32_t*)0xe000e010 |= FLAG)
#define Get_STK_RVR(FLAG)                    (*(uint32_t*)0xe000e014 |= FLAG)
#define Get_STK_CVR(FLAG)                    (*(uint32_t*)0xe000e018 |= FLAG)
#define Get_STK_CALIB(FLAG)                  (*(uint32_t*)0xe000e01c |= FLAG)
#define Set_STK_CSR(FLAG)                    (*(uint32_t*)0xe000e010 &= FLAG)
#define Clr_STK_CSR(FLAG)                    (*(uint32_t*)0xe000e010 |= ~FLAG)
#define Set_STK_RVR(FLAG)                    (*(uint32_t*)0xe000e014 &= FLAG)
#define Clr_STK_RVR(FLAG)                    (*(uint32_t*)0xe000e014 |= ~FLAG)
#define Set_STK_CVR(FLAG)                    (*(uint32_t*)0xe000e018 &= FLAG)
#define Clr_STK_CVR(FLAG)                    (*(uint32_t*)0xe000e018 |= ~FLAG)
#define Set_STK_CALIB(FLAG)                  (*(uint32_t*)0xe000e01c &= FLAG)
#define Clr_STK_CALIB(FLAG)                  (*(uint32_t*)0xe000e01c |= ~FLAG)
#define  _STK_CSR_ENABLE                                     (0x1 << 0)    // Counter enable
#define  _STK_CSR_TICKINT                                    (0x1 << 1)    // SysTick exception request enable
#define  _STK_CSR_CLKSOURCE                                  (0x1 << 2)    // Clock source selection
#define  _STK_CSR_COUNTFLAG                                  (0x1 << 16)    // COUNTFLAG
#define  _STK_RVR_RELOAD                                     (0xffffff << 0)    // RELOAD value
#define  _STK_CVR_CURRENT                                    (0xffffff << 0)    // Current counter value
#define  _STK_CALIB_TENMS                                    (0xffffff << 0)    // Calibration value
#define  _STK_CALIB_SKEW                                     (0x1 << 30)    // SKEW flag: Indicates whether the TENMS value is exact
#define  _STK_CALIB_NOREF                                    (0x1 << 31)    // NOREF flag. Reads as zero
　
　drivers/inc/stm32f767xx_DMA.h
#define Get_DMA1_LISR(FLAG)                  (*(uint32_t*)0x40026000 |= FLAG)
#define Get_DMA1_HISR(FLAG)                  (*(uint32_t*)0x40026004 |= FLAG)
#define Get_DMA1_LIFCR(FLAG)                 (*(uint32_t*)0x40026008 |= FLAG)
#define Get_DMA1_HIFCR(FLAG)                 (*(uint32_t*)0x4002600c |= FLAG)
#define Get_DMA1_S0CR(FLAG)                  (*(uint32_t*)0x40026010 |= FLAG)
#define Get_DMA1_S0NDTR(FLAG)                (*(uint32_t*)0x40026014 |= FLAG)
#define Get_DMA1_S0PAR(FLAG)                 (*(uint32_t*)0x40026018 |= FLAG)
#define Get_DMA1_S0M0AR(FLAG)                (*(uint32_t*)0x4002601c |= FLAG)
#define Get_DMA1_S0M1AR(FLAG)                (*(uint32_t*)0x40026020 |= FLAG)
#define Get_DMA1_S0FCR(FLAG)                 (*(uint32_t*)0x40026024 |= FLAG)
#define Get_DMA1_S1CR(FLAG)                  (*(uint32_t*)0x40026028 |= FLAG)
#define Get_DMA1_S1NDTR(FLAG)                (*(uint32_t*)0x4002602c |= FLAG)
#define Get_DMA1_S1PAR(FLAG)                 (*(uint32_t*)0x40026030 |= FLAG)
#define Get_DMA1_S1M0AR(FLAG)                (*(uint32_t*)0x40026034 |= FLAG)
#define Get_DMA1_S1M1AR(FLAG)                (*(uint32_t*)0x40026038 |= FLAG)
#define Get_DMA1_S1FCR(FLAG)                 (*(uint32_t*)0x4002603c |= FLAG)
#define Get_DMA1_S2CR(FLAG)                  (*(uint32_t*)0x40026040 |= FLAG)
#define Get_DMA1_S2NDTR(FLAG)                (*(uint32_t*)0x40026044 |= FLAG)
#define Get_DMA1_S2PAR(FLAG)                 (*(uint32_t*)0x40026048 |= FLAG)
#define Get_DMA1_S2M0AR(FLAG)                (*(uint32_t*)0x4002604c |= FLAG)
#define Get_DMA1_S2M1AR(FLAG)                (*(uint32_t*)0x40026050 |= FLAG)
#define Get_DMA1_S2FCR(FLAG)                 (*(uint32_t*)0x40026054 |= FLAG)
#define Get_DMA1_S3CR(FLAG)                  (*(uint32_t*)0x40026058 |= FLAG)
#define Get_DMA1_S3NDTR(FLAG)                (*(uint32_t*)0x4002605c |= FLAG)
#define Get_DMA1_S3PAR(FLAG)                 (*(uint32_t*)0x40026060 |= FLAG)
#define Get_DMA1_S3M0AR(FLAG)                (*(uint32_t*)0x40026064 |= FLAG)
#define Get_DMA1_S3M1AR(FLAG)                (*(uint32_t*)0x40026068 |= FLAG)
#define Get_DMA1_S3FCR(FLAG)                 (*(uint32_t*)0x4002606c |= FLAG)
#define Get_DMA1_S4CR(FLAG)                  (*(uint32_t*)0x40026070 |= FLAG)
#define Get_DMA1_S4NDTR(FLAG)                (*(uint32_t*)0x40026074 |= FLAG)
#define Get_DMA1_S4PAR(FLAG)                 (*(uint32_t*)0x40026078 |= FLAG)
#define Get_DMA1_S4M0AR(FLAG)                (*(uint32_t*)0x4002607c |= FLAG)
#define Get_DMA1_S4M1AR(FLAG)                (*(uint32_t*)0x40026080 |= FLAG)
#define Get_DMA1_S4FCR(FLAG)                 (*(uint32_t*)0x40026084 |= FLAG)
#define Get_DMA1_S5CR(FLAG)                  (*(uint32_t*)0x40026088 |= FLAG)
#define Get_DMA1_S5NDTR(FLAG)                (*(uint32_t*)0x4002608c |= FLAG)
#define Get_DMA1_S5PAR(FLAG)                 (*(uint32_t*)0x40026090 |= FLAG)
#define Get_DMA1_S5M0AR(FLAG)                (*(uint32_t*)0x40026094 |= FLAG)
#define Get_DMA1_S5M1AR(FLAG)                (*(uint32_t*)0x40026098 |= FLAG)
#define Get_DMA1_S5FCR(FLAG)                 (*(uint32_t*)0x4002609c |= FLAG)
#define Get_DMA1_S6CR(FLAG)                  (*(uint32_t*)0x400260a0 |= FLAG)
#define Get_DMA1_S6NDTR(FLAG)                (*(uint32_t*)0x400260a4 |= FLAG)
#define Get_DMA1_S6PAR(FLAG)                 (*(uint32_t*)0x400260a8 |= FLAG)
#define Get_DMA1_S6M0AR(FLAG)                (*(uint32_t*)0x400260ac |= FLAG)
#define Get_DMA1_S6M1AR(FLAG)                (*(uint32_t*)0x400260b0 |= FLAG)
#define Get_DMA1_S6FCR(FLAG)                 (*(uint32_t*)0x400260b4 |= FLAG)
#define Get_DMA1_S7CR(FLAG)                  (*(uint32_t*)0x400260b8 |= FLAG)
#define Get_DMA1_S7NDTR(FLAG)                (*(uint32_t*)0x400260bc |= FLAG)
#define Get_DMA1_S7PAR(FLAG)                 (*(uint32_t*)0x400260c0 |= FLAG)
#define Get_DMA1_S7M0AR(FLAG)                (*(uint32_t*)0x400260c4 |= FLAG)
#define Get_DMA1_S7M1AR(FLAG)                (*(uint32_t*)0x400260c8 |= FLAG)
#define Get_DMA1_S7FCR(FLAG)                 (*(uint32_t*)0x400260cc |= FLAG)
#define Get_DMA2_LISR(FLAG)                  (*(uint32_t*)0x40026400 |= FLAG)
#define Get_DMA2_HISR(FLAG)                  (*(uint32_t*)0x40026404 |= FLAG)
#define Get_DMA2_LIFCR(FLAG)                 (*(uint32_t*)0x40026408 |= FLAG)
#define Get_DMA2_HIFCR(FLAG)                 (*(uint32_t*)0x4002640c |= FLAG)
#define Get_DMA2_S0CR(FLAG)                  (*(uint32_t*)0x40026410 |= FLAG)
#define Get_DMA2_S0NDTR(FLAG)                (*(uint32_t*)0x40026414 |= FLAG)
#define Get_DMA2_S0PAR(FLAG)                 (*(uint32_t*)0x40026418 |= FLAG)
#define Get_DMA2_S0M0AR(FLAG)                (*(uint32_t*)0x4002641c |= FLAG)
#define Get_DMA2_S0M1AR(FLAG)                (*(uint32_t*)0x40026420 |= FLAG)
#define Get_DMA2_S0FCR(FLAG)                 (*(uint32_t*)0x40026424 |= FLAG)
#define Get_DMA2_S1CR(FLAG)                  (*(uint32_t*)0x40026428 |= FLAG)
#define Get_DMA2_S1NDTR(FLAG)                (*(uint32_t*)0x4002642c |= FLAG)
#define Get_DMA2_S1PAR(FLAG)                 (*(uint32_t*)0x40026430 |= FLAG)
#define Get_DMA2_S1M0AR(FLAG)                (*(uint32_t*)0x40026434 |= FLAG)
#define Get_DMA2_S1M1AR(FLAG)                (*(uint32_t*)0x40026438 |= FLAG)
#define Get_DMA2_S1FCR(FLAG)                 (*(uint32_t*)0x4002643c |= FLAG)
#define Get_DMA2_S2CR(FLAG)                  (*(uint32_t*)0x40026440 |= FLAG)
#define Get_DMA2_S2NDTR(FLAG)                (*(uint32_t*)0x40026444 |= FLAG)
#define Get_DMA2_S2PAR(FLAG)                 (*(uint32_t*)0x40026448 |= FLAG)
#define Get_DMA2_S2M0AR(FLAG)                (*(uint32_t*)0x4002644c |= FLAG)
#define Get_DMA2_S2M1AR(FLAG)                (*(uint32_t*)0x40026450 |= FLAG)
#define Get_DMA2_S2FCR(FLAG)                 (*(uint32_t*)0x40026454 |= FLAG)
#define Get_DMA2_S3CR(FLAG)                  (*(uint32_t*)0x40026458 |= FLAG)
#define Get_DMA2_S3NDTR(FLAG)                (*(uint32_t*)0x4002645c |= FLAG)
#define Get_DMA2_S3PAR(FLAG)                 (*(uint32_t*)0x40026460 |= FLAG)
#define Get_DMA2_S3M0AR(FLAG)                (*(uint32_t*)0x40026464 |= FLAG)
#define Get_DMA2_S3M1AR(FLAG)                (*(uint32_t*)0x40026468 |= FLAG)
#define Get_DMA2_S3FCR(FLAG)                 (*(uint32_t*)0x4002646c |= FLAG)
#define Get_DMA2_S4CR(FLAG)                  (*(uint32_t*)0x40026470 |= FLAG)
#define Get_DMA2_S4NDTR(FLAG)                (*(uint32_t*)0x40026474 |= FLAG)
#define Get_DMA2_S4PAR(FLAG)                 (*(uint32_t*)0x40026478 |= FLAG)
#define Get_DMA2_S4M0AR(FLAG)                (*(uint32_t*)0x4002647c |= FLAG)
#define Get_DMA2_S4M1AR(FLAG)                (*(uint32_t*)0x40026480 |= FLAG)
#define Get_DMA2_S4FCR(FLAG)                 (*(uint32_t*)0x40026484 |= FLAG)
#define Get_DMA2_S5CR(FLAG)                  (*(uint32_t*)0x40026488 |= FLAG)
#define Get_DMA2_S5NDTR(FLAG)                (*(uint32_t*)0x4002648c |= FLAG)
#define Get_DMA2_S5PAR(FLAG)                 (*(uint32_t*)0x40026490 |= FLAG)
#define Get_DMA2_S5M0AR(FLAG)                (*(uint32_t*)0x40026494 |= FLAG)
#define Get_DMA2_S5M1AR(FLAG)                (*(uint32_t*)0x40026498 |= FLAG)
#define Get_DMA2_S5FCR(FLAG)                 (*(uint32_t*)0x4002649c |= FLAG)
#define Get_DMA2_S6CR(FLAG)                  (*(uint32_t*)0x400264a0 |= FLAG)
#define Get_DMA2_S6NDTR(FLAG)                (*(uint32_t*)0x400264a4 |= FLAG)
#define Get_DMA2_S6PAR(FLAG)                 (*(uint32_t*)0x400264a8 |= FLAG)
#define Get_DMA2_S6M0AR(FLAG)                (*(uint32_t*)0x400264ac |= FLAG)
#define Get_DMA2_S6M1AR(FLAG)                (*(uint32_t*)0x400264b0 |= FLAG)
#define Get_DMA2_S6FCR(FLAG)                 (*(uint32_t*)0x400264b4 |= FLAG)
#define Get_DMA2_S7CR(FLAG)                  (*(uint32_t*)0x400264b8 |= FLAG)
#define Get_DMA2_S7NDTR(FLAG)                (*(uint32_t*)0x400264bc |= FLAG)
#define Get_DMA2_S7PAR(FLAG)                 (*(uint32_t*)0x400264c0 |= FLAG)
#define Get_DMA2_S7M0AR(FLAG)                (*(uint32_t*)0x400264c4 |= FLAG)
#define Get_DMA2_S7M1AR(FLAG)                (*(uint32_t*)0x400264c8 |= FLAG)
#define Get_DMA2_S7FCR(FLAG)                 (*(uint32_t*)0x400264cc |= FLAG)
#define Set_DMA1_LISR(FLAG)                  (*(uint32_t*)0x40026000 &= FLAG)
#define Clr_DMA1_LISR(FLAG)                  (*(uint32_t*)0x40026000 |= ~FLAG)
#define Set_DMA1_HISR(FLAG)                  (*(uint32_t*)0x40026004 &= FLAG)
#define Clr_DMA1_HISR(FLAG)                  (*(uint32_t*)0x40026004 |= ~FLAG)
#define Set_DMA1_LIFCR(FLAG)                 (*(uint32_t*)0x40026008 &= FLAG)
#define Clr_DMA1_LIFCR(FLAG)                 (*(uint32_t*)0x40026008 |= ~FLAG)
#define Set_DMA1_HIFCR(FLAG)                 (*(uint32_t*)0x4002600c &= FLAG)
#define Clr_DMA1_HIFCR(FLAG)                 (*(uint32_t*)0x4002600c |= ~FLAG)
#define Set_DMA1_S0CR(FLAG)                  (*(uint32_t*)0x40026010 &= FLAG)
#define Clr_DMA1_S0CR(FLAG)                  (*(uint32_t*)0x40026010 |= ~FLAG)
#define Set_DMA1_S0NDTR(FLAG)                (*(uint32_t*)0x40026014 &= FLAG)
#define Clr_DMA1_S0NDTR(FLAG)                (*(uint32_t*)0x40026014 |= ~FLAG)
#define Set_DMA1_S0PAR(FLAG)                 (*(uint32_t*)0x40026018 &= FLAG)
#define Clr_DMA1_S0PAR(FLAG)                 (*(uint32_t*)0x40026018 |= ~FLAG)
#define Set_DMA1_S0M0AR(FLAG)                (*(uint32_t*)0x4002601c &= FLAG)
#define Clr_DMA1_S0M0AR(FLAG)                (*(uint32_t*)0x4002601c |= ~FLAG)
#define Set_DMA1_S0M1AR(FLAG)                (*(uint32_t*)0x40026020 &= FLAG)
#define Clr_DMA1_S0M1AR(FLAG)                (*(uint32_t*)0x40026020 |= ~FLAG)
#define Set_DMA1_S0FCR(FLAG)                 (*(uint32_t*)0x40026024 &= FLAG)
#define Clr_DMA1_S0FCR(FLAG)                 (*(uint32_t*)0x40026024 |= ~FLAG)
#define Set_DMA1_S1CR(FLAG)                  (*(uint32_t*)0x40026028 &= FLAG)
#define Clr_DMA1_S1CR(FLAG)                  (*(uint32_t*)0x40026028 |= ~FLAG)
#define Set_DMA1_S1NDTR(FLAG)                (*(uint32_t*)0x4002602c &= FLAG)
#define Clr_DMA1_S1NDTR(FLAG)                (*(uint32_t*)0x4002602c |= ~FLAG)
#define Set_DMA1_S1PAR(FLAG)                 (*(uint32_t*)0x40026030 &= FLAG)
#define Clr_DMA1_S1PAR(FLAG)                 (*(uint32_t*)0x40026030 |= ~FLAG)
#define Set_DMA1_S1M0AR(FLAG)                (*(uint32_t*)0x40026034 &= FLAG)
#define Clr_DMA1_S1M0AR(FLAG)                (*(uint32_t*)0x40026034 |= ~FLAG)
#define Set_DMA1_S1M1AR(FLAG)                (*(uint32_t*)0x40026038 &= FLAG)
#define Clr_DMA1_S1M1AR(FLAG)                (*(uint32_t*)0x40026038 |= ~FLAG)
#define Set_DMA1_S1FCR(FLAG)                 (*(uint32_t*)0x4002603c &= FLAG)
#define Clr_DMA1_S1FCR(FLAG)                 (*(uint32_t*)0x4002603c |= ~FLAG)
#define Set_DMA1_S2CR(FLAG)                  (*(uint32_t*)0x40026040 &= FLAG)
#define Clr_DMA1_S2CR(FLAG)                  (*(uint32_t*)0x40026040 |= ~FLAG)
#define Set_DMA1_S2NDTR(FLAG)                (*(uint32_t*)0x40026044 &= FLAG)
#define Clr_DMA1_S2NDTR(FLAG)                (*(uint32_t*)0x40026044 |= ~FLAG)
#define Set_DMA1_S2PAR(FLAG)                 (*(uint32_t*)0x40026048 &= FLAG)
#define Clr_DMA1_S2PAR(FLAG)                 (*(uint32_t*)0x40026048 |= ~FLAG)
#define Set_DMA1_S2M0AR(FLAG)                (*(uint32_t*)0x4002604c &= FLAG)
#define Clr_DMA1_S2M0AR(FLAG)                (*(uint32_t*)0x4002604c |= ~FLAG)
#define Set_DMA1_S2M1AR(FLAG)                (*(uint32_t*)0x40026050 &= FLAG)
#define Clr_DMA1_S2M1AR(FLAG)                (*(uint32_t*)0x40026050 |= ~FLAG)
#define Set_DMA1_S2FCR(FLAG)                 (*(uint32_t*)0x40026054 &= FLAG)
#define Clr_DMA1_S2FCR(FLAG)                 (*(uint32_t*)0x40026054 |= ~FLAG)
#define Set_DMA1_S3CR(FLAG)                  (*(uint32_t*)0x40026058 &= FLAG)
#define Clr_DMA1_S3CR(FLAG)                  (*(uint32_t*)0x40026058 |= ~FLAG)
#define Set_DMA1_S3NDTR(FLAG)                (*(uint32_t*)0x4002605c &= FLAG)
#define Clr_DMA1_S3NDTR(FLAG)                (*(uint32_t*)0x4002605c |= ~FLAG)
#define Set_DMA1_S3PAR(FLAG)                 (*(uint32_t*)0x40026060 &= FLAG)
#define Clr_DMA1_S3PAR(FLAG)                 (*(uint32_t*)0x40026060 |= ~FLAG)
#define Set_DMA1_S3M0AR(FLAG)                (*(uint32_t*)0x40026064 &= FLAG)
#define Clr_DMA1_S3M0AR(FLAG)                (*(uint32_t*)0x40026064 |= ~FLAG)
#define Set_DMA1_S3M1AR(FLAG)                (*(uint32_t*)0x40026068 &= FLAG)
#define Clr_DMA1_S3M1AR(FLAG)                (*(uint32_t*)0x40026068 |= ~FLAG)
#define Set_DMA1_S3FCR(FLAG)                 (*(uint32_t*)0x4002606c &= FLAG)
#define Clr_DMA1_S3FCR(FLAG)                 (*(uint32_t*)0x4002606c |= ~FLAG)
#define Set_DMA1_S4CR(FLAG)                  (*(uint32_t*)0x40026070 &= FLAG)
#define Clr_DMA1_S4CR(FLAG)                  (*(uint32_t*)0x40026070 |= ~FLAG)
#define Set_DMA1_S4NDTR(FLAG)                (*(uint32_t*)0x40026074 &= FLAG)
#define Clr_DMA1_S4NDTR(FLAG)                (*(uint32_t*)0x40026074 |= ~FLAG)
#define Set_DMA1_S4PAR(FLAG)                 (*(uint32_t*)0x40026078 &= FLAG)
#define Clr_DMA1_S4PAR(FLAG)                 (*(uint32_t*)0x40026078 |= ~FLAG)
#define Set_DMA1_S4M0AR(FLAG)                (*(uint32_t*)0x4002607c &= FLAG)
#define Clr_DMA1_S4M0AR(FLAG)                (*(uint32_t*)0x4002607c |= ~FLAG)
#define Set_DMA1_S4M1AR(FLAG)                (*(uint32_t*)0x40026080 &= FLAG)
#define Clr_DMA1_S4M1AR(FLAG)                (*(uint32_t*)0x40026080 |= ~FLAG)
#define Set_DMA1_S4FCR(FLAG)                 (*(uint32_t*)0x40026084 &= FLAG)
#define Clr_DMA1_S4FCR(FLAG)                 (*(uint32_t*)0x40026084 |= ~FLAG)
#define Set_DMA1_S5CR(FLAG)                  (*(uint32_t*)0x40026088 &= FLAG)
#define Clr_DMA1_S5CR(FLAG)                  (*(uint32_t*)0x40026088 |= ~FLAG)
#define Set_DMA1_S5NDTR(FLAG)                (*(uint32_t*)0x4002608c &= FLAG)
#define Clr_DMA1_S5NDTR(FLAG)                (*(uint32_t*)0x4002608c |= ~FLAG)
#define Set_DMA1_S5PAR(FLAG)                 (*(uint32_t*)0x40026090 &= FLAG)
#define Clr_DMA1_S5PAR(FLAG)                 (*(uint32_t*)0x40026090 |= ~FLAG)
#define Set_DMA1_S5M0AR(FLAG)                (*(uint32_t*)0x40026094 &= FLAG)
#define Clr_DMA1_S5M0AR(FLAG)                (*(uint32_t*)0x40026094 |= ~FLAG)
#define Set_DMA1_S5M1AR(FLAG)                (*(uint32_t*)0x40026098 &= FLAG)
#define Clr_DMA1_S5M1AR(FLAG)                (*(uint32_t*)0x40026098 |= ~FLAG)
#define Set_DMA1_S5FCR(FLAG)                 (*(uint32_t*)0x4002609c &= FLAG)
#define Clr_DMA1_S5FCR(FLAG)                 (*(uint32_t*)0x4002609c |= ~FLAG)
#define Set_DMA1_S6CR(FLAG)                  (*(uint32_t*)0x400260a0 &= FLAG)
#define Clr_DMA1_S6CR(FLAG)                  (*(uint32_t*)0x400260a0 |= ~FLAG)
#define Set_DMA1_S6NDTR(FLAG)                (*(uint32_t*)0x400260a4 &= FLAG)
#define Clr_DMA1_S6NDTR(FLAG)                (*(uint32_t*)0x400260a4 |= ~FLAG)
#define Set_DMA1_S6PAR(FLAG)                 (*(uint32_t*)0x400260a8 &= FLAG)
#define Clr_DMA1_S6PAR(FLAG)                 (*(uint32_t*)0x400260a8 |= ~FLAG)
#define Set_DMA1_S6M0AR(FLAG)                (*(uint32_t*)0x400260ac &= FLAG)
#define Clr_DMA1_S6M0AR(FLAG)                (*(uint32_t*)0x400260ac |= ~FLAG)
#define Set_DMA1_S6M1AR(FLAG)                (*(uint32_t*)0x400260b0 &= FLAG)
#define Clr_DMA1_S6M1AR(FLAG)                (*(uint32_t*)0x400260b0 |= ~FLAG)
#define Set_DMA1_S6FCR(FLAG)                 (*(uint32_t*)0x400260b4 &= FLAG)
#define Clr_DMA1_S6FCR(FLAG)                 (*(uint32_t*)0x400260b4 |= ~FLAG)
#define Set_DMA1_S7CR(FLAG)                  (*(uint32_t*)0x400260b8 &= FLAG)
#define Clr_DMA1_S7CR(FLAG)                  (*(uint32_t*)0x400260b8 |= ~FLAG)
#define Set_DMA1_S7NDTR(FLAG)                (*(uint32_t*)0x400260bc &= FLAG)
#define Clr_DMA1_S7NDTR(FLAG)                (*(uint32_t*)0x400260bc |= ~FLAG)
#define Set_DMA1_S7PAR(FLAG)                 (*(uint32_t*)0x400260c0 &= FLAG)
#define Clr_DMA1_S7PAR(FLAG)                 (*(uint32_t*)0x400260c0 |= ~FLAG)
#define Set_DMA1_S7M0AR(FLAG)                (*(uint32_t*)0x400260c4 &= FLAG)
#define Clr_DMA1_S7M0AR(FLAG)                (*(uint32_t*)0x400260c4 |= ~FLAG)
#define Set_DMA1_S7M1AR(FLAG)                (*(uint32_t*)0x400260c8 &= FLAG)
#define Clr_DMA1_S7M1AR(FLAG)                (*(uint32_t*)0x400260c8 |= ~FLAG)
#define Set_DMA1_S7FCR(FLAG)                 (*(uint32_t*)0x400260cc &= FLAG)
#define Clr_DMA1_S7FCR(FLAG)                 (*(uint32_t*)0x400260cc |= ~FLAG)
#define Set_DMA2_LISR(FLAG)                  (*(uint32_t*)0x40026400 &= FLAG)
#define Clr_DMA2_LISR(FLAG)                  (*(uint32_t*)0x40026400 |= ~FLAG)
#define Set_DMA2_HISR(FLAG)                  (*(uint32_t*)0x40026404 &= FLAG)
#define Clr_DMA2_HISR(FLAG)                  (*(uint32_t*)0x40026404 |= ~FLAG)
#define Set_DMA2_LIFCR(FLAG)                 (*(uint32_t*)0x40026408 &= FLAG)
#define Clr_DMA2_LIFCR(FLAG)                 (*(uint32_t*)0x40026408 |= ~FLAG)
#define Set_DMA2_HIFCR(FLAG)                 (*(uint32_t*)0x4002640c &= FLAG)
#define Clr_DMA2_HIFCR(FLAG)                 (*(uint32_t*)0x4002640c |= ~FLAG)
#define Set_DMA2_S0CR(FLAG)                  (*(uint32_t*)0x40026410 &= FLAG)
#define Clr_DMA2_S0CR(FLAG)                  (*(uint32_t*)0x40026410 |= ~FLAG)
#define Set_DMA2_S0NDTR(FLAG)                (*(uint32_t*)0x40026414 &= FLAG)
#define Clr_DMA2_S0NDTR(FLAG)                (*(uint32_t*)0x40026414 |= ~FLAG)
#define Set_DMA2_S0PAR(FLAG)                 (*(uint32_t*)0x40026418 &= FLAG)
#define Clr_DMA2_S0PAR(FLAG)                 (*(uint32_t*)0x40026418 |= ~FLAG)
#define Set_DMA2_S0M0AR(FLAG)                (*(uint32_t*)0x4002641c &= FLAG)
#define Clr_DMA2_S0M0AR(FLAG)                (*(uint32_t*)0x4002641c |= ~FLAG)
#define Set_DMA2_S0M1AR(FLAG)                (*(uint32_t*)0x40026420 &= FLAG)
#define Clr_DMA2_S0M1AR(FLAG)                (*(uint32_t*)0x40026420 |= ~FLAG)
#define Set_DMA2_S0FCR(FLAG)                 (*(uint32_t*)0x40026424 &= FLAG)
#define Clr_DMA2_S0FCR(FLAG)                 (*(uint32_t*)0x40026424 |= ~FLAG)
#define Set_DMA2_S1CR(FLAG)                  (*(uint32_t*)0x40026428 &= FLAG)
#define Clr_DMA2_S1CR(FLAG)                  (*(uint32_t*)0x40026428 |= ~FLAG)
#define Set_DMA2_S1NDTR(FLAG)                (*(uint32_t*)0x4002642c &= FLAG)
#define Clr_DMA2_S1NDTR(FLAG)                (*(uint32_t*)0x4002642c |= ~FLAG)
#define Set_DMA2_S1PAR(FLAG)                 (*(uint32_t*)0x40026430 &= FLAG)
#define Clr_DMA2_S1PAR(FLAG)                 (*(uint32_t*)0x40026430 |= ~FLAG)
#define Set_DMA2_S1M0AR(FLAG)                (*(uint32_t*)0x40026434 &= FLAG)
#define Clr_DMA2_S1M0AR(FLAG)                (*(uint32_t*)0x40026434 |= ~FLAG)
#define Set_DMA2_S1M1AR(FLAG)                (*(uint32_t*)0x40026438 &= FLAG)
#define Clr_DMA2_S1M1AR(FLAG)                (*(uint32_t*)0x40026438 |= ~FLAG)
#define Set_DMA2_S1FCR(FLAG)                 (*(uint32_t*)0x4002643c &= FLAG)
#define Clr_DMA2_S1FCR(FLAG)                 (*(uint32_t*)0x4002643c |= ~FLAG)
#define Set_DMA2_S2CR(FLAG)                  (*(uint32_t*)0x40026440 &= FLAG)
#define Clr_DMA2_S2CR(FLAG)                  (*(uint32_t*)0x40026440 |= ~FLAG)
#define Set_DMA2_S2NDTR(FLAG)                (*(uint32_t*)0x40026444 &= FLAG)
#define Clr_DMA2_S2NDTR(FLAG)                (*(uint32_t*)0x40026444 |= ~FLAG)
#define Set_DMA2_S2PAR(FLAG)                 (*(uint32_t*)0x40026448 &= FLAG)
#define Clr_DMA2_S2PAR(FLAG)                 (*(uint32_t*)0x40026448 |= ~FLAG)
#define Set_DMA2_S2M0AR(FLAG)                (*(uint32_t*)0x4002644c &= FLAG)
#define Clr_DMA2_S2M0AR(FLAG)                (*(uint32_t*)0x4002644c |= ~FLAG)
#define Set_DMA2_S2M1AR(FLAG)                (*(uint32_t*)0x40026450 &= FLAG)
#define Clr_DMA2_S2M1AR(FLAG)                (*(uint32_t*)0x40026450 |= ~FLAG)
#define Set_DMA2_S2FCR(FLAG)                 (*(uint32_t*)0x40026454 &= FLAG)
#define Clr_DMA2_S2FCR(FLAG)                 (*(uint32_t*)0x40026454 |= ~FLAG)
#define Set_DMA2_S3CR(FLAG)                  (*(uint32_t*)0x40026458 &= FLAG)
#define Clr_DMA2_S3CR(FLAG)                  (*(uint32_t*)0x40026458 |= ~FLAG)
#define Set_DMA2_S3NDTR(FLAG)                (*(uint32_t*)0x4002645c &= FLAG)
#define Clr_DMA2_S3NDTR(FLAG)                (*(uint32_t*)0x4002645c |= ~FLAG)
#define Set_DMA2_S3PAR(FLAG)                 (*(uint32_t*)0x40026460 &= FLAG)
#define Clr_DMA2_S3PAR(FLAG)                 (*(uint32_t*)0x40026460 |= ~FLAG)
#define Set_DMA2_S3M0AR(FLAG)                (*(uint32_t*)0x40026464 &= FLAG)
#define Clr_DMA2_S3M0AR(FLAG)                (*(uint32_t*)0x40026464 |= ~FLAG)
#define Set_DMA2_S3M1AR(FLAG)                (*(uint32_t*)0x40026468 &= FLAG)
#define Clr_DMA2_S3M1AR(FLAG)                (*(uint32_t*)0x40026468 |= ~FLAG)
#define Set_DMA2_S3FCR(FLAG)                 (*(uint32_t*)0x4002646c &= FLAG)
#define Clr_DMA2_S3FCR(FLAG)                 (*(uint32_t*)0x4002646c |= ~FLAG)
#define Set_DMA2_S4CR(FLAG)                  (*(uint32_t*)0x40026470 &= FLAG)
#define Clr_DMA2_S4CR(FLAG)                  (*(uint32_t*)0x40026470 |= ~FLAG)
#define Set_DMA2_S4NDTR(FLAG)                (*(uint32_t*)0x40026474 &= FLAG)
#define Clr_DMA2_S4NDTR(FLAG)                (*(uint32_t*)0x40026474 |= ~FLAG)
#define Set_DMA2_S4PAR(FLAG)                 (*(uint32_t*)0x40026478 &= FLAG)
#define Clr_DMA2_S4PAR(FLAG)                 (*(uint32_t*)0x40026478 |= ~FLAG)
#define Set_DMA2_S4M0AR(FLAG)                (*(uint32_t*)0x4002647c &= FLAG)
#define Clr_DMA2_S4M0AR(FLAG)                (*(uint32_t*)0x4002647c |= ~FLAG)
#define Set_DMA2_S4M1AR(FLAG)                (*(uint32_t*)0x40026480 &= FLAG)
#define Clr_DMA2_S4M1AR(FLAG)                (*(uint32_t*)0x40026480 |= ~FLAG)
#define Set_DMA2_S4FCR(FLAG)                 (*(uint32_t*)0x40026484 &= FLAG)
#define Clr_DMA2_S4FCR(FLAG)                 (*(uint32_t*)0x40026484 |= ~FLAG)
#define Set_DMA2_S5CR(FLAG)                  (*(uint32_t*)0x40026488 &= FLAG)
#define Clr_DMA2_S5CR(FLAG)                  (*(uint32_t*)0x40026488 |= ~FLAG)
#define Set_DMA2_S5NDTR(FLAG)                (*(uint32_t*)0x4002648c &= FLAG)
#define Clr_DMA2_S5NDTR(FLAG)                (*(uint32_t*)0x4002648c |= ~FLAG)
#define Set_DMA2_S5PAR(FLAG)                 (*(uint32_t*)0x40026490 &= FLAG)
#define Clr_DMA2_S5PAR(FLAG)                 (*(uint32_t*)0x40026490 |= ~FLAG)
#define Set_DMA2_S5M0AR(FLAG)                (*(uint32_t*)0x40026494 &= FLAG)
#define Clr_DMA2_S5M0AR(FLAG)                (*(uint32_t*)0x40026494 |= ~FLAG)
#define Set_DMA2_S5M1AR(FLAG)                (*(uint32_t*)0x40026498 &= FLAG)
#define Clr_DMA2_S5M1AR(FLAG)                (*(uint32_t*)0x40026498 |= ~FLAG)
#define Set_DMA2_S5FCR(FLAG)                 (*(uint32_t*)0x4002649c &= FLAG)
#define Clr_DMA2_S5FCR(FLAG)                 (*(uint32_t*)0x4002649c |= ~FLAG)
#define Set_DMA2_S6CR(FLAG)                  (*(uint32_t*)0x400264a0 &= FLAG)
#define Clr_DMA2_S6CR(FLAG)                  (*(uint32_t*)0x400264a0 |= ~FLAG)
#define Set_DMA2_S6NDTR(FLAG)                (*(uint32_t*)0x400264a4 &= FLAG)
#define Clr_DMA2_S6NDTR(FLAG)                (*(uint32_t*)0x400264a4 |= ~FLAG)
#define Set_DMA2_S6PAR(FLAG)                 (*(uint32_t*)0x400264a8 &= FLAG)
#define Clr_DMA2_S6PAR(FLAG)                 (*(uint32_t*)0x400264a8 |= ~FLAG)
#define Set_DMA2_S6M0AR(FLAG)                (*(uint32_t*)0x400264ac &= FLAG)
#define Clr_DMA2_S6M0AR(FLAG)                (*(uint32_t*)0x400264ac |= ~FLAG)
#define Set_DMA2_S6M1AR(FLAG)                (*(uint32_t*)0x400264b0 &= FLAG)
#define Clr_DMA2_S6M1AR(FLAG)                (*(uint32_t*)0x400264b0 |= ~FLAG)
#define Set_DMA2_S6FCR(FLAG)                 (*(uint32_t*)0x400264b4 &= FLAG)
#define Clr_DMA2_S6FCR(FLAG)                 (*(uint32_t*)0x400264b4 |= ~FLAG)
#define Set_DMA2_S7CR(FLAG)                  (*(uint32_t*)0x400264b8 &= FLAG)
#define Clr_DMA2_S7CR(FLAG)                  (*(uint32_t*)0x400264b8 |= ~FLAG)
#define Set_DMA2_S7NDTR(FLAG)                (*(uint32_t*)0x400264bc &= FLAG)
#define Clr_DMA2_S7NDTR(FLAG)                (*(uint32_t*)0x400264bc |= ~FLAG)
#define Set_DMA2_S7PAR(FLAG)                 (*(uint32_t*)0x400264c0 &= FLAG)
#define Clr_DMA2_S7PAR(FLAG)                 (*(uint32_t*)0x400264c0 |= ~FLAG)
#define Set_DMA2_S7M0AR(FLAG)                (*(uint32_t*)0x400264c4 &= FLAG)
#define Clr_DMA2_S7M0AR(FLAG)                (*(uint32_t*)0x400264c4 |= ~FLAG)
#define Set_DMA2_S7M1AR(FLAG)                (*(uint32_t*)0x400264c8 &= FLAG)
#define Clr_DMA2_S7M1AR(FLAG)                (*(uint32_t*)0x400264c8 |= ~FLAG)
#define Set_DMA2_S7FCR(FLAG)                 (*(uint32_t*)0x400264cc &= FLAG)
#define Clr_DMA2_S7FCR(FLAG)                 (*(uint32_t*)0x400264cc |= ~FLAG)
#define  _DMA1_LISR_TCIF3                                    (0x1 << 27)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LISR_HTIF3                                    (0x1 << 26)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA1_LISR_TEIF3                                    (0x1 << 25)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA1_LISR_DMEIF3                                   (0x1 << 24)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA1_LISR_FEIF3                                    (0x1 << 22)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA1_LISR_TCIF2                                    (0x1 << 21)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LISR_HTIF2                                    (0x1 << 20)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA1_LISR_TEIF2                                    (0x1 << 19)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA1_LISR_DMEIF2                                   (0x1 << 18)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA1_LISR_FEIF2                                    (0x1 << 16)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA1_LISR_TCIF1                                    (0x1 << 11)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LISR_HTIF1                                    (0x1 << 10)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA1_LISR_TEIF1                                    (0x1 << 9)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA1_LISR_DMEIF1                                   (0x1 << 8)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA1_LISR_FEIF1                                    (0x1 << 6)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA1_LISR_TCIF0                                    (0x1 << 5)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LISR_HTIF0                                    (0x1 << 4)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA1_LISR_TEIF0                                    (0x1 << 3)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA1_LISR_DMEIF0                                   (0x1 << 2)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA1_LISR_FEIF0                                    (0x1 << 0)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA1_HISR_TCIF7                                    (0x1 << 27)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA1_HISR_HTIF7                                    (0x1 << 26)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA1_HISR_TEIF7                                    (0x1 << 25)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA1_HISR_DMEIF7                                   (0x1 << 24)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA1_HISR_FEIF7                                    (0x1 << 22)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA1_HISR_TCIF6                                    (0x1 << 21)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA1_HISR_HTIF6                                    (0x1 << 20)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA1_HISR_TEIF6                                    (0x1 << 19)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA1_HISR_DMEIF6                                   (0x1 << 18)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA1_HISR_FEIF6                                    (0x1 << 16)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA1_HISR_TCIF5                                    (0x1 << 11)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA1_HISR_HTIF5                                    (0x1 << 10)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA1_HISR_TEIF5                                    (0x1 << 9)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA1_HISR_DMEIF5                                   (0x1 << 8)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA1_HISR_FEIF5                                    (0x1 << 6)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA1_HISR_TCIF4                                    (0x1 << 5)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA1_HISR_HTIF4                                    (0x1 << 4)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA1_HISR_TEIF4                                    (0x1 << 3)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA1_HISR_DMEIF4                                   (0x1 << 2)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA1_HISR_FEIF4                                    (0x1 << 0)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA1_LIFCR_CTCIF3                                  (0x1 << 27)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CHTIF3                                  (0x1 << 26)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTEIF3                                  (0x1 << 25)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CDMEIF3                                 (0x1 << 24)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CFEIF3                                  (0x1 << 22)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTCIF2                                  (0x1 << 21)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CHTIF2                                  (0x1 << 20)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTEIF2                                  (0x1 << 19)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CDMEIF2                                 (0x1 << 18)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CFEIF2                                  (0x1 << 16)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTCIF1                                  (0x1 << 11)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CHTIF1                                  (0x1 << 10)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTEIF1                                  (0x1 << 9)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CDMEIF1                                 (0x1 << 8)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CFEIF1                                  (0x1 << 6)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTCIF0                                  (0x1 << 5)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CHTIF0                                  (0x1 << 4)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CTEIF0                                  (0x1 << 3)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CDMEIF0                                 (0x1 << 2)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA1_LIFCR_CFEIF0                                  (0x1 << 0)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA1_HIFCR_CTCIF7                                  (0x1 << 27)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CHTIF7                                  (0x1 << 26)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTEIF7                                  (0x1 << 25)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CDMEIF7                                 (0x1 << 24)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CFEIF7                                  (0x1 << 22)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTCIF6                                  (0x1 << 21)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CHTIF6                                  (0x1 << 20)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTEIF6                                  (0x1 << 19)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CDMEIF6                                 (0x1 << 18)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CFEIF6                                  (0x1 << 16)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTCIF5                                  (0x1 << 11)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CHTIF5                                  (0x1 << 10)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTEIF5                                  (0x1 << 9)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CDMEIF5                                 (0x1 << 8)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CFEIF5                                  (0x1 << 6)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTCIF4                                  (0x1 << 5)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CHTIF4                                  (0x1 << 4)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CTEIF4                                  (0x1 << 3)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CDMEIF4                                 (0x1 << 2)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA1_HIFCR_CFEIF4                                  (0x1 << 0)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA1_S0CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S0CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S0CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S0CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S0CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S0CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S0CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S0CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S0CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S0CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S0CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S0CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S0CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S0CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S0CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S0CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S0CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S0CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S0CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S0NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S0PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S0M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S0M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S0FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S0FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S0FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S0FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S1CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S1CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S1CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S1CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S1CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S1CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S1CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S1CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S1CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S1CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S1CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S1CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S1CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S1CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S1CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S1CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S1CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S1CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S1CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S1CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S1NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S1PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S1M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S1M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S1FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S1FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S1FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S1FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S2CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S2CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S2CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S2CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S2CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S2CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S2CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S2CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S2CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S2CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S2CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S2CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S2CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S2CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S2CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S2CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S2CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S2CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S2CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S2CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S2NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S2PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S2M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S2M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S2FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S2FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S2FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S2FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S3CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S3CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S3CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S3CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S3CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S3CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S3CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S3CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S3CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S3CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S3CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S3CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S3CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S3CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S3CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S3CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S3CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S3CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S3CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S3CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S3NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S3PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S3M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S3M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S3FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S3FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S3FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S3FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S4CR_CHSEL                                    (0x7 << 25)    // Channel selection
#define  _DMA1_S4CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S4CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S4CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S4CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S4CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S4CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S4CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S4CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S4CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S4CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S4CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S4CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S4CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S4CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S4CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S4CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S4CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S4CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S4CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S4NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S4PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S4M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S4M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S4FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S4FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S4FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S4FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S5CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S5CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S5CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S5CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S5CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S5CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S5CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S5CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S5CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S5CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S5CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S5CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S5CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S5CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S5CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S5CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S5CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S5CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S5CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S5CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S5NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S5PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S5M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S5M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S5FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S5FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S5FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S5FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S6CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S6CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S6CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S6CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S6CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S6CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S6CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S6CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S6CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S6CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S6CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S6CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S6CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S6CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S6CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S6CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S6CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S6CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S6CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S6CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S6NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S6PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S6M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S6M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S6FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S6FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S6FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S6FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA1_S7CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA1_S7CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA1_S7CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA1_S7CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA1_S7CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA1_S7CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA1_S7CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA1_S7CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA1_S7CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA1_S7CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA1_S7CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA1_S7CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA1_S7CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA1_S7CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA1_S7CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA1_S7CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA1_S7CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA1_S7CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA1_S7CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA1_S7CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA1_S7NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA1_S7PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA1_S7M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA1_S7M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA1_S7FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA1_S7FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA1_S7FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA1_S7FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_LISR_TCIF3                                    (0x1 << 27)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LISR_HTIF3                                    (0x1 << 26)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA2_LISR_TEIF3                                    (0x1 << 25)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA2_LISR_DMEIF3                                   (0x1 << 24)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA2_LISR_FEIF3                                    (0x1 << 22)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA2_LISR_TCIF2                                    (0x1 << 21)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LISR_HTIF2                                    (0x1 << 20)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA2_LISR_TEIF2                                    (0x1 << 19)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA2_LISR_DMEIF2                                   (0x1 << 18)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA2_LISR_FEIF2                                    (0x1 << 16)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA2_LISR_TCIF1                                    (0x1 << 11)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LISR_HTIF1                                    (0x1 << 10)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA2_LISR_TEIF1                                    (0x1 << 9)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA2_LISR_DMEIF1                                   (0x1 << 8)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA2_LISR_FEIF1                                    (0x1 << 6)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA2_LISR_TCIF0                                    (0x1 << 5)    // Stream x transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LISR_HTIF0                                    (0x1 << 4)    // Stream x half transfer interrupt flag (x=3..0)
#define  _DMA2_LISR_TEIF0                                    (0x1 << 3)    // Stream x transfer error interrupt flag (x=3..0)
#define  _DMA2_LISR_DMEIF0                                   (0x1 << 2)    // Stream x direct mode error interrupt flag (x=3..0)
#define  _DMA2_LISR_FEIF0                                    (0x1 << 0)    // Stream x FIFO error interrupt flag (x=3..0)
#define  _DMA2_HISR_TCIF7                                    (0x1 << 27)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA2_HISR_HTIF7                                    (0x1 << 26)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA2_HISR_TEIF7                                    (0x1 << 25)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA2_HISR_DMEIF7                                   (0x1 << 24)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA2_HISR_FEIF7                                    (0x1 << 22)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA2_HISR_TCIF6                                    (0x1 << 21)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA2_HISR_HTIF6                                    (0x1 << 20)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA2_HISR_TEIF6                                    (0x1 << 19)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA2_HISR_DMEIF6                                   (0x1 << 18)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA2_HISR_FEIF6                                    (0x1 << 16)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA2_HISR_TCIF5                                    (0x1 << 11)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA2_HISR_HTIF5                                    (0x1 << 10)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA2_HISR_TEIF5                                    (0x1 << 9)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA2_HISR_DMEIF5                                   (0x1 << 8)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA2_HISR_FEIF5                                    (0x1 << 6)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA2_HISR_TCIF4                                    (0x1 << 5)    // Stream x transfer complete interrupt flag (x=7..4)
#define  _DMA2_HISR_HTIF4                                    (0x1 << 4)    // Stream x half transfer interrupt flag (x=7..4)
#define  _DMA2_HISR_TEIF4                                    (0x1 << 3)    // Stream x transfer error interrupt flag (x=7..4)
#define  _DMA2_HISR_DMEIF4                                   (0x1 << 2)    // Stream x direct mode error interrupt flag (x=7..4)
#define  _DMA2_HISR_FEIF4                                    (0x1 << 0)    // Stream x FIFO error interrupt flag (x=7..4)
#define  _DMA2_LIFCR_CTCIF3                                  (0x1 << 27)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CHTIF3                                  (0x1 << 26)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTEIF3                                  (0x1 << 25)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CDMEIF3                                 (0x1 << 24)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CFEIF3                                  (0x1 << 22)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTCIF2                                  (0x1 << 21)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CHTIF2                                  (0x1 << 20)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTEIF2                                  (0x1 << 19)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CDMEIF2                                 (0x1 << 18)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CFEIF2                                  (0x1 << 16)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTCIF1                                  (0x1 << 11)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CHTIF1                                  (0x1 << 10)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTEIF1                                  (0x1 << 9)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CDMEIF1                                 (0x1 << 8)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CFEIF1                                  (0x1 << 6)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTCIF0                                  (0x1 << 5)    // Stream x clear transfer complete interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CHTIF0                                  (0x1 << 4)    // Stream x clear half transfer interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CTEIF0                                  (0x1 << 3)    // Stream x clear transfer error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CDMEIF0                                 (0x1 << 2)    // Stream x clear direct mode error interrupt flag (x = 3..0)
#define  _DMA2_LIFCR_CFEIF0                                  (0x1 << 0)    // Stream x clear FIFO error interrupt flag (x = 3..0)
#define  _DMA2_HIFCR_CTCIF7                                  (0x1 << 27)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CHTIF7                                  (0x1 << 26)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTEIF7                                  (0x1 << 25)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CDMEIF7                                 (0x1 << 24)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CFEIF7                                  (0x1 << 22)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTCIF6                                  (0x1 << 21)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CHTIF6                                  (0x1 << 20)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTEIF6                                  (0x1 << 19)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CDMEIF6                                 (0x1 << 18)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CFEIF6                                  (0x1 << 16)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTCIF5                                  (0x1 << 11)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CHTIF5                                  (0x1 << 10)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTEIF5                                  (0x1 << 9)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CDMEIF5                                 (0x1 << 8)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CFEIF5                                  (0x1 << 6)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTCIF4                                  (0x1 << 5)    // Stream x clear transfer complete interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CHTIF4                                  (0x1 << 4)    // Stream x clear half transfer interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CTEIF4                                  (0x1 << 3)    // Stream x clear transfer error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CDMEIF4                                 (0x1 << 2)    // Stream x clear direct mode error interrupt flag (x = 7..4)
#define  _DMA2_HIFCR_CFEIF4                                  (0x1 << 0)    // Stream x clear FIFO error interrupt flag (x = 7..4)
#define  _DMA2_S0CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S0CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S0CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S0CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S0CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S0CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S0CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S0CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S0CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S0CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S0CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S0CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S0CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S0CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S0CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S0CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S0CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S0CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S0CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S0NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S0PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S0M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S0M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S0FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S0FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S0FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S0FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S1CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S1CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S1CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S1CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S1CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S1CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S1CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S1CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S1CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S1CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S1CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S1CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S1CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S1CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S1CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S1CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S1CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S1CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S1CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S1CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S1NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S1PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S1M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S1M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S1FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S1FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S1FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S1FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S2CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S2CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S2CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S2CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S2CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S2CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S2CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S2CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S2CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S2CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S2CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S2CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S2CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S2CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S2CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S2CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S2CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S2CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S2CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S2CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S2NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S2PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S2M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S2M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S2FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S2FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S2FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S2FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S3CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S3CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S3CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S3CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S3CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S3CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S3CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S3CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S3CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S3CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S3CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S3CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S3CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S3CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S3CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S3CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S3CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S3CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S3CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S3CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S3NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S3PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S3M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S3M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S3FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S3FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S3FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S3FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S4CR_CHSEL                                    (0x7 << 25)    // Channel selection
#define  _DMA2_S4CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S4CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S4CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S4CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S4CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S4CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S4CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S4CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S4CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S4CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S4CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S4CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S4CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S4CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S4CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S4CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S4CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S4CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S4CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S4NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S4PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S4M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S4M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S4FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S4FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S4FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S4FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S5CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S5CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S5CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S5CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S5CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S5CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S5CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S5CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S5CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S5CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S5CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S5CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S5CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S5CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S5CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S5CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S5CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S5CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S5CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S5CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S5NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S5PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S5M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S5M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S5FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S5FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S5FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S5FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S6CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S6CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S6CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S6CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S6CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S6CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S6CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S6CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S6CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S6CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S6CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S6CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S6CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S6CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S6CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S6CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S6CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S6CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S6CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S6CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S6NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S6PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S6M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S6M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S6FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S6FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S6FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S6FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
#define  _DMA2_S7CR_CHSEL                                    (0xf << 25)    // Channel selection
#define  _DMA2_S7CR_MBURST                                   (0x3 << 23)    // Memory burst transfer configuration
#define  _DMA2_S7CR_PBURST                                   (0x3 << 21)    // Peripheral burst transfer configuration
#define  _DMA2_S7CR_ACK                                      (0x1 << 20)    // ACK
#define  _DMA2_S7CR_CT                                       (0x1 << 19)    // Current target (only in double buffer mode)
#define  _DMA2_S7CR_DBM                                      (0x1 << 18)    // Double buffer mode
#define  _DMA2_S7CR_PL                                       (0x3 << 16)    // Priority level
#define  _DMA2_S7CR_PINCOS                                   (0x1 << 15)    // Peripheral increment offset size
#define  _DMA2_S7CR_MSIZE                                    (0x3 << 13)    // Memory data size
#define  _DMA2_S7CR_PSIZE                                    (0x3 << 11)    // Peripheral data size
#define  _DMA2_S7CR_MINC                                     (0x1 << 10)    // Memory increment mode
#define  _DMA2_S7CR_PINC                                     (0x1 << 9)    // Peripheral increment mode
#define  _DMA2_S7CR_CIRC                                     (0x1 << 8)    // Circular mode
#define  _DMA2_S7CR_DIR                                      (0x3 << 6)    // Data transfer direction
#define  _DMA2_S7CR_PFCTRL                                   (0x1 << 5)    // Peripheral flow controller
#define  _DMA2_S7CR_TCIE                                     (0x1 << 4)    // Transfer complete interrupt enable
#define  _DMA2_S7CR_HTIE                                     (0x1 << 3)    // Half transfer interrupt enable
#define  _DMA2_S7CR_TEIE                                     (0x1 << 2)    // Transfer error interrupt enable
#define  _DMA2_S7CR_DMEIE                                    (0x1 << 1)    // Direct mode error interrupt enable
#define  _DMA2_S7CR_EN                                       (0x1 << 0)    // Stream enable / flag stream ready when read low
#define  _DMA2_S7NDTR_NDT                                    (0xffff << 0)    // Number of data items to transfer
#define  _DMA2_S7PAR_PA                                      (0xffffffff << 0)    // Peripheral address
#define  _DMA2_S7M0AR_M0A                                    (0xffffffff << 0)    // Memory 0 address
#define  _DMA2_S7M1AR_M1A                                    (0xffffffff << 0)    // Memory 1 address (used in case of Double buffer mode)
#define  _DMA2_S7FCR_FEIE                                    (0x1 << 7)    // FIFO error interrupt enable
#define  _DMA2_S7FCR_FS                                      (0x7 << 3)    // FIFO status
#define  _DMA2_S7FCR_DMDIS                                   (0x1 << 2)    // Direct mode disable
#define  _DMA2_S7FCR_FTH                                     (0x3 << 0)    // FIFO threshold selection
　
　drivers/inc/stm32f767xx_MPU.h
#define Get_MPU_MPU_TYPER(FLAG)              (*(uint32_t*)0xe000ed90 |= FLAG)
#define Get_MPU_MPU_CTRL(FLAG)               (*(uint32_t*)0xe000ed94 |= FLAG)
#define Get_MPU_MPU_RNR(FLAG)                (*(uint32_t*)0xe000ed98 |= FLAG)
#define Get_MPU_MPU_RBAR(FLAG)               (*(uint32_t*)0xe000ed9c |= FLAG)
#define Get_MPU_MPU_RASR(FLAG)               (*(uint32_t*)0xe000eda0 |= FLAG)
#define Set_MPU_MPU_TYPER(FLAG)              (*(uint32_t*)0xe000ed90 &= FLAG)
#define Clr_MPU_MPU_TYPER(FLAG)              (*(uint32_t*)0xe000ed90 |= ~FLAG)
#define Set_MPU_MPU_CTRL(FLAG)               (*(uint32_t*)0xe000ed94 &= FLAG)
#define Clr_MPU_MPU_CTRL(FLAG)               (*(uint32_t*)0xe000ed94 |= ~FLAG)
#define Set_MPU_MPU_RNR(FLAG)                (*(uint32_t*)0xe000ed98 &= FLAG)
#define Clr_MPU_MPU_RNR(FLAG)                (*(uint32_t*)0xe000ed98 |= ~FLAG)
#define Set_MPU_MPU_RBAR(FLAG)               (*(uint32_t*)0xe000ed9c &= FLAG)
#define Clr_MPU_MPU_RBAR(FLAG)               (*(uint32_t*)0xe000ed9c |= ~FLAG)
#define Set_MPU_MPU_RASR(FLAG)               (*(uint32_t*)0xe000eda0 &= FLAG)
#define Clr_MPU_MPU_RASR(FLAG)               (*(uint32_t*)0xe000eda0 |= ~FLAG)
#define  _MPU_MPU_TYPER_SEPARATE                             (0x1 << 0)    // Separate flag
#define  _MPU_MPU_TYPER_DREGION                              (0xff << 8)    // Number of MPU data regions
#define  _MPU_MPU_TYPER_IREGION                              (0xff << 16)    // Number of MPU instruction regions
#define  _MPU_MPU_CTRL_ENABLE                                (0x1 << 0)    // Enables the MPU
#define  _MPU_MPU_CTRL_HFNMIENA                              (0x1 << 1)    // Enables the operation of MPU during hard fault
#define  _MPU_MPU_CTRL_PRIVDEFENA                            (0x1 << 2)    // Enable priviliged software access to default memory map
#define  _MPU_MPU_RNR_REGION                                 (0xff << 0)    // MPU region
#define  _MPU_MPU_RBAR_REGION                                (0xf << 0)    // MPU region field
#define  _MPU_MPU_RBAR_VALID                                 (0x1 << 4)    // MPU region number valid
#define  _MPU_MPU_RBAR_ADDR                                  (0x7ffffff << 5)    // Region base address field
#define  _MPU_MPU_RASR_ENABLE                                (0x1 << 0)    // Region enable bit.
#define  _MPU_MPU_RASR_SIZE                                  (0x1f << 1)    // Size of the MPU protection region
#define  _MPU_MPU_RASR_SRD                                   (0xff << 8)    // Subregion disable bits
#define  _MPU_MPU_RASR_B                                     (0x1 << 16)    // memory attribute
#define  _MPU_MPU_RASR_C                                     (0x1 << 17)    // memory attribute
#define  _MPU_MPU_RASR_S                                     (0x1 << 18)    // Shareable memory attribute
#define  _MPU_MPU_RASR_TEX                                   (0x7 << 19)    // memory attribute
#define  _MPU_MPU_RASR_AP                                    (0x7 << 24)    // Access permission
#define  _MPU_MPU_RASR_XN                                    (0x1 << 28)    // Instruction access disable bit
　
　drivers/inc/stm32f767xx_FLASH.h
#define Get_Flash_ACR(FLAG)                  (*(uint32_t*)0x40023c00 |= FLAG)
#define Get_Flash_KEYR(FLAG)                 (*(uint32_t*)0x40023c04 |= FLAG)
#define Get_Flash_OPTKEYR(FLAG)              (*(uint32_t*)0x40023c08 |= FLAG)
#define Get_Flash_SR(FLAG)                   (*(uint32_t*)0x40023c0c |= FLAG)
#define Get_Flash_CR(FLAG)                   (*(uint32_t*)0x40023c10 |= FLAG)
#define Get_Flash_OPTCR(FLAG)                (*(uint32_t*)0x40023c14 |= FLAG)
#define Get_Flash_OPTCR1(FLAG)               (*(uint32_t*)0x40023c18 |= FLAG)
#define Set_Flash_ACR(FLAG)                  (*(uint32_t*)0x40023c00 &= FLAG)
#define Clr_Flash_ACR(FLAG)                  (*(uint32_t*)0x40023c00 |= ~FLAG)
#define Set_Flash_KEYR(FLAG)                 (*(uint32_t*)0x40023c04 &= FLAG)
#define Clr_Flash_KEYR(FLAG)                 (*(uint32_t*)0x40023c04 |= ~FLAG)
#define Set_Flash_OPTKEYR(FLAG)              (*(uint32_t*)0x40023c08 &= FLAG)
#define Clr_Flash_OPTKEYR(FLAG)              (*(uint32_t*)0x40023c08 |= ~FLAG)
#define Set_Flash_SR(FLAG)                   (*(uint32_t*)0x40023c0c &= FLAG)
#define Clr_Flash_SR(FLAG)                   (*(uint32_t*)0x40023c0c |= ~FLAG)
#define Set_Flash_CR(FLAG)                   (*(uint32_t*)0x40023c10 &= FLAG)
#define Clr_Flash_CR(FLAG)                   (*(uint32_t*)0x40023c10 |= ~FLAG)
#define Set_Flash_OPTCR(FLAG)                (*(uint32_t*)0x40023c14 &= FLAG)
#define Clr_Flash_OPTCR(FLAG)                (*(uint32_t*)0x40023c14 |= ~FLAG)
#define Set_Flash_OPTCR1(FLAG)               (*(uint32_t*)0x40023c18 &= FLAG)
#define Clr_Flash_OPTCR1(FLAG)               (*(uint32_t*)0x40023c18 |= ~FLAG)
#define  _Flash_ACR_LATENCY                                  (0xf << 0)    // Latency
#define  _Flash_ACR_PRFTEN                                   (0x1 << 8)    // Prefetch enable
#define  _Flash_ACR_ARTEN                                    (0x1 << 9)    // ART Accelerator Enable
#define  _Flash_ACR_ARTRST                                   (0x1 << 11)    // ART Accelerator reset
#define  _Flash_KEYR_KEY                                     (0xffffffff << 0)    // FPEC key
#define  _Flash_OPTKEYR_OPTKEY                               (0xffffffff << 0)    // Option byte key
#define  _Flash_SR_EOP                                       (0x1 << 0)    // End of operation
#define  _Flash_SR_OPERR                                     (0x1 << 1)    // Operation error
#define  _Flash_SR_WRPERR                                    (0x1 << 4)    // Write protection error
#define  _Flash_SR_PGAERR                                    (0x1 << 5)    // Programming alignment error
#define  _Flash_SR_PGPERR                                    (0x1 << 6)    // Programming parallelism error
#define  _Flash_SR_PGSERR                                    (0x1 << 7)    // Programming sequence error
#define  _Flash_SR_BSY                                       (0x1 << 16)    // Busy
#define  _Flash_CR_PG                                        (0x1 << 0)    // Programming
#define  _Flash_CR_SER                                       (0x1 << 1)    // Sector Erase
#define  _Flash_CR_MER                                       (0x1 << 2)    // Mass Erase of sectors 0 to 11
#define  _Flash_CR_SNB                                       (0x1f << 3)    // Sector number
#define  _Flash_CR_PSIZE                                     (0x3 << 8)    // Program size
#define  _Flash_CR_MER1                                      (0x1 << 15)    // Mass Erase of sectors 12 to 23
#define  _Flash_CR_STRT                                      (0x1 << 16)    // Start
#define  _Flash_CR_EOPIE                                     (0x1 << 24)    // End of operation interrupt enable
#define  _Flash_CR_ERRIE                                     (0x1 << 25)    // Error interrupt enable
#define  _Flash_CR_LOCK                                      (0x1 << 31)    // Lock
#define  _Flash_OPTCR_OPTLOCK                                (0x1 << 0)    // Option lock
#define  _Flash_OPTCR_OPTSTRT                                (0x1 << 1)    // Option start
#define  _Flash_OPTCR_BOR_LEV                                (0x3 << 2)    // BOR reset Level
#define  _Flash_OPTCR_WWDG_SW                                (0x1 << 4)    // User option bytes
#define  _Flash_OPTCR_IWDG_SW                                (0x1 << 5)    // User option bytes
#define  _Flash_OPTCR_nRST_STOP                              (0x1 << 6)    // User option bytes
#define  _Flash_OPTCR_nRST_STDBY                             (0x1 << 7)    // User option bytes
#define  _Flash_OPTCR_RDP                                    (0xff << 8)    // Read protect
#define  _Flash_OPTCR_nWRP                                   (0xfff << 16)    // Not write protect
#define  _Flash_OPTCR_nDBOOT                                 (0x1 << 28)    // Dual Boot mode (valid only when nDBANK=0)
#define  _Flash_OPTCR_nDBANK                                 (0x1 << 29)    // Not dual bank mode
#define  _Flash_OPTCR_IWDG_STDBY                             (0x1 << 30)    // Independent watchdog counter freeze in standby mode
#define  _Flash_OPTCR_IWDG_STOP                              (0x1 << 31)    // Independent watchdog counter freeze in Stop mode
#define  _Flash_OPTCR1_BOOT_ADD0                             (0xffff << 0)    // Boot base address when Boot pin =0
#define  _Flash_OPTCR1_BOOT_ADD1                             (0xffff << 16)    // Boot base address when Boot pin =1
　
　drivers/inc/stm32f767xx_HASH.h
#define Get_HASH_CR(FLAG)                    (*(uint32_t*)0x50060400 |= FLAG)
#define Get_HASH_DIN(FLAG)                   (*(uint32_t*)0x50060404 |= FLAG)
#define Get_HASH_STR(FLAG)                   (*(uint32_t*)0x50060408 |= FLAG)
#define Get_HASH_HR0(FLAG)                   (*(uint32_t*)0x5006040c |= FLAG)
#define Get_HASH_HR1(FLAG)                   (*(uint32_t*)0x50060410 |= FLAG)
#define Get_HASH_HR2(FLAG)                   (*(uint32_t*)0x50060414 |= FLAG)
#define Get_HASH_HR3(FLAG)                   (*(uint32_t*)0x50060418 |= FLAG)
#define Get_HASH_HR4(FLAG)                   (*(uint32_t*)0x5006041c |= FLAG)
#define Get_HASH_IMR(FLAG)                   (*(uint32_t*)0x50060420 |= FLAG)
#define Get_HASH_SR(FLAG)                    (*(uint32_t*)0x50060424 |= FLAG)
#define Get_HASH_CSR0(FLAG)                  (*(uint32_t*)0x500604f8 |= FLAG)
#define Get_HASH_CSR1(FLAG)                  (*(uint32_t*)0x500604fc |= FLAG)
#define Get_HASH_CSR2(FLAG)                  (*(uint32_t*)0x50060500 |= FLAG)
#define Get_HASH_CSR3(FLAG)                  (*(uint32_t*)0x50060504 |= FLAG)
#define Get_HASH_CSR4(FLAG)                  (*(uint32_t*)0x50060508 |= FLAG)
#define Get_HASH_CSR5(FLAG)                  (*(uint32_t*)0x5006050c |= FLAG)
#define Get_HASH_CSR6(FLAG)                  (*(uint32_t*)0x50060510 |= FLAG)
#define Get_HASH_CSR7(FLAG)                  (*(uint32_t*)0x50060514 |= FLAG)
#define Get_HASH_CSR8(FLAG)                  (*(uint32_t*)0x50060518 |= FLAG)
#define Get_HASH_CSR9(FLAG)                  (*(uint32_t*)0x5006051c |= FLAG)
#define Get_HASH_CSR10(FLAG)                 (*(uint32_t*)0x50060520 |= FLAG)
#define Get_HASH_CSR11(FLAG)                 (*(uint32_t*)0x50060524 |= FLAG)
#define Get_HASH_CSR12(FLAG)                 (*(uint32_t*)0x50060528 |= FLAG)
#define Get_HASH_CSR13(FLAG)                 (*(uint32_t*)0x5006052c |= FLAG)
#define Get_HASH_CSR14(FLAG)                 (*(uint32_t*)0x50060530 |= FLAG)
#define Get_HASH_CSR15(FLAG)                 (*(uint32_t*)0x50060534 |= FLAG)
#define Get_HASH_CSR16(FLAG)                 (*(uint32_t*)0x50060538 |= FLAG)
#define Get_HASH_CSR17(FLAG)                 (*(uint32_t*)0x5006053c |= FLAG)
#define Get_HASH_CSR18(FLAG)                 (*(uint32_t*)0x50060540 |= FLAG)
#define Get_HASH_CSR19(FLAG)                 (*(uint32_t*)0x50060544 |= FLAG)
#define Get_HASH_CSR20(FLAG)                 (*(uint32_t*)0x50060548 |= FLAG)
#define Get_HASH_CSR21(FLAG)                 (*(uint32_t*)0x5006054c |= FLAG)
#define Get_HASH_CSR22(FLAG)                 (*(uint32_t*)0x50060550 |= FLAG)
#define Get_HASH_CSR23(FLAG)                 (*(uint32_t*)0x50060554 |= FLAG)
#define Get_HASH_CSR24(FLAG)                 (*(uint32_t*)0x50060558 |= FLAG)
#define Get_HASH_CSR25(FLAG)                 (*(uint32_t*)0x5006055c |= FLAG)
#define Get_HASH_CSR26(FLAG)                 (*(uint32_t*)0x50060560 |= FLAG)
#define Get_HASH_CSR27(FLAG)                 (*(uint32_t*)0x50060564 |= FLAG)
#define Get_HASH_CSR28(FLAG)                 (*(uint32_t*)0x50060568 |= FLAG)
#define Get_HASH_CSR29(FLAG)                 (*(uint32_t*)0x5006056c |= FLAG)
#define Get_HASH_CSR30(FLAG)                 (*(uint32_t*)0x50060570 |= FLAG)
#define Get_HASH_CSR31(FLAG)                 (*(uint32_t*)0x50060574 |= FLAG)
#define Get_HASH_CSR32(FLAG)                 (*(uint32_t*)0x50060578 |= FLAG)
#define Get_HASH_CSR33(FLAG)                 (*(uint32_t*)0x5006057c |= FLAG)
#define Get_HASH_CSR34(FLAG)                 (*(uint32_t*)0x50060580 |= FLAG)
#define Get_HASH_CSR35(FLAG)                 (*(uint32_t*)0x50060584 |= FLAG)
#define Get_HASH_CSR36(FLAG)                 (*(uint32_t*)0x50060588 |= FLAG)
#define Get_HASH_CSR37(FLAG)                 (*(uint32_t*)0x5006058c |= FLAG)
#define Get_HASH_CSR38(FLAG)                 (*(uint32_t*)0x50060590 |= FLAG)
#define Get_HASH_CSR39(FLAG)                 (*(uint32_t*)0x50060594 |= FLAG)
#define Get_HASH_CSR40(FLAG)                 (*(uint32_t*)0x50060598 |= FLAG)
#define Get_HASH_CSR41(FLAG)                 (*(uint32_t*)0x5006059c |= FLAG)
#define Get_HASH_CSR42(FLAG)                 (*(uint32_t*)0x500605a0 |= FLAG)
#define Get_HASH_CSR43(FLAG)                 (*(uint32_t*)0x500605a4 |= FLAG)
#define Get_HASH_CSR44(FLAG)                 (*(uint32_t*)0x500605a8 |= FLAG)
#define Get_HASH_CSR45(FLAG)                 (*(uint32_t*)0x500605ac |= FLAG)
#define Get_HASH_CSR46(FLAG)                 (*(uint32_t*)0x500605b0 |= FLAG)
#define Get_HASH_CSR47(FLAG)                 (*(uint32_t*)0x500605b4 |= FLAG)
#define Get_HASH_CSR48(FLAG)                 (*(uint32_t*)0x500605b8 |= FLAG)
#define Get_HASH_CSR49(FLAG)                 (*(uint32_t*)0x500605bc |= FLAG)
#define Get_HASH_CSR50(FLAG)                 (*(uint32_t*)0x500605c0 |= FLAG)
#define Get_HASH_CSR51(FLAG)                 (*(uint32_t*)0x500605c4 |= FLAG)
#define Get_HASH_CSR52(FLAG)                 (*(uint32_t*)0x500605c8 |= FLAG)
#define Get_HASH_CSR53(FLAG)                 (*(uint32_t*)0x500605cc |= FLAG)
#define Get_HASH_HASH_HR0(FLAG)              (*(uint32_t*)0x50060710 |= FLAG)
#define Get_HASH_HASH_HR1(FLAG)              (*(uint32_t*)0x50060714 |= FLAG)
#define Get_HASH_HASH_HR2(FLAG)              (*(uint32_t*)0x50060718 |= FLAG)
#define Get_HASH_HASH_HR3(FLAG)              (*(uint32_t*)0x5006071c |= FLAG)
#define Get_HASH_HASH_HR4(FLAG)              (*(uint32_t*)0x50060720 |= FLAG)
#define Get_HASH_HASH_HR5(FLAG)              (*(uint32_t*)0x50060724 |= FLAG)
#define Get_HASH_HASH_HR6(FLAG)              (*(uint32_t*)0x50060728 |= FLAG)
#define Get_HASH_HASH_HR7(FLAG)              (*(uint32_t*)0x5006072c |= FLAG)
#define Set_HASH_CR(FLAG)                    (*(uint32_t*)0x50060400 &= FLAG)
#define Clr_HASH_CR(FLAG)                    (*(uint32_t*)0x50060400 |= ~FLAG)
#define Set_HASH_DIN(FLAG)                   (*(uint32_t*)0x50060404 &= FLAG)
#define Clr_HASH_DIN(FLAG)                   (*(uint32_t*)0x50060404 |= ~FLAG)
#define Set_HASH_STR(FLAG)                   (*(uint32_t*)0x50060408 &= FLAG)
#define Clr_HASH_STR(FLAG)                   (*(uint32_t*)0x50060408 |= ~FLAG)
#define Set_HASH_HR0(FLAG)                   (*(uint32_t*)0x5006040c &= FLAG)
#define Clr_HASH_HR0(FLAG)                   (*(uint32_t*)0x5006040c |= ~FLAG)
#define Set_HASH_HR1(FLAG)                   (*(uint32_t*)0x50060410 &= FLAG)
#define Clr_HASH_HR1(FLAG)                   (*(uint32_t*)0x50060410 |= ~FLAG)
#define Set_HASH_HR2(FLAG)                   (*(uint32_t*)0x50060414 &= FLAG)
#define Clr_HASH_HR2(FLAG)                   (*(uint32_t*)0x50060414 |= ~FLAG)
#define Set_HASH_HR3(FLAG)                   (*(uint32_t*)0x50060418 &= FLAG)
#define Clr_HASH_HR3(FLAG)                   (*(uint32_t*)0x50060418 |= ~FLAG)
#define Set_HASH_HR4(FLAG)                   (*(uint32_t*)0x5006041c &= FLAG)
#define Clr_HASH_HR4(FLAG)                   (*(uint32_t*)0x5006041c |= ~FLAG)
#define Set_HASH_IMR(FLAG)                   (*(uint32_t*)0x50060420 &= FLAG)
#define Clr_HASH_IMR(FLAG)                   (*(uint32_t*)0x50060420 |= ~FLAG)
#define Set_HASH_SR(FLAG)                    (*(uint32_t*)0x50060424 &= FLAG)
#define Clr_HASH_SR(FLAG)                    (*(uint32_t*)0x50060424 |= ~FLAG)
#define Set_HASH_CSR0(FLAG)                  (*(uint32_t*)0x500604f8 &= FLAG)
#define Clr_HASH_CSR0(FLAG)                  (*(uint32_t*)0x500604f8 |= ~FLAG)
#define Set_HASH_CSR1(FLAG)                  (*(uint32_t*)0x500604fc &= FLAG)
#define Clr_HASH_CSR1(FLAG)                  (*(uint32_t*)0x500604fc |= ~FLAG)
#define Set_HASH_CSR2(FLAG)                  (*(uint32_t*)0x50060500 &= FLAG)
#define Clr_HASH_CSR2(FLAG)                  (*(uint32_t*)0x50060500 |= ~FLAG)
#define Set_HASH_CSR3(FLAG)                  (*(uint32_t*)0x50060504 &= FLAG)
#define Clr_HASH_CSR3(FLAG)                  (*(uint32_t*)0x50060504 |= ~FLAG)
#define Set_HASH_CSR4(FLAG)                  (*(uint32_t*)0x50060508 &= FLAG)
#define Clr_HASH_CSR4(FLAG)                  (*(uint32_t*)0x50060508 |= ~FLAG)
#define Set_HASH_CSR5(FLAG)                  (*(uint32_t*)0x5006050c &= FLAG)
#define Clr_HASH_CSR5(FLAG)                  (*(uint32_t*)0x5006050c |= ~FLAG)
#define Set_HASH_CSR6(FLAG)                  (*(uint32_t*)0x50060510 &= FLAG)
#define Clr_HASH_CSR6(FLAG)                  (*(uint32_t*)0x50060510 |= ~FLAG)
#define Set_HASH_CSR7(FLAG)                  (*(uint32_t*)0x50060514 &= FLAG)
#define Clr_HASH_CSR7(FLAG)                  (*(uint32_t*)0x50060514 |= ~FLAG)
#define Set_HASH_CSR8(FLAG)                  (*(uint32_t*)0x50060518 &= FLAG)
#define Clr_HASH_CSR8(FLAG)                  (*(uint32_t*)0x50060518 |= ~FLAG)
#define Set_HASH_CSR9(FLAG)                  (*(uint32_t*)0x5006051c &= FLAG)
#define Clr_HASH_CSR9(FLAG)                  (*(uint32_t*)0x5006051c |= ~FLAG)
#define Set_HASH_CSR10(FLAG)                 (*(uint32_t*)0x50060520 &= FLAG)
#define Clr_HASH_CSR10(FLAG)                 (*(uint32_t*)0x50060520 |= ~FLAG)
#define Set_HASH_CSR11(FLAG)                 (*(uint32_t*)0x50060524 &= FLAG)
#define Clr_HASH_CSR11(FLAG)                 (*(uint32_t*)0x50060524 |= ~FLAG)
#define Set_HASH_CSR12(FLAG)                 (*(uint32_t*)0x50060528 &= FLAG)
#define Clr_HASH_CSR12(FLAG)                 (*(uint32_t*)0x50060528 |= ~FLAG)
#define Set_HASH_CSR13(FLAG)                 (*(uint32_t*)0x5006052c &= FLAG)
#define Clr_HASH_CSR13(FLAG)                 (*(uint32_t*)0x5006052c |= ~FLAG)
#define Set_HASH_CSR14(FLAG)                 (*(uint32_t*)0x50060530 &= FLAG)
#define Clr_HASH_CSR14(FLAG)                 (*(uint32_t*)0x50060530 |= ~FLAG)
#define Set_HASH_CSR15(FLAG)                 (*(uint32_t*)0x50060534 &= FLAG)
#define Clr_HASH_CSR15(FLAG)                 (*(uint32_t*)0x50060534 |= ~FLAG)
#define Set_HASH_CSR16(FLAG)                 (*(uint32_t*)0x50060538 &= FLAG)
#define Clr_HASH_CSR16(FLAG)                 (*(uint32_t*)0x50060538 |= ~FLAG)
#define Set_HASH_CSR17(FLAG)                 (*(uint32_t*)0x5006053c &= FLAG)
#define Clr_HASH_CSR17(FLAG)                 (*(uint32_t*)0x5006053c |= ~FLAG)
#define Set_HASH_CSR18(FLAG)                 (*(uint32_t*)0x50060540 &= FLAG)
#define Clr_HASH_CSR18(FLAG)                 (*(uint32_t*)0x50060540 |= ~FLAG)
#define Set_HASH_CSR19(FLAG)                 (*(uint32_t*)0x50060544 &= FLAG)
#define Clr_HASH_CSR19(FLAG)                 (*(uint32_t*)0x50060544 |= ~FLAG)
#define Set_HASH_CSR20(FLAG)                 (*(uint32_t*)0x50060548 &= FLAG)
#define Clr_HASH_CSR20(FLAG)                 (*(uint32_t*)0x50060548 |= ~FLAG)
#define Set_HASH_CSR21(FLAG)                 (*(uint32_t*)0x5006054c &= FLAG)
#define Clr_HASH_CSR21(FLAG)                 (*(uint32_t*)0x5006054c |= ~FLAG)
#define Set_HASH_CSR22(FLAG)                 (*(uint32_t*)0x50060550 &= FLAG)
#define Clr_HASH_CSR22(FLAG)                 (*(uint32_t*)0x50060550 |= ~FLAG)
#define Set_HASH_CSR23(FLAG)                 (*(uint32_t*)0x50060554 &= FLAG)
#define Clr_HASH_CSR23(FLAG)                 (*(uint32_t*)0x50060554 |= ~FLAG)
#define Set_HASH_CSR24(FLAG)                 (*(uint32_t*)0x50060558 &= FLAG)
#define Clr_HASH_CSR24(FLAG)                 (*(uint32_t*)0x50060558 |= ~FLAG)
#define Set_HASH_CSR25(FLAG)                 (*(uint32_t*)0x5006055c &= FLAG)
#define Clr_HASH_CSR25(FLAG)                 (*(uint32_t*)0x5006055c |= ~FLAG)
#define Set_HASH_CSR26(FLAG)                 (*(uint32_t*)0x50060560 &= FLAG)
#define Clr_HASH_CSR26(FLAG)                 (*(uint32_t*)0x50060560 |= ~FLAG)
#define Set_HASH_CSR27(FLAG)                 (*(uint32_t*)0x50060564 &= FLAG)
#define Clr_HASH_CSR27(FLAG)                 (*(uint32_t*)0x50060564 |= ~FLAG)
#define Set_HASH_CSR28(FLAG)                 (*(uint32_t*)0x50060568 &= FLAG)
#define Clr_HASH_CSR28(FLAG)                 (*(uint32_t*)0x50060568 |= ~FLAG)
#define Set_HASH_CSR29(FLAG)                 (*(uint32_t*)0x5006056c &= FLAG)
#define Clr_HASH_CSR29(FLAG)                 (*(uint32_t*)0x5006056c |= ~FLAG)
#define Set_HASH_CSR30(FLAG)                 (*(uint32_t*)0x50060570 &= FLAG)
#define Clr_HASH_CSR30(FLAG)                 (*(uint32_t*)0x50060570 |= ~FLAG)
#define Set_HASH_CSR31(FLAG)                 (*(uint32_t*)0x50060574 &= FLAG)
#define Clr_HASH_CSR31(FLAG)                 (*(uint32_t*)0x50060574 |= ~FLAG)
#define Set_HASH_CSR32(FLAG)                 (*(uint32_t*)0x50060578 &= FLAG)
#define Clr_HASH_CSR32(FLAG)                 (*(uint32_t*)0x50060578 |= ~FLAG)
#define Set_HASH_CSR33(FLAG)                 (*(uint32_t*)0x5006057c &= FLAG)
#define Clr_HASH_CSR33(FLAG)                 (*(uint32_t*)0x5006057c |= ~FLAG)
#define Set_HASH_CSR34(FLAG)                 (*(uint32_t*)0x50060580 &= FLAG)
#define Clr_HASH_CSR34(FLAG)                 (*(uint32_t*)0x50060580 |= ~FLAG)
#define Set_HASH_CSR35(FLAG)                 (*(uint32_t*)0x50060584 &= FLAG)
#define Clr_HASH_CSR35(FLAG)                 (*(uint32_t*)0x50060584 |= ~FLAG)
#define Set_HASH_CSR36(FLAG)                 (*(uint32_t*)0x50060588 &= FLAG)
#define Clr_HASH_CSR36(FLAG)                 (*(uint32_t*)0x50060588 |= ~FLAG)
#define Set_HASH_CSR37(FLAG)                 (*(uint32_t*)0x5006058c &= FLAG)
#define Clr_HASH_CSR37(FLAG)                 (*(uint32_t*)0x5006058c |= ~FLAG)
#define Set_HASH_CSR38(FLAG)                 (*(uint32_t*)0x50060590 &= FLAG)
#define Clr_HASH_CSR38(FLAG)                 (*(uint32_t*)0x50060590 |= ~FLAG)
#define Set_HASH_CSR39(FLAG)                 (*(uint32_t*)0x50060594 &= FLAG)
#define Clr_HASH_CSR39(FLAG)                 (*(uint32_t*)0x50060594 |= ~FLAG)
#define Set_HASH_CSR40(FLAG)                 (*(uint32_t*)0x50060598 &= FLAG)
#define Clr_HASH_CSR40(FLAG)                 (*(uint32_t*)0x50060598 |= ~FLAG)
#define Set_HASH_CSR41(FLAG)                 (*(uint32_t*)0x5006059c &= FLAG)
#define Clr_HASH_CSR41(FLAG)                 (*(uint32_t*)0x5006059c |= ~FLAG)
#define Set_HASH_CSR42(FLAG)                 (*(uint32_t*)0x500605a0 &= FLAG)
#define Clr_HASH_CSR42(FLAG)                 (*(uint32_t*)0x500605a0 |= ~FLAG)
#define Set_HASH_CSR43(FLAG)                 (*(uint32_t*)0x500605a4 &= FLAG)
#define Clr_HASH_CSR43(FLAG)                 (*(uint32_t*)0x500605a4 |= ~FLAG)
#define Set_HASH_CSR44(FLAG)                 (*(uint32_t*)0x500605a8 &= FLAG)
#define Clr_HASH_CSR44(FLAG)                 (*(uint32_t*)0x500605a8 |= ~FLAG)
#define Set_HASH_CSR45(FLAG)                 (*(uint32_t*)0x500605ac &= FLAG)
#define Clr_HASH_CSR45(FLAG)                 (*(uint32_t*)0x500605ac |= ~FLAG)
#define Set_HASH_CSR46(FLAG)                 (*(uint32_t*)0x500605b0 &= FLAG)
#define Clr_HASH_CSR46(FLAG)                 (*(uint32_t*)0x500605b0 |= ~FLAG)
#define Set_HASH_CSR47(FLAG)                 (*(uint32_t*)0x500605b4 &= FLAG)
#define Clr_HASH_CSR47(FLAG)                 (*(uint32_t*)0x500605b4 |= ~FLAG)
#define Set_HASH_CSR48(FLAG)                 (*(uint32_t*)0x500605b8 &= FLAG)
#define Clr_HASH_CSR48(FLAG)                 (*(uint32_t*)0x500605b8 |= ~FLAG)
#define Set_HASH_CSR49(FLAG)                 (*(uint32_t*)0x500605bc &= FLAG)
#define Clr_HASH_CSR49(FLAG)                 (*(uint32_t*)0x500605bc |= ~FLAG)
#define Set_HASH_CSR50(FLAG)                 (*(uint32_t*)0x500605c0 &= FLAG)
#define Clr_HASH_CSR50(FLAG)                 (*(uint32_t*)0x500605c0 |= ~FLAG)
#define Set_HASH_CSR51(FLAG)                 (*(uint32_t*)0x500605c4 &= FLAG)
#define Clr_HASH_CSR51(FLAG)                 (*(uint32_t*)0x500605c4 |= ~FLAG)
#define Set_HASH_CSR52(FLAG)                 (*(uint32_t*)0x500605c8 &= FLAG)
#define Clr_HASH_CSR52(FLAG)                 (*(uint32_t*)0x500605c8 |= ~FLAG)
#define Set_HASH_CSR53(FLAG)                 (*(uint32_t*)0x500605cc &= FLAG)
#define Clr_HASH_CSR53(FLAG)                 (*(uint32_t*)0x500605cc |= ~FLAG)
#define Set_HASH_HASH_HR0(FLAG)              (*(uint32_t*)0x50060710 &= FLAG)
#define Clr_HASH_HASH_HR0(FLAG)              (*(uint32_t*)0x50060710 |= ~FLAG)
#define Set_HASH_HASH_HR1(FLAG)              (*(uint32_t*)0x50060714 &= FLAG)
#define Clr_HASH_HASH_HR1(FLAG)              (*(uint32_t*)0x50060714 |= ~FLAG)
#define Set_HASH_HASH_HR2(FLAG)              (*(uint32_t*)0x50060718 &= FLAG)
#define Clr_HASH_HASH_HR2(FLAG)              (*(uint32_t*)0x50060718 |= ~FLAG)
#define Set_HASH_HASH_HR3(FLAG)              (*(uint32_t*)0x5006071c &= FLAG)
#define Clr_HASH_HASH_HR3(FLAG)              (*(uint32_t*)0x5006071c |= ~FLAG)
#define Set_HASH_HASH_HR4(FLAG)              (*(uint32_t*)0x50060720 &= FLAG)
#define Clr_HASH_HASH_HR4(FLAG)              (*(uint32_t*)0x50060720 |= ~FLAG)
#define Set_HASH_HASH_HR5(FLAG)              (*(uint32_t*)0x50060724 &= FLAG)
#define Clr_HASH_HASH_HR5(FLAG)              (*(uint32_t*)0x50060724 |= ~FLAG)
#define Set_HASH_HASH_HR6(FLAG)              (*(uint32_t*)0x50060728 &= FLAG)
#define Clr_HASH_HASH_HR6(FLAG)              (*(uint32_t*)0x50060728 |= ~FLAG)
#define Set_HASH_HASH_HR7(FLAG)              (*(uint32_t*)0x5006072c &= FLAG)
#define Clr_HASH_HASH_HR7(FLAG)              (*(uint32_t*)0x5006072c |= ~FLAG)
#define  _HASH_CR_INIT                                       (0x1 << 2)    // Initialize message digest calculation
#define  _HASH_CR_DMAE                                       (0x1 << 3)    // DMA enable
#define  _HASH_CR_DATATYPE                                   (0x3 << 4)    // Data type selection
#define  _HASH_CR_MODE                                       (0x1 << 6)    // Mode selection
#define  _HASH_CR_ALGO0                                      (0x1 << 7)    // Algorithm selection
#define  _HASH_CR_NBW                                        (0xf << 8)    // Number of words already pushed
#define  _HASH_CR_DINNE                                      (0x1 << 12)    // DIN not empty
#define  _HASH_CR_MDMAT                                      (0x1 << 13)    // Multiple DMA Transfers
#define  _HASH_CR_LKEY                                       (0x1 << 16)    // Long key selection
#define  _HASH_CR_ALGO1                                      (0x1 << 18)    // ALGO
#define  _HASH_DIN_DATAIN                                    (0xffffffff << 0)    // Data input
#define  _HASH_STR_DCAL                                      (0x1 << 8)    // Digest calculation
#define  _HASH_STR_NBLW                                      (0x1f << 0)    // Number of valid bits in the last word of the message
#define  _HASH_HR0_H0                                        (0xffffffff << 0)    // H0
#define  _HASH_HR1_H1                                        (0xffffffff << 0)    // H1
#define  _HASH_HR2_H2                                        (0xffffffff << 0)    // H2
#define  _HASH_HR3_H3                                        (0xffffffff << 0)    // H3
#define  _HASH_HR4_H4                                        (0xffffffff << 0)    // H4
#define  _HASH_IMR_DCIE                                      (0x1 << 1)    // Digest calculation completion interrupt enable
#define  _HASH_IMR_DINIE                                     (0x1 << 0)    // Data input interrupt enable
#define  _HASH_SR_BUSY                                       (0x1 << 3)    // Busy bit
#define  _HASH_SR_DMAS                                       (0x1 << 2)    // DMA Status
#define  _HASH_SR_DCIS                                       (0x1 << 1)    // Digest calculation completion interrupt status
#define  _HASH_SR_DINIS                                      (0x1 << 0)    // Data input interrupt status
#define  _HASH_CSR0_CSR0                                     (0xffffffff << 0)    // CSR0
#define  _HASH_CSR1_CSR1                                     (0xffffffff << 0)    // CSR1
#define  _HASH_CSR2_CSR2                                     (0xffffffff << 0)    // CSR2
#define  _HASH_CSR3_CSR3                                     (0xffffffff << 0)    // CSR3
#define  _HASH_CSR4_CSR4                                     (0xffffffff << 0)    // CSR4
#define  _HASH_CSR5_CSR5                                     (0xffffffff << 0)    // CSR5
#define  _HASH_CSR6_CSR6                                     (0xffffffff << 0)    // CSR6
#define  _HASH_CSR7_CSR7                                     (0xffffffff << 0)    // CSR7
#define  _HASH_CSR8_CSR8                                     (0xffffffff << 0)    // CSR8
#define  _HASH_CSR9_CSR9                                     (0xffffffff << 0)    // CSR9
#define  _HASH_CSR10_CSR10                                   (0xffffffff << 0)    // CSR10
#define  _HASH_CSR11_CSR11                                   (0xffffffff << 0)    // CSR11
#define  _HASH_CSR12_CSR12                                   (0xffffffff << 0)    // CSR12
#define  _HASH_CSR13_CSR13                                   (0xffffffff << 0)    // CSR13
#define  _HASH_CSR14_CSR14                                   (0xffffffff << 0)    // CSR14
#define  _HASH_CSR15_CSR15                                   (0xffffffff << 0)    // CSR15
#define  _HASH_CSR16_CSR16                                   (0xffffffff << 0)    // CSR16
#define  _HASH_CSR17_CSR17                                   (0xffffffff << 0)    // CSR17
#define  _HASH_CSR18_CSR18                                   (0xffffffff << 0)    // CSR18
#define  _HASH_CSR19_CSR19                                   (0xffffffff << 0)    // CSR19
#define  _HASH_CSR20_CSR20                                   (0xffffffff << 0)    // CSR20
#define  _HASH_CSR21_CSR21                                   (0xffffffff << 0)    // CSR21
#define  _HASH_CSR22_CSR22                                   (0xffffffff << 0)    // CSR22
#define  _HASH_CSR23_CSR23                                   (0xffffffff << 0)    // CSR23
#define  _HASH_CSR24_CSR24                                   (0xffffffff << 0)    // CSR24
#define  _HASH_CSR25_CSR25                                   (0xffffffff << 0)    // CSR25
#define  _HASH_CSR26_CSR26                                   (0xffffffff << 0)    // CSR26
#define  _HASH_CSR27_CSR27                                   (0xffffffff << 0)    // CSR27
#define  _HASH_CSR28_CSR28                                   (0xffffffff << 0)    // CSR28
#define  _HASH_CSR29_CSR29                                   (0xffffffff << 0)    // CSR29
#define  _HASH_CSR30_CSR30                                   (0xffffffff << 0)    // CSR30
#define  _HASH_CSR31_CSR31                                   (0xffffffff << 0)    // CSR31
#define  _HASH_CSR32_CSR32                                   (0xffffffff << 0)    // CSR32
#define  _HASH_CSR33_CSR33                                   (0xffffffff << 0)    // CSR33
#define  _HASH_CSR34_CSR34                                   (0xffffffff << 0)    // CSR34
#define  _HASH_CSR35_CSR35                                   (0xffffffff << 0)    // CSR35
#define  _HASH_CSR36_CSR36                                   (0xffffffff << 0)    // CSR36
#define  _HASH_CSR37_CSR37                                   (0xffffffff << 0)    // CSR37
#define  _HASH_CSR38_CSR38                                   (0xffffffff << 0)    // CSR38
#define  _HASH_CSR39_CSR39                                   (0xffffffff << 0)    // CSR39
#define  _HASH_CSR40_CSR40                                   (0xffffffff << 0)    // CSR40
#define  _HASH_CSR41_CSR41                                   (0xffffffff << 0)    // CSR41
#define  _HASH_CSR42_CSR42                                   (0xffffffff << 0)    // CSR42
#define  _HASH_CSR43_CSR43                                   (0xffffffff << 0)    // CSR43
#define  _HASH_CSR44_CSR44                                   (0xffffffff << 0)    // CSR44
#define  _HASH_CSR45_CSR45                                   (0xffffffff << 0)    // CSR45
#define  _HASH_CSR46_CSR46                                   (0xffffffff << 0)    // CSR46
#define  _HASH_CSR47_CSR47                                   (0xffffffff << 0)    // CSR47
#define  _HASH_CSR48_CSR48                                   (0xffffffff << 0)    // CSR48
#define  _HASH_CSR49_CSR49                                   (0xffffffff << 0)    // CSR49
#define  _HASH_CSR50_CSR50                                   (0xffffffff << 0)    // CSR50
#define  _HASH_CSR51_CSR51                                   (0xffffffff << 0)    // CSR51
#define  _HASH_CSR52_CSR52                                   (0xffffffff << 0)    // CSR52
#define  _HASH_CSR53_CSR53                                   (0xffffffff << 0)    // CSR53
#define  _HASH_HASH_HR0_H0                                   (0xffffffff << 0)    // H0
#define  _HASH_HASH_HR1_H1                                   (0xffffffff << 0)    // H1
#define  _HASH_HASH_HR2_H2                                   (0xffffffff << 0)    // H2
#define  _HASH_HASH_HR3_H3                                   (0xffffffff << 0)    // H3
#define  _HASH_HASH_HR4_H4                                   (0xffffffff << 0)    // H4
#define  _HASH_HASH_HR5_H5                                   (0xffffffff << 0)    // H5
#define  _HASH_HASH_HR6_H6                                   (0xffffffff << 0)    // H6
#define  _HASH_HASH_HR7_H7                                   (0xffffffff << 0)    // H7
　
　drivers/inc/stm32f767xx_AC.h
#define Get_AC_ITCMCR(FLAG)                  (*(uint32_t*)0xe000ef90 |= FLAG)
#define Get_AC_DTCMCR(FLAG)                  (*(uint32_t*)0xe000ef94 |= FLAG)
#define Get_AC_AHBPCR(FLAG)                  (*(uint32_t*)0xe000ef98 |= FLAG)
#define Get_AC_CACR(FLAG)                    (*(uint32_t*)0xe000ef9c |= FLAG)
#define Get_AC_AHBSCR(FLAG)                  (*(uint32_t*)0xe000efa0 |= FLAG)
#define Get_AC_ABFSR(FLAG)                   (*(uint32_t*)0xe000efa8 |= FLAG)
#define Set_AC_ITCMCR(FLAG)                  (*(uint32_t*)0xe000ef90 &= FLAG)
#define Clr_AC_ITCMCR(FLAG)                  (*(uint32_t*)0xe000ef90 |= ~FLAG)
#define Set_AC_DTCMCR(FLAG)                  (*(uint32_t*)0xe000ef94 &= FLAG)
#define Clr_AC_DTCMCR(FLAG)                  (*(uint32_t*)0xe000ef94 |= ~FLAG)
#define Set_AC_AHBPCR(FLAG)                  (*(uint32_t*)0xe000ef98 &= FLAG)
#define Clr_AC_AHBPCR(FLAG)                  (*(uint32_t*)0xe000ef98 |= ~FLAG)
#define Set_AC_CACR(FLAG)                    (*(uint32_t*)0xe000ef9c &= FLAG)
#define Clr_AC_CACR(FLAG)                    (*(uint32_t*)0xe000ef9c |= ~FLAG)
#define Set_AC_AHBSCR(FLAG)                  (*(uint32_t*)0xe000efa0 &= FLAG)
#define Clr_AC_AHBSCR(FLAG)                  (*(uint32_t*)0xe000efa0 |= ~FLAG)
#define Set_AC_ABFSR(FLAG)                   (*(uint32_t*)0xe000efa8 &= FLAG)
#define Clr_AC_ABFSR(FLAG)                   (*(uint32_t*)0xe000efa8 |= ~FLAG)
#define  _AC_ITCMCR_EN                                       (0x1 << 0)    // EN
#define  _AC_ITCMCR_RMW                                      (0x1 << 1)    // RMW
#define  _AC_ITCMCR_RETEN                                    (0x1 << 2)    // RETEN
#define  _AC_ITCMCR_SZ                                       (0xf << 3)    // SZ
#define  _AC_DTCMCR_EN                                       (0x1 << 0)    // EN
#define  _AC_DTCMCR_RMW                                      (0x1 << 1)    // RMW
#define  _AC_DTCMCR_RETEN                                    (0x1 << 2)    // RETEN
#define  _AC_DTCMCR_SZ                                       (0xf << 3)    // SZ
#define  _AC_AHBPCR_EN                                       (0x1 << 0)    // EN
#define  _AC_AHBPCR_SZ                                       (0x7 << 1)    // SZ
#define  _AC_CACR_SIWT                                       (0x1 << 0)    // SIWT
#define  _AC_CACR_ECCEN                                      (0x1 << 1)    // ECCEN
#define  _AC_CACR_FORCEWT                                    (0x1 << 2)    // FORCEWT
#define  _AC_AHBSCR_CTL                                      (0x3 << 0)    // CTL
#define  _AC_AHBSCR_TPRI                                     (0x1ff << 2)    // TPRI
#define  _AC_AHBSCR_INITCOUNT                                (0x1f << 11)    // INITCOUNT
#define  _AC_ABFSR_ITCM                                      (0x1 << 0)    // ITCM
#define  _AC_ABFSR_DTCM                                      (0x1 << 1)    // DTCM
#define  _AC_ABFSR_AHBP                                      (0x1 << 2)    // AHBP
#define  _AC_ABFSR_AXIM                                      (0x1 << 3)    // AXIM
#define  _AC_ABFSR_EPPB                                      (0x1 << 4)    // EPPB
#define  _AC_ABFSR_AXIMTYPE                                  (0x3 << 8)    // AXIMTYPE
　
　drivers/inc/stm32f767xx_TIM.h
#define Get_TIM2_CR1(FLAG)                   (*(uint32_t*)0x40000000 |= FLAG)
#define Get_TIM2_CR2(FLAG)                   (*(uint32_t*)0x40000004 |= FLAG)
#define Get_TIM2_SMCR(FLAG)                  (*(uint32_t*)0x40000008 |= FLAG)
#define Get_TIM2_DIER(FLAG)                  (*(uint32_t*)0x4000000c |= FLAG)
#define Get_TIM2_SR(FLAG)                    (*(uint32_t*)0x40000010 |= FLAG)
#define Get_TIM2_EGR(FLAG)                   (*(uint32_t*)0x40000014 |= FLAG)
#define Get_TIM2_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000018 |= FLAG)
#define Get_TIM2_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000018 |= FLAG)
#define Get_TIM2_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000001c |= FLAG)
#define Get_TIM2_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000001c |= FLAG)
#define Get_TIM2_CCER(FLAG)                  (*(uint32_t*)0x40000020 |= FLAG)
#define Get_TIM2_CNT(FLAG)                   (*(uint32_t*)0x40000024 |= FLAG)
#define Get_TIM2_PSC(FLAG)                   (*(uint32_t*)0x40000028 |= FLAG)
#define Get_TIM2_ARR(FLAG)                   (*(uint32_t*)0x4000002c |= FLAG)
#define Get_TIM2_CCR1(FLAG)                  (*(uint32_t*)0x40000034 |= FLAG)
#define Get_TIM2_CCR2(FLAG)                  (*(uint32_t*)0x40000038 |= FLAG)
#define Get_TIM2_CCR3(FLAG)                  (*(uint32_t*)0x4000003c |= FLAG)
#define Get_TIM2_CCR4(FLAG)                  (*(uint32_t*)0x40000040 |= FLAG)
#define Get_TIM2_DCR(FLAG)                   (*(uint32_t*)0x40000048 |= FLAG)
#define Get_TIM2_DMAR(FLAG)                  (*(uint32_t*)0x4000004c |= FLAG)
#define Get_TIM2_OR1(FLAG)                   (*(uint32_t*)0x40000050 |= FLAG)
#define Get_TIM2_OR2(FLAG)                   (*(uint32_t*)0x40000060 |= FLAG)
#define Get_TIM3_CR1(FLAG)                   (*(uint32_t*)0x40000400 |= FLAG)
#define Get_TIM3_CR2(FLAG)                   (*(uint32_t*)0x40000404 |= FLAG)
#define Get_TIM3_SMCR(FLAG)                  (*(uint32_t*)0x40000408 |= FLAG)
#define Get_TIM3_DIER(FLAG)                  (*(uint32_t*)0x4000040c |= FLAG)
#define Get_TIM3_SR(FLAG)                    (*(uint32_t*)0x40000410 |= FLAG)
#define Get_TIM3_EGR(FLAG)                   (*(uint32_t*)0x40000414 |= FLAG)
#define Get_TIM3_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000418 |= FLAG)
#define Get_TIM3_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000418 |= FLAG)
#define Get_TIM3_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000041c |= FLAG)
#define Get_TIM3_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000041c |= FLAG)
#define Get_TIM3_CCER(FLAG)                  (*(uint32_t*)0x40000420 |= FLAG)
#define Get_TIM3_CNT(FLAG)                   (*(uint32_t*)0x40000424 |= FLAG)
#define Get_TIM3_PSC(FLAG)                   (*(uint32_t*)0x40000428 |= FLAG)
#define Get_TIM3_ARR(FLAG)                   (*(uint32_t*)0x4000042c |= FLAG)
#define Get_TIM3_CCR1(FLAG)                  (*(uint32_t*)0x40000434 |= FLAG)
#define Get_TIM3_CCR2(FLAG)                  (*(uint32_t*)0x40000438 |= FLAG)
#define Get_TIM3_CCR3(FLAG)                  (*(uint32_t*)0x4000043c |= FLAG)
#define Get_TIM3_CCR4(FLAG)                  (*(uint32_t*)0x40000440 |= FLAG)
#define Get_TIM3_DCR(FLAG)                   (*(uint32_t*)0x40000448 |= FLAG)
#define Get_TIM3_DMAR(FLAG)                  (*(uint32_t*)0x4000044c |= FLAG)
#define Get_TIM3_OR1(FLAG)                   (*(uint32_t*)0x40000450 |= FLAG)
#define Get_TIM3_OR2(FLAG)                   (*(uint32_t*)0x40000460 |= FLAG)
#define Get_TIM4_CR1(FLAG)                   (*(uint32_t*)0x40000800 |= FLAG)
#define Get_TIM4_CR2(FLAG)                   (*(uint32_t*)0x40000804 |= FLAG)
#define Get_TIM4_SMCR(FLAG)                  (*(uint32_t*)0x40000808 |= FLAG)
#define Get_TIM4_DIER(FLAG)                  (*(uint32_t*)0x4000080c |= FLAG)
#define Get_TIM4_SR(FLAG)                    (*(uint32_t*)0x40000810 |= FLAG)
#define Get_TIM4_EGR(FLAG)                   (*(uint32_t*)0x40000814 |= FLAG)
#define Get_TIM4_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000818 |= FLAG)
#define Get_TIM4_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000818 |= FLAG)
#define Get_TIM4_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000081c |= FLAG)
#define Get_TIM4_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000081c |= FLAG)
#define Get_TIM4_CCER(FLAG)                  (*(uint32_t*)0x40000820 |= FLAG)
#define Get_TIM4_CNT(FLAG)                   (*(uint32_t*)0x40000824 |= FLAG)
#define Get_TIM4_PSC(FLAG)                   (*(uint32_t*)0x40000828 |= FLAG)
#define Get_TIM4_ARR(FLAG)                   (*(uint32_t*)0x4000082c |= FLAG)
#define Get_TIM4_CCR1(FLAG)                  (*(uint32_t*)0x40000834 |= FLAG)
#define Get_TIM4_CCR2(FLAG)                  (*(uint32_t*)0x40000838 |= FLAG)
#define Get_TIM4_CCR3(FLAG)                  (*(uint32_t*)0x4000083c |= FLAG)
#define Get_TIM4_CCR4(FLAG)                  (*(uint32_t*)0x40000840 |= FLAG)
#define Get_TIM4_DCR(FLAG)                   (*(uint32_t*)0x40000848 |= FLAG)
#define Get_TIM4_DMAR(FLAG)                  (*(uint32_t*)0x4000084c |= FLAG)
#define Get_TIM5_CR1(FLAG)                   (*(uint32_t*)0x40000c00 |= FLAG)
#define Get_TIM5_CR2(FLAG)                   (*(uint32_t*)0x40000c04 |= FLAG)
#define Get_TIM5_SMCR(FLAG)                  (*(uint32_t*)0x40000c08 |= FLAG)
#define Get_TIM5_DIER(FLAG)                  (*(uint32_t*)0x40000c0c |= FLAG)
#define Get_TIM5_SR(FLAG)                    (*(uint32_t*)0x40000c10 |= FLAG)
#define Get_TIM5_EGR(FLAG)                   (*(uint32_t*)0x40000c14 |= FLAG)
#define Get_TIM5_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000c18 |= FLAG)
#define Get_TIM5_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000c18 |= FLAG)
#define Get_TIM5_CCMR2_Output(FLAG)          (*(uint32_t*)0x40000c1c |= FLAG)
#define Get_TIM5_CCMR2_Input(FLAG)           (*(uint32_t*)0x40000c1c |= FLAG)
#define Get_TIM5_CCER(FLAG)                  (*(uint32_t*)0x40000c20 |= FLAG)
#define Get_TIM5_CNT(FLAG)                   (*(uint32_t*)0x40000c24 |= FLAG)
#define Get_TIM5_PSC(FLAG)                   (*(uint32_t*)0x40000c28 |= FLAG)
#define Get_TIM5_ARR(FLAG)                   (*(uint32_t*)0x40000c2c |= FLAG)
#define Get_TIM5_CCR1(FLAG)                  (*(uint32_t*)0x40000c34 |= FLAG)
#define Get_TIM5_CCR2(FLAG)                  (*(uint32_t*)0x40000c38 |= FLAG)
#define Get_TIM5_CCR3(FLAG)                  (*(uint32_t*)0x40000c3c |= FLAG)
#define Get_TIM5_CCR4(FLAG)                  (*(uint32_t*)0x40000c40 |= FLAG)
#define Get_TIM5_DCR(FLAG)                   (*(uint32_t*)0x40000c48 |= FLAG)
#define Get_TIM5_DMAR(FLAG)                  (*(uint32_t*)0x40000c4c |= FLAG)
#define Get_TIM6_CR1(FLAG)                   (*(uint32_t*)0x40001000 |= FLAG)
#define Get_TIM6_CR2(FLAG)                   (*(uint32_t*)0x40001004 |= FLAG)
#define Get_TIM6_DIER(FLAG)                  (*(uint32_t*)0x4000100c |= FLAG)
#define Get_TIM6_SR(FLAG)                    (*(uint32_t*)0x40001010 |= FLAG)
#define Get_TIM6_EGR(FLAG)                   (*(uint32_t*)0x40001014 |= FLAG)
#define Get_TIM6_CNT(FLAG)                   (*(uint32_t*)0x40001024 |= FLAG)
#define Get_TIM6_PSC(FLAG)                   (*(uint32_t*)0x40001028 |= FLAG)
#define Get_TIM6_ARR(FLAG)                   (*(uint32_t*)0x4000102c |= FLAG)
#define Get_TIM7_CR1(FLAG)                   (*(uint32_t*)0x40001400 |= FLAG)
#define Get_TIM7_CR2(FLAG)                   (*(uint32_t*)0x40001404 |= FLAG)
#define Get_TIM7_DIER(FLAG)                  (*(uint32_t*)0x4000140c |= FLAG)
#define Get_TIM7_SR(FLAG)                    (*(uint32_t*)0x40001410 |= FLAG)
#define Get_TIM7_EGR(FLAG)                   (*(uint32_t*)0x40001414 |= FLAG)
#define Get_TIM7_CNT(FLAG)                   (*(uint32_t*)0x40001424 |= FLAG)
#define Get_TIM7_PSC(FLAG)                   (*(uint32_t*)0x40001428 |= FLAG)
#define Get_TIM7_ARR(FLAG)                   (*(uint32_t*)0x4000142c |= FLAG)
#define Get_TIM12_CR1(FLAG)                  (*(uint32_t*)0x40001800 |= FLAG)
#define Get_TIM12_SMCR(FLAG)                 (*(uint32_t*)0x40001808 |= FLAG)
#define Get_TIM12_DIER(FLAG)                 (*(uint32_t*)0x4000180c |= FLAG)
#define Get_TIM12_SR(FLAG)                   (*(uint32_t*)0x40001810 |= FLAG)
#define Get_TIM12_EGR(FLAG)                  (*(uint32_t*)0x40001814 |= FLAG)
#define Get_TIM12_CCMR1_Output(FLAG)         (*(uint32_t*)0x40001818 |= FLAG)
#define Get_TIM12_CCMR1_Input(FLAG)          (*(uint32_t*)0x40001818 |= FLAG)
#define Get_TIM12_CCER(FLAG)                 (*(uint32_t*)0x40001820 |= FLAG)
#define Get_TIM12_CNT(FLAG)                  (*(uint32_t*)0x40001824 |= FLAG)
#define Get_TIM12_PSC(FLAG)                  (*(uint32_t*)0x40001828 |= FLAG)
#define Get_TIM12_ARR(FLAG)                  (*(uint32_t*)0x4000182c |= FLAG)
#define Get_TIM12_CCR1(FLAG)                 (*(uint32_t*)0x40001834 |= FLAG)
#define Get_TIM12_CCR2(FLAG)                 (*(uint32_t*)0x40001838 |= FLAG)
#define Get_TIM13_CR1(FLAG)                  (*(uint32_t*)0x40001c00 |= FLAG)
#define Get_TIM13_DIER(FLAG)                 (*(uint32_t*)0x40001c0c |= FLAG)
#define Get_TIM13_SR(FLAG)                   (*(uint32_t*)0x40001c10 |= FLAG)
#define Get_TIM13_EGR(FLAG)                  (*(uint32_t*)0x40001c14 |= FLAG)
#define Get_TIM13_CCMR1_Output(FLAG)         (*(uint32_t*)0x40001c18 |= FLAG)
#define Get_TIM13_CCMR1_Input(FLAG)          (*(uint32_t*)0x40001c18 |= FLAG)
#define Get_TIM13_CCER(FLAG)                 (*(uint32_t*)0x40001c20 |= FLAG)
#define Get_TIM13_CNT(FLAG)                  (*(uint32_t*)0x40001c24 |= FLAG)
#define Get_TIM13_PSC(FLAG)                  (*(uint32_t*)0x40001c28 |= FLAG)
#define Get_TIM13_ARR(FLAG)                  (*(uint32_t*)0x40001c2c |= FLAG)
#define Get_TIM13_CCR1(FLAG)                 (*(uint32_t*)0x40001c34 |= FLAG)
#define Get_TIM13_SMCR(FLAG)                 (*(uint32_t*)0x40001c08 |= FLAG)
#define Get_TIM13_OR(FLAG)                   (*(uint32_t*)0x40001c50 |= FLAG)
#define Get_TIM14_CR1(FLAG)                  (*(uint32_t*)0x40002000 |= FLAG)
#define Get_TIM14_DIER(FLAG)                 (*(uint32_t*)0x4000200c |= FLAG)
#define Get_TIM14_SR(FLAG)                   (*(uint32_t*)0x40002010 |= FLAG)
#define Get_TIM14_EGR(FLAG)                  (*(uint32_t*)0x40002014 |= FLAG)
#define Get_TIM14_CCMR1_Output(FLAG)         (*(uint32_t*)0x40002018 |= FLAG)
#define Get_TIM14_CCMR1_Input(FLAG)          (*(uint32_t*)0x40002018 |= FLAG)
#define Get_TIM14_CCER(FLAG)                 (*(uint32_t*)0x40002020 |= FLAG)
#define Get_TIM14_CNT(FLAG)                  (*(uint32_t*)0x40002024 |= FLAG)
#define Get_TIM14_PSC(FLAG)                  (*(uint32_t*)0x40002028 |= FLAG)
#define Get_TIM14_ARR(FLAG)                  (*(uint32_t*)0x4000202c |= FLAG)
#define Get_TIM14_CCR1(FLAG)                 (*(uint32_t*)0x40002034 |= FLAG)
#define Get_TIM14_SMCR(FLAG)                 (*(uint32_t*)0x40002008 |= FLAG)
#define Get_TIM14_OR(FLAG)                   (*(uint32_t*)0x40002050 |= FLAG)
#define Get_TIM1_CR1(FLAG)                   (*(uint32_t*)0x40010000 |= FLAG)
#define Get_TIM1_CR2(FLAG)                   (*(uint32_t*)0x40010004 |= FLAG)
#define Get_TIM1_SMCR(FLAG)                  (*(uint32_t*)0x40010008 |= FLAG)
#define Get_TIM1_DIER(FLAG)                  (*(uint32_t*)0x4001000c |= FLAG)
#define Get_TIM1_SR(FLAG)                    (*(uint32_t*)0x40010010 |= FLAG)
#define Get_TIM1_EGR(FLAG)                   (*(uint32_t*)0x40010014 |= FLAG)
#define Get_TIM1_CCMR1_Output(FLAG)          (*(uint32_t*)0x40010018 |= FLAG)
#define Get_TIM1_CCMR1_Input(FLAG)           (*(uint32_t*)0x40010018 |= FLAG)
#define Get_TIM1_CCMR2_Output(FLAG)          (*(uint32_t*)0x4001001c |= FLAG)
#define Get_TIM1_CCMR2_Input(FLAG)           (*(uint32_t*)0x4001001c |= FLAG)
#define Get_TIM1_CCER(FLAG)                  (*(uint32_t*)0x40010020 |= FLAG)
#define Get_TIM1_CNT(FLAG)                   (*(uint32_t*)0x40010024 |= FLAG)
#define Get_TIM1_PSC(FLAG)                   (*(uint32_t*)0x40010028 |= FLAG)
#define Get_TIM1_ARR(FLAG)                   (*(uint32_t*)0x4001002c |= FLAG)
#define Get_TIM1_CCR1(FLAG)                  (*(uint32_t*)0x40010034 |= FLAG)
#define Get_TIM1_CCR2(FLAG)                  (*(uint32_t*)0x40010038 |= FLAG)
#define Get_TIM1_CCR3(FLAG)                  (*(uint32_t*)0x4001003c |= FLAG)
#define Get_TIM1_CCR4(FLAG)                  (*(uint32_t*)0x40010040 |= FLAG)
#define Get_TIM1_DCR(FLAG)                   (*(uint32_t*)0x40010048 |= FLAG)
#define Get_TIM1_DMAR(FLAG)                  (*(uint32_t*)0x4001004c |= FLAG)
#define Get_TIM1_RCR(FLAG)                   (*(uint32_t*)0x40010030 |= FLAG)
#define Get_TIM1_BDTR(FLAG)                  (*(uint32_t*)0x40010044 |= FLAG)
#define Get_TIM1_CCMR3_Output(FLAG)          (*(uint32_t*)0x40010054 |= FLAG)
#define Get_TIM1_CCR5(FLAG)                  (*(uint32_t*)0x40010058 |= FLAG)
#define Get_TIM1_CRR6(FLAG)                  (*(uint32_t*)0x4001005c |= FLAG)
#define Get_TIM1_AF1(FLAG)                   (*(uint32_t*)0x40010060 |= FLAG)
#define Get_TIM1_AF2(FLAG)                   (*(uint32_t*)0x40010064 |= FLAG)
#define Get_TIM8_CR1(FLAG)                   (*(uint32_t*)0x40010400 |= FLAG)
#define Get_TIM8_CR2(FLAG)                   (*(uint32_t*)0x40010404 |= FLAG)
#define Get_TIM8_SMCR(FLAG)                  (*(uint32_t*)0x40010408 |= FLAG)
#define Get_TIM8_DIER(FLAG)                  (*(uint32_t*)0x4001040c |= FLAG)
#define Get_TIM8_SR(FLAG)                    (*(uint32_t*)0x40010410 |= FLAG)
#define Get_TIM8_EGR(FLAG)                   (*(uint32_t*)0x40010414 |= FLAG)
#define Get_TIM8_CCMR1_Output(FLAG)          (*(uint32_t*)0x40010418 |= FLAG)
#define Get_TIM8_CCMR1_Input(FLAG)           (*(uint32_t*)0x40010418 |= FLAG)
#define Get_TIM8_CCMR2_Output(FLAG)          (*(uint32_t*)0x4001041c |= FLAG)
#define Get_TIM8_CCMR2_Input(FLAG)           (*(uint32_t*)0x4001041c |= FLAG)
#define Get_TIM8_CCER(FLAG)                  (*(uint32_t*)0x40010420 |= FLAG)
#define Get_TIM8_CNT(FLAG)                   (*(uint32_t*)0x40010424 |= FLAG)
#define Get_TIM8_PSC(FLAG)                   (*(uint32_t*)0x40010428 |= FLAG)
#define Get_TIM8_ARR(FLAG)                   (*(uint32_t*)0x4001042c |= FLAG)
#define Get_TIM8_CCR1(FLAG)                  (*(uint32_t*)0x40010434 |= FLAG)
#define Get_TIM8_CCR2(FLAG)                  (*(uint32_t*)0x40010438 |= FLAG)
#define Get_TIM8_CCR3(FLAG)                  (*(uint32_t*)0x4001043c |= FLAG)
#define Get_TIM8_CCR4(FLAG)                  (*(uint32_t*)0x40010440 |= FLAG)
#define Get_TIM8_DCR(FLAG)                   (*(uint32_t*)0x40010448 |= FLAG)
#define Get_TIM8_DMAR(FLAG)                  (*(uint32_t*)0x4001044c |= FLAG)
#define Get_TIM8_RCR(FLAG)                   (*(uint32_t*)0x40010430 |= FLAG)
#define Get_TIM8_BDTR(FLAG)                  (*(uint32_t*)0x40010444 |= FLAG)
#define Get_TIM8_CCMR3_Output(FLAG)          (*(uint32_t*)0x40010454 |= FLAG)
#define Get_TIM8_CCR5(FLAG)                  (*(uint32_t*)0x40010458 |= FLAG)
#define Get_TIM8_CRR6(FLAG)                  (*(uint32_t*)0x4001045c |= FLAG)
#define Get_TIM8_AF1(FLAG)                   (*(uint32_t*)0x40010460 |= FLAG)
#define Get_TIM8_AF2(FLAG)                   (*(uint32_t*)0x40010464 |= FLAG)
#define Get_TIM9_CR1(FLAG)                   (*(uint32_t*)0x40014000 |= FLAG)
#define Get_TIM9_SMCR(FLAG)                  (*(uint32_t*)0x40014008 |= FLAG)
#define Get_TIM9_DIER(FLAG)                  (*(uint32_t*)0x4001400c |= FLAG)
#define Get_TIM9_SR(FLAG)                    (*(uint32_t*)0x40014010 |= FLAG)
#define Get_TIM9_EGR(FLAG)                   (*(uint32_t*)0x40014014 |= FLAG)
#define Get_TIM9_CCMR1_Output(FLAG)          (*(uint32_t*)0x40014018 |= FLAG)
#define Get_TIM9_CCMR1_Input(FLAG)           (*(uint32_t*)0x40014018 |= FLAG)
#define Get_TIM9_CCER(FLAG)                  (*(uint32_t*)0x40014020 |= FLAG)
#define Get_TIM9_CNT(FLAG)                   (*(uint32_t*)0x40014024 |= FLAG)
#define Get_TIM9_PSC(FLAG)                   (*(uint32_t*)0x40014028 |= FLAG)
#define Get_TIM9_ARR(FLAG)                   (*(uint32_t*)0x4001402c |= FLAG)
#define Get_TIM9_CCR1(FLAG)                  (*(uint32_t*)0x40014034 |= FLAG)
#define Get_TIM9_CCR2(FLAG)                  (*(uint32_t*)0x40014038 |= FLAG)
#define Get_TIM10_CR1(FLAG)                  (*(uint32_t*)0x40014400 |= FLAG)
#define Get_TIM10_DIER(FLAG)                 (*(uint32_t*)0x4001440c |= FLAG)
#define Get_TIM10_SR(FLAG)                   (*(uint32_t*)0x40014410 |= FLAG)
#define Get_TIM10_EGR(FLAG)                  (*(uint32_t*)0x40014414 |= FLAG)
#define Get_TIM10_CCMR1_Output(FLAG)         (*(uint32_t*)0x40014418 |= FLAG)
#define Get_TIM10_CCMR1_Input(FLAG)          (*(uint32_t*)0x40014418 |= FLAG)
#define Get_TIM10_CCER(FLAG)                 (*(uint32_t*)0x40014420 |= FLAG)
#define Get_TIM10_CNT(FLAG)                  (*(uint32_t*)0x40014424 |= FLAG)
#define Get_TIM10_PSC(FLAG)                  (*(uint32_t*)0x40014428 |= FLAG)
#define Get_TIM10_ARR(FLAG)                  (*(uint32_t*)0x4001442c |= FLAG)
#define Get_TIM10_CCR1(FLAG)                 (*(uint32_t*)0x40014434 |= FLAG)
#define Get_TIM10_SMCR(FLAG)                 (*(uint32_t*)0x40014408 |= FLAG)
#define Get_TIM10_OR(FLAG)                   (*(uint32_t*)0x40014450 |= FLAG)
#define Get_TIM11_CR1(FLAG)                  (*(uint32_t*)0x40014800 |= FLAG)
#define Get_TIM11_DIER(FLAG)                 (*(uint32_t*)0x4001480c |= FLAG)
#define Get_TIM11_SR(FLAG)                   (*(uint32_t*)0x40014810 |= FLAG)
#define Get_TIM11_EGR(FLAG)                  (*(uint32_t*)0x40014814 |= FLAG)
#define Get_TIM11_CCMR1_Output(FLAG)         (*(uint32_t*)0x40014818 |= FLAG)
#define Get_TIM11_CCMR1_Input(FLAG)          (*(uint32_t*)0x40014818 |= FLAG)
#define Get_TIM11_CCER(FLAG)                 (*(uint32_t*)0x40014820 |= FLAG)
#define Get_TIM11_CNT(FLAG)                  (*(uint32_t*)0x40014824 |= FLAG)
#define Get_TIM11_PSC(FLAG)                  (*(uint32_t*)0x40014828 |= FLAG)
#define Get_TIM11_ARR(FLAG)                  (*(uint32_t*)0x4001482c |= FLAG)
#define Get_TIM11_CCR1(FLAG)                 (*(uint32_t*)0x40014834 |= FLAG)
#define Get_TIM11_SMCR(FLAG)                 (*(uint32_t*)0x40014808 |= FLAG)
#define Get_TIM11_OR(FLAG)                   (*(uint32_t*)0x40014850 |= FLAG)
#define Set_TIM2_CR1(FLAG)                   (*(uint32_t*)0x40000000 &= FLAG)
#define Clr_TIM2_CR1(FLAG)                   (*(uint32_t*)0x40000000 |= ~FLAG)
#define Set_TIM2_CR2(FLAG)                   (*(uint32_t*)0x40000004 &= FLAG)
#define Clr_TIM2_CR2(FLAG)                   (*(uint32_t*)0x40000004 |= ~FLAG)
#define Set_TIM2_SMCR(FLAG)                  (*(uint32_t*)0x40000008 &= FLAG)
#define Clr_TIM2_SMCR(FLAG)                  (*(uint32_t*)0x40000008 |= ~FLAG)
#define Set_TIM2_DIER(FLAG)                  (*(uint32_t*)0x4000000c &= FLAG)
#define Clr_TIM2_DIER(FLAG)                  (*(uint32_t*)0x4000000c |= ~FLAG)
#define Set_TIM2_SR(FLAG)                    (*(uint32_t*)0x40000010 &= FLAG)
#define Clr_TIM2_SR(FLAG)                    (*(uint32_t*)0x40000010 |= ~FLAG)
#define Set_TIM2_EGR(FLAG)                   (*(uint32_t*)0x40000014 &= FLAG)
#define Clr_TIM2_EGR(FLAG)                   (*(uint32_t*)0x40000014 |= ~FLAG)
#define Set_TIM2_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000018 &= FLAG)
#define Clr_TIM2_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000018 |= ~FLAG)
#define Set_TIM2_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000018 &= FLAG)
#define Clr_TIM2_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000018 |= ~FLAG)
#define Set_TIM2_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000001c &= FLAG)
#define Clr_TIM2_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000001c |= ~FLAG)
#define Set_TIM2_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000001c &= FLAG)
#define Clr_TIM2_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000001c |= ~FLAG)
#define Set_TIM2_CCER(FLAG)                  (*(uint32_t*)0x40000020 &= FLAG)
#define Clr_TIM2_CCER(FLAG)                  (*(uint32_t*)0x40000020 |= ~FLAG)
#define Set_TIM2_CNT(FLAG)                   (*(uint32_t*)0x40000024 &= FLAG)
#define Clr_TIM2_CNT(FLAG)                   (*(uint32_t*)0x40000024 |= ~FLAG)
#define Set_TIM2_PSC(FLAG)                   (*(uint32_t*)0x40000028 &= FLAG)
#define Clr_TIM2_PSC(FLAG)                   (*(uint32_t*)0x40000028 |= ~FLAG)
#define Set_TIM2_ARR(FLAG)                   (*(uint32_t*)0x4000002c &= FLAG)
#define Clr_TIM2_ARR(FLAG)                   (*(uint32_t*)0x4000002c |= ~FLAG)
#define Set_TIM2_CCR1(FLAG)                  (*(uint32_t*)0x40000034 &= FLAG)
#define Clr_TIM2_CCR1(FLAG)                  (*(uint32_t*)0x40000034 |= ~FLAG)
#define Set_TIM2_CCR2(FLAG)                  (*(uint32_t*)0x40000038 &= FLAG)
#define Clr_TIM2_CCR2(FLAG)                  (*(uint32_t*)0x40000038 |= ~FLAG)
#define Set_TIM2_CCR3(FLAG)                  (*(uint32_t*)0x4000003c &= FLAG)
#define Clr_TIM2_CCR3(FLAG)                  (*(uint32_t*)0x4000003c |= ~FLAG)
#define Set_TIM2_CCR4(FLAG)                  (*(uint32_t*)0x40000040 &= FLAG)
#define Clr_TIM2_CCR4(FLAG)                  (*(uint32_t*)0x40000040 |= ~FLAG)
#define Set_TIM2_DCR(FLAG)                   (*(uint32_t*)0x40000048 &= FLAG)
#define Clr_TIM2_DCR(FLAG)                   (*(uint32_t*)0x40000048 |= ~FLAG)
#define Set_TIM2_DMAR(FLAG)                  (*(uint32_t*)0x4000004c &= FLAG)
#define Clr_TIM2_DMAR(FLAG)                  (*(uint32_t*)0x4000004c |= ~FLAG)
#define Set_TIM2_OR1(FLAG)                   (*(uint32_t*)0x40000050 &= FLAG)
#define Clr_TIM2_OR1(FLAG)                   (*(uint32_t*)0x40000050 |= ~FLAG)
#define Set_TIM2_OR2(FLAG)                   (*(uint32_t*)0x40000060 &= FLAG)
#define Clr_TIM2_OR2(FLAG)                   (*(uint32_t*)0x40000060 |= ~FLAG)
#define Set_TIM3_CR1(FLAG)                   (*(uint32_t*)0x40000400 &= FLAG)
#define Clr_TIM3_CR1(FLAG)                   (*(uint32_t*)0x40000400 |= ~FLAG)
#define Set_TIM3_CR2(FLAG)                   (*(uint32_t*)0x40000404 &= FLAG)
#define Clr_TIM3_CR2(FLAG)                   (*(uint32_t*)0x40000404 |= ~FLAG)
#define Set_TIM3_SMCR(FLAG)                  (*(uint32_t*)0x40000408 &= FLAG)
#define Clr_TIM3_SMCR(FLAG)                  (*(uint32_t*)0x40000408 |= ~FLAG)
#define Set_TIM3_DIER(FLAG)                  (*(uint32_t*)0x4000040c &= FLAG)
#define Clr_TIM3_DIER(FLAG)                  (*(uint32_t*)0x4000040c |= ~FLAG)
#define Set_TIM3_SR(FLAG)                    (*(uint32_t*)0x40000410 &= FLAG)
#define Clr_TIM3_SR(FLAG)                    (*(uint32_t*)0x40000410 |= ~FLAG)
#define Set_TIM3_EGR(FLAG)                   (*(uint32_t*)0x40000414 &= FLAG)
#define Clr_TIM3_EGR(FLAG)                   (*(uint32_t*)0x40000414 |= ~FLAG)
#define Set_TIM3_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000418 &= FLAG)
#define Clr_TIM3_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000418 |= ~FLAG)
#define Set_TIM3_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000418 &= FLAG)
#define Clr_TIM3_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000418 |= ~FLAG)
#define Set_TIM3_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000041c &= FLAG)
#define Clr_TIM3_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000041c |= ~FLAG)
#define Set_TIM3_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000041c &= FLAG)
#define Clr_TIM3_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000041c |= ~FLAG)
#define Set_TIM3_CCER(FLAG)                  (*(uint32_t*)0x40000420 &= FLAG)
#define Clr_TIM3_CCER(FLAG)                  (*(uint32_t*)0x40000420 |= ~FLAG)
#define Set_TIM3_CNT(FLAG)                   (*(uint32_t*)0x40000424 &= FLAG)
#define Clr_TIM3_CNT(FLAG)                   (*(uint32_t*)0x40000424 |= ~FLAG)
#define Set_TIM3_PSC(FLAG)                   (*(uint32_t*)0x40000428 &= FLAG)
#define Clr_TIM3_PSC(FLAG)                   (*(uint32_t*)0x40000428 |= ~FLAG)
#define Set_TIM3_ARR(FLAG)                   (*(uint32_t*)0x4000042c &= FLAG)
#define Clr_TIM3_ARR(FLAG)                   (*(uint32_t*)0x4000042c |= ~FLAG)
#define Set_TIM3_CCR1(FLAG)                  (*(uint32_t*)0x40000434 &= FLAG)
#define Clr_TIM3_CCR1(FLAG)                  (*(uint32_t*)0x40000434 |= ~FLAG)
#define Set_TIM3_CCR2(FLAG)                  (*(uint32_t*)0x40000438 &= FLAG)
#define Clr_TIM3_CCR2(FLAG)                  (*(uint32_t*)0x40000438 |= ~FLAG)
#define Set_TIM3_CCR3(FLAG)                  (*(uint32_t*)0x4000043c &= FLAG)
#define Clr_TIM3_CCR3(FLAG)                  (*(uint32_t*)0x4000043c |= ~FLAG)
#define Set_TIM3_CCR4(FLAG)                  (*(uint32_t*)0x40000440 &= FLAG)
#define Clr_TIM3_CCR4(FLAG)                  (*(uint32_t*)0x40000440 |= ~FLAG)
#define Set_TIM3_DCR(FLAG)                   (*(uint32_t*)0x40000448 &= FLAG)
#define Clr_TIM3_DCR(FLAG)                   (*(uint32_t*)0x40000448 |= ~FLAG)
#define Set_TIM3_DMAR(FLAG)                  (*(uint32_t*)0x4000044c &= FLAG)
#define Clr_TIM3_DMAR(FLAG)                  (*(uint32_t*)0x4000044c |= ~FLAG)
#define Set_TIM3_OR1(FLAG)                   (*(uint32_t*)0x40000450 &= FLAG)
#define Clr_TIM3_OR1(FLAG)                   (*(uint32_t*)0x40000450 |= ~FLAG)
#define Set_TIM3_OR2(FLAG)                   (*(uint32_t*)0x40000460 &= FLAG)
#define Clr_TIM3_OR2(FLAG)                   (*(uint32_t*)0x40000460 |= ~FLAG)
#define Set_TIM4_CR1(FLAG)                   (*(uint32_t*)0x40000800 &= FLAG)
#define Clr_TIM4_CR1(FLAG)                   (*(uint32_t*)0x40000800 |= ~FLAG)
#define Set_TIM4_CR2(FLAG)                   (*(uint32_t*)0x40000804 &= FLAG)
#define Clr_TIM4_CR2(FLAG)                   (*(uint32_t*)0x40000804 |= ~FLAG)
#define Set_TIM4_SMCR(FLAG)                  (*(uint32_t*)0x40000808 &= FLAG)
#define Clr_TIM4_SMCR(FLAG)                  (*(uint32_t*)0x40000808 |= ~FLAG)
#define Set_TIM4_DIER(FLAG)                  (*(uint32_t*)0x4000080c &= FLAG)
#define Clr_TIM4_DIER(FLAG)                  (*(uint32_t*)0x4000080c |= ~FLAG)
#define Set_TIM4_SR(FLAG)                    (*(uint32_t*)0x40000810 &= FLAG)
#define Clr_TIM4_SR(FLAG)                    (*(uint32_t*)0x40000810 |= ~FLAG)
#define Set_TIM4_EGR(FLAG)                   (*(uint32_t*)0x40000814 &= FLAG)
#define Clr_TIM4_EGR(FLAG)                   (*(uint32_t*)0x40000814 |= ~FLAG)
#define Set_TIM4_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000818 &= FLAG)
#define Clr_TIM4_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000818 |= ~FLAG)
#define Set_TIM4_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000818 &= FLAG)
#define Clr_TIM4_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000818 |= ~FLAG)
#define Set_TIM4_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000081c &= FLAG)
#define Clr_TIM4_CCMR2_Output(FLAG)          (*(uint32_t*)0x4000081c |= ~FLAG)
#define Set_TIM4_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000081c &= FLAG)
#define Clr_TIM4_CCMR2_Input(FLAG)           (*(uint32_t*)0x4000081c |= ~FLAG)
#define Set_TIM4_CCER(FLAG)                  (*(uint32_t*)0x40000820 &= FLAG)
#define Clr_TIM4_CCER(FLAG)                  (*(uint32_t*)0x40000820 |= ~FLAG)
#define Set_TIM4_CNT(FLAG)                   (*(uint32_t*)0x40000824 &= FLAG)
#define Clr_TIM4_CNT(FLAG)                   (*(uint32_t*)0x40000824 |= ~FLAG)
#define Set_TIM4_PSC(FLAG)                   (*(uint32_t*)0x40000828 &= FLAG)
#define Clr_TIM4_PSC(FLAG)                   (*(uint32_t*)0x40000828 |= ~FLAG)
#define Set_TIM4_ARR(FLAG)                   (*(uint32_t*)0x4000082c &= FLAG)
#define Clr_TIM4_ARR(FLAG)                   (*(uint32_t*)0x4000082c |= ~FLAG)
#define Set_TIM4_CCR1(FLAG)                  (*(uint32_t*)0x40000834 &= FLAG)
#define Clr_TIM4_CCR1(FLAG)                  (*(uint32_t*)0x40000834 |= ~FLAG)
#define Set_TIM4_CCR2(FLAG)                  (*(uint32_t*)0x40000838 &= FLAG)
#define Clr_TIM4_CCR2(FLAG)                  (*(uint32_t*)0x40000838 |= ~FLAG)
#define Set_TIM4_CCR3(FLAG)                  (*(uint32_t*)0x4000083c &= FLAG)
#define Clr_TIM4_CCR3(FLAG)                  (*(uint32_t*)0x4000083c |= ~FLAG)
#define Set_TIM4_CCR4(FLAG)                  (*(uint32_t*)0x40000840 &= FLAG)
#define Clr_TIM4_CCR4(FLAG)                  (*(uint32_t*)0x40000840 |= ~FLAG)
#define Set_TIM4_DCR(FLAG)                   (*(uint32_t*)0x40000848 &= FLAG)
#define Clr_TIM4_DCR(FLAG)                   (*(uint32_t*)0x40000848 |= ~FLAG)
#define Set_TIM4_DMAR(FLAG)                  (*(uint32_t*)0x4000084c &= FLAG)
#define Clr_TIM4_DMAR(FLAG)                  (*(uint32_t*)0x4000084c |= ~FLAG)
#define Set_TIM5_CR1(FLAG)                   (*(uint32_t*)0x40000c00 &= FLAG)
#define Clr_TIM5_CR1(FLAG)                   (*(uint32_t*)0x40000c00 |= ~FLAG)
#define Set_TIM5_CR2(FLAG)                   (*(uint32_t*)0x40000c04 &= FLAG)
#define Clr_TIM5_CR2(FLAG)                   (*(uint32_t*)0x40000c04 |= ~FLAG)
#define Set_TIM5_SMCR(FLAG)                  (*(uint32_t*)0x40000c08 &= FLAG)
#define Clr_TIM5_SMCR(FLAG)                  (*(uint32_t*)0x40000c08 |= ~FLAG)
#define Set_TIM5_DIER(FLAG)                  (*(uint32_t*)0x40000c0c &= FLAG)
#define Clr_TIM5_DIER(FLAG)                  (*(uint32_t*)0x40000c0c |= ~FLAG)
#define Set_TIM5_SR(FLAG)                    (*(uint32_t*)0x40000c10 &= FLAG)
#define Clr_TIM5_SR(FLAG)                    (*(uint32_t*)0x40000c10 |= ~FLAG)
#define Set_TIM5_EGR(FLAG)                   (*(uint32_t*)0x40000c14 &= FLAG)
#define Clr_TIM5_EGR(FLAG)                   (*(uint32_t*)0x40000c14 |= ~FLAG)
#define Set_TIM5_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000c18 &= FLAG)
#define Clr_TIM5_CCMR1_Output(FLAG)          (*(uint32_t*)0x40000c18 |= ~FLAG)
#define Set_TIM5_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000c18 &= FLAG)
#define Clr_TIM5_CCMR1_Input(FLAG)           (*(uint32_t*)0x40000c18 |= ~FLAG)
#define Set_TIM5_CCMR2_Output(FLAG)          (*(uint32_t*)0x40000c1c &= FLAG)
#define Clr_TIM5_CCMR2_Output(FLAG)          (*(uint32_t*)0x40000c1c |= ~FLAG)
#define Set_TIM5_CCMR2_Input(FLAG)           (*(uint32_t*)0x40000c1c &= FLAG)
#define Clr_TIM5_CCMR2_Input(FLAG)           (*(uint32_t*)0x40000c1c |= ~FLAG)
#define Set_TIM5_CCER(FLAG)                  (*(uint32_t*)0x40000c20 &= FLAG)
#define Clr_TIM5_CCER(FLAG)                  (*(uint32_t*)0x40000c20 |= ~FLAG)
#define Set_TIM5_CNT(FLAG)                   (*(uint32_t*)0x40000c24 &= FLAG)
#define Clr_TIM5_CNT(FLAG)                   (*(uint32_t*)0x40000c24 |= ~FLAG)
#define Set_TIM5_PSC(FLAG)                   (*(uint32_t*)0x40000c28 &= FLAG)
#define Clr_TIM5_PSC(FLAG)                   (*(uint32_t*)0x40000c28 |= ~FLAG)
#define Set_TIM5_ARR(FLAG)                   (*(uint32_t*)0x40000c2c &= FLAG)
#define Clr_TIM5_ARR(FLAG)                   (*(uint32_t*)0x40000c2c |= ~FLAG)
#define Set_TIM5_CCR1(FLAG)                  (*(uint32_t*)0x40000c34 &= FLAG)
#define Clr_TIM5_CCR1(FLAG)                  (*(uint32_t*)0x40000c34 |= ~FLAG)
#define Set_TIM5_CCR2(FLAG)                  (*(uint32_t*)0x40000c38 &= FLAG)
#define Clr_TIM5_CCR2(FLAG)                  (*(uint32_t*)0x40000c38 |= ~FLAG)
#define Set_TIM5_CCR3(FLAG)                  (*(uint32_t*)0x40000c3c &= FLAG)
#define Clr_TIM5_CCR3(FLAG)                  (*(uint32_t*)0x40000c3c |= ~FLAG)
#define Set_TIM5_CCR4(FLAG)                  (*(uint32_t*)0x40000c40 &= FLAG)
#define Clr_TIM5_CCR4(FLAG)                  (*(uint32_t*)0x40000c40 |= ~FLAG)
#define Set_TIM5_DCR(FLAG)                   (*(uint32_t*)0x40000c48 &= FLAG)
#define Clr_TIM5_DCR(FLAG)                   (*(uint32_t*)0x40000c48 |= ~FLAG)
#define Set_TIM5_DMAR(FLAG)                  (*(uint32_t*)0x40000c4c &= FLAG)
#define Clr_TIM5_DMAR(FLAG)                  (*(uint32_t*)0x40000c4c |= ~FLAG)
#define Set_TIM6_CR1(FLAG)                   (*(uint32_t*)0x40001000 &= FLAG)
#define Clr_TIM6_CR1(FLAG)                   (*(uint32_t*)0x40001000 |= ~FLAG)
#define Set_TIM6_CR2(FLAG)                   (*(uint32_t*)0x40001004 &= FLAG)
#define Clr_TIM6_CR2(FLAG)                   (*(uint32_t*)0x40001004 |= ~FLAG)
#define Set_TIM6_DIER(FLAG)                  (*(uint32_t*)0x4000100c &= FLAG)
#define Clr_TIM6_DIER(FLAG)                  (*(uint32_t*)0x4000100c |= ~FLAG)
#define Set_TIM6_SR(FLAG)                    (*(uint32_t*)0x40001010 &= FLAG)
#define Clr_TIM6_SR(FLAG)                    (*(uint32_t*)0x40001010 |= ~FLAG)
#define Set_TIM6_EGR(FLAG)                   (*(uint32_t*)0x40001014 &= FLAG)
#define Clr_TIM6_EGR(FLAG)                   (*(uint32_t*)0x40001014 |= ~FLAG)
#define Set_TIM6_CNT(FLAG)                   (*(uint32_t*)0x40001024 &= FLAG)
#define Clr_TIM6_CNT(FLAG)                   (*(uint32_t*)0x40001024 |= ~FLAG)
#define Set_TIM6_PSC(FLAG)                   (*(uint32_t*)0x40001028 &= FLAG)
#define Clr_TIM6_PSC(FLAG)                   (*(uint32_t*)0x40001028 |= ~FLAG)
#define Set_TIM6_ARR(FLAG)                   (*(uint32_t*)0x4000102c &= FLAG)
#define Clr_TIM6_ARR(FLAG)                   (*(uint32_t*)0x4000102c |= ~FLAG)
#define Set_TIM7_CR1(FLAG)                   (*(uint32_t*)0x40001400 &= FLAG)
#define Clr_TIM7_CR1(FLAG)                   (*(uint32_t*)0x40001400 |= ~FLAG)
#define Set_TIM7_CR2(FLAG)                   (*(uint32_t*)0x40001404 &= FLAG)
#define Clr_TIM7_CR2(FLAG)                   (*(uint32_t*)0x40001404 |= ~FLAG)
#define Set_TIM7_DIER(FLAG)                  (*(uint32_t*)0x4000140c &= FLAG)
#define Clr_TIM7_DIER(FLAG)                  (*(uint32_t*)0x4000140c |= ~FLAG)
#define Set_TIM7_SR(FLAG)                    (*(uint32_t*)0x40001410 &= FLAG)
#define Clr_TIM7_SR(FLAG)                    (*(uint32_t*)0x40001410 |= ~FLAG)
#define Set_TIM7_EGR(FLAG)                   (*(uint32_t*)0x40001414 &= FLAG)
#define Clr_TIM7_EGR(FLAG)                   (*(uint32_t*)0x40001414 |= ~FLAG)
#define Set_TIM7_CNT(FLAG)                   (*(uint32_t*)0x40001424 &= FLAG)
#define Clr_TIM7_CNT(FLAG)                   (*(uint32_t*)0x40001424 |= ~FLAG)
#define Set_TIM7_PSC(FLAG)                   (*(uint32_t*)0x40001428 &= FLAG)
#define Clr_TIM7_PSC(FLAG)                   (*(uint32_t*)0x40001428 |= ~FLAG)
#define Set_TIM7_ARR(FLAG)                   (*(uint32_t*)0x4000142c &= FLAG)
#define Clr_TIM7_ARR(FLAG)                   (*(uint32_t*)0x4000142c |= ~FLAG)
#define Set_TIM12_CR1(FLAG)                  (*(uint32_t*)0x40001800 &= FLAG)
#define Clr_TIM12_CR1(FLAG)                  (*(uint32_t*)0x40001800 |= ~FLAG)
#define Set_TIM12_SMCR(FLAG)                 (*(uint32_t*)0x40001808 &= FLAG)
#define Clr_TIM12_SMCR(FLAG)                 (*(uint32_t*)0x40001808 |= ~FLAG)
#define Set_TIM12_DIER(FLAG)                 (*(uint32_t*)0x4000180c &= FLAG)
#define Clr_TIM12_DIER(FLAG)                 (*(uint32_t*)0x4000180c |= ~FLAG)
#define Set_TIM12_SR(FLAG)                   (*(uint32_t*)0x40001810 &= FLAG)
#define Clr_TIM12_SR(FLAG)                   (*(uint32_t*)0x40001810 |= ~FLAG)
#define Set_TIM12_EGR(FLAG)                  (*(uint32_t*)0x40001814 &= FLAG)
#define Clr_TIM12_EGR(FLAG)                  (*(uint32_t*)0x40001814 |= ~FLAG)
#define Set_TIM12_CCMR1_Output(FLAG)         (*(uint32_t*)0x40001818 &= FLAG)
#define Clr_TIM12_CCMR1_Output(FLAG)         (*(uint32_t*)0x40001818 |= ~FLAG)
#define Set_TIM12_CCMR1_Input(FLAG)          (*(uint32_t*)0x40001818 &= FLAG)
#define Clr_TIM12_CCMR1_Input(FLAG)          (*(uint32_t*)0x40001818 |= ~FLAG)
#define Set_TIM12_CCER(FLAG)                 (*(uint32_t*)0x40001820 &= FLAG)
#define Clr_TIM12_CCER(FLAG)                 (*(uint32_t*)0x40001820 |= ~FLAG)
#define Set_TIM12_CNT(FLAG)                  (*(uint32_t*)0x40001824 &= FLAG)
#define Clr_TIM12_CNT(FLAG)                  (*(uint32_t*)0x40001824 |= ~FLAG)
#define Set_TIM12_PSC(FLAG)                  (*(uint32_t*)0x40001828 &= FLAG)
#define Clr_TIM12_PSC(FLAG)                  (*(uint32_t*)0x40001828 |= ~FLAG)
#define Set_TIM12_ARR(FLAG)                  (*(uint32_t*)0x4000182c &= FLAG)
#define Clr_TIM12_ARR(FLAG)                  (*(uint32_t*)0x4000182c |= ~FLAG)
#define Set_TIM12_CCR1(FLAG)                 (*(uint32_t*)0x40001834 &= FLAG)
#define Clr_TIM12_CCR1(FLAG)                 (*(uint32_t*)0x40001834 |= ~FLAG)
#define Set_TIM12_CCR2(FLAG)                 (*(uint32_t*)0x40001838 &= FLAG)
#define Clr_TIM12_CCR2(FLAG)                 (*(uint32_t*)0x40001838 |= ~FLAG)
#define Set_TIM13_CR1(FLAG)                  (*(uint32_t*)0x40001c00 &= FLAG)
#define Clr_TIM13_CR1(FLAG)                  (*(uint32_t*)0x40001c00 |= ~FLAG)
#define Set_TIM13_DIER(FLAG)                 (*(uint32_t*)0x40001c0c &= FLAG)
#define Clr_TIM13_DIER(FLAG)                 (*(uint32_t*)0x40001c0c |= ~FLAG)
#define Set_TIM13_SR(FLAG)                   (*(uint32_t*)0x40001c10 &= FLAG)
#define Clr_TIM13_SR(FLAG)                   (*(uint32_t*)0x40001c10 |= ~FLAG)
#define Set_TIM13_EGR(FLAG)                  (*(uint32_t*)0x40001c14 &= FLAG)
#define Clr_TIM13_EGR(FLAG)                  (*(uint32_t*)0x40001c14 |= ~FLAG)
#define Set_TIM13_CCMR1_Output(FLAG)         (*(uint32_t*)0x40001c18 &= FLAG)
#define Clr_TIM13_CCMR1_Output(FLAG)         (*(uint32_t*)0x40001c18 |= ~FLAG)
#define Set_TIM13_CCMR1_Input(FLAG)          (*(uint32_t*)0x40001c18 &= FLAG)
#define Clr_TIM13_CCMR1_Input(FLAG)          (*(uint32_t*)0x40001c18 |= ~FLAG)
#define Set_TIM13_CCER(FLAG)                 (*(uint32_t*)0x40001c20 &= FLAG)
#define Clr_TIM13_CCER(FLAG)                 (*(uint32_t*)0x40001c20 |= ~FLAG)
#define Set_TIM13_CNT(FLAG)                  (*(uint32_t*)0x40001c24 &= FLAG)
#define Clr_TIM13_CNT(FLAG)                  (*(uint32_t*)0x40001c24 |= ~FLAG)
#define Set_TIM13_PSC(FLAG)                  (*(uint32_t*)0x40001c28 &= FLAG)
#define Clr_TIM13_PSC(FLAG)                  (*(uint32_t*)0x40001c28 |= ~FLAG)
#define Set_TIM13_ARR(FLAG)                  (*(uint32_t*)0x40001c2c &= FLAG)
#define Clr_TIM13_ARR(FLAG)                  (*(uint32_t*)0x40001c2c |= ~FLAG)
#define Set_TIM13_CCR1(FLAG)                 (*(uint32_t*)0x40001c34 &= FLAG)
#define Clr_TIM13_CCR1(FLAG)                 (*(uint32_t*)0x40001c34 |= ~FLAG)
#define Set_TIM13_SMCR(FLAG)                 (*(uint32_t*)0x40001c08 &= FLAG)
#define Clr_TIM13_SMCR(FLAG)                 (*(uint32_t*)0x40001c08 |= ~FLAG)
#define Set_TIM13_OR(FLAG)                   (*(uint32_t*)0x40001c50 &= FLAG)
#define Clr_TIM13_OR(FLAG)                   (*(uint32_t*)0x40001c50 |= ~FLAG)
#define Set_TIM14_CR1(FLAG)                  (*(uint32_t*)0x40002000 &= FLAG)
#define Clr_TIM14_CR1(FLAG)                  (*(uint32_t*)0x40002000 |= ~FLAG)
#define Set_TIM14_DIER(FLAG)                 (*(uint32_t*)0x4000200c &= FLAG)
#define Clr_TIM14_DIER(FLAG)                 (*(uint32_t*)0x4000200c |= ~FLAG)
#define Set_TIM14_SR(FLAG)                   (*(uint32_t*)0x40002010 &= FLAG)
#define Clr_TIM14_SR(FLAG)                   (*(uint32_t*)0x40002010 |= ~FLAG)
#define Set_TIM14_EGR(FLAG)                  (*(uint32_t*)0x40002014 &= FLAG)
#define Clr_TIM14_EGR(FLAG)                  (*(uint32_t*)0x40002014 |= ~FLAG)
#define Set_TIM14_CCMR1_Output(FLAG)         (*(uint32_t*)0x40002018 &= FLAG)
#define Clr_TIM14_CCMR1_Output(FLAG)         (*(uint32_t*)0x40002018 |= ~FLAG)
#define Set_TIM14_CCMR1_Input(FLAG)          (*(uint32_t*)0x40002018 &= FLAG)
#define Clr_TIM14_CCMR1_Input(FLAG)          (*(uint32_t*)0x40002018 |= ~FLAG)
#define Set_TIM14_CCER(FLAG)                 (*(uint32_t*)0x40002020 &= FLAG)
#define Clr_TIM14_CCER(FLAG)                 (*(uint32_t*)0x40002020 |= ~FLAG)
#define Set_TIM14_CNT(FLAG)                  (*(uint32_t*)0x40002024 &= FLAG)
#define Clr_TIM14_CNT(FLAG)                  (*(uint32_t*)0x40002024 |= ~FLAG)
#define Set_TIM14_PSC(FLAG)                  (*(uint32_t*)0x40002028 &= FLAG)
#define Clr_TIM14_PSC(FLAG)                  (*(uint32_t*)0x40002028 |= ~FLAG)
#define Set_TIM14_ARR(FLAG)                  (*(uint32_t*)0x4000202c &= FLAG)
#define Clr_TIM14_ARR(FLAG)                  (*(uint32_t*)0x4000202c |= ~FLAG)
#define Set_TIM14_CCR1(FLAG)                 (*(uint32_t*)0x40002034 &= FLAG)
#define Clr_TIM14_CCR1(FLAG)                 (*(uint32_t*)0x40002034 |= ~FLAG)
#define Set_TIM14_SMCR(FLAG)                 (*(uint32_t*)0x40002008 &= FLAG)
#define Clr_TIM14_SMCR(FLAG)                 (*(uint32_t*)0x40002008 |= ~FLAG)
#define Set_TIM14_OR(FLAG)                   (*(uint32_t*)0x40002050 &= FLAG)
#define Clr_TIM14_OR(FLAG)                   (*(uint32_t*)0x40002050 |= ~FLAG)
#define Set_TIM1_CR1(FLAG)                   (*(uint32_t*)0x40010000 &= FLAG)
#define Clr_TIM1_CR1(FLAG)                   (*(uint32_t*)0x40010000 |= ~FLAG)
#define Set_TIM1_CR2(FLAG)                   (*(uint32_t*)0x40010004 &= FLAG)
#define Clr_TIM1_CR2(FLAG)                   (*(uint32_t*)0x40010004 |= ~FLAG)
#define Set_TIM1_SMCR(FLAG)                  (*(uint32_t*)0x40010008 &= FLAG)
#define Clr_TIM1_SMCR(FLAG)                  (*(uint32_t*)0x40010008 |= ~FLAG)
#define Set_TIM1_DIER(FLAG)                  (*(uint32_t*)0x4001000c &= FLAG)
#define Clr_TIM1_DIER(FLAG)                  (*(uint32_t*)0x4001000c |= ~FLAG)
#define Set_TIM1_SR(FLAG)                    (*(uint32_t*)0x40010010 &= FLAG)
#define Clr_TIM1_SR(FLAG)                    (*(uint32_t*)0x40010010 |= ~FLAG)
#define Set_TIM1_EGR(FLAG)                   (*(uint32_t*)0x40010014 &= FLAG)
#define Clr_TIM1_EGR(FLAG)                   (*(uint32_t*)0x40010014 |= ~FLAG)
#define Set_TIM1_CCMR1_Output(FLAG)          (*(uint32_t*)0x40010018 &= FLAG)
#define Clr_TIM1_CCMR1_Output(FLAG)          (*(uint32_t*)0x40010018 |= ~FLAG)
#define Set_TIM1_CCMR1_Input(FLAG)           (*(uint32_t*)0x40010018 &= FLAG)
#define Clr_TIM1_CCMR1_Input(FLAG)           (*(uint32_t*)0x40010018 |= ~FLAG)
#define Set_TIM1_CCMR2_Output(FLAG)          (*(uint32_t*)0x4001001c &= FLAG)
#define Clr_TIM1_CCMR2_Output(FLAG)          (*(uint32_t*)0x4001001c |= ~FLAG)
#define Set_TIM1_CCMR2_Input(FLAG)           (*(uint32_t*)0x4001001c &= FLAG)
#define Clr_TIM1_CCMR2_Input(FLAG)           (*(uint32_t*)0x4001001c |= ~FLAG)
#define Set_TIM1_CCER(FLAG)                  (*(uint32_t*)0x40010020 &= FLAG)
#define Clr_TIM1_CCER(FLAG)                  (*(uint32_t*)0x40010020 |= ~FLAG)
#define Set_TIM1_CNT(FLAG)                   (*(uint32_t*)0x40010024 &= FLAG)
#define Clr_TIM1_CNT(FLAG)                   (*(uint32_t*)0x40010024 |= ~FLAG)
#define Set_TIM1_PSC(FLAG)                   (*(uint32_t*)0x40010028 &= FLAG)
#define Clr_TIM1_PSC(FLAG)                   (*(uint32_t*)0x40010028 |= ~FLAG)
#define Set_TIM1_ARR(FLAG)                   (*(uint32_t*)0x4001002c &= FLAG)
#define Clr_TIM1_ARR(FLAG)                   (*(uint32_t*)0x4001002c |= ~FLAG)
#define Set_TIM1_CCR1(FLAG)                  (*(uint32_t*)0x40010034 &= FLAG)
#define Clr_TIM1_CCR1(FLAG)                  (*(uint32_t*)0x40010034 |= ~FLAG)
#define Set_TIM1_CCR2(FLAG)                  (*(uint32_t*)0x40010038 &= FLAG)
#define Clr_TIM1_CCR2(FLAG)                  (*(uint32_t*)0x40010038 |= ~FLAG)
#define Set_TIM1_CCR3(FLAG)                  (*(uint32_t*)0x4001003c &= FLAG)
#define Clr_TIM1_CCR3(FLAG)                  (*(uint32_t*)0x4001003c |= ~FLAG)
#define Set_TIM1_CCR4(FLAG)                  (*(uint32_t*)0x40010040 &= FLAG)
#define Clr_TIM1_CCR4(FLAG)                  (*(uint32_t*)0x40010040 |= ~FLAG)
#define Set_TIM1_DCR(FLAG)                   (*(uint32_t*)0x40010048 &= FLAG)
#define Clr_TIM1_DCR(FLAG)                   (*(uint32_t*)0x40010048 |= ~FLAG)
#define Set_TIM1_DMAR(FLAG)                  (*(uint32_t*)0x4001004c &= FLAG)
#define Clr_TIM1_DMAR(FLAG)                  (*(uint32_t*)0x4001004c |= ~FLAG)
#define Set_TIM1_RCR(FLAG)                   (*(uint32_t*)0x40010030 &= FLAG)
#define Clr_TIM1_RCR(FLAG)                   (*(uint32_t*)0x40010030 |= ~FLAG)
#define Set_TIM1_BDTR(FLAG)                  (*(uint32_t*)0x40010044 &= FLAG)
#define Clr_TIM1_BDTR(FLAG)                  (*(uint32_t*)0x40010044 |= ~FLAG)
#define Set_TIM1_CCMR3_Output(FLAG)          (*(uint32_t*)0x40010054 &= FLAG)
#define Clr_TIM1_CCMR3_Output(FLAG)          (*(uint32_t*)0x40010054 |= ~FLAG)
#define Set_TIM1_CCR5(FLAG)                  (*(uint32_t*)0x40010058 &= FLAG)
#define Clr_TIM1_CCR5(FLAG)                  (*(uint32_t*)0x40010058 |= ~FLAG)
#define Set_TIM1_CRR6(FLAG)                  (*(uint32_t*)0x4001005c &= FLAG)
#define Clr_TIM1_CRR6(FLAG)                  (*(uint32_t*)0x4001005c |= ~FLAG)
#define Set_TIM1_AF1(FLAG)                   (*(uint32_t*)0x40010060 &= FLAG)
#define Clr_TIM1_AF1(FLAG)                   (*(uint32_t*)0x40010060 |= ~FLAG)
#define Set_TIM1_AF2(FLAG)                   (*(uint32_t*)0x40010064 &= FLAG)
#define Clr_TIM1_AF2(FLAG)                   (*(uint32_t*)0x40010064 |= ~FLAG)
#define Set_TIM8_CR1(FLAG)                   (*(uint32_t*)0x40010400 &= FLAG)
#define Clr_TIM8_CR1(FLAG)                   (*(uint32_t*)0x40010400 |= ~FLAG)
#define Set_TIM8_CR2(FLAG)                   (*(uint32_t*)0x40010404 &= FLAG)
#define Clr_TIM8_CR2(FLAG)                   (*(uint32_t*)0x40010404 |= ~FLAG)
#define Set_TIM8_SMCR(FLAG)                  (*(uint32_t*)0x40010408 &= FLAG)
#define Clr_TIM8_SMCR(FLAG)                  (*(uint32_t*)0x40010408 |= ~FLAG)
#define Set_TIM8_DIER(FLAG)                  (*(uint32_t*)0x4001040c &= FLAG)
#define Clr_TIM8_DIER(FLAG)                  (*(uint32_t*)0x4001040c |= ~FLAG)
#define Set_TIM8_SR(FLAG)                    (*(uint32_t*)0x40010410 &= FLAG)
#define Clr_TIM8_SR(FLAG)                    (*(uint32_t*)0x40010410 |= ~FLAG)
#define Set_TIM8_EGR(FLAG)                   (*(uint32_t*)0x40010414 &= FLAG)
#define Clr_TIM8_EGR(FLAG)                   (*(uint32_t*)0x40010414 |= ~FLAG)
#define Set_TIM8_CCMR1_Output(FLAG)          (*(uint32_t*)0x40010418 &= FLAG)
#define Clr_TIM8_CCMR1_Output(FLAG)          (*(uint32_t*)0x40010418 |= ~FLAG)
#define Set_TIM8_CCMR1_Input(FLAG)           (*(uint32_t*)0x40010418 &= FLAG)
#define Clr_TIM8_CCMR1_Input(FLAG)           (*(uint32_t*)0x40010418 |= ~FLAG)
#define Set_TIM8_CCMR2_Output(FLAG)          (*(uint32_t*)0x4001041c &= FLAG)
#define Clr_TIM8_CCMR2_Output(FLAG)          (*(uint32_t*)0x4001041c |= ~FLAG)
#define Set_TIM8_CCMR2_Input(FLAG)           (*(uint32_t*)0x4001041c &= FLAG)
#define Clr_TIM8_CCMR2_Input(FLAG)           (*(uint32_t*)0x4001041c |= ~FLAG)
#define Set_TIM8_CCER(FLAG)                  (*(uint32_t*)0x40010420 &= FLAG)
#define Clr_TIM8_CCER(FLAG)                  (*(uint32_t*)0x40010420 |= ~FLAG)
#define Set_TIM8_CNT(FLAG)                   (*(uint32_t*)0x40010424 &= FLAG)
#define Clr_TIM8_CNT(FLAG)                   (*(uint32_t*)0x40010424 |= ~FLAG)
#define Set_TIM8_PSC(FLAG)                   (*(uint32_t*)0x40010428 &= FLAG)
#define Clr_TIM8_PSC(FLAG)                   (*(uint32_t*)0x40010428 |= ~FLAG)
#define Set_TIM8_ARR(FLAG)                   (*(uint32_t*)0x4001042c &= FLAG)
#define Clr_TIM8_ARR(FLAG)                   (*(uint32_t*)0x4001042c |= ~FLAG)
#define Set_TIM8_CCR1(FLAG)                  (*(uint32_t*)0x40010434 &= FLAG)
#define Clr_TIM8_CCR1(FLAG)                  (*(uint32_t*)0x40010434 |= ~FLAG)
#define Set_TIM8_CCR2(FLAG)                  (*(uint32_t*)0x40010438 &= FLAG)
#define Clr_TIM8_CCR2(FLAG)                  (*(uint32_t*)0x40010438 |= ~FLAG)
#define Set_TIM8_CCR3(FLAG)                  (*(uint32_t*)0x4001043c &= FLAG)
#define Clr_TIM8_CCR3(FLAG)                  (*(uint32_t*)0x4001043c |= ~FLAG)
#define Set_TIM8_CCR4(FLAG)                  (*(uint32_t*)0x40010440 &= FLAG)
#define Clr_TIM8_CCR4(FLAG)                  (*(uint32_t*)0x40010440 |= ~FLAG)
#define Set_TIM8_DCR(FLAG)                   (*(uint32_t*)0x40010448 &= FLAG)
#define Clr_TIM8_DCR(FLAG)                   (*(uint32_t*)0x40010448 |= ~FLAG)
#define Set_TIM8_DMAR(FLAG)                  (*(uint32_t*)0x4001044c &= FLAG)
#define Clr_TIM8_DMAR(FLAG)                  (*(uint32_t*)0x4001044c |= ~FLAG)
#define Set_TIM8_RCR(FLAG)                   (*(uint32_t*)0x40010430 &= FLAG)
#define Clr_TIM8_RCR(FLAG)                   (*(uint32_t*)0x40010430 |= ~FLAG)
#define Set_TIM8_BDTR(FLAG)                  (*(uint32_t*)0x40010444 &= FLAG)
#define Clr_TIM8_BDTR(FLAG)                  (*(uint32_t*)0x40010444 |= ~FLAG)
#define Set_TIM8_CCMR3_Output(FLAG)          (*(uint32_t*)0x40010454 &= FLAG)
#define Clr_TIM8_CCMR3_Output(FLAG)          (*(uint32_t*)0x40010454 |= ~FLAG)
#define Set_TIM8_CCR5(FLAG)                  (*(uint32_t*)0x40010458 &= FLAG)
#define Clr_TIM8_CCR5(FLAG)                  (*(uint32_t*)0x40010458 |= ~FLAG)
#define Set_TIM8_CRR6(FLAG)                  (*(uint32_t*)0x4001045c &= FLAG)
#define Clr_TIM8_CRR6(FLAG)                  (*(uint32_t*)0x4001045c |= ~FLAG)
#define Set_TIM8_AF1(FLAG)                   (*(uint32_t*)0x40010460 &= FLAG)
#define Clr_TIM8_AF1(FLAG)                   (*(uint32_t*)0x40010460 |= ~FLAG)
#define Set_TIM8_AF2(FLAG)                   (*(uint32_t*)0x40010464 &= FLAG)
#define Clr_TIM8_AF2(FLAG)                   (*(uint32_t*)0x40010464 |= ~FLAG)
#define Set_TIM9_CR1(FLAG)                   (*(uint32_t*)0x40014000 &= FLAG)
#define Clr_TIM9_CR1(FLAG)                   (*(uint32_t*)0x40014000 |= ~FLAG)
#define Set_TIM9_SMCR(FLAG)                  (*(uint32_t*)0x40014008 &= FLAG)
#define Clr_TIM9_SMCR(FLAG)                  (*(uint32_t*)0x40014008 |= ~FLAG)
#define Set_TIM9_DIER(FLAG)                  (*(uint32_t*)0x4001400c &= FLAG)
#define Clr_TIM9_DIER(FLAG)                  (*(uint32_t*)0x4001400c |= ~FLAG)
#define Set_TIM9_SR(FLAG)                    (*(uint32_t*)0x40014010 &= FLAG)
#define Clr_TIM9_SR(FLAG)                    (*(uint32_t*)0x40014010 |= ~FLAG)
#define Set_TIM9_EGR(FLAG)                   (*(uint32_t*)0x40014014 &= FLAG)
#define Clr_TIM9_EGR(FLAG)                   (*(uint32_t*)0x40014014 |= ~FLAG)
#define Set_TIM9_CCMR1_Output(FLAG)          (*(uint32_t*)0x40014018 &= FLAG)
#define Clr_TIM9_CCMR1_Output(FLAG)          (*(uint32_t*)0x40014018 |= ~FLAG)
#define Set_TIM9_CCMR1_Input(FLAG)           (*(uint32_t*)0x40014018 &= FLAG)
#define Clr_TIM9_CCMR1_Input(FLAG)           (*(uint32_t*)0x40014018 |= ~FLAG)
#define Set_TIM9_CCER(FLAG)                  (*(uint32_t*)0x40014020 &= FLAG)
#define Clr_TIM9_CCER(FLAG)                  (*(uint32_t*)0x40014020 |= ~FLAG)
#define Set_TIM9_CNT(FLAG)                   (*(uint32_t*)0x40014024 &= FLAG)
#define Clr_TIM9_CNT(FLAG)                   (*(uint32_t*)0x40014024 |= ~FLAG)
#define Set_TIM9_PSC(FLAG)                   (*(uint32_t*)0x40014028 &= FLAG)
#define Clr_TIM9_PSC(FLAG)                   (*(uint32_t*)0x40014028 |= ~FLAG)
#define Set_TIM9_ARR(FLAG)                   (*(uint32_t*)0x4001402c &= FLAG)
#define Clr_TIM9_ARR(FLAG)                   (*(uint32_t*)0x4001402c |= ~FLAG)
#define Set_TIM9_CCR1(FLAG)                  (*(uint32_t*)0x40014034 &= FLAG)
#define Clr_TIM9_CCR1(FLAG)                  (*(uint32_t*)0x40014034 |= ~FLAG)
#define Set_TIM9_CCR2(FLAG)                  (*(uint32_t*)0x40014038 &= FLAG)
#define Clr_TIM9_CCR2(FLAG)                  (*(uint32_t*)0x40014038 |= ~FLAG)
#define Set_TIM10_CR1(FLAG)                  (*(uint32_t*)0x40014400 &= FLAG)
#define Clr_TIM10_CR1(FLAG)                  (*(uint32_t*)0x40014400 |= ~FLAG)
#define Set_TIM10_DIER(FLAG)                 (*(uint32_t*)0x4001440c &= FLAG)
#define Clr_TIM10_DIER(FLAG)                 (*(uint32_t*)0x4001440c |= ~FLAG)
#define Set_TIM10_SR(FLAG)                   (*(uint32_t*)0x40014410 &= FLAG)
#define Clr_TIM10_SR(FLAG)                   (*(uint32_t*)0x40014410 |= ~FLAG)
#define Set_TIM10_EGR(FLAG)                  (*(uint32_t*)0x40014414 &= FLAG)
#define Clr_TIM10_EGR(FLAG)                  (*(uint32_t*)0x40014414 |= ~FLAG)
#define Set_TIM10_CCMR1_Output(FLAG)         (*(uint32_t*)0x40014418 &= FLAG)
#define Clr_TIM10_CCMR1_Output(FLAG)         (*(uint32_t*)0x40014418 |= ~FLAG)
#define Set_TIM10_CCMR1_Input(FLAG)          (*(uint32_t*)0x40014418 &= FLAG)
#define Clr_TIM10_CCMR1_Input(FLAG)          (*(uint32_t*)0x40014418 |= ~FLAG)
#define Set_TIM10_CCER(FLAG)                 (*(uint32_t*)0x40014420 &= FLAG)
#define Clr_TIM10_CCER(FLAG)                 (*(uint32_t*)0x40014420 |= ~FLAG)
#define Set_TIM10_CNT(FLAG)                  (*(uint32_t*)0x40014424 &= FLAG)
#define Clr_TIM10_CNT(FLAG)                  (*(uint32_t*)0x40014424 |= ~FLAG)
#define Set_TIM10_PSC(FLAG)                  (*(uint32_t*)0x40014428 &= FLAG)
#define Clr_TIM10_PSC(FLAG)                  (*(uint32_t*)0x40014428 |= ~FLAG)
#define Set_TIM10_ARR(FLAG)                  (*(uint32_t*)0x4001442c &= FLAG)
#define Clr_TIM10_ARR(FLAG)                  (*(uint32_t*)0x4001442c |= ~FLAG)
#define Set_TIM10_CCR1(FLAG)                 (*(uint32_t*)0x40014434 &= FLAG)
#define Clr_TIM10_CCR1(FLAG)                 (*(uint32_t*)0x40014434 |= ~FLAG)
#define Set_TIM10_SMCR(FLAG)                 (*(uint32_t*)0x40014408 &= FLAG)
#define Clr_TIM10_SMCR(FLAG)                 (*(uint32_t*)0x40014408 |= ~FLAG)
#define Set_TIM10_OR(FLAG)                   (*(uint32_t*)0x40014450 &= FLAG)
#define Clr_TIM10_OR(FLAG)                   (*(uint32_t*)0x40014450 |= ~FLAG)
#define Set_TIM11_CR1(FLAG)                  (*(uint32_t*)0x40014800 &= FLAG)
#define Clr_TIM11_CR1(FLAG)                  (*(uint32_t*)0x40014800 |= ~FLAG)
#define Set_TIM11_DIER(FLAG)                 (*(uint32_t*)0x4001480c &= FLAG)
#define Clr_TIM11_DIER(FLAG)                 (*(uint32_t*)0x4001480c |= ~FLAG)
#define Set_TIM11_SR(FLAG)                   (*(uint32_t*)0x40014810 &= FLAG)
#define Clr_TIM11_SR(FLAG)                   (*(uint32_t*)0x40014810 |= ~FLAG)
#define Set_TIM11_EGR(FLAG)                  (*(uint32_t*)0x40014814 &= FLAG)
#define Clr_TIM11_EGR(FLAG)                  (*(uint32_t*)0x40014814 |= ~FLAG)
#define Set_TIM11_CCMR1_Output(FLAG)         (*(uint32_t*)0x40014818 &= FLAG)
#define Clr_TIM11_CCMR1_Output(FLAG)         (*(uint32_t*)0x40014818 |= ~FLAG)
#define Set_TIM11_CCMR1_Input(FLAG)          (*(uint32_t*)0x40014818 &= FLAG)
#define Clr_TIM11_CCMR1_Input(FLAG)          (*(uint32_t*)0x40014818 |= ~FLAG)
#define Set_TIM11_CCER(FLAG)                 (*(uint32_t*)0x40014820 &= FLAG)
#define Clr_TIM11_CCER(FLAG)                 (*(uint32_t*)0x40014820 |= ~FLAG)
#define Set_TIM11_CNT(FLAG)                  (*(uint32_t*)0x40014824 &= FLAG)
#define Clr_TIM11_CNT(FLAG)                  (*(uint32_t*)0x40014824 |= ~FLAG)
#define Set_TIM11_PSC(FLAG)                  (*(uint32_t*)0x40014828 &= FLAG)
#define Clr_TIM11_PSC(FLAG)                  (*(uint32_t*)0x40014828 |= ~FLAG)
#define Set_TIM11_ARR(FLAG)                  (*(uint32_t*)0x4001482c &= FLAG)
#define Clr_TIM11_ARR(FLAG)                  (*(uint32_t*)0x4001482c |= ~FLAG)
#define Set_TIM11_CCR1(FLAG)                 (*(uint32_t*)0x40014834 &= FLAG)
#define Clr_TIM11_CCR1(FLAG)                 (*(uint32_t*)0x40014834 |= ~FLAG)
#define Set_TIM11_SMCR(FLAG)                 (*(uint32_t*)0x40014808 &= FLAG)
#define Clr_TIM11_SMCR(FLAG)                 (*(uint32_t*)0x40014808 |= ~FLAG)
#define Set_TIM11_OR(FLAG)                   (*(uint32_t*)0x40014850 &= FLAG)
#define Clr_TIM11_OR(FLAG)                   (*(uint32_t*)0x40014850 |= ~FLAG)
#define  _TIM2_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM2_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM2_CR1_CMS                                       (0x3 << 5)    // Center-aligned mode selection
#define  _TIM2_CR1_DIR                                       (0x1 << 4)    // Direction
#define  _TIM2_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM2_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM2_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM2_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM2_CR2_TI1S                                      (0x1 << 7)    // TI1 selection
#define  _TIM2_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM2_CR2_CCDS                                      (0x1 << 3)    // Capture/compare DMA selection
#define  _TIM2_SMCR_ETP                                      (0x1 << 15)    // External trigger polarity
#define  _TIM2_SMCR_ECE                                      (0x1 << 14)    // External clock enable
#define  _TIM2_SMCR_ETPS                                     (0x3 << 12)    // External trigger prescaler
#define  _TIM2_SMCR_ETF                                      (0xf << 8)    // External trigger filter
#define  _TIM2_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM2_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM2_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM2_DIER_TDE                                      (0x1 << 14)    // Trigger DMA request enable
#define  _TIM2_DIER_CC4DE                                    (0x1 << 12)    // Capture/Compare 4 DMA request enable
#define  _TIM2_DIER_CC3DE                                    (0x1 << 11)    // Capture/Compare 3 DMA request enable
#define  _TIM2_DIER_CC2DE                                    (0x1 << 10)    // Capture/Compare 2 DMA request enable
#define  _TIM2_DIER_CC1DE                                    (0x1 << 9)    // Capture/Compare 1 DMA request enable
#define  _TIM2_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM2_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM2_DIER_CC4IE                                    (0x1 << 4)    // Capture/Compare 4 interrupt enable
#define  _TIM2_DIER_CC3IE                                    (0x1 << 3)    // Capture/Compare 3 interrupt enable
#define  _TIM2_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM2_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM2_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM2_SR_CC4OF                                      (0x1 << 12)    // Capture/Compare 4 overcapture flag
#define  _TIM2_SR_CC3OF                                      (0x1 << 11)    // Capture/Compare 3 overcapture flag
#define  _TIM2_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM2_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM2_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM2_SR_CC4IF                                      (0x1 << 4)    // Capture/Compare 4 interrupt flag
#define  _TIM2_SR_CC3IF                                      (0x1 << 3)    // Capture/Compare 3 interrupt flag
#define  _TIM2_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM2_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM2_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM2_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM2_EGR_CC4G                                      (0x1 << 4)    // Capture/compare 4 generation
#define  _TIM2_EGR_CC3G                                      (0x1 << 3)    // Capture/compare 3 generation
#define  _TIM2_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM2_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM2_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM2_CCMR1_Output_OC2CE                            (0x1 << 15)    // OC2CE
#define  _TIM2_CCMR1_Output_OC2M                             (0x7 << 12)    // OC2M
#define  _TIM2_CCMR1_Output_OC2PE                            (0x1 << 11)    // OC2PE
#define  _TIM2_CCMR1_Output_OC2FE                            (0x1 << 10)    // OC2FE
#define  _TIM2_CCMR1_Output_CC2S                             (0x3 << 8)    // CC2S
#define  _TIM2_CCMR1_Output_OC1CE                            (0x1 << 7)    // OC1CE
#define  _TIM2_CCMR1_Output_OC1M                             (0x7 << 4)    // OC1M
#define  _TIM2_CCMR1_Output_OC1PE                            (0x1 << 3)    // OC1PE
#define  _TIM2_CCMR1_Output_OC1FE                            (0x1 << 2)    // OC1FE
#define  _TIM2_CCMR1_Output_CC1S                             (0x3 << 0)    // CC1S
#define  _TIM2_CCMR1_Input_IC2F                              (0xf << 12)    // Input capture 2 filter
#define  _TIM2_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM2_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM2_CCMR1_Input_IC1F                              (0xf << 4)    // Input capture 1 filter
#define  _TIM2_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM2_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM2_CCMR2_Output_O24CE                            (0x1 << 15)    // O24CE
#define  _TIM2_CCMR2_Output_OC4M                             (0x7 << 12)    // OC4M
#define  _TIM2_CCMR2_Output_OC4PE                            (0x1 << 11)    // OC4PE
#define  _TIM2_CCMR2_Output_OC4FE                            (0x1 << 10)    // OC4FE
#define  _TIM2_CCMR2_Output_CC4S                             (0x3 << 8)    // CC4S
#define  _TIM2_CCMR2_Output_OC3CE                            (0x1 << 7)    // OC3CE
#define  _TIM2_CCMR2_Output_OC3M                             (0x7 << 4)    // OC3M
#define  _TIM2_CCMR2_Output_OC3PE                            (0x1 << 3)    // OC3PE
#define  _TIM2_CCMR2_Output_OC3FE                            (0x1 << 2)    // OC3FE
#define  _TIM2_CCMR2_Output_CC3S                             (0x3 << 0)    // CC3S
#define  _TIM2_CCMR2_Input_IC4F                              (0xf << 12)    // Input capture 4 filter
#define  _TIM2_CCMR2_Input_IC4PSC                            (0x3 << 10)    // Input capture 4 prescaler
#define  _TIM2_CCMR2_Input_CC4S                              (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM2_CCMR2_Input_IC3F                              (0xf << 4)    // Input capture 3 filter
#define  _TIM2_CCMR2_Input_IC3PSC                            (0x3 << 2)    // Input capture 3 prescaler
#define  _TIM2_CCMR2_Input_CC3S                              (0x3 << 0)    // Capture/compare 3 selection
#define  _TIM2_CCER_CC4NP                                    (0x1 << 15)    // Capture/Compare 4 output Polarity
#define  _TIM2_CCER_CC4P                                     (0x1 << 13)    // Capture/Compare 3 output Polarity
#define  _TIM2_CCER_CC4E                                     (0x1 << 12)    // Capture/Compare 4 output enable
#define  _TIM2_CCER_CC3NP                                    (0x1 << 11)    // Capture/Compare 3 output Polarity
#define  _TIM2_CCER_CC3P                                     (0x1 << 9)    // Capture/Compare 3 output Polarity
#define  _TIM2_CCER_CC3E                                     (0x1 << 8)    // Capture/Compare 3 output enable
#define  _TIM2_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM2_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM2_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM2_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM2_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM2_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM2_CNT_CNT_H                                     (0xffff << 16)    // High counter value
#define  _TIM2_CNT_CNT_L                                     (0xffff << 0)    // Low counter value
#define  _TIM2_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM2_ARR_ARR_H                                     (0xffff << 16)    // High Auto-reload value
#define  _TIM2_ARR_ARR_L                                     (0xffff << 0)    // Low Auto-reload value
#define  _TIM2_CCR1_CCR1_H                                   (0xffff << 16)    // High Capture/Compare 1 value
#define  _TIM2_CCR1_CCR1_L                                   (0xffff << 0)    // Low Capture/Compare 1 value
#define  _TIM2_CCR2_CCR2_H                                   (0xffff << 16)    // High Capture/Compare 2 value
#define  _TIM2_CCR2_CCR2_L                                   (0xffff << 0)    // Low Capture/Compare 2 value
#define  _TIM2_CCR3_CCR3_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM2_CCR3_CCR3_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM2_CCR4_CCR4_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM2_CCR4_CCR4_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM2_DCR_DBL                                       (0x1f << 8)    // DMA burst length
#define  _TIM2_DCR_DBA                                       (0x1f << 0)    // DMA base address
#define  _TIM2_DMAR_DMAB                                     (0xffff << 0)    // DMA register for burst accesses
#define  _TIM2_OR1_TI4_RMP                                   (0x3 << 2)    // Input Capture 4 remap
#define  _TIM2_OR1_ETR1_RMP                                  (0x1 << 1)    // External trigger remap
#define  _TIM2_OR1_ITR1_RMP                                  (0x1 << 0)    // Internal trigger 1 remap
#define  _TIM2_OR2_ETRSEL                                    (0x7 << 14)    // ETR source selection
#define  _TIM3_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM3_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM3_CR1_CMS                                       (0x3 << 5)    // Center-aligned mode selection
#define  _TIM3_CR1_DIR                                       (0x1 << 4)    // Direction
#define  _TIM3_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM3_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM3_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM3_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM3_CR2_TI1S                                      (0x1 << 7)    // TI1 selection
#define  _TIM3_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM3_CR2_CCDS                                      (0x1 << 3)    // Capture/compare DMA selection
#define  _TIM3_SMCR_ETP                                      (0x1 << 15)    // External trigger polarity
#define  _TIM3_SMCR_ECE                                      (0x1 << 14)    // External clock enable
#define  _TIM3_SMCR_ETPS                                     (0x3 << 12)    // External trigger prescaler
#define  _TIM3_SMCR_ETF                                      (0xf << 8)    // External trigger filter
#define  _TIM3_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM3_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM3_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM3_DIER_TDE                                      (0x1 << 14)    // Trigger DMA request enable
#define  _TIM3_DIER_CC4DE                                    (0x1 << 12)    // Capture/Compare 4 DMA request enable
#define  _TIM3_DIER_CC3DE                                    (0x1 << 11)    // Capture/Compare 3 DMA request enable
#define  _TIM3_DIER_CC2DE                                    (0x1 << 10)    // Capture/Compare 2 DMA request enable
#define  _TIM3_DIER_CC1DE                                    (0x1 << 9)    // Capture/Compare 1 DMA request enable
#define  _TIM3_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM3_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM3_DIER_CC4IE                                    (0x1 << 4)    // Capture/Compare 4 interrupt enable
#define  _TIM3_DIER_CC3IE                                    (0x1 << 3)    // Capture/Compare 3 interrupt enable
#define  _TIM3_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM3_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM3_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM3_SR_CC4OF                                      (0x1 << 12)    // Capture/Compare 4 overcapture flag
#define  _TIM3_SR_CC3OF                                      (0x1 << 11)    // Capture/Compare 3 overcapture flag
#define  _TIM3_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM3_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM3_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM3_SR_CC4IF                                      (0x1 << 4)    // Capture/Compare 4 interrupt flag
#define  _TIM3_SR_CC3IF                                      (0x1 << 3)    // Capture/Compare 3 interrupt flag
#define  _TIM3_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM3_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM3_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM3_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM3_EGR_CC4G                                      (0x1 << 4)    // Capture/compare 4 generation
#define  _TIM3_EGR_CC3G                                      (0x1 << 3)    // Capture/compare 3 generation
#define  _TIM3_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM3_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM3_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM3_CCMR1_Output_OC2CE                            (0x1 << 15)    // OC2CE
#define  _TIM3_CCMR1_Output_OC2M                             (0x7 << 12)    // OC2M
#define  _TIM3_CCMR1_Output_OC2PE                            (0x1 << 11)    // OC2PE
#define  _TIM3_CCMR1_Output_OC2FE                            (0x1 << 10)    // OC2FE
#define  _TIM3_CCMR1_Output_CC2S                             (0x3 << 8)    // CC2S
#define  _TIM3_CCMR1_Output_OC1CE                            (0x1 << 7)    // OC1CE
#define  _TIM3_CCMR1_Output_OC1M                             (0x7 << 4)    // OC1M
#define  _TIM3_CCMR1_Output_OC1PE                            (0x1 << 3)    // OC1PE
#define  _TIM3_CCMR1_Output_OC1FE                            (0x1 << 2)    // OC1FE
#define  _TIM3_CCMR1_Output_CC1S                             (0x3 << 0)    // CC1S
#define  _TIM3_CCMR1_Input_IC2F                              (0xf << 12)    // Input capture 2 filter
#define  _TIM3_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM3_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM3_CCMR1_Input_IC1F                              (0xf << 4)    // Input capture 1 filter
#define  _TIM3_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM3_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM3_CCMR2_Output_O24CE                            (0x1 << 15)    // O24CE
#define  _TIM3_CCMR2_Output_OC4M                             (0x7 << 12)    // OC4M
#define  _TIM3_CCMR2_Output_OC4PE                            (0x1 << 11)    // OC4PE
#define  _TIM3_CCMR2_Output_OC4FE                            (0x1 << 10)    // OC4FE
#define  _TIM3_CCMR2_Output_CC4S                             (0x3 << 8)    // CC4S
#define  _TIM3_CCMR2_Output_OC3CE                            (0x1 << 7)    // OC3CE
#define  _TIM3_CCMR2_Output_OC3M                             (0x7 << 4)    // OC3M
#define  _TIM3_CCMR2_Output_OC3PE                            (0x1 << 3)    // OC3PE
#define  _TIM3_CCMR2_Output_OC3FE                            (0x1 << 2)    // OC3FE
#define  _TIM3_CCMR2_Output_CC3S                             (0x3 << 0)    // CC3S
#define  _TIM3_CCMR2_Input_IC4F                              (0xf << 12)    // Input capture 4 filter
#define  _TIM3_CCMR2_Input_IC4PSC                            (0x3 << 10)    // Input capture 4 prescaler
#define  _TIM3_CCMR2_Input_CC4S                              (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM3_CCMR2_Input_IC3F                              (0xf << 4)    // Input capture 3 filter
#define  _TIM3_CCMR2_Input_IC3PSC                            (0x3 << 2)    // Input capture 3 prescaler
#define  _TIM3_CCMR2_Input_CC3S                              (0x3 << 0)    // Capture/compare 3 selection
#define  _TIM3_CCER_CC4NP                                    (0x1 << 15)    // Capture/Compare 4 output Polarity
#define  _TIM3_CCER_CC4P                                     (0x1 << 13)    // Capture/Compare 3 output Polarity
#define  _TIM3_CCER_CC4E                                     (0x1 << 12)    // Capture/Compare 4 output enable
#define  _TIM3_CCER_CC3NP                                    (0x1 << 11)    // Capture/Compare 3 output Polarity
#define  _TIM3_CCER_CC3P                                     (0x1 << 9)    // Capture/Compare 3 output Polarity
#define  _TIM3_CCER_CC3E                                     (0x1 << 8)    // Capture/Compare 3 output enable
#define  _TIM3_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM3_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM3_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM3_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM3_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM3_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM3_CNT_CNT_H                                     (0xffff << 16)    // High counter value
#define  _TIM3_CNT_CNT_L                                     (0xffff << 0)    // Low counter value
#define  _TIM3_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM3_ARR_ARR_H                                     (0xffff << 16)    // High Auto-reload value
#define  _TIM3_ARR_ARR_L                                     (0xffff << 0)    // Low Auto-reload value
#define  _TIM3_CCR1_CCR1_H                                   (0xffff << 16)    // High Capture/Compare 1 value
#define  _TIM3_CCR1_CCR1_L                                   (0xffff << 0)    // Low Capture/Compare 1 value
#define  _TIM3_CCR2_CCR2_H                                   (0xffff << 16)    // High Capture/Compare 2 value
#define  _TIM3_CCR2_CCR2_L                                   (0xffff << 0)    // Low Capture/Compare 2 value
#define  _TIM3_CCR3_CCR3_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM3_CCR3_CCR3_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM3_CCR4_CCR4_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM3_CCR4_CCR4_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM3_DCR_DBL                                       (0x1f << 8)    // DMA burst length
#define  _TIM3_DCR_DBA                                       (0x1f << 0)    // DMA base address
#define  _TIM3_DMAR_DMAB                                     (0xffff << 0)    // DMA register for burst accesses
#define  _TIM3_OR1_TI1_RMP                                   (0x3 << 0)    // Input Capture 1 remap
#define  _TIM3_OR2_ETRSEL                                    (0x7 << 14)    // ETR source selection
#define  _TIM4_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM4_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM4_CR1_CMS                                       (0x3 << 5)    // Center-aligned mode selection
#define  _TIM4_CR1_DIR                                       (0x1 << 4)    // Direction
#define  _TIM4_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM4_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM4_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM4_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM4_CR2_TI1S                                      (0x1 << 7)    // TI1 selection
#define  _TIM4_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM4_CR2_CCDS                                      (0x1 << 3)    // Capture/compare DMA selection
#define  _TIM4_SMCR_ETP                                      (0x1 << 15)    // External trigger polarity
#define  _TIM4_SMCR_ECE                                      (0x1 << 14)    // External clock enable
#define  _TIM4_SMCR_ETPS                                     (0x3 << 12)    // External trigger prescaler
#define  _TIM4_SMCR_ETF                                      (0xf << 8)    // External trigger filter
#define  _TIM4_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM4_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM4_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM4_DIER_TDE                                      (0x1 << 14)    // Trigger DMA request enable
#define  _TIM4_DIER_CC4DE                                    (0x1 << 12)    // Capture/Compare 4 DMA request enable
#define  _TIM4_DIER_CC3DE                                    (0x1 << 11)    // Capture/Compare 3 DMA request enable
#define  _TIM4_DIER_CC2DE                                    (0x1 << 10)    // Capture/Compare 2 DMA request enable
#define  _TIM4_DIER_CC1DE                                    (0x1 << 9)    // Capture/Compare 1 DMA request enable
#define  _TIM4_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM4_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM4_DIER_CC4IE                                    (0x1 << 4)    // Capture/Compare 4 interrupt enable
#define  _TIM4_DIER_CC3IE                                    (0x1 << 3)    // Capture/Compare 3 interrupt enable
#define  _TIM4_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM4_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM4_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM4_SR_CC4OF                                      (0x1 << 12)    // Capture/Compare 4 overcapture flag
#define  _TIM4_SR_CC3OF                                      (0x1 << 11)    // Capture/Compare 3 overcapture flag
#define  _TIM4_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM4_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM4_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM4_SR_CC4IF                                      (0x1 << 4)    // Capture/Compare 4 interrupt flag
#define  _TIM4_SR_CC3IF                                      (0x1 << 3)    // Capture/Compare 3 interrupt flag
#define  _TIM4_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM4_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM4_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM4_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM4_EGR_CC4G                                      (0x1 << 4)    // Capture/compare 4 generation
#define  _TIM4_EGR_CC3G                                      (0x1 << 3)    // Capture/compare 3 generation
#define  _TIM4_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM4_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM4_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM4_CCMR1_Output_OC2CE                            (0x1 << 15)    // OC2CE
#define  _TIM4_CCMR1_Output_OC2M                             (0x7 << 12)    // OC2M
#define  _TIM4_CCMR1_Output_OC2PE                            (0x1 << 11)    // OC2PE
#define  _TIM4_CCMR1_Output_OC2FE                            (0x1 << 10)    // OC2FE
#define  _TIM4_CCMR1_Output_CC2S                             (0x3 << 8)    // CC2S
#define  _TIM4_CCMR1_Output_OC1CE                            (0x1 << 7)    // OC1CE
#define  _TIM4_CCMR1_Output_OC1M                             (0x7 << 4)    // OC1M
#define  _TIM4_CCMR1_Output_OC1PE                            (0x1 << 3)    // OC1PE
#define  _TIM4_CCMR1_Output_OC1FE                            (0x1 << 2)    // OC1FE
#define  _TIM4_CCMR1_Output_CC1S                             (0x3 << 0)    // CC1S
#define  _TIM4_CCMR1_Input_IC2F                              (0xf << 12)    // Input capture 2 filter
#define  _TIM4_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM4_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM4_CCMR1_Input_IC1F                              (0xf << 4)    // Input capture 1 filter
#define  _TIM4_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM4_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM4_CCMR2_Output_O24CE                            (0x1 << 15)    // O24CE
#define  _TIM4_CCMR2_Output_OC4M                             (0x7 << 12)    // OC4M
#define  _TIM4_CCMR2_Output_OC4PE                            (0x1 << 11)    // OC4PE
#define  _TIM4_CCMR2_Output_OC4FE                            (0x1 << 10)    // OC4FE
#define  _TIM4_CCMR2_Output_CC4S                             (0x3 << 8)    // CC4S
#define  _TIM4_CCMR2_Output_OC3CE                            (0x1 << 7)    // OC3CE
#define  _TIM4_CCMR2_Output_OC3M                             (0x7 << 4)    // OC3M
#define  _TIM4_CCMR2_Output_OC3PE                            (0x1 << 3)    // OC3PE
#define  _TIM4_CCMR2_Output_OC3FE                            (0x1 << 2)    // OC3FE
#define  _TIM4_CCMR2_Output_CC3S                             (0x3 << 0)    // CC3S
#define  _TIM4_CCMR2_Input_IC4F                              (0xf << 12)    // Input capture 4 filter
#define  _TIM4_CCMR2_Input_IC4PSC                            (0x3 << 10)    // Input capture 4 prescaler
#define  _TIM4_CCMR2_Input_CC4S                              (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM4_CCMR2_Input_IC3F                              (0xf << 4)    // Input capture 3 filter
#define  _TIM4_CCMR2_Input_IC3PSC                            (0x3 << 2)    // Input capture 3 prescaler
#define  _TIM4_CCMR2_Input_CC3S                              (0x3 << 0)    // Capture/compare 3 selection
#define  _TIM4_CCER_CC4NP                                    (0x1 << 15)    // Capture/Compare 4 output Polarity
#define  _TIM4_CCER_CC4P                                     (0x1 << 13)    // Capture/Compare 3 output Polarity
#define  _TIM4_CCER_CC4E                                     (0x1 << 12)    // Capture/Compare 4 output enable
#define  _TIM4_CCER_CC3NP                                    (0x1 << 11)    // Capture/Compare 3 output Polarity
#define  _TIM4_CCER_CC3P                                     (0x1 << 9)    // Capture/Compare 3 output Polarity
#define  _TIM4_CCER_CC3E                                     (0x1 << 8)    // Capture/Compare 3 output enable
#define  _TIM4_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM4_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM4_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM4_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM4_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM4_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM4_CNT_CNT_H                                     (0xffff << 16)    // High counter value
#define  _TIM4_CNT_CNT_L                                     (0xffff << 0)    // Low counter value
#define  _TIM4_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM4_ARR_ARR_H                                     (0xffff << 16)    // High Auto-reload value
#define  _TIM4_ARR_ARR_L                                     (0xffff << 0)    // Low Auto-reload value
#define  _TIM4_CCR1_CCR1_H                                   (0xffff << 16)    // High Capture/Compare 1 value
#define  _TIM4_CCR1_CCR1_L                                   (0xffff << 0)    // Low Capture/Compare 1 value
#define  _TIM4_CCR2_CCR2_H                                   (0xffff << 16)    // High Capture/Compare 2 value
#define  _TIM4_CCR2_CCR2_L                                   (0xffff << 0)    // Low Capture/Compare 2 value
#define  _TIM4_CCR3_CCR3_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM4_CCR3_CCR3_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM4_CCR4_CCR4_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM4_CCR4_CCR4_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM4_DCR_DBL                                       (0x1f << 8)    // DMA burst length
#define  _TIM4_DCR_DBA                                       (0x1f << 0)    // DMA base address
#define  _TIM4_DMAR_DMAB                                     (0xffff << 0)    // DMA register for burst accesses
#define  _TIM5_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM5_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM5_CR1_CMS                                       (0x3 << 5)    // Center-aligned mode selection
#define  _TIM5_CR1_DIR                                       (0x1 << 4)    // Direction
#define  _TIM5_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM5_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM5_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM5_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM5_CR2_TI1S                                      (0x1 << 7)    // TI1 selection
#define  _TIM5_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM5_CR2_CCDS                                      (0x1 << 3)    // Capture/compare DMA selection
#define  _TIM5_SMCR_ETP                                      (0x1 << 15)    // External trigger polarity
#define  _TIM5_SMCR_ECE                                      (0x1 << 14)    // External clock enable
#define  _TIM5_SMCR_ETPS                                     (0x3 << 12)    // External trigger prescaler
#define  _TIM5_SMCR_ETF                                      (0xf << 8)    // External trigger filter
#define  _TIM5_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM5_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM5_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM5_DIER_TDE                                      (0x1 << 14)    // Trigger DMA request enable
#define  _TIM5_DIER_CC4DE                                    (0x1 << 12)    // Capture/Compare 4 DMA request enable
#define  _TIM5_DIER_CC3DE                                    (0x1 << 11)    // Capture/Compare 3 DMA request enable
#define  _TIM5_DIER_CC2DE                                    (0x1 << 10)    // Capture/Compare 2 DMA request enable
#define  _TIM5_DIER_CC1DE                                    (0x1 << 9)    // Capture/Compare 1 DMA request enable
#define  _TIM5_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM5_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM5_DIER_CC4IE                                    (0x1 << 4)    // Capture/Compare 4 interrupt enable
#define  _TIM5_DIER_CC3IE                                    (0x1 << 3)    // Capture/Compare 3 interrupt enable
#define  _TIM5_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM5_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM5_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM5_SR_CC4OF                                      (0x1 << 12)    // Capture/Compare 4 overcapture flag
#define  _TIM5_SR_CC3OF                                      (0x1 << 11)    // Capture/Compare 3 overcapture flag
#define  _TIM5_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM5_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM5_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM5_SR_CC4IF                                      (0x1 << 4)    // Capture/Compare 4 interrupt flag
#define  _TIM5_SR_CC3IF                                      (0x1 << 3)    // Capture/Compare 3 interrupt flag
#define  _TIM5_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM5_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM5_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM5_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM5_EGR_CC4G                                      (0x1 << 4)    // Capture/compare 4 generation
#define  _TIM5_EGR_CC3G                                      (0x1 << 3)    // Capture/compare 3 generation
#define  _TIM5_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM5_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM5_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM5_CCMR1_Output_OC2CE                            (0x1 << 15)    // OC2CE
#define  _TIM5_CCMR1_Output_OC2M                             (0x7 << 12)    // OC2M
#define  _TIM5_CCMR1_Output_OC2PE                            (0x1 << 11)    // OC2PE
#define  _TIM5_CCMR1_Output_OC2FE                            (0x1 << 10)    // OC2FE
#define  _TIM5_CCMR1_Output_CC2S                             (0x3 << 8)    // CC2S
#define  _TIM5_CCMR1_Output_OC1CE                            (0x1 << 7)    // OC1CE
#define  _TIM5_CCMR1_Output_OC1M                             (0x7 << 4)    // OC1M
#define  _TIM5_CCMR1_Output_OC1PE                            (0x1 << 3)    // OC1PE
#define  _TIM5_CCMR1_Output_OC1FE                            (0x1 << 2)    // OC1FE
#define  _TIM5_CCMR1_Output_CC1S                             (0x3 << 0)    // CC1S
#define  _TIM5_CCMR1_Input_IC2F                              (0xf << 12)    // Input capture 2 filter
#define  _TIM5_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM5_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM5_CCMR1_Input_IC1F                              (0xf << 4)    // Input capture 1 filter
#define  _TIM5_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM5_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM5_CCMR2_Output_O24CE                            (0x1 << 15)    // O24CE
#define  _TIM5_CCMR2_Output_OC4M                             (0x7 << 12)    // OC4M
#define  _TIM5_CCMR2_Output_OC4PE                            (0x1 << 11)    // OC4PE
#define  _TIM5_CCMR2_Output_OC4FE                            (0x1 << 10)    // OC4FE
#define  _TIM5_CCMR2_Output_CC4S                             (0x3 << 8)    // CC4S
#define  _TIM5_CCMR2_Output_OC3CE                            (0x1 << 7)    // OC3CE
#define  _TIM5_CCMR2_Output_OC3M                             (0x7 << 4)    // OC3M
#define  _TIM5_CCMR2_Output_OC3PE                            (0x1 << 3)    // OC3PE
#define  _TIM5_CCMR2_Output_OC3FE                            (0x1 << 2)    // OC3FE
#define  _TIM5_CCMR2_Output_CC3S                             (0x3 << 0)    // CC3S
#define  _TIM5_CCMR2_Input_IC4F                              (0xf << 12)    // Input capture 4 filter
#define  _TIM5_CCMR2_Input_IC4PSC                            (0x3 << 10)    // Input capture 4 prescaler
#define  _TIM5_CCMR2_Input_CC4S                              (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM5_CCMR2_Input_IC3F                              (0xf << 4)    // Input capture 3 filter
#define  _TIM5_CCMR2_Input_IC3PSC                            (0x3 << 2)    // Input capture 3 prescaler
#define  _TIM5_CCMR2_Input_CC3S                              (0x3 << 0)    // Capture/compare 3 selection
#define  _TIM5_CCER_CC4NP                                    (0x1 << 15)    // Capture/Compare 4 output Polarity
#define  _TIM5_CCER_CC4P                                     (0x1 << 13)    // Capture/Compare 3 output Polarity
#define  _TIM5_CCER_CC4E                                     (0x1 << 12)    // Capture/Compare 4 output enable
#define  _TIM5_CCER_CC3NP                                    (0x1 << 11)    // Capture/Compare 3 output Polarity
#define  _TIM5_CCER_CC3P                                     (0x1 << 9)    // Capture/Compare 3 output Polarity
#define  _TIM5_CCER_CC3E                                     (0x1 << 8)    // Capture/Compare 3 output enable
#define  _TIM5_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM5_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM5_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM5_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM5_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM5_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM5_CNT_CNT_H                                     (0xffff << 16)    // High counter value
#define  _TIM5_CNT_CNT_L                                     (0xffff << 0)    // Low counter value
#define  _TIM5_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM5_ARR_ARR_H                                     (0xffff << 16)    // High Auto-reload value
#define  _TIM5_ARR_ARR_L                                     (0xffff << 0)    // Low Auto-reload value
#define  _TIM5_CCR1_CCR1_H                                   (0xffff << 16)    // High Capture/Compare 1 value
#define  _TIM5_CCR1_CCR1_L                                   (0xffff << 0)    // Low Capture/Compare 1 value
#define  _TIM5_CCR2_CCR2_H                                   (0xffff << 16)    // High Capture/Compare 2 value
#define  _TIM5_CCR2_CCR2_L                                   (0xffff << 0)    // Low Capture/Compare 2 value
#define  _TIM5_CCR3_CCR3_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM5_CCR3_CCR3_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM5_CCR4_CCR4_H                                   (0xffff << 16)    // High Capture/Compare value
#define  _TIM5_CCR4_CCR4_L                                   (0xffff << 0)    // Low Capture/Compare value
#define  _TIM5_DCR_DBL                                       (0x1f << 8)    // DMA burst length
#define  _TIM5_DCR_DBA                                       (0x1f << 0)    // DMA base address
#define  _TIM5_DMAR_DMAB                                     (0xffff << 0)    // DMA register for burst accesses
#define  _TIM6_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM6_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM6_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM6_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM6_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM6_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM6_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM6_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM6_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM6_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM6_CNT_CNT                                       (0xffff << 0)    // Low counter value
#define  _TIM6_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM6_ARR_ARR                                       (0xffff << 0)    // Low Auto-reload value
#define  _TIM7_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM7_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM7_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM7_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM7_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM7_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM7_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM7_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM7_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM7_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM7_CNT_CNT                                       (0xffff << 0)    // Low counter value
#define  _TIM7_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM7_ARR_ARR                                       (0xffff << 0)    // Low Auto-reload value
#define  _TIM12_CR1_CKD                                      (0x3 << 8)    // Clock division
#define  _TIM12_CR1_ARPE                                     (0x1 << 7)    // Auto-reload preload enable
#define  _TIM12_CR1_OPM                                      (0x1 << 3)    // One-pulse mode
#define  _TIM12_CR1_URS                                      (0x1 << 2)    // Update request source
#define  _TIM12_CR1_UDIS                                     (0x1 << 1)    // Update disable
#define  _TIM12_CR1_CEN                                      (0x1 << 0)    // Counter enable
#define  _TIM12_SMCR_MSM                                     (0x1 << 7)    // Master/Slave mode
#define  _TIM12_SMCR_TS                                      (0x7 << 4)    // Trigger selection
#define  _TIM12_SMCR_SMS                                     (0x7 << 0)    // Slave mode selection
#define  _TIM12_DIER_TIE                                     (0x1 << 6)    // Trigger interrupt enable
#define  _TIM12_DIER_CC2IE                                   (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM12_DIER_CC1IE                                   (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM12_DIER_UIE                                     (0x1 << 0)    // Update interrupt enable
#define  _TIM12_SR_CC2OF                                     (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM12_SR_CC1OF                                     (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM12_SR_TIF                                       (0x1 << 6)    // Trigger interrupt flag
#define  _TIM12_SR_CC2IF                                     (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM12_SR_CC1IF                                     (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM12_SR_UIF                                       (0x1 << 0)    // Update interrupt flag
#define  _TIM12_EGR_TG                                       (0x1 << 6)    // Trigger generation
#define  _TIM12_EGR_CC2G                                     (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM12_EGR_CC1G                                     (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM12_EGR_UG                                       (0x1 << 0)    // Update generation
#define  _TIM12_CCMR1_Output_OC2M                            (0x7 << 12)    // Output Compare 2 mode
#define  _TIM12_CCMR1_Output_OC2PE                           (0x1 << 11)    // Output Compare 2 preload enable
#define  _TIM12_CCMR1_Output_OC2FE                           (0x1 << 10)    // Output Compare 2 fast enable
#define  _TIM12_CCMR1_Output_CC2S                            (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM12_CCMR1_Output_OC1M                            (0x7 << 4)    // Output Compare 1 mode
#define  _TIM12_CCMR1_Output_OC1PE                           (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM12_CCMR1_Output_OC1FE                           (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM12_CCMR1_Output_CC1S                            (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM12_CCMR1_Input_IC2F                             (0x7 << 12)    // Input capture 2 filter
#define  _TIM12_CCMR1_Input_IC2PCS                           (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM12_CCMR1_Input_CC2S                             (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM12_CCMR1_Input_IC1F                             (0x7 << 4)    // Input capture 1 filter
#define  _TIM12_CCMR1_Input_ICPCS                            (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM12_CCMR1_Input_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM12_CCER_CC2NP                                   (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM12_CCER_CC2P                                    (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM12_CCER_CC2E                                    (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM12_CCER_CC1NP                                   (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM12_CCER_CC1P                                    (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM12_CCER_CC1E                                    (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM12_CNT_CNT                                      (0xffff << 0)    // counter value
#define  _TIM12_PSC_PSC                                      (0xffff << 0)    // Prescaler value
#define  _TIM12_ARR_ARR                                      (0xffff << 0)    // Auto-reload value
#define  _TIM12_CCR1_CCR1                                    (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM12_CCR2_CCR2                                    (0xffff << 0)    // Capture/Compare 2 value
#define  _TIM13_CR1_CKD                                      (0x3 << 8)    // Clock division
#define  _TIM13_CR1_ARPE                                     (0x1 << 7)    // Auto-reload preload enable
#define  _TIM13_CR1_URS                                      (0x1 << 2)    // Update request source
#define  _TIM13_CR1_UDIS                                     (0x1 << 1)    // Update disable
#define  _TIM13_CR1_CEN                                      (0x1 << 0)    // Counter enable
#define  _TIM13_DIER_CC1IE                                   (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM13_DIER_UIE                                     (0x1 << 0)    // Update interrupt enable
#define  _TIM13_SR_CC1OF                                     (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM13_SR_CC1IF                                     (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM13_SR_UIF                                       (0x1 << 0)    // Update interrupt flag
#define  _TIM13_EGR_CC1G                                     (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM13_EGR_UG                                       (0x1 << 0)    // Update generation
#define  _TIM13_CCMR1_Output_OC1M                            (0x7 << 4)    // Output Compare 1 mode
#define  _TIM13_CCMR1_Output_OC1PE                           (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM13_CCMR1_Output_OC1FE                           (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM13_CCMR1_Output_CC1S                            (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM13_CCMR1_Input_IC1F                             (0xf << 4)    // Input capture 1 filter
#define  _TIM13_CCMR1_Input_ICPCS                            (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM13_CCMR1_Input_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM13_CCER_CC1NP                                   (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM13_CCER_CC1P                                    (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM13_CCER_CC1E                                    (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM13_CNT_CNT                                      (0xffff << 0)    // counter value
#define  _TIM13_PSC_PSC                                      (0xffff << 0)    // Prescaler value
#define  _TIM13_ARR_ARR                                      (0xffff << 0)    // Auto-reload value
#define  _TIM13_CCR1_CCR1                                    (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM13_SMCR_SMS3                                    (0x1 << 16)    // Slave mode selection
#define  _TIM13_SMCR_ETP                                     (0x1 << 15)    // External trigger polarity
#define  _TIM13_SMCR_ECE                                     (0x1 << 14)    // External clock enable
#define  _TIM13_SMCR_ETPS                                    (0x3 << 12)    // External trigger prescaler
#define  _TIM13_SMCR_ETF                                     (0xf << 8)    // External trigger filter
#define  _TIM13_SMCR_MSM                                     (0x1 << 7)    // Master/slave mode
#define  _TIM13_SMCR_TS                                      (0x7 << 4)    // Trigger selection
#define  _TIM13_SMCR_SMS                                     (0x7 << 0)    // Slave mode selection
#define  _TIM13_OR_TI1_RMP                                   (0x3 << 0)    // TIM11 Input 1 remapping capability
#define  _TIM14_CR1_CKD                                      (0x3 << 8)    // Clock division
#define  _TIM14_CR1_ARPE                                     (0x1 << 7)    // Auto-reload preload enable
#define  _TIM14_CR1_URS                                      (0x1 << 2)    // Update request source
#define  _TIM14_CR1_UDIS                                     (0x1 << 1)    // Update disable
#define  _TIM14_CR1_CEN                                      (0x1 << 0)    // Counter enable
#define  _TIM14_DIER_CC1IE                                   (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM14_DIER_UIE                                     (0x1 << 0)    // Update interrupt enable
#define  _TIM14_SR_CC1OF                                     (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM14_SR_CC1IF                                     (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM14_SR_UIF                                       (0x1 << 0)    // Update interrupt flag
#define  _TIM14_EGR_CC1G                                     (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM14_EGR_UG                                       (0x1 << 0)    // Update generation
#define  _TIM14_CCMR1_Output_OC1M                            (0x7 << 4)    // Output Compare 1 mode
#define  _TIM14_CCMR1_Output_OC1PE                           (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM14_CCMR1_Output_OC1FE                           (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM14_CCMR1_Output_CC1S                            (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM14_CCMR1_Input_IC1F                             (0xf << 4)    // Input capture 1 filter
#define  _TIM14_CCMR1_Input_ICPCS                            (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM14_CCMR1_Input_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM14_CCER_CC1NP                                   (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM14_CCER_CC1P                                    (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM14_CCER_CC1E                                    (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM14_CNT_CNT                                      (0xffff << 0)    // counter value
#define  _TIM14_PSC_PSC                                      (0xffff << 0)    // Prescaler value
#define  _TIM14_ARR_ARR                                      (0xffff << 0)    // Auto-reload value
#define  _TIM14_CCR1_CCR1                                    (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM14_SMCR_SMS3                                    (0x1 << 16)    // Slave mode selection
#define  _TIM14_SMCR_ETP                                     (0x1 << 15)    // External trigger polarity
#define  _TIM14_SMCR_ECE                                     (0x1 << 14)    // External clock enable
#define  _TIM14_SMCR_ETPS                                    (0x3 << 12)    // External trigger prescaler
#define  _TIM14_SMCR_ETF                                     (0xf << 8)    // External trigger filter
#define  _TIM14_SMCR_MSM                                     (0x1 << 7)    // Master/slave mode
#define  _TIM14_SMCR_TS                                      (0x7 << 4)    // Trigger selection
#define  _TIM14_SMCR_SMS                                     (0x7 << 0)    // Slave mode selection
#define  _TIM14_OR_TI1_RMP                                   (0x3 << 0)    // TIM11 Input 1 remapping capability
#define  _TIM1_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM1_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM1_CR1_CMS                                       (0x3 << 5)    // Center-aligned mode selection
#define  _TIM1_CR1_DIR                                       (0x1 << 4)    // Direction
#define  _TIM1_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM1_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM1_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM1_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM1_CR2_OIS4                                      (0x1 << 14)    // Output Idle state 4
#define  _TIM1_CR2_OIS3N                                     (0x1 << 13)    // Output Idle state 3
#define  _TIM1_CR2_OIS3                                      (0x1 << 12)    // Output Idle state 3
#define  _TIM1_CR2_OIS2N                                     (0x1 << 11)    // Output Idle state 2
#define  _TIM1_CR2_OIS2                                      (0x1 << 10)    // Output Idle state 2
#define  _TIM1_CR2_OIS1N                                     (0x1 << 9)    // Output Idle state 1
#define  _TIM1_CR2_OIS1                                      (0x1 << 8)    // Output Idle state 1
#define  _TIM1_CR2_TI1S                                      (0x1 << 7)    // TI1 selection
#define  _TIM1_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM1_CR2_CCDS                                      (0x1 << 3)    // Capture/compare DMA selection
#define  _TIM1_CR2_CCUS                                      (0x1 << 2)    // Capture/compare control update selection
#define  _TIM1_CR2_CCPC                                      (0x1 << 0)    // Capture/compare preloaded control
#define  _TIM1_SMCR_ETP                                      (0x1 << 15)    // External trigger polarity
#define  _TIM1_SMCR_ECE                                      (0x1 << 14)    // External clock enable
#define  _TIM1_SMCR_ETPS                                     (0x3 << 12)    // External trigger prescaler
#define  _TIM1_SMCR_ETF                                      (0xf << 8)    // External trigger filter
#define  _TIM1_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM1_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM1_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM1_DIER_TDE                                      (0x1 << 14)    // Trigger DMA request enable
#define  _TIM1_DIER_COMDE                                    (0x1 << 13)    // COM DMA request enable
#define  _TIM1_DIER_CC4DE                                    (0x1 << 12)    // Capture/Compare 4 DMA request enable
#define  _TIM1_DIER_CC3DE                                    (0x1 << 11)    // Capture/Compare 3 DMA request enable
#define  _TIM1_DIER_CC2DE                                    (0x1 << 10)    // Capture/Compare 2 DMA request enable
#define  _TIM1_DIER_CC1DE                                    (0x1 << 9)    // Capture/Compare 1 DMA request enable
#define  _TIM1_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM1_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM1_DIER_CC4IE                                    (0x1 << 4)    // Capture/Compare 4 interrupt enable
#define  _TIM1_DIER_CC3IE                                    (0x1 << 3)    // Capture/Compare 3 interrupt enable
#define  _TIM1_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM1_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM1_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM1_DIER_BIE                                      (0x1 << 7)    // Break interrupt enable
#define  _TIM1_DIER_COMIE                                    (0x1 << 5)    // COM interrupt enable
#define  _TIM1_SR_CC4OF                                      (0x1 << 12)    // Capture/Compare 4 overcapture flag
#define  _TIM1_SR_CC3OF                                      (0x1 << 11)    // Capture/Compare 3 overcapture flag
#define  _TIM1_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM1_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM1_SR_BIF                                        (0x1 << 7)    // Break interrupt flag
#define  _TIM1_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM1_SR_COMIF                                      (0x1 << 5)    // COM interrupt flag
#define  _TIM1_SR_CC4IF                                      (0x1 << 4)    // Capture/Compare 4 interrupt flag
#define  _TIM1_SR_CC3IF                                      (0x1 << 3)    // Capture/Compare 3 interrupt flag
#define  _TIM1_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM1_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM1_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM1_EGR_BG                                        (0x1 << 7)    // Break generation
#define  _TIM1_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM1_EGR_COMG                                      (0x1 << 5)    // Capture/Compare control update generation
#define  _TIM1_EGR_CC4G                                      (0x1 << 4)    // Capture/compare 4 generation
#define  _TIM1_EGR_CC3G                                      (0x1 << 3)    // Capture/compare 3 generation
#define  _TIM1_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM1_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM1_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM1_CCMR1_Output_OC2CE                            (0x1 << 15)    // Output Compare 2 clear enable
#define  _TIM1_CCMR1_Output_OC2M                             (0x7 << 12)    // Output Compare 2 mode
#define  _TIM1_CCMR1_Output_OC2PE                            (0x1 << 11)    // Output Compare 2 preload enable
#define  _TIM1_CCMR1_Output_OC2FE                            (0x1 << 10)    // Output Compare 2 fast enable
#define  _TIM1_CCMR1_Output_CC2S                             (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM1_CCMR1_Output_OC1CE                            (0x1 << 7)    // Output Compare 1 clear enable
#define  _TIM1_CCMR1_Output_OC1M                             (0x7 << 4)    // Output Compare 1 mode
#define  _TIM1_CCMR1_Output_OC1PE                            (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM1_CCMR1_Output_OC1FE                            (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM1_CCMR1_Output_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM1_CCMR1_Input_IC2F                              (0xf << 12)    // Input capture 2 filter
#define  _TIM1_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM1_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM1_CCMR1_Input_IC1F                              (0xf << 4)    // Input capture 1 filter
#define  _TIM1_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM1_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM1_CCMR2_Output_OC4CE                            (0x1 << 15)    // Output compare 4 clear enable
#define  _TIM1_CCMR2_Output_OC4M                             (0x7 << 12)    // Output compare 4 mode
#define  _TIM1_CCMR2_Output_OC4PE                            (0x1 << 11)    // Output compare 4 preload enable
#define  _TIM1_CCMR2_Output_OC4FE                            (0x1 << 10)    // Output compare 4 fast enable
#define  _TIM1_CCMR2_Output_CC4S                             (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM1_CCMR2_Output_OC3CE                            (0x1 << 7)    // Output compare 3 clear enable
#define  _TIM1_CCMR2_Output_OC3M                             (0x7 << 4)    // Output compare 3 mode
#define  _TIM1_CCMR2_Output_OC3PE                            (0x1 << 3)    // Output compare 3 preload enable
#define  _TIM1_CCMR2_Output_OC3FE                            (0x1 << 2)    // Output compare 3 fast enable
#define  _TIM1_CCMR2_Output_CC3S                             (0x3 << 0)    // Capture/Compare 3 selection
#define  _TIM1_CCMR2_Input_IC4F                              (0xf << 12)    // Input capture 4 filter
#define  _TIM1_CCMR2_Input_IC4PSC                            (0x3 << 10)    // Input capture 4 prescaler
#define  _TIM1_CCMR2_Input_CC4S                              (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM1_CCMR2_Input_IC3F                              (0xf << 4)    // Input capture 3 filter
#define  _TIM1_CCMR2_Input_IC3PSC                            (0x3 << 2)    // Input capture 3 prescaler
#define  _TIM1_CCMR2_Input_CC3S                              (0x3 << 0)    // Capture/compare 3 selection
#define  _TIM1_CCER_CC4P                                     (0x1 << 13)    // Capture/Compare 3 output Polarity
#define  _TIM1_CCER_CC4E                                     (0x1 << 12)    // Capture/Compare 4 output enable
#define  _TIM1_CCER_CC3NP                                    (0x1 << 11)    // Capture/Compare 3 output Polarity
#define  _TIM1_CCER_CC3NE                                    (0x1 << 10)    // Capture/Compare 3 complementary output enable
#define  _TIM1_CCER_CC3P                                     (0x1 << 9)    // Capture/Compare 3 output Polarity
#define  _TIM1_CCER_CC3E                                     (0x1 << 8)    // Capture/Compare 3 output enable
#define  _TIM1_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM1_CCER_CC2NE                                    (0x1 << 6)    // Capture/Compare 2 complementary output enable
#define  _TIM1_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM1_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM1_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM1_CCER_CC1NE                                    (0x1 << 2)    // Capture/Compare 1 complementary output enable
#define  _TIM1_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM1_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM1_CNT_CNT                                       (0xffff << 0)    // counter value
#define  _TIM1_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM1_ARR_ARR                                       (0xffff << 0)    // Auto-reload value
#define  _TIM1_CCR1_CCR1                                     (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM1_CCR2_CCR2                                     (0xffff << 0)    // Capture/Compare 2 value
#define  _TIM1_CCR3_CCR3                                     (0xffff << 0)    // Capture/Compare value
#define  _TIM1_CCR4_CCR4                                     (0xffff << 0)    // Capture/Compare value
#define  _TIM1_DCR_DBL                                       (0x1f << 8)    // DMA burst length
#define  _TIM1_DCR_DBA                                       (0x1f << 0)    // DMA base address
#define  _TIM1_DMAR_DMAB                                     (0xffff << 0)    // DMA register for burst accesses
#define  _TIM1_RCR_REP                                       (0xff << 0)    // Repetition counter value
#define  _TIM1_BDTR_DTG                                      (0xff << 0)    // Dead-time generator setup
#define  _TIM1_BDTR_LOCK                                     (0x3 << 8)    // Lock configuration
#define  _TIM1_BDTR_OSSI                                     (0x1 << 10)    // Off-state selection for Idle mode
#define  _TIM1_BDTR_OSSR                                     (0x1 << 11)    // Off-state selection for Run mode
#define  _TIM1_BDTR_BKE                                      (0x1 << 12)    // Break enable
#define  _TIM1_BDTR_BKP                                      (0x1 << 13)    // Break polarity
#define  _TIM1_BDTR_AOE                                      (0x1 << 14)    // Automatic output enable
#define  _TIM1_BDTR_MOE                                      (0x1 << 15)    // Main output enable
#define  _TIM1_BDTR_BKF                                      (0xf << 16)    // Break filter
#define  _TIM1_BDTR_BK2F                                     (0xf << 20)    // Break 2 filter
#define  _TIM1_BDTR_BK2E                                     (0x1 << 24)    // Break 2 enable
#define  _TIM1_BDTR_BK2P                                     (0x1 << 25)    // Break 2 polarity
#define  _TIM1_CCMR3_Output_OC5FE                            (0x1 << 2)    // Output compare 5 fast enable
#define  _TIM1_CCMR3_Output_OC5PE                            (0x1 << 3)    // Output compare 5 preload enable
#define  _TIM1_CCMR3_Output_OC5M                             (0x7 << 4)    // Output compare 5 mode
#define  _TIM1_CCMR3_Output_OC5CE                            (0x1 << 7)    // Output compare 5 clear enable
#define  _TIM1_CCMR3_Output_OC6FE                            (0x1 << 10)    // Output compare 6 fast enable
#define  _TIM1_CCMR3_Output_OC6PE                            (0x1 << 11)    // Output compare 6 preload enable
#define  _TIM1_CCMR3_Output_OC6M                             (0x7 << 12)    // Output compare 6 mode
#define  _TIM1_CCMR3_Output_OC6CE                            (0x1 << 15)    // Output compare 6 clear enable
#define  _TIM1_CCMR3_Output_OC5M3                            (0x1 << 16)    // Output Compare 5 mode
#define  _TIM1_CCMR3_Output_OC6M3                            (0x1 << 24)    // Output Compare 6 mode
#define  _TIM1_CCR5_CCR5                                     (0xffff << 0)    // Capture/Compare 5 value
#define  _TIM1_CCR5_GC5C1                                    (0x1 << 29)    // Group Channel 5 and Channel 1
#define  _TIM1_CCR5_GC5C2                                    (0x1 << 30)    // Group Channel 5 and Channel 2
#define  _TIM1_CCR5_GC5C3                                    (0x1 << 31)    // Group Channel 5 and Channel 3
#define  _TIM1_CRR6_CCR6                                     (0xffff << 0)    // Capture/Compare 6 value
#define  _TIM1_AF1_BKINE                                     (0x1 << 0)    // BRK BKIN input enable
#define  _TIM1_AF1_BKDFBKE                                   (0x1 << 8)    // BRK DFSDM_BREAK[0] enable
#define  _TIM1_AF1_BKINP                                     (0x1 << 9)    // BRK BKIN input polarity
#define  _TIM1_AF2_BK2INE                                    (0x1 << 0)    // BRK2 BKIN input enable
#define  _TIM1_AF2_BK2DFBKE                                  (0x1 << 8)    // BRK2 DFSDM_BREAK enable
#define  _TIM1_AF2_BK2INP                                    (0x1 << 9)    // BRK2 BKIN2 input polarity
#define  _TIM8_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM8_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM8_CR1_CMS                                       (0x3 << 5)    // Center-aligned mode selection
#define  _TIM8_CR1_DIR                                       (0x1 << 4)    // Direction
#define  _TIM8_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM8_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM8_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM8_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM8_CR2_OIS4                                      (0x1 << 14)    // Output Idle state 4
#define  _TIM8_CR2_OIS3N                                     (0x1 << 13)    // Output Idle state 3
#define  _TIM8_CR2_OIS3                                      (0x1 << 12)    // Output Idle state 3
#define  _TIM8_CR2_OIS2N                                     (0x1 << 11)    // Output Idle state 2
#define  _TIM8_CR2_OIS2                                      (0x1 << 10)    // Output Idle state 2
#define  _TIM8_CR2_OIS1N                                     (0x1 << 9)    // Output Idle state 1
#define  _TIM8_CR2_OIS1                                      (0x1 << 8)    // Output Idle state 1
#define  _TIM8_CR2_TI1S                                      (0x1 << 7)    // TI1 selection
#define  _TIM8_CR2_MMS                                       (0x7 << 4)    // Master mode selection
#define  _TIM8_CR2_CCDS                                      (0x1 << 3)    // Capture/compare DMA selection
#define  _TIM8_CR2_CCUS                                      (0x1 << 2)    // Capture/compare control update selection
#define  _TIM8_CR2_CCPC                                      (0x1 << 0)    // Capture/compare preloaded control
#define  _TIM8_SMCR_ETP                                      (0x1 << 15)    // External trigger polarity
#define  _TIM8_SMCR_ECE                                      (0x1 << 14)    // External clock enable
#define  _TIM8_SMCR_ETPS                                     (0x3 << 12)    // External trigger prescaler
#define  _TIM8_SMCR_ETF                                      (0xf << 8)    // External trigger filter
#define  _TIM8_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM8_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM8_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM8_DIER_TDE                                      (0x1 << 14)    // Trigger DMA request enable
#define  _TIM8_DIER_COMDE                                    (0x1 << 13)    // COM DMA request enable
#define  _TIM8_DIER_CC4DE                                    (0x1 << 12)    // Capture/Compare 4 DMA request enable
#define  _TIM8_DIER_CC3DE                                    (0x1 << 11)    // Capture/Compare 3 DMA request enable
#define  _TIM8_DIER_CC2DE                                    (0x1 << 10)    // Capture/Compare 2 DMA request enable
#define  _TIM8_DIER_CC1DE                                    (0x1 << 9)    // Capture/Compare 1 DMA request enable
#define  _TIM8_DIER_UDE                                      (0x1 << 8)    // Update DMA request enable
#define  _TIM8_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM8_DIER_CC4IE                                    (0x1 << 4)    // Capture/Compare 4 interrupt enable
#define  _TIM8_DIER_CC3IE                                    (0x1 << 3)    // Capture/Compare 3 interrupt enable
#define  _TIM8_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM8_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM8_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM8_DIER_BIE                                      (0x1 << 7)    // Break interrupt enable
#define  _TIM8_DIER_COMIE                                    (0x1 << 5)    // COM interrupt enable
#define  _TIM8_SR_CC4OF                                      (0x1 << 12)    // Capture/Compare 4 overcapture flag
#define  _TIM8_SR_CC3OF                                      (0x1 << 11)    // Capture/Compare 3 overcapture flag
#define  _TIM8_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM8_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM8_SR_BIF                                        (0x1 << 7)    // Break interrupt flag
#define  _TIM8_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM8_SR_COMIF                                      (0x1 << 5)    // COM interrupt flag
#define  _TIM8_SR_CC4IF                                      (0x1 << 4)    // Capture/Compare 4 interrupt flag
#define  _TIM8_SR_CC3IF                                      (0x1 << 3)    // Capture/Compare 3 interrupt flag
#define  _TIM8_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM8_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM8_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM8_EGR_BG                                        (0x1 << 7)    // Break generation
#define  _TIM8_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM8_EGR_COMG                                      (0x1 << 5)    // Capture/Compare control update generation
#define  _TIM8_EGR_CC4G                                      (0x1 << 4)    // Capture/compare 4 generation
#define  _TIM8_EGR_CC3G                                      (0x1 << 3)    // Capture/compare 3 generation
#define  _TIM8_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM8_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM8_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM8_CCMR1_Output_OC2CE                            (0x1 << 15)    // Output Compare 2 clear enable
#define  _TIM8_CCMR1_Output_OC2M                             (0x7 << 12)    // Output Compare 2 mode
#define  _TIM8_CCMR1_Output_OC2PE                            (0x1 << 11)    // Output Compare 2 preload enable
#define  _TIM8_CCMR1_Output_OC2FE                            (0x1 << 10)    // Output Compare 2 fast enable
#define  _TIM8_CCMR1_Output_CC2S                             (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM8_CCMR1_Output_OC1CE                            (0x1 << 7)    // Output Compare 1 clear enable
#define  _TIM8_CCMR1_Output_OC1M                             (0x7 << 4)    // Output Compare 1 mode
#define  _TIM8_CCMR1_Output_OC1PE                            (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM8_CCMR1_Output_OC1FE                            (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM8_CCMR1_Output_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM8_CCMR1_Input_IC2F                              (0xf << 12)    // Input capture 2 filter
#define  _TIM8_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM8_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM8_CCMR1_Input_IC1F                              (0xf << 4)    // Input capture 1 filter
#define  _TIM8_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM8_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM8_CCMR2_Output_OC4CE                            (0x1 << 15)    // Output compare 4 clear enable
#define  _TIM8_CCMR2_Output_OC4M                             (0x7 << 12)    // Output compare 4 mode
#define  _TIM8_CCMR2_Output_OC4PE                            (0x1 << 11)    // Output compare 4 preload enable
#define  _TIM8_CCMR2_Output_OC4FE                            (0x1 << 10)    // Output compare 4 fast enable
#define  _TIM8_CCMR2_Output_CC4S                             (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM8_CCMR2_Output_OC3CE                            (0x1 << 7)    // Output compare 3 clear enable
#define  _TIM8_CCMR2_Output_OC3M                             (0x7 << 4)    // Output compare 3 mode
#define  _TIM8_CCMR2_Output_OC3PE                            (0x1 << 3)    // Output compare 3 preload enable
#define  _TIM8_CCMR2_Output_OC3FE                            (0x1 << 2)    // Output compare 3 fast enable
#define  _TIM8_CCMR2_Output_CC3S                             (0x3 << 0)    // Capture/Compare 3 selection
#define  _TIM8_CCMR2_Input_IC4F                              (0xf << 12)    // Input capture 4 filter
#define  _TIM8_CCMR2_Input_IC4PSC                            (0x3 << 10)    // Input capture 4 prescaler
#define  _TIM8_CCMR2_Input_CC4S                              (0x3 << 8)    // Capture/Compare 4 selection
#define  _TIM8_CCMR2_Input_IC3F                              (0xf << 4)    // Input capture 3 filter
#define  _TIM8_CCMR2_Input_IC3PSC                            (0x3 << 2)    // Input capture 3 prescaler
#define  _TIM8_CCMR2_Input_CC3S                              (0x3 << 0)    // Capture/compare 3 selection
#define  _TIM8_CCER_CC4P                                     (0x1 << 13)    // Capture/Compare 3 output Polarity
#define  _TIM8_CCER_CC4E                                     (0x1 << 12)    // Capture/Compare 4 output enable
#define  _TIM8_CCER_CC3NP                                    (0x1 << 11)    // Capture/Compare 3 output Polarity
#define  _TIM8_CCER_CC3NE                                    (0x1 << 10)    // Capture/Compare 3 complementary output enable
#define  _TIM8_CCER_CC3P                                     (0x1 << 9)    // Capture/Compare 3 output Polarity
#define  _TIM8_CCER_CC3E                                     (0x1 << 8)    // Capture/Compare 3 output enable
#define  _TIM8_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM8_CCER_CC2NE                                    (0x1 << 6)    // Capture/Compare 2 complementary output enable
#define  _TIM8_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM8_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM8_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM8_CCER_CC1NE                                    (0x1 << 2)    // Capture/Compare 1 complementary output enable
#define  _TIM8_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM8_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM8_CNT_CNT                                       (0xffff << 0)    // counter value
#define  _TIM8_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM8_ARR_ARR                                       (0xffff << 0)    // Auto-reload value
#define  _TIM8_CCR1_CCR1                                     (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM8_CCR2_CCR2                                     (0xffff << 0)    // Capture/Compare 2 value
#define  _TIM8_CCR3_CCR3                                     (0xffff << 0)    // Capture/Compare value
#define  _TIM8_CCR4_CCR4                                     (0xffff << 0)    // Capture/Compare value
#define  _TIM8_DCR_DBL                                       (0x1f << 8)    // DMA burst length
#define  _TIM8_DCR_DBA                                       (0x1f << 0)    // DMA base address
#define  _TIM8_DMAR_DMAB                                     (0xffff << 0)    // DMA register for burst accesses
#define  _TIM8_RCR_REP                                       (0xff << 0)    // Repetition counter value
#define  _TIM8_BDTR_DTG                                      (0xff << 0)    // Dead-time generator setup
#define  _TIM8_BDTR_LOCK                                     (0x3 << 8)    // Lock configuration
#define  _TIM8_BDTR_OSSI                                     (0x1 << 10)    // Off-state selection for Idle mode
#define  _TIM8_BDTR_OSSR                                     (0x1 << 11)    // Off-state selection for Run mode
#define  _TIM8_BDTR_BKE                                      (0x1 << 12)    // Break enable
#define  _TIM8_BDTR_BKP                                      (0x1 << 13)    // Break polarity
#define  _TIM8_BDTR_AOE                                      (0x1 << 14)    // Automatic output enable
#define  _TIM8_BDTR_MOE                                      (0x1 << 15)    // Main output enable
#define  _TIM8_BDTR_BKF                                      (0xf << 16)    // Break filter
#define  _TIM8_BDTR_BK2F                                     (0xf << 20)    // Break 2 filter
#define  _TIM8_BDTR_BK2E                                     (0x1 << 24)    // Break 2 enable
#define  _TIM8_BDTR_BK2P                                     (0x1 << 25)    // Break 2 polarity
#define  _TIM8_CCMR3_Output_OC5FE                            (0x1 << 2)    // Output compare 5 fast enable
#define  _TIM8_CCMR3_Output_OC5PE                            (0x1 << 3)    // Output compare 5 preload enable
#define  _TIM8_CCMR3_Output_OC5M                             (0x7 << 4)    // Output compare 5 mode
#define  _TIM8_CCMR3_Output_OC5CE                            (0x1 << 7)    // Output compare 5 clear enable
#define  _TIM8_CCMR3_Output_OC6FE                            (0x1 << 10)    // Output compare 6 fast enable
#define  _TIM8_CCMR3_Output_OC6PE                            (0x1 << 11)    // Output compare 6 preload enable
#define  _TIM8_CCMR3_Output_OC6M                             (0x7 << 12)    // Output compare 6 mode
#define  _TIM8_CCMR3_Output_OC6CE                            (0x1 << 15)    // Output compare 6 clear enable
#define  _TIM8_CCMR3_Output_OC5M3                            (0x1 << 16)    // Output Compare 5 mode
#define  _TIM8_CCMR3_Output_OC6M3                            (0x1 << 24)    // Output Compare 6 mode
#define  _TIM8_CCR5_CCR5                                     (0xffff << 0)    // Capture/Compare 5 value
#define  _TIM8_CCR5_GC5C1                                    (0x1 << 29)    // Group Channel 5 and Channel 1
#define  _TIM8_CCR5_GC5C2                                    (0x1 << 30)    // Group Channel 5 and Channel 2
#define  _TIM8_CCR5_GC5C3                                    (0x1 << 31)    // Group Channel 5 and Channel 3
#define  _TIM8_CRR6_CCR6                                     (0xffff << 0)    // Capture/Compare 6 value
#define  _TIM8_AF1_BKINE                                     (0x1 << 0)    // BRK BKIN input enable
#define  _TIM8_AF1_BKDFBKE                                   (0x1 << 8)    // BRK DFSDM_BREAK[0] enable
#define  _TIM8_AF1_BKINP                                     (0x1 << 9)    // BRK BKIN input polarity
#define  _TIM8_AF2_BK2INE                                    (0x1 << 0)    // BRK2 BKIN input enable
#define  _TIM8_AF2_BK2DFBKE                                  (0x1 << 8)    // BRK2 DFSDM_BREAK enable
#define  _TIM8_AF2_BK2INP                                    (0x1 << 9)    // BRK2 BKIN2 input polarity
#define  _TIM9_CR1_CKD                                       (0x3 << 8)    // Clock division
#define  _TIM9_CR1_ARPE                                      (0x1 << 7)    // Auto-reload preload enable
#define  _TIM9_CR1_OPM                                       (0x1 << 3)    // One-pulse mode
#define  _TIM9_CR1_URS                                       (0x1 << 2)    // Update request source
#define  _TIM9_CR1_UDIS                                      (0x1 << 1)    // Update disable
#define  _TIM9_CR1_CEN                                       (0x1 << 0)    // Counter enable
#define  _TIM9_SMCR_MSM                                      (0x1 << 7)    // Master/Slave mode
#define  _TIM9_SMCR_TS                                       (0x7 << 4)    // Trigger selection
#define  _TIM9_SMCR_SMS                                      (0x7 << 0)    // Slave mode selection
#define  _TIM9_DIER_TIE                                      (0x1 << 6)    // Trigger interrupt enable
#define  _TIM9_DIER_CC2IE                                    (0x1 << 2)    // Capture/Compare 2 interrupt enable
#define  _TIM9_DIER_CC1IE                                    (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM9_DIER_UIE                                      (0x1 << 0)    // Update interrupt enable
#define  _TIM9_SR_CC2OF                                      (0x1 << 10)    // Capture/compare 2 overcapture flag
#define  _TIM9_SR_CC1OF                                      (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM9_SR_TIF                                        (0x1 << 6)    // Trigger interrupt flag
#define  _TIM9_SR_CC2IF                                      (0x1 << 2)    // Capture/Compare 2 interrupt flag
#define  _TIM9_SR_CC1IF                                      (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM9_SR_UIF                                        (0x1 << 0)    // Update interrupt flag
#define  _TIM9_EGR_TG                                        (0x1 << 6)    // Trigger generation
#define  _TIM9_EGR_CC2G                                      (0x1 << 2)    // Capture/compare 2 generation
#define  _TIM9_EGR_CC1G                                      (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM9_EGR_UG                                        (0x1 << 0)    // Update generation
#define  _TIM9_CCMR1_Output_OC2M                             (0x7 << 12)    // Output Compare 2 mode
#define  _TIM9_CCMR1_Output_OC2PE                            (0x1 << 11)    // Output Compare 2 preload enable
#define  _TIM9_CCMR1_Output_OC2FE                            (0x1 << 10)    // Output Compare 2 fast enable
#define  _TIM9_CCMR1_Output_CC2S                             (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM9_CCMR1_Output_OC1M                             (0x7 << 4)    // Output Compare 1 mode
#define  _TIM9_CCMR1_Output_OC1PE                            (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM9_CCMR1_Output_OC1FE                            (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM9_CCMR1_Output_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM9_CCMR1_Input_IC2F                              (0x7 << 12)    // Input capture 2 filter
#define  _TIM9_CCMR1_Input_IC2PCS                            (0x3 << 10)    // Input capture 2 prescaler
#define  _TIM9_CCMR1_Input_CC2S                              (0x3 << 8)    // Capture/Compare 2 selection
#define  _TIM9_CCMR1_Input_IC1F                              (0x7 << 4)    // Input capture 1 filter
#define  _TIM9_CCMR1_Input_ICPCS                             (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM9_CCMR1_Input_CC1S                              (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM9_CCER_CC2NP                                    (0x1 << 7)    // Capture/Compare 2 output Polarity
#define  _TIM9_CCER_CC2P                                     (0x1 << 5)    // Capture/Compare 2 output Polarity
#define  _TIM9_CCER_CC2E                                     (0x1 << 4)    // Capture/Compare 2 output enable
#define  _TIM9_CCER_CC1NP                                    (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM9_CCER_CC1P                                     (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM9_CCER_CC1E                                     (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM9_CNT_CNT                                       (0xffff << 0)    // counter value
#define  _TIM9_PSC_PSC                                       (0xffff << 0)    // Prescaler value
#define  _TIM9_ARR_ARR                                       (0xffff << 0)    // Auto-reload value
#define  _TIM9_CCR1_CCR1                                     (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM9_CCR2_CCR2                                     (0xffff << 0)    // Capture/Compare 2 value
#define  _TIM10_CR1_CKD                                      (0x3 << 8)    // Clock division
#define  _TIM10_CR1_ARPE                                     (0x1 << 7)    // Auto-reload preload enable
#define  _TIM10_CR1_URS                                      (0x1 << 2)    // Update request source
#define  _TIM10_CR1_UDIS                                     (0x1 << 1)    // Update disable
#define  _TIM10_CR1_CEN                                      (0x1 << 0)    // Counter enable
#define  _TIM10_DIER_CC1IE                                   (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM10_DIER_UIE                                     (0x1 << 0)    // Update interrupt enable
#define  _TIM10_SR_CC1OF                                     (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM10_SR_CC1IF                                     (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM10_SR_UIF                                       (0x1 << 0)    // Update interrupt flag
#define  _TIM10_EGR_CC1G                                     (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM10_EGR_UG                                       (0x1 << 0)    // Update generation
#define  _TIM10_CCMR1_Output_OC1M                            (0x7 << 4)    // Output Compare 1 mode
#define  _TIM10_CCMR1_Output_OC1PE                           (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM10_CCMR1_Output_OC1FE                           (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM10_CCMR1_Output_CC1S                            (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM10_CCMR1_Input_IC1F                             (0xf << 4)    // Input capture 1 filter
#define  _TIM10_CCMR1_Input_ICPCS                            (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM10_CCMR1_Input_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM10_CCER_CC1NP                                   (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM10_CCER_CC1P                                    (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM10_CCER_CC1E                                    (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM10_CNT_CNT                                      (0xffff << 0)    // counter value
#define  _TIM10_PSC_PSC                                      (0xffff << 0)    // Prescaler value
#define  _TIM10_ARR_ARR                                      (0xffff << 0)    // Auto-reload value
#define  _TIM10_CCR1_CCR1                                    (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM10_SMCR_SMS3                                    (0x1 << 16)    // Slave mode selection
#define  _TIM10_SMCR_ETP                                     (0x1 << 15)    // External trigger polarity
#define  _TIM10_SMCR_ECE                                     (0x1 << 14)    // External clock enable
#define  _TIM10_SMCR_ETPS                                    (0x3 << 12)    // External trigger prescaler
#define  _TIM10_SMCR_ETF                                     (0xf << 8)    // External trigger filter
#define  _TIM10_SMCR_MSM                                     (0x1 << 7)    // Master/slave mode
#define  _TIM10_SMCR_TS                                      (0x7 << 4)    // Trigger selection
#define  _TIM10_SMCR_SMS                                     (0x7 << 0)    // Slave mode selection
#define  _TIM10_OR_TI1_RMP                                   (0x3 << 0)    // TIM11 Input 1 remapping capability
#define  _TIM11_CR1_CKD                                      (0x3 << 8)    // Clock division
#define  _TIM11_CR1_ARPE                                     (0x1 << 7)    // Auto-reload preload enable
#define  _TIM11_CR1_URS                                      (0x1 << 2)    // Update request source
#define  _TIM11_CR1_UDIS                                     (0x1 << 1)    // Update disable
#define  _TIM11_CR1_CEN                                      (0x1 << 0)    // Counter enable
#define  _TIM11_DIER_CC1IE                                   (0x1 << 1)    // Capture/Compare 1 interrupt enable
#define  _TIM11_DIER_UIE                                     (0x1 << 0)    // Update interrupt enable
#define  _TIM11_SR_CC1OF                                     (0x1 << 9)    // Capture/Compare 1 overcapture flag
#define  _TIM11_SR_CC1IF                                     (0x1 << 1)    // Capture/compare 1 interrupt flag
#define  _TIM11_SR_UIF                                       (0x1 << 0)    // Update interrupt flag
#define  _TIM11_EGR_CC1G                                     (0x1 << 1)    // Capture/compare 1 generation
#define  _TIM11_EGR_UG                                       (0x1 << 0)    // Update generation
#define  _TIM11_CCMR1_Output_OC1M                            (0x7 << 4)    // Output Compare 1 mode
#define  _TIM11_CCMR1_Output_OC1PE                           (0x1 << 3)    // Output Compare 1 preload enable
#define  _TIM11_CCMR1_Output_OC1FE                           (0x1 << 2)    // Output Compare 1 fast enable
#define  _TIM11_CCMR1_Output_CC1S                            (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM11_CCMR1_Input_IC1F                             (0xf << 4)    // Input capture 1 filter
#define  _TIM11_CCMR1_Input_ICPCS                            (0x3 << 2)    // Input capture 1 prescaler
#define  _TIM11_CCMR1_Input_CC1S                             (0x3 << 0)    // Capture/Compare 1 selection
#define  _TIM11_CCER_CC1NP                                   (0x1 << 3)    // Capture/Compare 1 output Polarity
#define  _TIM11_CCER_CC1P                                    (0x1 << 1)    // Capture/Compare 1 output Polarity
#define  _TIM11_CCER_CC1E                                    (0x1 << 0)    // Capture/Compare 1 output enable
#define  _TIM11_CNT_CNT                                      (0xffff << 0)    // counter value
#define  _TIM11_PSC_PSC                                      (0xffff << 0)    // Prescaler value
#define  _TIM11_ARR_ARR                                      (0xffff << 0)    // Auto-reload value
#define  _TIM11_CCR1_CCR1                                    (0xffff << 0)    // Capture/Compare 1 value
#define  _TIM11_SMCR_SMS3                                    (0x1 << 16)    // Slave mode selection
#define  _TIM11_SMCR_ETP                                     (0x1 << 15)    // External trigger polarity
#define  _TIM11_SMCR_ECE                                     (0x1 << 14)    // External clock enable
#define  _TIM11_SMCR_ETPS                                    (0x3 << 12)    // External trigger prescaler
#define  _TIM11_SMCR_ETF                                     (0xf << 8)    // External trigger filter
#define  _TIM11_SMCR_MSM                                     (0x1 << 7)    // Master/slave mode
#define  _TIM11_SMCR_TS                                      (0x7 << 4)    // Trigger selection
#define  _TIM11_SMCR_SMS                                     (0x7 << 0)    // Slave mode selection
#define  _TIM11_OR_TI1_RMP                                   (0x3 << 0)    // TIM11 Input 1 remapping capability
　
　drivers/inc/stm32f767xx_I2C.h
#define Get_I2C1_CR1(FLAG)                   (*(uint32_t*)0x40005400 |= FLAG)
#define Get_I2C1_CR2(FLAG)                   (*(uint32_t*)0x40005404 |= FLAG)
#define Get_I2C1_OAR1(FLAG)                  (*(uint32_t*)0x40005408 |= FLAG)
#define Get_I2C1_OAR2(FLAG)                  (*(uint32_t*)0x4000540c |= FLAG)
#define Get_I2C1_TIMINGR(FLAG)               (*(uint32_t*)0x40005410 |= FLAG)
#define Get_I2C1_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005414 |= FLAG)
#define Get_I2C1_ISR(FLAG)                   (*(uint32_t*)0x40005418 |= FLAG)
#define Get_I2C1_ICR(FLAG)                   (*(uint32_t*)0x4000541c |= FLAG)
#define Get_I2C1_PECR(FLAG)                  (*(uint32_t*)0x40005420 |= FLAG)
#define Get_I2C1_RXDR(FLAG)                  (*(uint32_t*)0x40005424 |= FLAG)
#define Get_I2C1_TXDR(FLAG)                  (*(uint32_t*)0x40005428 |= FLAG)
#define Get_I2C2_CR1(FLAG)                   (*(uint32_t*)0x40005800 |= FLAG)
#define Get_I2C2_CR2(FLAG)                   (*(uint32_t*)0x40005804 |= FLAG)
#define Get_I2C2_OAR1(FLAG)                  (*(uint32_t*)0x40005808 |= FLAG)
#define Get_I2C2_OAR2(FLAG)                  (*(uint32_t*)0x4000580c |= FLAG)
#define Get_I2C2_TIMINGR(FLAG)               (*(uint32_t*)0x40005810 |= FLAG)
#define Get_I2C2_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005814 |= FLAG)
#define Get_I2C2_ISR(FLAG)                   (*(uint32_t*)0x40005818 |= FLAG)
#define Get_I2C2_ICR(FLAG)                   (*(uint32_t*)0x4000581c |= FLAG)
#define Get_I2C2_PECR(FLAG)                  (*(uint32_t*)0x40005820 |= FLAG)
#define Get_I2C2_RXDR(FLAG)                  (*(uint32_t*)0x40005824 |= FLAG)
#define Get_I2C2_TXDR(FLAG)                  (*(uint32_t*)0x40005828 |= FLAG)
#define Get_I2C3_CR1(FLAG)                   (*(uint32_t*)0x40005c00 |= FLAG)
#define Get_I2C3_CR2(FLAG)                   (*(uint32_t*)0x40005c04 |= FLAG)
#define Get_I2C3_OAR1(FLAG)                  (*(uint32_t*)0x40005c08 |= FLAG)
#define Get_I2C3_OAR2(FLAG)                  (*(uint32_t*)0x40005c0c |= FLAG)
#define Get_I2C3_TIMINGR(FLAG)               (*(uint32_t*)0x40005c10 |= FLAG)
#define Get_I2C3_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005c14 |= FLAG)
#define Get_I2C3_ISR(FLAG)                   (*(uint32_t*)0x40005c18 |= FLAG)
#define Get_I2C3_ICR(FLAG)                   (*(uint32_t*)0x40005c1c |= FLAG)
#define Get_I2C3_PECR(FLAG)                  (*(uint32_t*)0x40005c20 |= FLAG)
#define Get_I2C3_RXDR(FLAG)                  (*(uint32_t*)0x40005c24 |= FLAG)
#define Get_I2C3_TXDR(FLAG)                  (*(uint32_t*)0x40005c28 |= FLAG)
#define Get_I2C4_CR1(FLAG)                   (*(uint32_t*)0x40006000 |= FLAG)
#define Get_I2C4_CR2(FLAG)                   (*(uint32_t*)0x40006004 |= FLAG)
#define Get_I2C4_OAR1(FLAG)                  (*(uint32_t*)0x40006008 |= FLAG)
#define Get_I2C4_OAR2(FLAG)                  (*(uint32_t*)0x4000600c |= FLAG)
#define Get_I2C4_TIMINGR(FLAG)               (*(uint32_t*)0x40006010 |= FLAG)
#define Get_I2C4_TIMEOUTR(FLAG)              (*(uint32_t*)0x40006014 |= FLAG)
#define Get_I2C4_ISR(FLAG)                   (*(uint32_t*)0x40006018 |= FLAG)
#define Get_I2C4_ICR(FLAG)                   (*(uint32_t*)0x4000601c |= FLAG)
#define Get_I2C4_PECR(FLAG)                  (*(uint32_t*)0x40006020 |= FLAG)
#define Get_I2C4_RXDR(FLAG)                  (*(uint32_t*)0x40006024 |= FLAG)
#define Get_I2C4_TXDR(FLAG)                  (*(uint32_t*)0x40006028 |= FLAG)
#define Set_I2C1_CR1(FLAG)                   (*(uint32_t*)0x40005400 &= FLAG)
#define Clr_I2C1_CR1(FLAG)                   (*(uint32_t*)0x40005400 |= ~FLAG)
#define Set_I2C1_CR2(FLAG)                   (*(uint32_t*)0x40005404 &= FLAG)
#define Clr_I2C1_CR2(FLAG)                   (*(uint32_t*)0x40005404 |= ~FLAG)
#define Set_I2C1_OAR1(FLAG)                  (*(uint32_t*)0x40005408 &= FLAG)
#define Clr_I2C1_OAR1(FLAG)                  (*(uint32_t*)0x40005408 |= ~FLAG)
#define Set_I2C1_OAR2(FLAG)                  (*(uint32_t*)0x4000540c &= FLAG)
#define Clr_I2C1_OAR2(FLAG)                  (*(uint32_t*)0x4000540c |= ~FLAG)
#define Set_I2C1_TIMINGR(FLAG)               (*(uint32_t*)0x40005410 &= FLAG)
#define Clr_I2C1_TIMINGR(FLAG)               (*(uint32_t*)0x40005410 |= ~FLAG)
#define Set_I2C1_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005414 &= FLAG)
#define Clr_I2C1_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005414 |= ~FLAG)
#define Set_I2C1_ISR(FLAG)                   (*(uint32_t*)0x40005418 &= FLAG)
#define Clr_I2C1_ISR(FLAG)                   (*(uint32_t*)0x40005418 |= ~FLAG)
#define Set_I2C1_ICR(FLAG)                   (*(uint32_t*)0x4000541c &= FLAG)
#define Clr_I2C1_ICR(FLAG)                   (*(uint32_t*)0x4000541c |= ~FLAG)
#define Set_I2C1_PECR(FLAG)                  (*(uint32_t*)0x40005420 &= FLAG)
#define Clr_I2C1_PECR(FLAG)                  (*(uint32_t*)0x40005420 |= ~FLAG)
#define Set_I2C1_RXDR(FLAG)                  (*(uint32_t*)0x40005424 &= FLAG)
#define Clr_I2C1_RXDR(FLAG)                  (*(uint32_t*)0x40005424 |= ~FLAG)
#define Set_I2C1_TXDR(FLAG)                  (*(uint32_t*)0x40005428 &= FLAG)
#define Clr_I2C1_TXDR(FLAG)                  (*(uint32_t*)0x40005428 |= ~FLAG)
#define Set_I2C2_CR1(FLAG)                   (*(uint32_t*)0x40005800 &= FLAG)
#define Clr_I2C2_CR1(FLAG)                   (*(uint32_t*)0x40005800 |= ~FLAG)
#define Set_I2C2_CR2(FLAG)                   (*(uint32_t*)0x40005804 &= FLAG)
#define Clr_I2C2_CR2(FLAG)                   (*(uint32_t*)0x40005804 |= ~FLAG)
#define Set_I2C2_OAR1(FLAG)                  (*(uint32_t*)0x40005808 &= FLAG)
#define Clr_I2C2_OAR1(FLAG)                  (*(uint32_t*)0x40005808 |= ~FLAG)
#define Set_I2C2_OAR2(FLAG)                  (*(uint32_t*)0x4000580c &= FLAG)
#define Clr_I2C2_OAR2(FLAG)                  (*(uint32_t*)0x4000580c |= ~FLAG)
#define Set_I2C2_TIMINGR(FLAG)               (*(uint32_t*)0x40005810 &= FLAG)
#define Clr_I2C2_TIMINGR(FLAG)               (*(uint32_t*)0x40005810 |= ~FLAG)
#define Set_I2C2_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005814 &= FLAG)
#define Clr_I2C2_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005814 |= ~FLAG)
#define Set_I2C2_ISR(FLAG)                   (*(uint32_t*)0x40005818 &= FLAG)
#define Clr_I2C2_ISR(FLAG)                   (*(uint32_t*)0x40005818 |= ~FLAG)
#define Set_I2C2_ICR(FLAG)                   (*(uint32_t*)0x4000581c &= FLAG)
#define Clr_I2C2_ICR(FLAG)                   (*(uint32_t*)0x4000581c |= ~FLAG)
#define Set_I2C2_PECR(FLAG)                  (*(uint32_t*)0x40005820 &= FLAG)
#define Clr_I2C2_PECR(FLAG)                  (*(uint32_t*)0x40005820 |= ~FLAG)
#define Set_I2C2_RXDR(FLAG)                  (*(uint32_t*)0x40005824 &= FLAG)
#define Clr_I2C2_RXDR(FLAG)                  (*(uint32_t*)0x40005824 |= ~FLAG)
#define Set_I2C2_TXDR(FLAG)                  (*(uint32_t*)0x40005828 &= FLAG)
#define Clr_I2C2_TXDR(FLAG)                  (*(uint32_t*)0x40005828 |= ~FLAG)
#define Set_I2C3_CR1(FLAG)                   (*(uint32_t*)0x40005c00 &= FLAG)
#define Clr_I2C3_CR1(FLAG)                   (*(uint32_t*)0x40005c00 |= ~FLAG)
#define Set_I2C3_CR2(FLAG)                   (*(uint32_t*)0x40005c04 &= FLAG)
#define Clr_I2C3_CR2(FLAG)                   (*(uint32_t*)0x40005c04 |= ~FLAG)
#define Set_I2C3_OAR1(FLAG)                  (*(uint32_t*)0x40005c08 &= FLAG)
#define Clr_I2C3_OAR1(FLAG)                  (*(uint32_t*)0x40005c08 |= ~FLAG)
#define Set_I2C3_OAR2(FLAG)                  (*(uint32_t*)0x40005c0c &= FLAG)
#define Clr_I2C3_OAR2(FLAG)                  (*(uint32_t*)0x40005c0c |= ~FLAG)
#define Set_I2C3_TIMINGR(FLAG)               (*(uint32_t*)0x40005c10 &= FLAG)
#define Clr_I2C3_TIMINGR(FLAG)               (*(uint32_t*)0x40005c10 |= ~FLAG)
#define Set_I2C3_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005c14 &= FLAG)
#define Clr_I2C3_TIMEOUTR(FLAG)              (*(uint32_t*)0x40005c14 |= ~FLAG)
#define Set_I2C3_ISR(FLAG)                   (*(uint32_t*)0x40005c18 &= FLAG)
#define Clr_I2C3_ISR(FLAG)                   (*(uint32_t*)0x40005c18 |= ~FLAG)
#define Set_I2C3_ICR(FLAG)                   (*(uint32_t*)0x40005c1c &= FLAG)
#define Clr_I2C3_ICR(FLAG)                   (*(uint32_t*)0x40005c1c |= ~FLAG)
#define Set_I2C3_PECR(FLAG)                  (*(uint32_t*)0x40005c20 &= FLAG)
#define Clr_I2C3_PECR(FLAG)                  (*(uint32_t*)0x40005c20 |= ~FLAG)
#define Set_I2C3_RXDR(FLAG)                  (*(uint32_t*)0x40005c24 &= FLAG)
#define Clr_I2C3_RXDR(FLAG)                  (*(uint32_t*)0x40005c24 |= ~FLAG)
#define Set_I2C3_TXDR(FLAG)                  (*(uint32_t*)0x40005c28 &= FLAG)
#define Clr_I2C3_TXDR(FLAG)                  (*(uint32_t*)0x40005c28 |= ~FLAG)
#define Set_I2C4_CR1(FLAG)                   (*(uint32_t*)0x40006000 &= FLAG)
#define Clr_I2C4_CR1(FLAG)                   (*(uint32_t*)0x40006000 |= ~FLAG)
#define Set_I2C4_CR2(FLAG)                   (*(uint32_t*)0x40006004 &= FLAG)
#define Clr_I2C4_CR2(FLAG)                   (*(uint32_t*)0x40006004 |= ~FLAG)
#define Set_I2C4_OAR1(FLAG)                  (*(uint32_t*)0x40006008 &= FLAG)
#define Clr_I2C4_OAR1(FLAG)                  (*(uint32_t*)0x40006008 |= ~FLAG)
#define Set_I2C4_OAR2(FLAG)                  (*(uint32_t*)0x4000600c &= FLAG)
#define Clr_I2C4_OAR2(FLAG)                  (*(uint32_t*)0x4000600c |= ~FLAG)
#define Set_I2C4_TIMINGR(FLAG)               (*(uint32_t*)0x40006010 &= FLAG)
#define Clr_I2C4_TIMINGR(FLAG)               (*(uint32_t*)0x40006010 |= ~FLAG)
#define Set_I2C4_TIMEOUTR(FLAG)              (*(uint32_t*)0x40006014 &= FLAG)
#define Clr_I2C4_TIMEOUTR(FLAG)              (*(uint32_t*)0x40006014 |= ~FLAG)
#define Set_I2C4_ISR(FLAG)                   (*(uint32_t*)0x40006018 &= FLAG)
#define Clr_I2C4_ISR(FLAG)                   (*(uint32_t*)0x40006018 |= ~FLAG)
#define Set_I2C4_ICR(FLAG)                   (*(uint32_t*)0x4000601c &= FLAG)
#define Clr_I2C4_ICR(FLAG)                   (*(uint32_t*)0x4000601c |= ~FLAG)
#define Set_I2C4_PECR(FLAG)                  (*(uint32_t*)0x40006020 &= FLAG)
#define Clr_I2C4_PECR(FLAG)                  (*(uint32_t*)0x40006020 |= ~FLAG)
#define Set_I2C4_RXDR(FLAG)                  (*(uint32_t*)0x40006024 &= FLAG)
#define Clr_I2C4_RXDR(FLAG)                  (*(uint32_t*)0x40006024 |= ~FLAG)
#define Set_I2C4_TXDR(FLAG)                  (*(uint32_t*)0x40006028 &= FLAG)
#define Clr_I2C4_TXDR(FLAG)                  (*(uint32_t*)0x40006028 |= ~FLAG)
#define  _I2C1_CR1_PE                                        (0x1 << 0)    // Peripheral enable
#define  _I2C1_CR1_TXIE                                      (0x1 << 1)    // TX Interrupt enable
#define  _I2C1_CR1_RXIE                                      (0x1 << 2)    // RX Interrupt enable
#define  _I2C1_CR1_ADDRIE                                    (0x1 << 3)    // Address match interrupt enable (slave only)
#define  _I2C1_CR1_NACKIE                                    (0x1 << 4)    // Not acknowledge received interrupt enable
#define  _I2C1_CR1_STOPIE                                    (0x1 << 5)    // STOP detection Interrupt enable
#define  _I2C1_CR1_TCIE                                      (0x1 << 6)    // Transfer Complete interrupt enable
#define  _I2C1_CR1_ERRIE                                     (0x1 << 7)    // Error interrupts enable
#define  _I2C1_CR1_DNF                                       (0xf << 8)    // Digital noise filter
#define  _I2C1_CR1_ANFOFF                                    (0x1 << 12)    // Analog noise filter OFF
#define  _I2C1_CR1_TXDMAEN                                   (0x1 << 14)    // DMA transmission requests enable
#define  _I2C1_CR1_RXDMAEN                                   (0x1 << 15)    // DMA reception requests enable
#define  _I2C1_CR1_SBC                                       (0x1 << 16)    // Slave byte control
#define  _I2C1_CR1_NOSTRETCH                                 (0x1 << 17)    // Clock stretching disable
#define  _I2C1_CR1_WUPEN                                     (0x1 << 18)    // Wakeup from STOP enable
#define  _I2C1_CR1_GCEN                                      (0x1 << 19)    // General call enable
#define  _I2C1_CR1_SMBHEN                                    (0x1 << 20)    // SMBus Host address enable
#define  _I2C1_CR1_SMBDEN                                    (0x1 << 21)    // SMBus Device Default address enable
#define  _I2C1_CR1_ALERTEN                                   (0x1 << 22)    // SMBUS alert enable
#define  _I2C1_CR1_PECEN                                     (0x1 << 23)    // PEC enable
#define  _I2C1_CR2_PECBYTE                                   (0x1 << 26)    // Packet error checking byte
#define  _I2C1_CR2_AUTOEND                                   (0x1 << 25)    // Automatic end mode (master mode)
#define  _I2C1_CR2_RELOAD                                    (0x1 << 24)    // NBYTES reload mode
#define  _I2C1_CR2_NBYTES                                    (0xff << 16)    // Number of bytes
#define  _I2C1_CR2_NACK                                      (0x1 << 15)    // NACK generation (slave mode)
#define  _I2C1_CR2_STOP                                      (0x1 << 14)    // Stop generation (master mode)
#define  _I2C1_CR2_START                                     (0x1 << 13)    // Start generation
#define  _I2C1_CR2_HEAD10R                                   (0x1 << 12)    // 10-bit address header only read direction (master receiver mode)
#define  _I2C1_CR2_ADD10                                     (0x1 << 11)    // 10-bit addressing mode (master mode)
#define  _I2C1_CR2_RD_WRN                                    (0x1 << 10)    // Transfer direction (master mode)
#define  _I2C1_CR2_SADD                                      (0x3ff << 0)    // Slave address bit (master mode)
#define  _I2C1_OAR1_OA1                                      (0x3ff << 0)    // Interface address
#define  _I2C1_OAR1_OA1MODE                                  (0x1 << 10)    // Own Address 1 10-bit mode
#define  _I2C1_OAR1_OA1EN                                    (0x1 << 15)    // Own Address 1 enable
#define  _I2C1_OAR2_OA2                                      (0x7f << 1)    // Interface address
#define  _I2C1_OAR2_OA2MSK                                   (0x7 << 8)    // Own Address 2 masks
#define  _I2C1_OAR2_OA2EN                                    (0x1 << 15)    // Own Address 2 enable
#define  _I2C1_TIMINGR_SCLL                                  (0xff << 0)    // SCL low period (master mode)
#define  _I2C1_TIMINGR_SCLH                                  (0xff << 8)    // SCL high period (master mode)
#define  _I2C1_TIMINGR_SDADEL                                (0xf << 16)    // Data hold time
#define  _I2C1_TIMINGR_SCLDEL                                (0xf << 20)    // Data setup time
#define  _I2C1_TIMINGR_PRESC                                 (0xf << 28)    // Timing prescaler
#define  _I2C1_TIMEOUTR_TIMEOUTA                             (0xfff << 0)    // Bus timeout A
#define  _I2C1_TIMEOUTR_TIDLE                                (0x1 << 12)    // Idle clock timeout detection
#define  _I2C1_TIMEOUTR_TIMOUTEN                             (0x1 << 15)    // Clock timeout enable
#define  _I2C1_TIMEOUTR_TIMEOUTB                             (0xfff << 16)    // Bus timeout B
#define  _I2C1_TIMEOUTR_TEXTEN                               (0x1 << 31)    // Extended clock timeout enable
#define  _I2C1_ISR_ADDCODE                                   (0x7f << 17)    // Address match code (Slave mode)
#define  _I2C1_ISR_DIR                                       (0x1 << 16)    // Transfer direction (Slave mode)
#define  _I2C1_ISR_BUSY                                      (0x1 << 15)    // Bus busy
#define  _I2C1_ISR_ALERT                                     (0x1 << 13)    // SMBus alert
#define  _I2C1_ISR_TIMEOUT                                   (0x1 << 12)    // Timeout or t_low detection flag
#define  _I2C1_ISR_PECERR                                    (0x1 << 11)    // PEC Error in reception
#define  _I2C1_ISR_OVR                                       (0x1 << 10)    // Overrun/Underrun (slave mode)
#define  _I2C1_ISR_ARLO                                      (0x1 << 9)    // Arbitration lost
#define  _I2C1_ISR_BERR                                      (0x1 << 8)    // Bus error
#define  _I2C1_ISR_TCR                                       (0x1 << 7)    // Transfer Complete Reload
#define  _I2C1_ISR_TC                                        (0x1 << 6)    // Transfer Complete (master mode)
#define  _I2C1_ISR_STOPF                                     (0x1 << 5)    // Stop detection flag
#define  _I2C1_ISR_NACKF                                     (0x1 << 4)    // Not acknowledge received flag
#define  _I2C1_ISR_ADDR                                      (0x1 << 3)    // Address matched (slave mode)
#define  _I2C1_ISR_RXNE                                      (0x1 << 2)    // Receive data register not empty (receivers)
#define  _I2C1_ISR_TXIS                                      (0x1 << 1)    // Transmit interrupt status (transmitters)
#define  _I2C1_ISR_TXE                                       (0x1 << 0)    // Transmit data register empty (transmitters)
#define  _I2C1_ICR_ALERTCF                                   (0x1 << 13)    // Alert flag clear
#define  _I2C1_ICR_TIMOUTCF                                  (0x1 << 12)    // Timeout detection flag clear
#define  _I2C1_ICR_PECCF                                     (0x1 << 11)    // PEC Error flag clear
#define  _I2C1_ICR_OVRCF                                     (0x1 << 10)    // Overrun/Underrun flag clear
#define  _I2C1_ICR_ARLOCF                                    (0x1 << 9)    // Arbitration lost flag clear
#define  _I2C1_ICR_BERRCF                                    (0x1 << 8)    // Bus error flag clear
#define  _I2C1_ICR_STOPCF                                    (0x1 << 5)    // Stop detection flag clear
#define  _I2C1_ICR_NACKCF                                    (0x1 << 4)    // Not Acknowledge flag clear
#define  _I2C1_ICR_ADDRCF                                    (0x1 << 3)    // Address Matched flag clear
#define  _I2C1_PECR_PEC                                      (0xff << 0)    // Packet error checking register
#define  _I2C1_RXDR_RXDATA                                   (0xff << 0)    // 8-bit receive data
#define  _I2C1_TXDR_TXDATA                                   (0xff << 0)    // 8-bit transmit data
#define  _I2C2_CR1_PE                                        (0x1 << 0)    // Peripheral enable
#define  _I2C2_CR1_TXIE                                      (0x1 << 1)    // TX Interrupt enable
#define  _I2C2_CR1_RXIE                                      (0x1 << 2)    // RX Interrupt enable
#define  _I2C2_CR1_ADDRIE                                    (0x1 << 3)    // Address match interrupt enable (slave only)
#define  _I2C2_CR1_NACKIE                                    (0x1 << 4)    // Not acknowledge received interrupt enable
#define  _I2C2_CR1_STOPIE                                    (0x1 << 5)    // STOP detection Interrupt enable
#define  _I2C2_CR1_TCIE                                      (0x1 << 6)    // Transfer Complete interrupt enable
#define  _I2C2_CR1_ERRIE                                     (0x1 << 7)    // Error interrupts enable
#define  _I2C2_CR1_DNF                                       (0xf << 8)    // Digital noise filter
#define  _I2C2_CR1_ANFOFF                                    (0x1 << 12)    // Analog noise filter OFF
#define  _I2C2_CR1_TXDMAEN                                   (0x1 << 14)    // DMA transmission requests enable
#define  _I2C2_CR1_RXDMAEN                                   (0x1 << 15)    // DMA reception requests enable
#define  _I2C2_CR1_SBC                                       (0x1 << 16)    // Slave byte control
#define  _I2C2_CR1_NOSTRETCH                                 (0x1 << 17)    // Clock stretching disable
#define  _I2C2_CR1_WUPEN                                     (0x1 << 18)    // Wakeup from STOP enable
#define  _I2C2_CR1_GCEN                                      (0x1 << 19)    // General call enable
#define  _I2C2_CR1_SMBHEN                                    (0x1 << 20)    // SMBus Host address enable
#define  _I2C2_CR1_SMBDEN                                    (0x1 << 21)    // SMBus Device Default address enable
#define  _I2C2_CR1_ALERTEN                                   (0x1 << 22)    // SMBUS alert enable
#define  _I2C2_CR1_PECEN                                     (0x1 << 23)    // PEC enable
#define  _I2C2_CR2_PECBYTE                                   (0x1 << 26)    // Packet error checking byte
#define  _I2C2_CR2_AUTOEND                                   (0x1 << 25)    // Automatic end mode (master mode)
#define  _I2C2_CR2_RELOAD                                    (0x1 << 24)    // NBYTES reload mode
#define  _I2C2_CR2_NBYTES                                    (0xff << 16)    // Number of bytes
#define  _I2C2_CR2_NACK                                      (0x1 << 15)    // NACK generation (slave mode)
#define  _I2C2_CR2_STOP                                      (0x1 << 14)    // Stop generation (master mode)
#define  _I2C2_CR2_START                                     (0x1 << 13)    // Start generation
#define  _I2C2_CR2_HEAD10R                                   (0x1 << 12)    // 10-bit address header only read direction (master receiver mode)
#define  _I2C2_CR2_ADD10                                     (0x1 << 11)    // 10-bit addressing mode (master mode)
#define  _I2C2_CR2_RD_WRN                                    (0x1 << 10)    // Transfer direction (master mode)
#define  _I2C2_CR2_SADD                                      (0x3ff << 0)    // Slave address bit (master mode)
#define  _I2C2_OAR1_OA1                                      (0x3ff << 0)    // Interface address
#define  _I2C2_OAR1_OA1MODE                                  (0x1 << 10)    // Own Address 1 10-bit mode
#define  _I2C2_OAR1_OA1EN                                    (0x1 << 15)    // Own Address 1 enable
#define  _I2C2_OAR2_OA2                                      (0x7f << 1)    // Interface address
#define  _I2C2_OAR2_OA2MSK                                   (0x7 << 8)    // Own Address 2 masks
#define  _I2C2_OAR2_OA2EN                                    (0x1 << 15)    // Own Address 2 enable
#define  _I2C2_TIMINGR_SCLL                                  (0xff << 0)    // SCL low period (master mode)
#define  _I2C2_TIMINGR_SCLH                                  (0xff << 8)    // SCL high period (master mode)
#define  _I2C2_TIMINGR_SDADEL                                (0xf << 16)    // Data hold time
#define  _I2C2_TIMINGR_SCLDEL                                (0xf << 20)    // Data setup time
#define  _I2C2_TIMINGR_PRESC                                 (0xf << 28)    // Timing prescaler
#define  _I2C2_TIMEOUTR_TIMEOUTA                             (0xfff << 0)    // Bus timeout A
#define  _I2C2_TIMEOUTR_TIDLE                                (0x1 << 12)    // Idle clock timeout detection
#define  _I2C2_TIMEOUTR_TIMOUTEN                             (0x1 << 15)    // Clock timeout enable
#define  _I2C2_TIMEOUTR_TIMEOUTB                             (0xfff << 16)    // Bus timeout B
#define  _I2C2_TIMEOUTR_TEXTEN                               (0x1 << 31)    // Extended clock timeout enable
#define  _I2C2_ISR_ADDCODE                                   (0x7f << 17)    // Address match code (Slave mode)
#define  _I2C2_ISR_DIR                                       (0x1 << 16)    // Transfer direction (Slave mode)
#define  _I2C2_ISR_BUSY                                      (0x1 << 15)    // Bus busy
#define  _I2C2_ISR_ALERT                                     (0x1 << 13)    // SMBus alert
#define  _I2C2_ISR_TIMEOUT                                   (0x1 << 12)    // Timeout or t_low detection flag
#define  _I2C2_ISR_PECERR                                    (0x1 << 11)    // PEC Error in reception
#define  _I2C2_ISR_OVR                                       (0x1 << 10)    // Overrun/Underrun (slave mode)
#define  _I2C2_ISR_ARLO                                      (0x1 << 9)    // Arbitration lost
#define  _I2C2_ISR_BERR                                      (0x1 << 8)    // Bus error
#define  _I2C2_ISR_TCR                                       (0x1 << 7)    // Transfer Complete Reload
#define  _I2C2_ISR_TC                                        (0x1 << 6)    // Transfer Complete (master mode)
#define  _I2C2_ISR_STOPF                                     (0x1 << 5)    // Stop detection flag
#define  _I2C2_ISR_NACKF                                     (0x1 << 4)    // Not acknowledge received flag
#define  _I2C2_ISR_ADDR                                      (0x1 << 3)    // Address matched (slave mode)
#define  _I2C2_ISR_RXNE                                      (0x1 << 2)    // Receive data register not empty (receivers)
#define  _I2C2_ISR_TXIS                                      (0x1 << 1)    // Transmit interrupt status (transmitters)
#define  _I2C2_ISR_TXE                                       (0x1 << 0)    // Transmit data register empty (transmitters)
#define  _I2C2_ICR_ALERTCF                                   (0x1 << 13)    // Alert flag clear
#define  _I2C2_ICR_TIMOUTCF                                  (0x1 << 12)    // Timeout detection flag clear
#define  _I2C2_ICR_PECCF                                     (0x1 << 11)    // PEC Error flag clear
#define  _I2C2_ICR_OVRCF                                     (0x1 << 10)    // Overrun/Underrun flag clear
#define  _I2C2_ICR_ARLOCF                                    (0x1 << 9)    // Arbitration lost flag clear
#define  _I2C2_ICR_BERRCF                                    (0x1 << 8)    // Bus error flag clear
#define  _I2C2_ICR_STOPCF                                    (0x1 << 5)    // Stop detection flag clear
#define  _I2C2_ICR_NACKCF                                    (0x1 << 4)    // Not Acknowledge flag clear
#define  _I2C2_ICR_ADDRCF                                    (0x1 << 3)    // Address Matched flag clear
#define  _I2C2_PECR_PEC                                      (0xff << 0)    // Packet error checking register
#define  _I2C2_RXDR_RXDATA                                   (0xff << 0)    // 8-bit receive data
#define  _I2C2_TXDR_TXDATA                                   (0xff << 0)    // 8-bit transmit data
#define  _I2C3_CR1_PE                                        (0x1 << 0)    // Peripheral enable
#define  _I2C3_CR1_TXIE                                      (0x1 << 1)    // TX Interrupt enable
#define  _I2C3_CR1_RXIE                                      (0x1 << 2)    // RX Interrupt enable
#define  _I2C3_CR1_ADDRIE                                    (0x1 << 3)    // Address match interrupt enable (slave only)
#define  _I2C3_CR1_NACKIE                                    (0x1 << 4)    // Not acknowledge received interrupt enable
#define  _I2C3_CR1_STOPIE                                    (0x1 << 5)    // STOP detection Interrupt enable
#define  _I2C3_CR1_TCIE                                      (0x1 << 6)    // Transfer Complete interrupt enable
#define  _I2C3_CR1_ERRIE                                     (0x1 << 7)    // Error interrupts enable
#define  _I2C3_CR1_DNF                                       (0xf << 8)    // Digital noise filter
#define  _I2C3_CR1_ANFOFF                                    (0x1 << 12)    // Analog noise filter OFF
#define  _I2C3_CR1_TXDMAEN                                   (0x1 << 14)    // DMA transmission requests enable
#define  _I2C3_CR1_RXDMAEN                                   (0x1 << 15)    // DMA reception requests enable
#define  _I2C3_CR1_SBC                                       (0x1 << 16)    // Slave byte control
#define  _I2C3_CR1_NOSTRETCH                                 (0x1 << 17)    // Clock stretching disable
#define  _I2C3_CR1_WUPEN                                     (0x1 << 18)    // Wakeup from STOP enable
#define  _I2C3_CR1_GCEN                                      (0x1 << 19)    // General call enable
#define  _I2C3_CR1_SMBHEN                                    (0x1 << 20)    // SMBus Host address enable
#define  _I2C3_CR1_SMBDEN                                    (0x1 << 21)    // SMBus Device Default address enable
#define  _I2C3_CR1_ALERTEN                                   (0x1 << 22)    // SMBUS alert enable
#define  _I2C3_CR1_PECEN                                     (0x1 << 23)    // PEC enable
#define  _I2C3_CR2_PECBYTE                                   (0x1 << 26)    // Packet error checking byte
#define  _I2C3_CR2_AUTOEND                                   (0x1 << 25)    // Automatic end mode (master mode)
#define  _I2C3_CR2_RELOAD                                    (0x1 << 24)    // NBYTES reload mode
#define  _I2C3_CR2_NBYTES                                    (0xff << 16)    // Number of bytes
#define  _I2C3_CR2_NACK                                      (0x1 << 15)    // NACK generation (slave mode)
#define  _I2C3_CR2_STOP                                      (0x1 << 14)    // Stop generation (master mode)
#define  _I2C3_CR2_START                                     (0x1 << 13)    // Start generation
#define  _I2C3_CR2_HEAD10R                                   (0x1 << 12)    // 10-bit address header only read direction (master receiver mode)
#define  _I2C3_CR2_ADD10                                     (0x1 << 11)    // 10-bit addressing mode (master mode)
#define  _I2C3_CR2_RD_WRN                                    (0x1 << 10)    // Transfer direction (master mode)
#define  _I2C3_CR2_SADD                                      (0x3ff << 0)    // Slave address bit (master mode)
#define  _I2C3_OAR1_OA1                                      (0x3ff << 0)    // Interface address
#define  _I2C3_OAR1_OA1MODE                                  (0x1 << 10)    // Own Address 1 10-bit mode
#define  _I2C3_OAR1_OA1EN                                    (0x1 << 15)    // Own Address 1 enable
#define  _I2C3_OAR2_OA2                                      (0x7f << 1)    // Interface address
#define  _I2C3_OAR2_OA2MSK                                   (0x7 << 8)    // Own Address 2 masks
#define  _I2C3_OAR2_OA2EN                                    (0x1 << 15)    // Own Address 2 enable
#define  _I2C3_TIMINGR_SCLL                                  (0xff << 0)    // SCL low period (master mode)
#define  _I2C3_TIMINGR_SCLH                                  (0xff << 8)    // SCL high period (master mode)
#define  _I2C3_TIMINGR_SDADEL                                (0xf << 16)    // Data hold time
#define  _I2C3_TIMINGR_SCLDEL                                (0xf << 20)    // Data setup time
#define  _I2C3_TIMINGR_PRESC                                 (0xf << 28)    // Timing prescaler
#define  _I2C3_TIMEOUTR_TIMEOUTA                             (0xfff << 0)    // Bus timeout A
#define  _I2C3_TIMEOUTR_TIDLE                                (0x1 << 12)    // Idle clock timeout detection
#define  _I2C3_TIMEOUTR_TIMOUTEN                             (0x1 << 15)    // Clock timeout enable
#define  _I2C3_TIMEOUTR_TIMEOUTB                             (0xfff << 16)    // Bus timeout B
#define  _I2C3_TIMEOUTR_TEXTEN                               (0x1 << 31)    // Extended clock timeout enable
#define  _I2C3_ISR_ADDCODE                                   (0x7f << 17)    // Address match code (Slave mode)
#define  _I2C3_ISR_DIR                                       (0x1 << 16)    // Transfer direction (Slave mode)
#define  _I2C3_ISR_BUSY                                      (0x1 << 15)    // Bus busy
#define  _I2C3_ISR_ALERT                                     (0x1 << 13)    // SMBus alert
#define  _I2C3_ISR_TIMEOUT                                   (0x1 << 12)    // Timeout or t_low detection flag
#define  _I2C3_ISR_PECERR                                    (0x1 << 11)    // PEC Error in reception
#define  _I2C3_ISR_OVR                                       (0x1 << 10)    // Overrun/Underrun (slave mode)
#define  _I2C3_ISR_ARLO                                      (0x1 << 9)    // Arbitration lost
#define  _I2C3_ISR_BERR                                      (0x1 << 8)    // Bus error
#define  _I2C3_ISR_TCR                                       (0x1 << 7)    // Transfer Complete Reload
#define  _I2C3_ISR_TC                                        (0x1 << 6)    // Transfer Complete (master mode)
#define  _I2C3_ISR_STOPF                                     (0x1 << 5)    // Stop detection flag
#define  _I2C3_ISR_NACKF                                     (0x1 << 4)    // Not acknowledge received flag
#define  _I2C3_ISR_ADDR                                      (0x1 << 3)    // Address matched (slave mode)
#define  _I2C3_ISR_RXNE                                      (0x1 << 2)    // Receive data register not empty (receivers)
#define  _I2C3_ISR_TXIS                                      (0x1 << 1)    // Transmit interrupt status (transmitters)
#define  _I2C3_ISR_TXE                                       (0x1 << 0)    // Transmit data register empty (transmitters)
#define  _I2C3_ICR_ALERTCF                                   (0x1 << 13)    // Alert flag clear
#define  _I2C3_ICR_TIMOUTCF                                  (0x1 << 12)    // Timeout detection flag clear
#define  _I2C3_ICR_PECCF                                     (0x1 << 11)    // PEC Error flag clear
#define  _I2C3_ICR_OVRCF                                     (0x1 << 10)    // Overrun/Underrun flag clear
#define  _I2C3_ICR_ARLOCF                                    (0x1 << 9)    // Arbitration lost flag clear
#define  _I2C3_ICR_BERRCF                                    (0x1 << 8)    // Bus error flag clear
#define  _I2C3_ICR_STOPCF                                    (0x1 << 5)    // Stop detection flag clear
#define  _I2C3_ICR_NACKCF                                    (0x1 << 4)    // Not Acknowledge flag clear
#define  _I2C3_ICR_ADDRCF                                    (0x1 << 3)    // Address Matched flag clear
#define  _I2C3_PECR_PEC                                      (0xff << 0)    // Packet error checking register
#define  _I2C3_RXDR_RXDATA                                   (0xff << 0)    // 8-bit receive data
#define  _I2C3_TXDR_TXDATA                                   (0xff << 0)    // 8-bit transmit data
#define  _I2C4_CR1_PE                                        (0x1 << 0)    // Peripheral enable
#define  _I2C4_CR1_TXIE                                      (0x1 << 1)    // TX Interrupt enable
#define  _I2C4_CR1_RXIE                                      (0x1 << 2)    // RX Interrupt enable
#define  _I2C4_CR1_ADDRIE                                    (0x1 << 3)    // Address match interrupt enable (slave only)
#define  _I2C4_CR1_NACKIE                                    (0x1 << 4)    // Not acknowledge received interrupt enable
#define  _I2C4_CR1_STOPIE                                    (0x1 << 5)    // STOP detection Interrupt enable
#define  _I2C4_CR1_TCIE                                      (0x1 << 6)    // Transfer Complete interrupt enable
#define  _I2C4_CR1_ERRIE                                     (0x1 << 7)    // Error interrupts enable
#define  _I2C4_CR1_DNF                                       (0xf << 8)    // Digital noise filter
#define  _I2C4_CR1_ANFOFF                                    (0x1 << 12)    // Analog noise filter OFF
#define  _I2C4_CR1_TXDMAEN                                   (0x1 << 14)    // DMA transmission requests enable
#define  _I2C4_CR1_RXDMAEN                                   (0x1 << 15)    // DMA reception requests enable
#define  _I2C4_CR1_SBC                                       (0x1 << 16)    // Slave byte control
#define  _I2C4_CR1_NOSTRETCH                                 (0x1 << 17)    // Clock stretching disable
#define  _I2C4_CR1_WUPEN                                     (0x1 << 18)    // Wakeup from STOP enable
#define  _I2C4_CR1_GCEN                                      (0x1 << 19)    // General call enable
#define  _I2C4_CR1_SMBHEN                                    (0x1 << 20)    // SMBus Host address enable
#define  _I2C4_CR1_SMBDEN                                    (0x1 << 21)    // SMBus Device Default address enable
#define  _I2C4_CR1_ALERTEN                                   (0x1 << 22)    // SMBUS alert enable
#define  _I2C4_CR1_PECEN                                     (0x1 << 23)    // PEC enable
#define  _I2C4_CR2_PECBYTE                                   (0x1 << 26)    // Packet error checking byte
#define  _I2C4_CR2_AUTOEND                                   (0x1 << 25)    // Automatic end mode (master mode)
#define  _I2C4_CR2_RELOAD                                    (0x1 << 24)    // NBYTES reload mode
#define  _I2C4_CR2_NBYTES                                    (0xff << 16)    // Number of bytes
#define  _I2C4_CR2_NACK                                      (0x1 << 15)    // NACK generation (slave mode)
#define  _I2C4_CR2_STOP                                      (0x1 << 14)    // Stop generation (master mode)
#define  _I2C4_CR2_START                                     (0x1 << 13)    // Start generation
#define  _I2C4_CR2_HEAD10R                                   (0x1 << 12)    // 10-bit address header only read direction (master receiver mode)
#define  _I2C4_CR2_ADD10                                     (0x1 << 11)    // 10-bit addressing mode (master mode)
#define  _I2C4_CR2_RD_WRN                                    (0x1 << 10)    // Transfer direction (master mode)
#define  _I2C4_CR2_SADD                                      (0x3ff << 0)    // Slave address bit (master mode)
#define  _I2C4_OAR1_OA1                                      (0x3ff << 0)    // Interface address
#define  _I2C4_OAR1_OA1MODE                                  (0x1 << 10)    // Own Address 1 10-bit mode
#define  _I2C4_OAR1_OA1EN                                    (0x1 << 15)    // Own Address 1 enable
#define  _I2C4_OAR2_OA2                                      (0x7f << 1)    // Interface address
#define  _I2C4_OAR2_OA2MSK                                   (0x7 << 8)    // Own Address 2 masks
#define  _I2C4_OAR2_OA2EN                                    (0x1 << 15)    // Own Address 2 enable
#define  _I2C4_TIMINGR_SCLL                                  (0xff << 0)    // SCL low period (master mode)
#define  _I2C4_TIMINGR_SCLH                                  (0xff << 8)    // SCL high period (master mode)
#define  _I2C4_TIMINGR_SDADEL                                (0xf << 16)    // Data hold time
#define  _I2C4_TIMINGR_SCLDEL                                (0xf << 20)    // Data setup time
#define  _I2C4_TIMINGR_PRESC                                 (0xf << 28)    // Timing prescaler
#define  _I2C4_TIMEOUTR_TIMEOUTA                             (0xfff << 0)    // Bus timeout A
#define  _I2C4_TIMEOUTR_TIDLE                                (0x1 << 12)    // Idle clock timeout detection
#define  _I2C4_TIMEOUTR_TIMOUTEN                             (0x1 << 15)    // Clock timeout enable
#define  _I2C4_TIMEOUTR_TIMEOUTB                             (0xfff << 16)    // Bus timeout B
#define  _I2C4_TIMEOUTR_TEXTEN                               (0x1 << 31)    // Extended clock timeout enable
#define  _I2C4_ISR_ADDCODE                                   (0x7f << 17)    // Address match code (Slave mode)
#define  _I2C4_ISR_DIR                                       (0x1 << 16)    // Transfer direction (Slave mode)
#define  _I2C4_ISR_BUSY                                      (0x1 << 15)    // Bus busy
#define  _I2C4_ISR_ALERT                                     (0x1 << 13)    // SMBus alert
#define  _I2C4_ISR_TIMEOUT                                   (0x1 << 12)    // Timeout or t_low detection flag
#define  _I2C4_ISR_PECERR                                    (0x1 << 11)    // PEC Error in reception
#define  _I2C4_ISR_OVR                                       (0x1 << 10)    // Overrun/Underrun (slave mode)
#define  _I2C4_ISR_ARLO                                      (0x1 << 9)    // Arbitration lost
#define  _I2C4_ISR_BERR                                      (0x1 << 8)    // Bus error
#define  _I2C4_ISR_TCR                                       (0x1 << 7)    // Transfer Complete Reload
#define  _I2C4_ISR_TC                                        (0x1 << 6)    // Transfer Complete (master mode)
#define  _I2C4_ISR_STOPF                                     (0x1 << 5)    // Stop detection flag
#define  _I2C4_ISR_NACKF                                     (0x1 << 4)    // Not acknowledge received flag
#define  _I2C4_ISR_ADDR                                      (0x1 << 3)    // Address matched (slave mode)
#define  _I2C4_ISR_RXNE                                      (0x1 << 2)    // Receive data register not empty (receivers)
#define  _I2C4_ISR_TXIS                                      (0x1 << 1)    // Transmit interrupt status (transmitters)
#define  _I2C4_ISR_TXE                                       (0x1 << 0)    // Transmit data register empty (transmitters)
#define  _I2C4_ICR_ALERTCF                                   (0x1 << 13)    // Alert flag clear
#define  _I2C4_ICR_TIMOUTCF                                  (0x1 << 12)    // Timeout detection flag clear
#define  _I2C4_ICR_PECCF                                     (0x1 << 11)    // PEC Error flag clear
#define  _I2C4_ICR_OVRCF                                     (0x1 << 10)    // Overrun/Underrun flag clear
#define  _I2C4_ICR_ARLOCF                                    (0x1 << 9)    // Arbitration lost flag clear
#define  _I2C4_ICR_BERRCF                                    (0x1 << 8)    // Bus error flag clear
#define  _I2C4_ICR_STOPCF                                    (0x1 << 5)    // Stop detection flag clear
#define  _I2C4_ICR_NACKCF                                    (0x1 << 4)    // Not Acknowledge flag clear
#define  _I2C4_ICR_ADDRCF                                    (0x1 << 3)    // Address Matched flag clear
#define  _I2C4_PECR_PEC                                      (0xff << 0)    // Packet error checking register
#define  _I2C4_RXDR_RXDATA                                   (0xff << 0)    // 8-bit receive data
#define  _I2C4_TXDR_TXDATA                                   (0xff << 0)    // 8-bit transmit data
　
　drivers/inc/stm32f767xx_USB_OTG_FS.h
#define Get_OTG_FS_GLOBAL_OTG_FS_GOTGCTL(FLAG)(*(uint32_t*)0x50000000 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GOTGINT(FLAG)(*(uint32_t*)0x50000004 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GAHBCFG(FLAG)(*(uint32_t*)0x50000008 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GUSBCFG(FLAG)(*(uint32_t*)0x5000000c |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GRSTCTL(FLAG)(*(uint32_t*)0x50000010 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GINTSTS(FLAG)(*(uint32_t*)0x50000014 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GINTMSK(FLAG)(*(uint32_t*)0x50000018 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x5000001c |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x5000001c |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GRXFSIZ(FLAG)(*(uint32_t*)0x50000024 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x50000028 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x50000028 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_HNPTXSTS(FLAG)(*(uint32_t*)0x5000002c |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GCCFG(FLAG) (*(uint32_t*)0x50000038 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_CID(FLAG)   (*(uint32_t*)0x5000003c |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ(FLAG)(*(uint32_t*)0x50000100 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_DIEPTXF1(FLAG)(*(uint32_t*)0x50000104 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_DIEPTXF2(FLAG)(*(uint32_t*)0x50000108 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_DIEPTXF3(FLAG)(*(uint32_t*)0x5000010c |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x50000020 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x50000020 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GI2CCTL(FLAG)(*(uint32_t*)0x50000030 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GPWRDN(FLAG)(*(uint32_t*)0x50000058 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GADPCTL(FLAG)(*(uint32_t*)0x50000060 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_DIEPTXF4(FLAG)(*(uint32_t*)0x50000110 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_DIEPTXF5(FLAG)(*(uint32_t*)0x50000114 |= FLAG)
#define Get_OTG_FS_GLOBAL_OTG_FS_GLPMCFG(FLAG)(*(uint32_t*)0x50000054 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCFG(FLAG)    (*(uint32_t*)0x50000400 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HFIR(FLAG)    (*(uint32_t*)0x50000404 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HFNUM(FLAG)   (*(uint32_t*)0x50000408 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HPTXSTS(FLAG) (*(uint32_t*)0x50000410 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HAINT(FLAG)   (*(uint32_t*)0x50000414 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HAINTMSK(FLAG)(*(uint32_t*)0x50000418 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HPRT(FLAG)    (*(uint32_t*)0x50000440 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR0(FLAG) (*(uint32_t*)0x50000500 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR1(FLAG) (*(uint32_t*)0x50000520 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR2(FLAG) (*(uint32_t*)0x50000540 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR3(FLAG) (*(uint32_t*)0x50000560 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR4(FLAG) (*(uint32_t*)0x50000580 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR5(FLAG) (*(uint32_t*)0x500005a0 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR6(FLAG) (*(uint32_t*)0x500005c0 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR7(FLAG) (*(uint32_t*)0x500005e0 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT0(FLAG)  (*(uint32_t*)0x50000508 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT1(FLAG)  (*(uint32_t*)0x50000528 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT2(FLAG)  (*(uint32_t*)0x50000548 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT3(FLAG)  (*(uint32_t*)0x50000568 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT4(FLAG)  (*(uint32_t*)0x50000588 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT5(FLAG)  (*(uint32_t*)0x500005a8 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT6(FLAG)  (*(uint32_t*)0x500005c8 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT7(FLAG)  (*(uint32_t*)0x500005e8 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK0(FLAG)(*(uint32_t*)0x5000050c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK1(FLAG)(*(uint32_t*)0x5000052c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK2(FLAG)(*(uint32_t*)0x5000054c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK3(FLAG)(*(uint32_t*)0x5000056c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK4(FLAG)(*(uint32_t*)0x5000058c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK5(FLAG)(*(uint32_t*)0x500005ac |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK6(FLAG)(*(uint32_t*)0x500005cc |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK7(FLAG)(*(uint32_t*)0x500005ec |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ0(FLAG) (*(uint32_t*)0x50000510 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ1(FLAG) (*(uint32_t*)0x50000530 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ2(FLAG) (*(uint32_t*)0x50000550 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ3(FLAG) (*(uint32_t*)0x50000570 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ4(FLAG) (*(uint32_t*)0x50000590 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ5(FLAG) (*(uint32_t*)0x500005b0 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ6(FLAG) (*(uint32_t*)0x500005d0 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ7(FLAG) (*(uint32_t*)0x500005f0 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR8(FLAG) (*(uint32_t*)0x500005f4 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT8(FLAG)  (*(uint32_t*)0x500005f8 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK8(FLAG)(*(uint32_t*)0x500005fc |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ8(FLAG) (*(uint32_t*)0x50000600 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR9(FLAG) (*(uint32_t*)0x50000604 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT9(FLAG)  (*(uint32_t*)0x50000608 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK9(FLAG)(*(uint32_t*)0x5000060c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ9(FLAG) (*(uint32_t*)0x50000610 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR10(FLAG)(*(uint32_t*)0x50000614 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT10(FLAG) (*(uint32_t*)0x50000618 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK10(FLAG)(*(uint32_t*)0x5000061c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ10(FLAG)(*(uint32_t*)0x50000620 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCCHAR11(FLAG)(*(uint32_t*)0x50000624 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINT11(FLAG) (*(uint32_t*)0x50000628 |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCINTMSK11(FLAG)(*(uint32_t*)0x5000062c |= FLAG)
#define Get_OTG_FS_HOST_OTG_FS_HCTSIZ11(FLAG)(*(uint32_t*)0x50000630 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DCFG(FLAG)  (*(uint32_t*)0x50000800 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DCTL(FLAG)  (*(uint32_t*)0x50000804 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DSTS(FLAG)  (*(uint32_t*)0x50000808 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPMSK(FLAG)(*(uint32_t*)0x50000810 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPMSK(FLAG)(*(uint32_t*)0x50000814 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DAINT(FLAG) (*(uint32_t*)0x50000818 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DAINTMSK(FLAG)(*(uint32_t*)0x5000081c |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DVBUSDIS(FLAG)(*(uint32_t*)0x50000828 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DVBUSPULSE(FLAG)(*(uint32_t*)0x5000082c |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x50000834 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPCTL0(FLAG)(*(uint32_t*)0x50000900 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPCTL1(FLAG)(*(uint32_t*)0x50000920 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPCTL2(FLAG)(*(uint32_t*)0x50000940 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPCTL3(FLAG)(*(uint32_t*)0x50000960 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPCTL0(FLAG)(*(uint32_t*)0x50000b00 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPCTL1(FLAG)(*(uint32_t*)0x50000b20 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPCTL2(FLAG)(*(uint32_t*)0x50000b40 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPCTL3(FLAG)(*(uint32_t*)0x50000b60 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPINT0(FLAG)(*(uint32_t*)0x50000908 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPINT1(FLAG)(*(uint32_t*)0x50000928 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPINT2(FLAG)(*(uint32_t*)0x50000948 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPINT3(FLAG)(*(uint32_t*)0x50000968 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT0(FLAG)(*(uint32_t*)0x50000b08 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT1(FLAG)(*(uint32_t*)0x50000b28 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT2(FLAG)(*(uint32_t*)0x50000b48 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT3(FLAG)(*(uint32_t*)0x50000b68 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x50000910 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x50000b10 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x50000930 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x50000950 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x50000970 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DTXFSTS0(FLAG)(*(uint32_t*)0x50000918 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DTXFSTS1(FLAG)(*(uint32_t*)0x50000938 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DTXFSTS2(FLAG)(*(uint32_t*)0x50000958 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DTXFSTS3(FLAG)(*(uint32_t*)0x50000978 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x50000b30 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x50000b50 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x50000b70 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPCTL4(FLAG)(*(uint32_t*)0x50000980 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPINT4(FLAG)(*(uint32_t*)0x50000988 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x50000994 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DTXFSTS4(FLAG)(*(uint32_t*)0x5000099c |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPCTL5(FLAG)(*(uint32_t*)0x500009a0 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPINT5(FLAG)(*(uint32_t*)0x500009a8 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55(FLAG)(*(uint32_t*)0x500009b0 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DTXFSTS55(FLAG)(*(uint32_t*)0x500009b8 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPCTL4(FLAG)(*(uint32_t*)0x50000b78 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT4(FLAG)(*(uint32_t*)0x50000b80 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x50000b88 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPCTL5(FLAG)(*(uint32_t*)0x50000b90 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPINT5(FLAG)(*(uint32_t*)0x50000b98 |= FLAG)
#define Get_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x50000ba0 |= FLAG)
#define Get_OTG_FS_PWRCLK_OTG_FS_PCGCCTL(FLAG)(*(uint32_t*)0x50000e00 |= FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GOTGCTL(FLAG)(*(uint32_t*)0x50000000 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GOTGCTL(FLAG)(*(uint32_t*)0x50000000 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GOTGINT(FLAG)(*(uint32_t*)0x50000004 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GOTGINT(FLAG)(*(uint32_t*)0x50000004 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GAHBCFG(FLAG)(*(uint32_t*)0x50000008 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GAHBCFG(FLAG)(*(uint32_t*)0x50000008 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GUSBCFG(FLAG)(*(uint32_t*)0x5000000c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GUSBCFG(FLAG)(*(uint32_t*)0x5000000c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRSTCTL(FLAG)(*(uint32_t*)0x50000010 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRSTCTL(FLAG)(*(uint32_t*)0x50000010 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GINTSTS(FLAG)(*(uint32_t*)0x50000014 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GINTSTS(FLAG)(*(uint32_t*)0x50000014 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GINTMSK(FLAG)(*(uint32_t*)0x50000018 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GINTMSK(FLAG)(*(uint32_t*)0x50000018 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x5000001c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x5000001c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x5000001c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x5000001c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXFSIZ(FLAG)(*(uint32_t*)0x50000024 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXFSIZ(FLAG)(*(uint32_t*)0x50000024 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x50000028 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x50000028 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x50000028 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x50000028 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_HNPTXSTS(FLAG)(*(uint32_t*)0x5000002c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_HNPTXSTS(FLAG)(*(uint32_t*)0x5000002c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GCCFG(FLAG) (*(uint32_t*)0x50000038 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GCCFG(FLAG) (*(uint32_t*)0x50000038 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_CID(FLAG)   (*(uint32_t*)0x5000003c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_CID(FLAG)   (*(uint32_t*)0x5000003c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ(FLAG)(*(uint32_t*)0x50000100 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ(FLAG)(*(uint32_t*)0x50000100 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF1(FLAG)(*(uint32_t*)0x50000104 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF1(FLAG)(*(uint32_t*)0x50000104 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF2(FLAG)(*(uint32_t*)0x50000108 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF2(FLAG)(*(uint32_t*)0x50000108 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF3(FLAG)(*(uint32_t*)0x5000010c &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF3(FLAG)(*(uint32_t*)0x5000010c |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x50000020 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x50000020 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x50000020 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x50000020 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GI2CCTL(FLAG)(*(uint32_t*)0x50000030 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GI2CCTL(FLAG)(*(uint32_t*)0x50000030 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GPWRDN(FLAG)(*(uint32_t*)0x50000058 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GPWRDN(FLAG)(*(uint32_t*)0x50000058 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GADPCTL(FLAG)(*(uint32_t*)0x50000060 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GADPCTL(FLAG)(*(uint32_t*)0x50000060 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF4(FLAG)(*(uint32_t*)0x50000110 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF4(FLAG)(*(uint32_t*)0x50000110 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_DIEPTXF5(FLAG)(*(uint32_t*)0x50000114 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_DIEPTXF5(FLAG)(*(uint32_t*)0x50000114 |= ~FLAG)
#define Set_OTG_FS_GLOBAL_OTG_FS_GLPMCFG(FLAG)(*(uint32_t*)0x50000054 &= FLAG)
#define Clr_OTG_FS_GLOBAL_OTG_FS_GLPMCFG(FLAG)(*(uint32_t*)0x50000054 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCFG(FLAG)    (*(uint32_t*)0x50000400 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCFG(FLAG)    (*(uint32_t*)0x50000400 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HFIR(FLAG)    (*(uint32_t*)0x50000404 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HFIR(FLAG)    (*(uint32_t*)0x50000404 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HFNUM(FLAG)   (*(uint32_t*)0x50000408 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HFNUM(FLAG)   (*(uint32_t*)0x50000408 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HPTXSTS(FLAG) (*(uint32_t*)0x50000410 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HPTXSTS(FLAG) (*(uint32_t*)0x50000410 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HAINT(FLAG)   (*(uint32_t*)0x50000414 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HAINT(FLAG)   (*(uint32_t*)0x50000414 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HAINTMSK(FLAG)(*(uint32_t*)0x50000418 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HAINTMSK(FLAG)(*(uint32_t*)0x50000418 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HPRT(FLAG)    (*(uint32_t*)0x50000440 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HPRT(FLAG)    (*(uint32_t*)0x50000440 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR0(FLAG) (*(uint32_t*)0x50000500 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR0(FLAG) (*(uint32_t*)0x50000500 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR1(FLAG) (*(uint32_t*)0x50000520 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR1(FLAG) (*(uint32_t*)0x50000520 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR2(FLAG) (*(uint32_t*)0x50000540 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR2(FLAG) (*(uint32_t*)0x50000540 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR3(FLAG) (*(uint32_t*)0x50000560 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR3(FLAG) (*(uint32_t*)0x50000560 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR4(FLAG) (*(uint32_t*)0x50000580 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR4(FLAG) (*(uint32_t*)0x50000580 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR5(FLAG) (*(uint32_t*)0x500005a0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR5(FLAG) (*(uint32_t*)0x500005a0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR6(FLAG) (*(uint32_t*)0x500005c0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR6(FLAG) (*(uint32_t*)0x500005c0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR7(FLAG) (*(uint32_t*)0x500005e0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR7(FLAG) (*(uint32_t*)0x500005e0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT0(FLAG)  (*(uint32_t*)0x50000508 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT0(FLAG)  (*(uint32_t*)0x50000508 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT1(FLAG)  (*(uint32_t*)0x50000528 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT1(FLAG)  (*(uint32_t*)0x50000528 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT2(FLAG)  (*(uint32_t*)0x50000548 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT2(FLAG)  (*(uint32_t*)0x50000548 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT3(FLAG)  (*(uint32_t*)0x50000568 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT3(FLAG)  (*(uint32_t*)0x50000568 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT4(FLAG)  (*(uint32_t*)0x50000588 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT4(FLAG)  (*(uint32_t*)0x50000588 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT5(FLAG)  (*(uint32_t*)0x500005a8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT5(FLAG)  (*(uint32_t*)0x500005a8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT6(FLAG)  (*(uint32_t*)0x500005c8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT6(FLAG)  (*(uint32_t*)0x500005c8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT7(FLAG)  (*(uint32_t*)0x500005e8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT7(FLAG)  (*(uint32_t*)0x500005e8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK0(FLAG)(*(uint32_t*)0x5000050c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK0(FLAG)(*(uint32_t*)0x5000050c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK1(FLAG)(*(uint32_t*)0x5000052c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK1(FLAG)(*(uint32_t*)0x5000052c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK2(FLAG)(*(uint32_t*)0x5000054c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK2(FLAG)(*(uint32_t*)0x5000054c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK3(FLAG)(*(uint32_t*)0x5000056c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK3(FLAG)(*(uint32_t*)0x5000056c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK4(FLAG)(*(uint32_t*)0x5000058c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK4(FLAG)(*(uint32_t*)0x5000058c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK5(FLAG)(*(uint32_t*)0x500005ac &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK5(FLAG)(*(uint32_t*)0x500005ac |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK6(FLAG)(*(uint32_t*)0x500005cc &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK6(FLAG)(*(uint32_t*)0x500005cc |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK7(FLAG)(*(uint32_t*)0x500005ec &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK7(FLAG)(*(uint32_t*)0x500005ec |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ0(FLAG) (*(uint32_t*)0x50000510 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ0(FLAG) (*(uint32_t*)0x50000510 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ1(FLAG) (*(uint32_t*)0x50000530 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ1(FLAG) (*(uint32_t*)0x50000530 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ2(FLAG) (*(uint32_t*)0x50000550 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ2(FLAG) (*(uint32_t*)0x50000550 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ3(FLAG) (*(uint32_t*)0x50000570 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ3(FLAG) (*(uint32_t*)0x50000570 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ4(FLAG) (*(uint32_t*)0x50000590 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ4(FLAG) (*(uint32_t*)0x50000590 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ5(FLAG) (*(uint32_t*)0x500005b0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ5(FLAG) (*(uint32_t*)0x500005b0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ6(FLAG) (*(uint32_t*)0x500005d0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ6(FLAG) (*(uint32_t*)0x500005d0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ7(FLAG) (*(uint32_t*)0x500005f0 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ7(FLAG) (*(uint32_t*)0x500005f0 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR8(FLAG) (*(uint32_t*)0x500005f4 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR8(FLAG) (*(uint32_t*)0x500005f4 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT8(FLAG)  (*(uint32_t*)0x500005f8 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT8(FLAG)  (*(uint32_t*)0x500005f8 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK8(FLAG)(*(uint32_t*)0x500005fc &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK8(FLAG)(*(uint32_t*)0x500005fc |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ8(FLAG) (*(uint32_t*)0x50000600 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ8(FLAG) (*(uint32_t*)0x50000600 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR9(FLAG) (*(uint32_t*)0x50000604 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR9(FLAG) (*(uint32_t*)0x50000604 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT9(FLAG)  (*(uint32_t*)0x50000608 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT9(FLAG)  (*(uint32_t*)0x50000608 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK9(FLAG)(*(uint32_t*)0x5000060c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK9(FLAG)(*(uint32_t*)0x5000060c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ9(FLAG) (*(uint32_t*)0x50000610 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ9(FLAG) (*(uint32_t*)0x50000610 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR10(FLAG)(*(uint32_t*)0x50000614 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR10(FLAG)(*(uint32_t*)0x50000614 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT10(FLAG) (*(uint32_t*)0x50000618 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT10(FLAG) (*(uint32_t*)0x50000618 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK10(FLAG)(*(uint32_t*)0x5000061c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK10(FLAG)(*(uint32_t*)0x5000061c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ10(FLAG)(*(uint32_t*)0x50000620 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ10(FLAG)(*(uint32_t*)0x50000620 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCCHAR11(FLAG)(*(uint32_t*)0x50000624 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCCHAR11(FLAG)(*(uint32_t*)0x50000624 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINT11(FLAG) (*(uint32_t*)0x50000628 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINT11(FLAG) (*(uint32_t*)0x50000628 |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCINTMSK11(FLAG)(*(uint32_t*)0x5000062c &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCINTMSK11(FLAG)(*(uint32_t*)0x5000062c |= ~FLAG)
#define Set_OTG_FS_HOST_OTG_FS_HCTSIZ11(FLAG)(*(uint32_t*)0x50000630 &= FLAG)
#define Clr_OTG_FS_HOST_OTG_FS_HCTSIZ11(FLAG)(*(uint32_t*)0x50000630 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DCFG(FLAG)  (*(uint32_t*)0x50000800 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DCFG(FLAG)  (*(uint32_t*)0x50000800 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DCTL(FLAG)  (*(uint32_t*)0x50000804 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DCTL(FLAG)  (*(uint32_t*)0x50000804 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DSTS(FLAG)  (*(uint32_t*)0x50000808 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DSTS(FLAG)  (*(uint32_t*)0x50000808 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPMSK(FLAG)(*(uint32_t*)0x50000810 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPMSK(FLAG)(*(uint32_t*)0x50000810 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPMSK(FLAG)(*(uint32_t*)0x50000814 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPMSK(FLAG)(*(uint32_t*)0x50000814 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DAINT(FLAG) (*(uint32_t*)0x50000818 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DAINT(FLAG) (*(uint32_t*)0x50000818 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DAINTMSK(FLAG)(*(uint32_t*)0x5000081c &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DAINTMSK(FLAG)(*(uint32_t*)0x5000081c |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DVBUSDIS(FLAG)(*(uint32_t*)0x50000828 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DVBUSDIS(FLAG)(*(uint32_t*)0x50000828 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DVBUSPULSE(FLAG)(*(uint32_t*)0x5000082c &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DVBUSPULSE(FLAG)(*(uint32_t*)0x5000082c |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x50000834 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x50000834 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL0(FLAG)(*(uint32_t*)0x50000900 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL0(FLAG)(*(uint32_t*)0x50000900 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL1(FLAG)(*(uint32_t*)0x50000920 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL1(FLAG)(*(uint32_t*)0x50000920 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL2(FLAG)(*(uint32_t*)0x50000940 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL2(FLAG)(*(uint32_t*)0x50000940 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL3(FLAG)(*(uint32_t*)0x50000960 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL3(FLAG)(*(uint32_t*)0x50000960 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL0(FLAG)(*(uint32_t*)0x50000b00 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL0(FLAG)(*(uint32_t*)0x50000b00 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL1(FLAG)(*(uint32_t*)0x50000b20 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL1(FLAG)(*(uint32_t*)0x50000b20 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL2(FLAG)(*(uint32_t*)0x50000b40 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL2(FLAG)(*(uint32_t*)0x50000b40 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL3(FLAG)(*(uint32_t*)0x50000b60 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL3(FLAG)(*(uint32_t*)0x50000b60 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT0(FLAG)(*(uint32_t*)0x50000908 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT0(FLAG)(*(uint32_t*)0x50000908 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT1(FLAG)(*(uint32_t*)0x50000928 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT1(FLAG)(*(uint32_t*)0x50000928 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT2(FLAG)(*(uint32_t*)0x50000948 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT2(FLAG)(*(uint32_t*)0x50000948 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT3(FLAG)(*(uint32_t*)0x50000968 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT3(FLAG)(*(uint32_t*)0x50000968 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT0(FLAG)(*(uint32_t*)0x50000b08 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT0(FLAG)(*(uint32_t*)0x50000b08 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT1(FLAG)(*(uint32_t*)0x50000b28 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT1(FLAG)(*(uint32_t*)0x50000b28 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT2(FLAG)(*(uint32_t*)0x50000b48 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT2(FLAG)(*(uint32_t*)0x50000b48 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT3(FLAG)(*(uint32_t*)0x50000b68 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT3(FLAG)(*(uint32_t*)0x50000b68 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x50000910 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x50000910 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x50000b10 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x50000b10 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x50000930 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x50000930 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x50000950 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x50000950 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x50000970 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x50000970 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS0(FLAG)(*(uint32_t*)0x50000918 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS0(FLAG)(*(uint32_t*)0x50000918 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS1(FLAG)(*(uint32_t*)0x50000938 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS1(FLAG)(*(uint32_t*)0x50000938 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS2(FLAG)(*(uint32_t*)0x50000958 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS2(FLAG)(*(uint32_t*)0x50000958 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS3(FLAG)(*(uint32_t*)0x50000978 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS3(FLAG)(*(uint32_t*)0x50000978 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x50000b30 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x50000b30 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x50000b50 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x50000b50 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x50000b70 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x50000b70 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL4(FLAG)(*(uint32_t*)0x50000980 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL4(FLAG)(*(uint32_t*)0x50000980 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT4(FLAG)(*(uint32_t*)0x50000988 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT4(FLAG)(*(uint32_t*)0x50000988 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x50000994 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x50000994 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS4(FLAG)(*(uint32_t*)0x5000099c &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS4(FLAG)(*(uint32_t*)0x5000099c |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPCTL5(FLAG)(*(uint32_t*)0x500009a0 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPCTL5(FLAG)(*(uint32_t*)0x500009a0 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPINT5(FLAG)(*(uint32_t*)0x500009a8 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPINT5(FLAG)(*(uint32_t*)0x500009a8 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55(FLAG)(*(uint32_t*)0x500009b0 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55(FLAG)(*(uint32_t*)0x500009b0 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DTXFSTS55(FLAG)(*(uint32_t*)0x500009b8 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DTXFSTS55(FLAG)(*(uint32_t*)0x500009b8 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL4(FLAG)(*(uint32_t*)0x50000b78 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL4(FLAG)(*(uint32_t*)0x50000b78 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT4(FLAG)(*(uint32_t*)0x50000b80 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT4(FLAG)(*(uint32_t*)0x50000b80 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x50000b88 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x50000b88 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPCTL5(FLAG)(*(uint32_t*)0x50000b90 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPCTL5(FLAG)(*(uint32_t*)0x50000b90 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPINT5(FLAG)(*(uint32_t*)0x50000b98 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPINT5(FLAG)(*(uint32_t*)0x50000b98 |= ~FLAG)
#define Set_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x50000ba0 &= FLAG)
#define Clr_OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x50000ba0 |= ~FLAG)
#define Set_OTG_FS_PWRCLK_OTG_FS_PCGCCTL(FLAG)(*(uint32_t*)0x50000e00 &= FLAG)
#define Clr_OTG_FS_PWRCLK_OTG_FS_PCGCCTL(FLAG)(*(uint32_t*)0x50000e00 |= ~FLAG)
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQSCS                (0x1 << 0)    // Session request success
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQ                   (0x1 << 1)    // Session request
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNGSCS                (0x1 << 8)    // Host negotiation success
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNPRQ                 (0x1 << 9)    // HNP request
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HSHNPEN               (0x1 << 10)    // Host set HNP enable
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DHNPEN                (0x1 << 11)    // Device HNP enabled
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_CIDSTS                (0x1 << 16)    // Connector ID status
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DBCT                  (0x1 << 17)    // Long/short debounce time
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_ASVLD                 (0x1 << 18)    // A-session valid
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BSVLD                 (0x1 << 19)    // B-session valid
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOEN              (0x1 << 2)    // VBUS valid override enable
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOVAL             (0x1 << 3)    // VBUS valid override value
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOEN               (0x1 << 4)    // A-peripheral session valid override enable
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOVAL              (0x1 << 5)    // A-peripheral session valid override value
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOEN               (0x1 << 6)    // B-peripheral session valid override enable
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOVAL              (0x1 << 7)    // B-peripheral session valid override value
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_EHEN                  (0x1 << 12)    // Embedded host enable
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGCTL_OTGVER                (0x1 << 20)    // OTG version
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_SEDET                 (0x1 << 2)    // Session end detected
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_SRSSCHG               (0x1 << 8)    // Session request success status change
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNSSCHG               (0x1 << 9)    // Host negotiation success status change
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNGDET                (0x1 << 17)    // Host negotiation detected
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_ADTOCHG               (0x1 << 18)    // A-device timeout change
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_DBCDNE                (0x1 << 19)    // Debounce done
#define  _OTG_FS_GLOBAL_OTG_FS_GOTGINT_IDCHNG                (0x1 << 20)    // ID input pin changed
#define  _OTG_FS_GLOBAL_OTG_FS_GAHBCFG_GINT                  (0x1 << 0)    // Global interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GAHBCFG_TXFELVL               (0x1 << 7)    // TxFIFO empty level
#define  _OTG_FS_GLOBAL_OTG_FS_GAHBCFG_PTXFELVL              (0x1 << 8)    // Periodic TxFIFO empty level
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TOCAL                 (0x7 << 0)    // FS timeout calibration
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_PHYSEL                (0x1 << 6)    // Full Speed serial transceiver select
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_SRPCAP                (0x1 << 8)    // SRP-capable
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_HNPCAP                (0x1 << 9)    // HNP-capable
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TRDT                  (0xf << 10)    // USB turnaround time
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FHMOD                 (0x1 << 29)    // Force host mode
#define  _OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FDMOD                 (0x1 << 30)    // Force device mode
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_CSRST                 (0x1 << 0)    // Core soft reset
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_HSRST                 (0x1 << 1)    // HCLK soft reset
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_FCRST                 (0x1 << 2)    // Host frame counter reset
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_RXFFLSH               (0x1 << 4)    // RxFIFO flush
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFFLSH               (0x1 << 5)    // TxFIFO flush
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFNUM                (0x1f << 6)    // TxFIFO number
#define  _OTG_FS_GLOBAL_OTG_FS_GRSTCTL_AHBIDL                (0x1 << 31)    // AHB master idle
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_CMOD                  (0x1 << 0)    // Current mode of operation
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_MMIS                  (0x1 << 1)    // Mode mismatch interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_OTGINT                (0x1 << 2)    // OTG interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_SOF                   (0x1 << 3)    // Start of frame
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_RXFLVL                (0x1 << 4)    // RxFIFO non-empty
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_NPTXFE                (0x1 << 5)    // Non-periodic TxFIFO empty
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_GINAKEFF              (0x1 << 6)    // Global IN non-periodic NAK effective
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_GOUTNAKEFF            (0x1 << 7)    // Global OUT NAK effective
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_ESUSP                 (0x1 << 10)    // Early suspend
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBSUSP               (0x1 << 11)    // USB suspend
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBRST                (0x1 << 12)    // USB reset
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_ENUMDNE               (0x1 << 13)    // Enumeration done
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_ISOODRP               (0x1 << 14)    // Isochronous OUT packet dropped interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_EOPF                  (0x1 << 15)    // End of periodic frame interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_IEPINT                (0x1 << 18)    // IN endpoint interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_OEPINT                (0x1 << 19)    // OUT endpoint interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_IISOIXFR              (0x1 << 20)    // Incomplete isochronous IN transfer
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_IPXFR_INCOMPISOOUT    (0x1 << 21)    // Incomplete periodic transfer(Host mode)/Incomplete isochronous OUT transfer(Device mode)
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_HPRTINT               (0x1 << 24)    // Host port interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_HCINT                 (0x1 << 25)    // Host channels interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_PTXFE                 (0x1 << 26)    // Periodic TxFIFO empty
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_CIDSCHG               (0x1 << 28)    // Connector ID status change
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_DISCINT               (0x1 << 29)    // Disconnect detected interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_SRQINT                (0x1 << 30)    // Session request/new session detected interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_WKUPINT               (0x1 << 31)    // Resume/remote wakeup detected interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTSTS_RSTDET                (0x1 << 23)    // Reset detected interrupt
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_MMISM                 (0x1 << 1)    // Mode mismatch interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_OTGINT                (0x1 << 2)    // OTG interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_SOFM                  (0x1 << 3)    // Start of frame mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_RXFLVLM               (0x1 << 4)    // Receive FIFO non-empty mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_NPTXFEM               (0x1 << 5)    // Non-periodic TxFIFO empty mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_GINAKEFFM             (0x1 << 6)    // Global non-periodic IN NAK effective mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_GONAKEFFM             (0x1 << 7)    // Global OUT NAK effective mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_ESUSPM                (0x1 << 10)    // Early suspend mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBSUSPM              (0x1 << 11)    // USB suspend mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBRST                (0x1 << 12)    // USB reset mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_ENUMDNEM              (0x1 << 13)    // Enumeration done mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_ISOODRPM              (0x1 << 14)    // Isochronous OUT packet dropped interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_EOPFM                 (0x1 << 15)    // End of periodic frame interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_IEPINT                (0x1 << 18)    // IN endpoints interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_OEPINT                (0x1 << 19)    // OUT endpoints interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_IISOIXFRM             (0x1 << 20)    // Incomplete isochronous IN transfer mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_IPXFRM_IISOOXFRM      (0x1 << 21)    // Incomplete periodic transfer mask(Host mode)/Incomplete isochronous OUT transfer mask(Device mode)
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_PRTIM                 (0x1 << 24)    // Host port interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_HCIM                  (0x1 << 25)    // Host channels interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_PTXFEM                (0x1 << 26)    // Periodic TxFIFO empty mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_CIDSCHGM              (0x1 << 28)    // Connector ID status change mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_DISCINT               (0x1 << 29)    // Disconnect detected interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_SRQIM                 (0x1 << 30)    // Session request/new session detected interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_WUIM                  (0x1 << 31)    // Resume/remote wakeup detected interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_RSTDETM               (0x1 << 23)    // Reset detected interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GINTMSK_LPMIN                 (0x1 << 27)    // LPM interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_EPNUM          (0xf << 0)    // Endpoint number
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_BCNT           (0x7ff << 4)    // Byte count
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_DPID           (0x3 << 15)    // Data PID
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_PKTSTS         (0xf << 17)    // Packet status
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_FRMNUM         (0xf << 21)    // Frame number
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_CHNUM            (0xf << 0)    // Endpoint number
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_BCNT             (0x7ff << 4)    // Byte count
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_DPID             (0x3 << 15)    // Data PID
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_PKTSTS           (0xf << 17)    // Packet status
#define  _OTG_FS_GLOBAL_OTG_FS_GRXFSIZ_RXFD                  (0xffff << 0)    // RxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FSA        (0xffff << 0)    // Endpoint 0 transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FD         (0xffff << 16)    // Endpoint 0 TxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFSA        (0xffff << 0)    // Non-periodic transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFD         (0xffff << 16)    // Non-periodic TxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXFSAV             (0xffff << 0)    // Non-periodic TxFIFO space available
#define  _OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTQXSAV             (0xff << 16)    // Non-periodic transmit request queue space available
#define  _OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXQTOP             (0x7f << 24)    // Top of the non-periodic transmit request queue
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_PWRDWN                  (0x1 << 16)    // Power down
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_BCDEN                   (0x1 << 17)    // Battery charging detector (BCD) enable
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDEN                   (0x1 << 18)    // Data contact detection (DCD) mode enable
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_PDEN                    (0x1 << 19)    // Primary detection (PD) mode enable
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_SDEN                    (0x1 << 20)    // Secondary detection (SD) mode enable
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_VBDEN                   (0x1 << 21)    // USB VBUS detection enable
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDET                   (0x1 << 0)    // Data contact detection (DCD) status
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_PDET                    (0x1 << 1)    // Primary detection (PD) status
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_SDET                    (0x1 << 2)    // Secondary detection (SD) status
#define  _OTG_FS_GLOBAL_OTG_FS_GCCFG_PS2DET                  (0x1 << 3)    // DM pull-up detection status
#define  _OTG_FS_GLOBAL_OTG_FS_CID_PRODUCT_ID                (0xffffffff << 0)    // Product ID field
#define  _OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXSA                (0xffff << 0)    // Host periodic TxFIFO start address
#define  _OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXFSIZ              (0xffff << 16)    // Host periodic TxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXSA             (0xffff << 0)    // IN endpoint FIFO2 transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXSA             (0xffff << 0)    // IN endpoint FIFO3 transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXSA             (0xffff << 0)    // IN endpoint FIFO4 transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_EPNUM          (0xf << 0)    // Endpoint number
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_BCNT           (0x7ff << 4)    // Byte count
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_DPID           (0x3 << 15)    // Data PID
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_PKTSTS         (0xf << 17)    // Packet status
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_FRMNUM         (0xf << 21)    // Frame number
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_CHNUM            (0xf << 0)    // Channel number
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_BCNT             (0x7ff << 4)    // Byte count
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_DPID             (0x3 << 15)    // Data PID
#define  _OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_PKTSTS           (0xf << 17)    // Packet status
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RWDATA                (0xff << 0)    // I2C Read/Write Data
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_REGADDR               (0xff << 8)    // I2C Register Address
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ADDR                  (0x7f << 16)    // I2C Address
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CEN                 (0x1 << 23)    // I2C Enable
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ACK                   (0x1 << 24)    // I2C ACK
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDEVADR             (0x3 << 26)    // I2C Device Address
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDATSE0             (0x1 << 28)    // I2C DatSe0 USB mode
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RW                    (0x1 << 30)    // Read/Write Indicator
#define  _OTG_FS_GLOBAL_OTG_FS_GI2CCTL_BSYDNE                (0x1 << 31)    // I2C Busy/Done
#define  _OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPMEN                 (0x1 << 0)    // ADP module enable
#define  _OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPIF                  (0x1 << 23)    // ADP interrupt flag
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDSCHG              (0x3 << 0)    // Probe discharge
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDELTA              (0x3 << 2)    // Probe delta
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBPER                (0x3 << 4)    // Probe period
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_RTIM                  (0x7ff << 6)    // Ramp time
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENAPRB                (0x1 << 17)    // Enable probe
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENASNS                (0x1 << 18)    // Enable sense
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPRST                (0x1 << 19)    // ADP reset
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPEN                 (0x1 << 20)    // ADP enable
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIF              (0x1 << 21)    // ADP probe interrupt flag
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIF              (0x1 << 22)    // ADP sense interrupt flag
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIF               (0x1 << 23)    // ADP timeout interrupt flag
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIM              (0x1 << 24)    // ADP probe interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIM              (0x1 << 25)    // ADP sense interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIM               (0x1 << 26)    // ADP timeout interrupt mask
#define  _OTG_FS_GLOBAL_OTG_FS_GADPCTL_AR                    (0x3 << 27)    // Access request
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXFD             (0xffff << 16)    // IN endpoint Tx FIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXFD             (0xffff << 16)    // IN endpoint Tx FIFO depth
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMEN                 (0x1 << 0)    // LPM support enable
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMACK                (0x1 << 1)    // LPM token acknowledge enable
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESL                  (0xf << 2)    // Best effort service latency
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_REMWAKE               (0x1 << 6)    // bRemoteWake value
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1SSEN                (0x1 << 7)    // L1 Shallow Sleep enable
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESLTHRS              (0xf << 8)    // BESL threshold
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1DSEN                (0x1 << 12)    // L1 deep sleep enable
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRST                (0x3 << 13)    // LPM response
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SLPSTS                (0x1 << 15)    // Port sleep status
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1RSMOK               (0x1 << 16)    // Sleep State Resume OK
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMCHIDX              (0xf << 17)    // LPM Channel Index
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNT               (0x7 << 21)    // LPM retry count
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SNDLPM                (0x1 << 24)    // Send LPM transaction
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNTSTS            (0x7 << 25)    // LPM retry count status
#define  _OTG_FS_GLOBAL_OTG_FS_GLPMCFG_ENBESL                (0x1 << 28)    // Enable best effort service latency
#define  _OTG_FS_HOST_OTG_FS_HCFG_FSLSPCS                    (0x3 << 0)    // FS/LS PHY clock select
#define  _OTG_FS_HOST_OTG_FS_HCFG_FSLSS                      (0x1 << 2)    // FS- and LS-only support
#define  _OTG_FS_HOST_OTG_FS_HFIR_FRIVL                      (0xffff << 0)    // Frame interval
#define  _OTG_FS_HOST_OTG_FS_HFNUM_FRNUM                     (0xffff << 0)    // Frame number
#define  _OTG_FS_HOST_OTG_FS_HFNUM_FTREM                     (0xffff << 16)    // Frame time remaining
#define  _OTG_FS_HOST_OTG_FS_HPTXSTS_PTXFSAVL                (0xffff << 0)    // Periodic transmit data FIFO space available
#define  _OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQSAV                 (0xff << 16)    // Periodic transmit request queue space available
#define  _OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQTOP                 (0xff << 24)    // Top of the periodic transmit request queue
#define  _OTG_FS_HOST_OTG_FS_HAINT_HAINT                     (0xffff << 0)    // Channel interrupts
#define  _OTG_FS_HOST_OTG_FS_HAINTMSK_HAINTM                 (0xffff << 0)    // Channel interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HPRT_PCSTS                      (0x1 << 0)    // Port connect status
#define  _OTG_FS_HOST_OTG_FS_HPRT_PCDET                      (0x1 << 1)    // Port connect detected
#define  _OTG_FS_HOST_OTG_FS_HPRT_PENA                       (0x1 << 2)    // Port enable
#define  _OTG_FS_HOST_OTG_FS_HPRT_PENCHNG                    (0x1 << 3)    // Port enable/disable change
#define  _OTG_FS_HOST_OTG_FS_HPRT_POCA                       (0x1 << 4)    // Port overcurrent active
#define  _OTG_FS_HOST_OTG_FS_HPRT_POCCHNG                    (0x1 << 5)    // Port overcurrent change
#define  _OTG_FS_HOST_OTG_FS_HPRT_PRES                       (0x1 << 6)    // Port resume
#define  _OTG_FS_HOST_OTG_FS_HPRT_PSUSP                      (0x1 << 7)    // Port suspend
#define  _OTG_FS_HOST_OTG_FS_HPRT_PRST                       (0x1 << 8)    // Port reset
#define  _OTG_FS_HOST_OTG_FS_HPRT_PLSTS                      (0x3 << 10)    // Port line status
#define  _OTG_FS_HOST_OTG_FS_HPRT_PPWR                       (0x1 << 12)    // Port power
#define  _OTG_FS_HOST_OTG_FS_HPRT_PTCTL                      (0xf << 13)    // Port test control
#define  _OTG_FS_HOST_OTG_FS_HPRT_PSPD                       (0x3 << 17)    // Port speed
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR0_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR1_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR2_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR3_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR4_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR5_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR6_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR7_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCINT0_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT0_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT0_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT0_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT0_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT0_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT0_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT0_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT0_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT1_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT1_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT1_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT1_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT1_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT1_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT1_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT1_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT1_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT2_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT2_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT2_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT2_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT2_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT2_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT2_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT2_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT2_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT3_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT3_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT3_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT3_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT3_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT3_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT3_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT3_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT3_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT4_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT4_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT4_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT4_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT4_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT4_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT4_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT4_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT4_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT5_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT5_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT5_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT5_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT5_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT5_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT5_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT5_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT5_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT6_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT6_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT6_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT6_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT6_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT6_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT6_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT6_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT6_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINT7_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT7_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT7_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT7_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT7_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT7_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT7_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT7_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT7_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK0_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK1_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK2_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK3_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK4_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK5_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK6_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK7_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ0_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ0_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ0_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ1_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ1_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ1_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ2_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ2_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ2_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ3_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ3_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ3_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ4_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ4_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ4_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ5_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ5_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ5_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ6_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ6_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ6_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ7_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ7_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ7_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR8_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCINT8_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT8_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT8_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT8_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT8_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT8_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT8_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT8_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT8_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_TXERRM                (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK8_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ8_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ8_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ8_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_MCNT                    (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_DAD                     (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR9_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCINT9_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT9_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT9_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT9_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT9_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT9_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT9_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT9_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT9_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK9_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ9_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ9_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ9_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_MCNT                   (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_DAD                    (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR10_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCINT10_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT10_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT10_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT10_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT10_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT10_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT10_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT10_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT10_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_NYET                 (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_TXERRM               (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_BBERRM               (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK10_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ10_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ10_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ10_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_MCNT                   (0x3 << 20)    // Multicount
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_DAD                    (0x7f << 22)    // Device address
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_FS_HOST_OTG_FS_HCCHAR11_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_FS_HOST_OTG_FS_HCINT11_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_FS_HOST_OTG_FS_HCINT11_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_FS_HOST_OTG_FS_HCINT11_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT11_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT11_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_FS_HOST_OTG_FS_HCINT11_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_FS_HOST_OTG_FS_HCINT11_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_FS_HOST_OTG_FS_HCINT11_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_FS_HOST_OTG_FS_HCINT11_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_NYET                 (0x1 << 6)    // response received interrupt mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_TXERRM               (0x1 << 7)    // Transaction error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_BBERRM               (0x1 << 8)    // Babble error mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_FS_HOST_OTG_FS_HCINTMSK11_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ11_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ11_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_FS_HOST_OTG_FS_HCTSIZ11_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_FS_DEVICE_OTG_FS_DCFG_DSPD                     (0x3 << 0)    // Device speed
#define  _OTG_FS_DEVICE_OTG_FS_DCFG_NZLSOHSK                 (0x1 << 2)    // Non-zero-length status OUT handshake
#define  _OTG_FS_DEVICE_OTG_FS_DCFG_DAD                      (0x7f << 4)    // Device address
#define  _OTG_FS_DEVICE_OTG_FS_DCFG_PFIVL                    (0x3 << 11)    // Periodic frame interval
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_RWUSIG                   (0x1 << 0)    // Remote wakeup signaling
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_SDIS                     (0x1 << 1)    // Soft disconnect
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_GINSTS                   (0x1 << 2)    // Global IN NAK status
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_GONSTS                   (0x1 << 3)    // Global OUT NAK status
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_TCTL                     (0x7 << 4)    // Test control
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_SGINAK                   (0x1 << 7)    // Set global IN NAK
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_CGINAK                   (0x1 << 8)    // Clear global IN NAK
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_SGONAK                   (0x1 << 9)    // Set global OUT NAK
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_CGONAK                   (0x1 << 10)    // Clear global OUT NAK
#define  _OTG_FS_DEVICE_OTG_FS_DCTL_POPRGDNE                 (0x1 << 11)    // Power-on programming done
#define  _OTG_FS_DEVICE_OTG_FS_DSTS_SUSPSTS                  (0x1 << 0)    // Suspend status
#define  _OTG_FS_DEVICE_OTG_FS_DSTS_ENUMSPD                  (0x3 << 1)    // Enumerated speed
#define  _OTG_FS_DEVICE_OTG_FS_DSTS_EERR                     (0x1 << 3)    // Erratic error
#define  _OTG_FS_DEVICE_OTG_FS_DSTS_FNSOF                    (0x3fff << 8)    // Frame number of the received SOF
#define  _OTG_FS_DEVICE_OTG_FS_DIEPMSK_XFRCM                 (0x1 << 0)    // Transfer completed interrupt mask
#define  _OTG_FS_DEVICE_OTG_FS_DIEPMSK_EPDM                  (0x1 << 1)    // Endpoint disabled interrupt mask
#define  _OTG_FS_DEVICE_OTG_FS_DIEPMSK_TOM                   (0x1 << 3)    // Timeout condition mask (Non-isochronous endpoints)
#define  _OTG_FS_DEVICE_OTG_FS_DIEPMSK_ITTXFEMSK             (0x1 << 4)    // IN token received when TxFIFO empty mask
#define  _OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNMM               (0x1 << 5)    // IN token received with EP mismatch mask
#define  _OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNEM               (0x1 << 6)    // IN endpoint NAK effective mask
#define  _OTG_FS_DEVICE_OTG_FS_DOEPMSK_XFRCM                 (0x1 << 0)    // Transfer completed interrupt mask
#define  _OTG_FS_DEVICE_OTG_FS_DOEPMSK_EPDM                  (0x1 << 1)    // Endpoint disabled interrupt mask
#define  _OTG_FS_DEVICE_OTG_FS_DOEPMSK_STUPM                 (0x1 << 3)    // SETUP phase done mask
#define  _OTG_FS_DEVICE_OTG_FS_DOEPMSK_OTEPDM                (0x1 << 4)    // OUT token received when endpoint disabled mask
#define  _OTG_FS_DEVICE_OTG_FS_DAINT_IEPINT                  (0xffff << 0)    // IN endpoint interrupt bits
#define  _OTG_FS_DEVICE_OTG_FS_DAINT_OEPINT                  (0xffff << 16)    // OUT endpoint interrupt bits
#define  _OTG_FS_DEVICE_OTG_FS_DAINTMSK_IEPM                 (0xffff << 0)    // IN EP interrupt mask bits
#define  _OTG_FS_DEVICE_OTG_FS_DAINTMSK_OEPINT               (0xffff << 16)    // OUT endpoint interrupt bits
#define  _OTG_FS_DEVICE_OTG_FS_DVBUSDIS_VBUSDT               (0xffff << 0)    // Device VBUS discharge time
#define  _OTG_FS_DEVICE_OTG_FS_DVBUSPULSE_DVBUSP             (0xfff << 0)    // Device VBUS pulsing time
#define  _OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK_INEPTXFEM          (0xffff << 0)    // IN EP Tx FIFO empty interrupt mask bits
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_MPSIZ                (0x3 << 0)    // Maximum packet size
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_STALL                (0x1 << 21)    // STALL handshake
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SODDFRM_SD1PID       (0x1 << 29)    // SODDFRM/SD1PID
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_TXFNUM               (0xf << 22)    // TXFNUM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL1_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_TXFNUM               (0xf << 22)    // TXFNUM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL2_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_TXFNUM               (0xf << 22)    // TXFNUM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL3_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNPM                 (0x1 << 20)    // SNPM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL0_MPSIZ                (0x3 << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNPM                 (0x1 << 20)    // SNPM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL1_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNPM                 (0x1 << 20)    // SNPM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL2_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNPM                 (0x1 << 20)    // SNPM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL3_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT0_TXFE                 (0x1 << 7)    // TXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT0_INEPNE               (0x1 << 6)    // INEPNE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT0_ITTXFE               (0x1 << 4)    // ITTXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT0_TOC                  (0x1 << 3)    // TOC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT0_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT0_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT1_TXFE                 (0x1 << 7)    // TXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT1_INEPNE               (0x1 << 6)    // INEPNE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT1_ITTXFE               (0x1 << 4)    // ITTXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT1_TOC                  (0x1 << 3)    // TOC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT1_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT1_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT2_TXFE                 (0x1 << 7)    // TXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT2_INEPNE               (0x1 << 6)    // INEPNE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT2_ITTXFE               (0x1 << 4)    // ITTXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT2_TOC                  (0x1 << 3)    // TOC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT2_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT2_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT3_TXFE                 (0x1 << 7)    // TXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT3_INEPNE               (0x1 << 6)    // INEPNE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT3_ITTXFE               (0x1 << 4)    // ITTXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT3_TOC                  (0x1 << 3)    // TOC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT3_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT3_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT0_B2BSTUP              (0x1 << 6)    // B2BSTUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT0_OTEPDIS              (0x1 << 4)    // OTEPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT0_STUP                 (0x1 << 3)    // STUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT0_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT0_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT1_B2BSTUP              (0x1 << 6)    // B2BSTUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT1_OTEPDIS              (0x1 << 4)    // OTEPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT1_STUP                 (0x1 << 3)    // STUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT1_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT1_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT2_B2BSTUP              (0x1 << 6)    // B2BSTUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT2_OTEPDIS              (0x1 << 4)    // OTEPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT2_STUP                 (0x1 << 3)    // STUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT2_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT2_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT3_B2BSTUP              (0x1 << 6)    // B2BSTUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT3_OTEPDIS              (0x1 << 4)    // OTEPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT3_STUP                 (0x1 << 3)    // STUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT3_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT3_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_PKTCNT              (0x3 << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_XFRSIZ              (0x7f << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_STUPCNT             (0x3 << 29)    // SETUP packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_PKTCNT              (0x1 << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_XFRSIZ              (0x7f << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DTXFSTS0_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space available
#define  _OTG_FS_DEVICE_OTG_FS_DTXFSTS1_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space available
#define  _OTG_FS_DEVICE_OTG_FS_DTXFSTS2_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space available
#define  _OTG_FS_DEVICE_OTG_FS_DTXFSTS3_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space available
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_TXFNUM               (0xf << 22)    // TXFNUM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL4_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT4_TXFE                 (0x1 << 7)    // TXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT4_INEPNE               (0x1 << 6)    // INEPNE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT4_ITTXFE               (0x1 << 4)    // ITTXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT4_TOC                  (0x1 << 3)    // TOC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT4_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT4_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DTXFSTS4_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space available
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_TXFNUM               (0xf << 22)    // TXFNUM
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DIEPCTL5_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT5_TXFE                 (0x1 << 7)    // TXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT5_INEPNE               (0x1 << 6)    // INEPNE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT5_ITTXFE               (0x1 << 4)    // ITTXFE
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT5_TOC                  (0x1 << 3)    // TOC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT5_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DIEPINT5_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_MCNT               (0x3 << 29)    // Multi count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_PKTCNT             (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_XFRSIZ             (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DTXFSTS55_INEPTFSAV           (0xffff << 0)    // IN endpoint TxFIFO space available
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNPM                 (0x1 << 20)    // SNPM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL4_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT4_B2BSTUP              (0x1 << 6)    // B2BSTUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT4_OTEPDIS              (0x1 << 4)    // OTEPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT4_STUP                 (0x1 << 3)    // STUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT4_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT4_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPENA                (0x1 << 31)    // EPENA
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPDIS                (0x1 << 30)    // EPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SODDFRM              (0x1 << 29)    // SODDFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SD0PID_SEVNFRM       (0x1 << 28)    // SD0PID/SEVNFRM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNAK                 (0x1 << 27)    // SNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_CNAK                 (0x1 << 26)    // CNAK
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_Stall                (0x1 << 21)    // Stall
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNPM                 (0x1 << 20)    // SNPM
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPTYP                (0x3 << 18)    // EPTYP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_NAKSTS               (0x1 << 17)    // NAKSTS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EONUM_DPID           (0x1 << 16)    // EONUM/DPID
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_USBAEP               (0x1 << 15)    // USBAEP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPCTL5_MPSIZ                (0x7ff << 0)    // MPSIZ
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT5_B2BSTUP              (0x1 << 6)    // B2BSTUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT5_OTEPDIS              (0x1 << 4)    // OTEPDIS
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT5_STUP                 (0x1 << 3)    // STUP
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT5_EPDISD               (0x1 << 1)    // EPDISD
#define  _OTG_FS_DEVICE_OTG_FS_DOEPINT5_XFRC                 (0x1 << 0)    // XFRC
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_FS_PWRCLK_OTG_FS_PCGCCTL_STPPCLK               (0x1 << 0)    // Stop PHY clock
#define  _OTG_FS_PWRCLK_OTG_FS_PCGCCTL_GATEHCLK              (0x1 << 1)    // Gate HCLK
#define  _OTG_FS_PWRCLK_OTG_FS_PCGCCTL_PHYSUSP               (0x1 << 4)    // PHY Suspended
　
　drivers/inc/stm32f767xx_GPIO.h
#pragma once
#include "stm32f767xx.h"
#define Get_GPIOA_MODER(FLAG)                (*(uint32_t*)0x40020000 |= FLAG)
#define Get_GPIOA_OTYPER(FLAG)               (*(uint32_t*)0x40020004 |= FLAG)
#define Get_GPIOA_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020008 |= FLAG)
#define Get_GPIOA_PUPDR(FLAG)                (*(uint32_t*)0x4002000c |= FLAG)
#define Get_GPIOA_IDR(FLAG)                  (*(uint32_t*)0x40020010 |= FLAG)
#define Get_GPIOA_ODR(FLAG)                  (*(uint32_t*)0x40020014 |= FLAG)
#define Get_GPIOA_BSRR(FLAG)                 (*(uint32_t*)0x40020018 |= FLAG)
#define Get_GPIOA_LCKR(FLAG)                 (*(uint32_t*)0x4002001c |= FLAG)
#define Get_GPIOA_AFRL(FLAG)                 (*(uint32_t*)0x40020020 |= FLAG)
#define Get_GPIOA_AFRH(FLAG)                 (*(uint32_t*)0x40020024 |= FLAG)
#define Get_GPIOA_BRR(FLAG)                  (*(uint32_t*)0x40020028 |= FLAG)
#define Get_GPIOB_MODER(FLAG)                (*(uint32_t*)0x40020400 |= FLAG)
#define Get_GPIOB_OTYPER(FLAG)               (*(uint32_t*)0x40020404 |= FLAG)
#define Get_GPIOB_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020408 |= FLAG)
#define Get_GPIOB_PUPDR(FLAG)                (*(uint32_t*)0x4002040c |= FLAG)
#define Get_GPIOB_IDR(FLAG)                  (*(uint32_t*)0x40020410 |= FLAG)
#define Get_GPIOB_ODR(FLAG)                  (*(uint32_t*)0x40020414 |= FLAG)
#define Get_GPIOB_BSRR(FLAG)                 (*(uint32_t*)0x40020418 |= FLAG)
#define Get_GPIOB_LCKR(FLAG)                 (*(uint32_t*)0x4002041c |= FLAG)
#define Get_GPIOB_AFRL(FLAG)                 (*(uint32_t*)0x40020420 |= FLAG)
#define Get_GPIOB_AFRH(FLAG)                 (*(uint32_t*)0x40020424 |= FLAG)
#define Get_GPIOB_BRR(FLAG)                  (*(uint32_t*)0x40020428 |= FLAG)
#define Get_GPIOC_MODER(FLAG)                (*(uint32_t*)0x40020800 |= FLAG)
#define Get_GPIOC_OTYPER(FLAG)               (*(uint32_t*)0x40020804 |= FLAG)
#define Get_GPIOC_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020808 |= FLAG)
#define Get_GPIOC_PUPDR(FLAG)                (*(uint32_t*)0x4002080c |= FLAG)
#define Get_GPIOC_IDR(FLAG)                  (*(uint32_t*)0x40020810 |= FLAG)
#define Get_GPIOC_ODR(FLAG)                  (*(uint32_t*)0x40020814 |= FLAG)
#define Get_GPIOC_BSRR(FLAG)                 (*(uint32_t*)0x40020818 |= FLAG)
#define Get_GPIOC_LCKR(FLAG)                 (*(uint32_t*)0x4002081c |= FLAG)
#define Get_GPIOC_AFRL(FLAG)                 (*(uint32_t*)0x40020820 |= FLAG)
#define Get_GPIOC_AFRH(FLAG)                 (*(uint32_t*)0x40020824 |= FLAG)
#define Get_GPIOC_BRR(FLAG)                  (*(uint32_t*)0x40020828 |= FLAG)
#define Get_GPIOD_MODER(FLAG)                (*(uint32_t*)0x40020c00 |= FLAG)
#define Get_GPIOD_OTYPER(FLAG)               (*(uint32_t*)0x40020c04 |= FLAG)
#define Get_GPIOD_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020c08 |= FLAG)
#define Get_GPIOD_PUPDR(FLAG)                (*(uint32_t*)0x40020c0c |= FLAG)
#define Get_GPIOD_IDR(FLAG)                  (*(uint32_t*)0x40020c10 |= FLAG)
#define Get_GPIOD_ODR(FLAG)                  (*(uint32_t*)0x40020c14 |= FLAG)
#define Get_GPIOD_BSRR(FLAG)                 (*(uint32_t*)0x40020c18 |= FLAG)
#define Get_GPIOD_LCKR(FLAG)                 (*(uint32_t*)0x40020c1c |= FLAG)
#define Get_GPIOD_AFRL(FLAG)                 (*(uint32_t*)0x40020c20 |= FLAG)
#define Get_GPIOD_AFRH(FLAG)                 (*(uint32_t*)0x40020c24 |= FLAG)
#define Get_GPIOD_BRR(FLAG)                  (*(uint32_t*)0x40020c28 |= FLAG)
#define Get_GPIOE_MODER(FLAG)                (*(uint32_t*)0x40021000 |= FLAG)
#define Get_GPIOE_OTYPER(FLAG)               (*(uint32_t*)0x40021004 |= FLAG)
#define Get_GPIOE_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021008 |= FLAG)
#define Get_GPIOE_PUPDR(FLAG)                (*(uint32_t*)0x4002100c |= FLAG)
#define Get_GPIOE_IDR(FLAG)                  (*(uint32_t*)0x40021010 |= FLAG)
#define Get_GPIOE_ODR(FLAG)                  (*(uint32_t*)0x40021014 |= FLAG)
#define Get_GPIOE_BSRR(FLAG)                 (*(uint32_t*)0x40021018 |= FLAG)
#define Get_GPIOE_LCKR(FLAG)                 (*(uint32_t*)0x4002101c |= FLAG)
#define Get_GPIOE_AFRL(FLAG)                 (*(uint32_t*)0x40021020 |= FLAG)
#define Get_GPIOE_AFRH(FLAG)                 (*(uint32_t*)0x40021024 |= FLAG)
#define Get_GPIOE_BRR(FLAG)                  (*(uint32_t*)0x40021028 |= FLAG)
#define Get_GPIOF_MODER(FLAG)                (*(uint32_t*)0x40021400 |= FLAG)
#define Get_GPIOF_OTYPER(FLAG)               (*(uint32_t*)0x40021404 |= FLAG)
#define Get_GPIOF_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021408 |= FLAG)
#define Get_GPIOF_PUPDR(FLAG)                (*(uint32_t*)0x4002140c |= FLAG)
#define Get_GPIOF_IDR(FLAG)                  (*(uint32_t*)0x40021410 |= FLAG)
#define Get_GPIOF_ODR(FLAG)                  (*(uint32_t*)0x40021414 |= FLAG)
#define Get_GPIOF_BSRR(FLAG)                 (*(uint32_t*)0x40021418 |= FLAG)
#define Get_GPIOF_LCKR(FLAG)                 (*(uint32_t*)0x4002141c |= FLAG)
#define Get_GPIOF_AFRL(FLAG)                 (*(uint32_t*)0x40021420 |= FLAG)
#define Get_GPIOF_AFRH(FLAG)                 (*(uint32_t*)0x40021424 |= FLAG)
#define Get_GPIOF_BRR(FLAG)                  (*(uint32_t*)0x40021428 |= FLAG)
#define Get_GPIOG_MODER(FLAG)                (*(uint32_t*)0x40021800 |= FLAG)
#define Get_GPIOG_OTYPER(FLAG)               (*(uint32_t*)0x40021804 |= FLAG)
#define Get_GPIOG_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021808 |= FLAG)
#define Get_GPIOG_PUPDR(FLAG)                (*(uint32_t*)0x4002180c |= FLAG)
#define Get_GPIOG_IDR(FLAG)                  (*(uint32_t*)0x40021810 |= FLAG)
#define Get_GPIOG_ODR(FLAG)                  (*(uint32_t*)0x40021814 |= FLAG)
#define Get_GPIOG_BSRR(FLAG)                 (*(uint32_t*)0x40021818 |= FLAG)
#define Get_GPIOG_LCKR(FLAG)                 (*(uint32_t*)0x4002181c |= FLAG)
#define Get_GPIOG_AFRL(FLAG)                 (*(uint32_t*)0x40021820 |= FLAG)
#define Get_GPIOG_AFRH(FLAG)                 (*(uint32_t*)0x40021824 |= FLAG)
#define Get_GPIOG_BRR(FLAG)                  (*(uint32_t*)0x40021828 |= FLAG)
#define Get_GPIOH_MODER(FLAG)                (*(uint32_t*)0x40021c00 |= FLAG)
#define Get_GPIOH_OTYPER(FLAG)               (*(uint32_t*)0x40021c04 |= FLAG)
#define Get_GPIOH_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021c08 |= FLAG)
#define Get_GPIOH_PUPDR(FLAG)                (*(uint32_t*)0x40021c0c |= FLAG)
#define Get_GPIOH_IDR(FLAG)                  (*(uint32_t*)0x40021c10 |= FLAG)
#define Get_GPIOH_ODR(FLAG)                  (*(uint32_t*)0x40021c14 |= FLAG)
#define Get_GPIOH_BSRR(FLAG)                 (*(uint32_t*)0x40021c18 |= FLAG)
#define Get_GPIOH_LCKR(FLAG)                 (*(uint32_t*)0x40021c1c |= FLAG)
#define Get_GPIOH_AFRL(FLAG)                 (*(uint32_t*)0x40021c20 |= FLAG)
#define Get_GPIOH_AFRH(FLAG)                 (*(uint32_t*)0x40021c24 |= FLAG)
#define Get_GPIOH_BRR(FLAG)                  (*(uint32_t*)0x40021c28 |= FLAG)
#define Get_GPIOI_MODER(FLAG)                (*(uint32_t*)0x40022000 |= FLAG)
#define Get_GPIOI_OTYPER(FLAG)               (*(uint32_t*)0x40022004 |= FLAG)
#define Get_GPIOI_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022008 |= FLAG)
#define Get_GPIOI_PUPDR(FLAG)                (*(uint32_t*)0x4002200c |= FLAG)
#define Get_GPIOI_IDR(FLAG)                  (*(uint32_t*)0x40022010 |= FLAG)
#define Get_GPIOI_ODR(FLAG)                  (*(uint32_t*)0x40022014 |= FLAG)
#define Get_GPIOI_BSRR(FLAG)                 (*(uint32_t*)0x40022018 |= FLAG)
#define Get_GPIOI_LCKR(FLAG)                 (*(uint32_t*)0x4002201c |= FLAG)
#define Get_GPIOI_AFRL(FLAG)                 (*(uint32_t*)0x40022020 |= FLAG)
#define Get_GPIOI_AFRH(FLAG)                 (*(uint32_t*)0x40022024 |= FLAG)
#define Get_GPIOI_BRR(FLAG)                  (*(uint32_t*)0x40022028 |= FLAG)
#define Get_GPIOJ_MODER(FLAG)                (*(uint32_t*)0x40022400 |= FLAG)
#define Get_GPIOJ_OTYPER(FLAG)               (*(uint32_t*)0x40022404 |= FLAG)
#define Get_GPIOJ_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022408 |= FLAG)
#define Get_GPIOJ_PUPDR(FLAG)                (*(uint32_t*)0x4002240c |= FLAG)
#define Get_GPIOJ_IDR(FLAG)                  (*(uint32_t*)0x40022410 |= FLAG)
#define Get_GPIOJ_ODR(FLAG)                  (*(uint32_t*)0x40022414 |= FLAG)
#define Get_GPIOJ_BSRR(FLAG)                 (*(uint32_t*)0x40022418 |= FLAG)
#define Get_GPIOJ_LCKR(FLAG)                 (*(uint32_t*)0x4002241c |= FLAG)
#define Get_GPIOJ_AFRL(FLAG)                 (*(uint32_t*)0x40022420 |= FLAG)
#define Get_GPIOJ_AFRH(FLAG)                 (*(uint32_t*)0x40022424 |= FLAG)
#define Get_GPIOJ_BRR(FLAG)                  (*(uint32_t*)0x40022428 |= FLAG)
#define Get_GPIOK_MODER(FLAG)                (*(uint32_t*)0x40022800 |= FLAG)
#define Get_GPIOK_OTYPER(FLAG)               (*(uint32_t*)0x40022804 |= FLAG)
#define Get_GPIOK_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022808 |= FLAG)
#define Get_GPIOK_PUPDR(FLAG)                (*(uint32_t*)0x4002280c |= FLAG)
#define Get_GPIOK_IDR(FLAG)                  (*(uint32_t*)0x40022810 |= FLAG)
#define Get_GPIOK_ODR(FLAG)                  (*(uint32_t*)0x40022814 |= FLAG)
#define Get_GPIOK_BSRR(FLAG)                 (*(uint32_t*)0x40022818 |= FLAG)
#define Get_GPIOK_LCKR(FLAG)                 (*(uint32_t*)0x4002281c |= FLAG)
#define Get_GPIOK_AFRL(FLAG)                 (*(uint32_t*)0x40022820 |= FLAG)
#define Get_GPIOK_AFRH(FLAG)                 (*(uint32_t*)0x40022824 |= FLAG)
#define Get_GPIOK_BRR(FLAG)                  (*(uint32_t*)0x40022828 |= FLAG)
#define Set_GPIOA_MODER(FLAG)                (*(uint32_t*)0x40020000 &= FLAG)
#define Clr_GPIOA_MODER(FLAG)                (*(uint32_t*)0x40020000 |= ~FLAG)
#define Set_GPIOA_OTYPER(FLAG)               (*(uint32_t*)0x40020004 &= FLAG)
#define Clr_GPIOA_OTYPER(FLAG)               (*(uint32_t*)0x40020004 |= ~FLAG)
#define Set_GPIOA_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020008 &= FLAG)
#define Clr_GPIOA_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020008 |= ~FLAG)
#define Set_GPIOA_PUPDR(FLAG)                (*(uint32_t*)0x4002000c &= FLAG)
#define Clr_GPIOA_PUPDR(FLAG)                (*(uint32_t*)0x4002000c |= ~FLAG)
#define Set_GPIOA_IDR(FLAG)                  (*(uint32_t*)0x40020010 &= FLAG)
#define Clr_GPIOA_IDR(FLAG)                  (*(uint32_t*)0x40020010 |= ~FLAG)
#define Set_GPIOA_ODR(FLAG)                  (*(uint32_t*)0x40020014 &= FLAG)
#define Clr_GPIOA_ODR(FLAG)                  (*(uint32_t*)0x40020014 |= ~FLAG)
#define Set_GPIOA_BSRR(FLAG)                 (*(uint32_t*)0x40020018 &= FLAG)
#define Clr_GPIOA_BSRR(FLAG)                 (*(uint32_t*)0x40020018 |= ~FLAG)
#define Set_GPIOA_LCKR(FLAG)                 (*(uint32_t*)0x4002001c &= FLAG)
#define Clr_GPIOA_LCKR(FLAG)                 (*(uint32_t*)0x4002001c |= ~FLAG)
#define Set_GPIOA_AFRL(FLAG)                 (*(uint32_t*)0x40020020 &= FLAG)
#define Clr_GPIOA_AFRL(FLAG)                 (*(uint32_t*)0x40020020 |= ~FLAG)
#define Set_GPIOA_AFRH(FLAG)                 (*(uint32_t*)0x40020024 &= FLAG)
#define Clr_GPIOA_AFRH(FLAG)                 (*(uint32_t*)0x40020024 |= ~FLAG)
#define Set_GPIOA_BRR(FLAG)                  (*(uint32_t*)0x40020028 &= FLAG)
#define Clr_GPIOA_BRR(FLAG)                  (*(uint32_t*)0x40020028 |= ~FLAG)
#define Set_GPIOB_MODER(FLAG)                (*(uint32_t*)0x40020400 &= FLAG)
#define Clr_GPIOB_MODER(FLAG)                (*(uint32_t*)0x40020400 |= ~FLAG)
#define Set_GPIOB_OTYPER(FLAG)               (*(uint32_t*)0x40020404 &= FLAG)
#define Clr_GPIOB_OTYPER(FLAG)               (*(uint32_t*)0x40020404 |= ~FLAG)
#define Set_GPIOB_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020408 &= FLAG)
#define Clr_GPIOB_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020408 |= ~FLAG)
#define Set_GPIOB_PUPDR(FLAG)                (*(uint32_t*)0x4002040c &= FLAG)
#define Clr_GPIOB_PUPDR(FLAG)                (*(uint32_t*)0x4002040c |= ~FLAG)
#define Set_GPIOB_IDR(FLAG)                  (*(uint32_t*)0x40020410 &= FLAG)
#define Clr_GPIOB_IDR(FLAG)                  (*(uint32_t*)0x40020410 |= ~FLAG)
#define Set_GPIOB_ODR(FLAG)                  (*(uint32_t*)0x40020414 &= FLAG)
#define Clr_GPIOB_ODR(FLAG)                  (*(uint32_t*)0x40020414 |= ~FLAG)
#define Set_GPIOB_BSRR(FLAG)                 (*(uint32_t*)0x40020418 &= FLAG)
#define Clr_GPIOB_BSRR(FLAG)                 (*(uint32_t*)0x40020418 |= ~FLAG)
#define Set_GPIOB_LCKR(FLAG)                 (*(uint32_t*)0x4002041c &= FLAG)
#define Clr_GPIOB_LCKR(FLAG)                 (*(uint32_t*)0x4002041c |= ~FLAG)
#define Set_GPIOB_AFRL(FLAG)                 (*(uint32_t*)0x40020420 &= FLAG)
#define Clr_GPIOB_AFRL(FLAG)                 (*(uint32_t*)0x40020420 |= ~FLAG)
#define Set_GPIOB_AFRH(FLAG)                 (*(uint32_t*)0x40020424 &= FLAG)
#define Clr_GPIOB_AFRH(FLAG)                 (*(uint32_t*)0x40020424 |= ~FLAG)
#define Set_GPIOB_BRR(FLAG)                  (*(uint32_t*)0x40020428 &= FLAG)
#define Clr_GPIOB_BRR(FLAG)                  (*(uint32_t*)0x40020428 |= ~FLAG)
#define Set_GPIOC_MODER(FLAG)                (*(uint32_t*)0x40020800 &= FLAG)
#define Clr_GPIOC_MODER(FLAG)                (*(uint32_t*)0x40020800 |= ~FLAG)
#define Set_GPIOC_OTYPER(FLAG)               (*(uint32_t*)0x40020804 &= FLAG)
#define Clr_GPIOC_OTYPER(FLAG)               (*(uint32_t*)0x40020804 |= ~FLAG)
#define Set_GPIOC_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020808 &= FLAG)
#define Clr_GPIOC_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020808 |= ~FLAG)
#define Set_GPIOC_PUPDR(FLAG)                (*(uint32_t*)0x4002080c &= FLAG)
#define Clr_GPIOC_PUPDR(FLAG)                (*(uint32_t*)0x4002080c |= ~FLAG)
#define Set_GPIOC_IDR(FLAG)                  (*(uint32_t*)0x40020810 &= FLAG)
#define Clr_GPIOC_IDR(FLAG)                  (*(uint32_t*)0x40020810 |= ~FLAG)
#define Set_GPIOC_ODR(FLAG)                  (*(uint32_t*)0x40020814 &= FLAG)
#define Clr_GPIOC_ODR(FLAG)                  (*(uint32_t*)0x40020814 |= ~FLAG)
#define Set_GPIOC_BSRR(FLAG)                 (*(uint32_t*)0x40020818 &= FLAG)
#define Clr_GPIOC_BSRR(FLAG)                 (*(uint32_t*)0x40020818 |= ~FLAG)
#define Set_GPIOC_LCKR(FLAG)                 (*(uint32_t*)0x4002081c &= FLAG)
#define Clr_GPIOC_LCKR(FLAG)                 (*(uint32_t*)0x4002081c |= ~FLAG)
#define Set_GPIOC_AFRL(FLAG)                 (*(uint32_t*)0x40020820 &= FLAG)
#define Clr_GPIOC_AFRL(FLAG)                 (*(uint32_t*)0x40020820 |= ~FLAG)
#define Set_GPIOC_AFRH(FLAG)                 (*(uint32_t*)0x40020824 &= FLAG)
#define Clr_GPIOC_AFRH(FLAG)                 (*(uint32_t*)0x40020824 |= ~FLAG)
#define Set_GPIOC_BRR(FLAG)                  (*(uint32_t*)0x40020828 &= FLAG)
#define Clr_GPIOC_BRR(FLAG)                  (*(uint32_t*)0x40020828 |= ~FLAG)
#define Set_GPIOD_MODER(FLAG)                (*(uint32_t*)0x40020c00 &= FLAG)
#define Clr_GPIOD_MODER(FLAG)                (*(uint32_t*)0x40020c00 |= ~FLAG)
#define Set_GPIOD_OTYPER(FLAG)               (*(uint32_t*)0x40020c04 &= FLAG)
#define Clr_GPIOD_OTYPER(FLAG)               (*(uint32_t*)0x40020c04 |= ~FLAG)
#define Set_GPIOD_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020c08 &= FLAG)
#define Clr_GPIOD_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40020c08 |= ~FLAG)
#define Set_GPIOD_PUPDR(FLAG)                (*(uint32_t*)0x40020c0c &= FLAG)
#define Clr_GPIOD_PUPDR(FLAG)                (*(uint32_t*)0x40020c0c |= ~FLAG)
#define Set_GPIOD_IDR(FLAG)                  (*(uint32_t*)0x40020c10 &= FLAG)
#define Clr_GPIOD_IDR(FLAG)                  (*(uint32_t*)0x40020c10 |= ~FLAG)
#define Set_GPIOD_ODR(FLAG)                  (*(uint32_t*)0x40020c14 &= FLAG)
#define Clr_GPIOD_ODR(FLAG)                  (*(uint32_t*)0x40020c14 |= ~FLAG)
#define Set_GPIOD_BSRR(FLAG)                 (*(uint32_t*)0x40020c18 &= FLAG)
#define Clr_GPIOD_BSRR(FLAG)                 (*(uint32_t*)0x40020c18 |= ~FLAG)
#define Set_GPIOD_LCKR(FLAG)                 (*(uint32_t*)0x40020c1c &= FLAG)
#define Clr_GPIOD_LCKR(FLAG)                 (*(uint32_t*)0x40020c1c |= ~FLAG)
#define Set_GPIOD_AFRL(FLAG)                 (*(uint32_t*)0x40020c20 &= FLAG)
#define Clr_GPIOD_AFRL(FLAG)                 (*(uint32_t*)0x40020c20 |= ~FLAG)
#define Set_GPIOD_AFRH(FLAG)                 (*(uint32_t*)0x40020c24 &= FLAG)
#define Clr_GPIOD_AFRH(FLAG)                 (*(uint32_t*)0x40020c24 |= ~FLAG)
#define Set_GPIOD_BRR(FLAG)                  (*(uint32_t*)0x40020c28 &= FLAG)
#define Clr_GPIOD_BRR(FLAG)                  (*(uint32_t*)0x40020c28 |= ~FLAG)
#define Set_GPIOE_MODER(FLAG)                (*(uint32_t*)0x40021000 &= FLAG)
#define Clr_GPIOE_MODER(FLAG)                (*(uint32_t*)0x40021000 |= ~FLAG)
#define Set_GPIOE_OTYPER(FLAG)               (*(uint32_t*)0x40021004 &= FLAG)
#define Clr_GPIOE_OTYPER(FLAG)               (*(uint32_t*)0x40021004 |= ~FLAG)
#define Set_GPIOE_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021008 &= FLAG)
#define Clr_GPIOE_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021008 |= ~FLAG)
#define Set_GPIOE_PUPDR(FLAG)                (*(uint32_t*)0x4002100c &= FLAG)
#define Clr_GPIOE_PUPDR(FLAG)                (*(uint32_t*)0x4002100c |= ~FLAG)
#define Set_GPIOE_IDR(FLAG)                  (*(uint32_t*)0x40021010 &= FLAG)
#define Clr_GPIOE_IDR(FLAG)                  (*(uint32_t*)0x40021010 |= ~FLAG)
#define Set_GPIOE_ODR(FLAG)                  (*(uint32_t*)0x40021014 &= FLAG)
#define Clr_GPIOE_ODR(FLAG)                  (*(uint32_t*)0x40021014 |= ~FLAG)
#define Set_GPIOE_BSRR(FLAG)                 (*(uint32_t*)0x40021018 &= FLAG)
#define Clr_GPIOE_BSRR(FLAG)                 (*(uint32_t*)0x40021018 |= ~FLAG)
#define Set_GPIOE_LCKR(FLAG)                 (*(uint32_t*)0x4002101c &= FLAG)
#define Clr_GPIOE_LCKR(FLAG)                 (*(uint32_t*)0x4002101c |= ~FLAG)
#define Set_GPIOE_AFRL(FLAG)                 (*(uint32_t*)0x40021020 &= FLAG)
#define Clr_GPIOE_AFRL(FLAG)                 (*(uint32_t*)0x40021020 |= ~FLAG)
#define Set_GPIOE_AFRH(FLAG)                 (*(uint32_t*)0x40021024 &= FLAG)
#define Clr_GPIOE_AFRH(FLAG)                 (*(uint32_t*)0x40021024 |= ~FLAG)
#define Set_GPIOE_BRR(FLAG)                  (*(uint32_t*)0x40021028 &= FLAG)
#define Clr_GPIOE_BRR(FLAG)                  (*(uint32_t*)0x40021028 |= ~FLAG)
#define Set_GPIOF_MODER(FLAG)                (*(uint32_t*)0x40021400 &= FLAG)
#define Clr_GPIOF_MODER(FLAG)                (*(uint32_t*)0x40021400 |= ~FLAG)
#define Set_GPIOF_OTYPER(FLAG)               (*(uint32_t*)0x40021404 &= FLAG)
#define Clr_GPIOF_OTYPER(FLAG)               (*(uint32_t*)0x40021404 |= ~FLAG)
#define Set_GPIOF_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021408 &= FLAG)
#define Clr_GPIOF_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021408 |= ~FLAG)
#define Set_GPIOF_PUPDR(FLAG)                (*(uint32_t*)0x4002140c &= FLAG)
#define Clr_GPIOF_PUPDR(FLAG)                (*(uint32_t*)0x4002140c |= ~FLAG)
#define Set_GPIOF_IDR(FLAG)                  (*(uint32_t*)0x40021410 &= FLAG)
#define Clr_GPIOF_IDR(FLAG)                  (*(uint32_t*)0x40021410 |= ~FLAG)
#define Set_GPIOF_ODR(FLAG)                  (*(uint32_t*)0x40021414 &= FLAG)
#define Clr_GPIOF_ODR(FLAG)                  (*(uint32_t*)0x40021414 |= ~FLAG)
#define Set_GPIOF_BSRR(FLAG)                 (*(uint32_t*)0x40021418 &= FLAG)
#define Clr_GPIOF_BSRR(FLAG)                 (*(uint32_t*)0x40021418 |= ~FLAG)
#define Set_GPIOF_LCKR(FLAG)                 (*(uint32_t*)0x4002141c &= FLAG)
#define Clr_GPIOF_LCKR(FLAG)                 (*(uint32_t*)0x4002141c |= ~FLAG)
#define Set_GPIOF_AFRL(FLAG)                 (*(uint32_t*)0x40021420 &= FLAG)
#define Clr_GPIOF_AFRL(FLAG)                 (*(uint32_t*)0x40021420 |= ~FLAG)
#define Set_GPIOF_AFRH(FLAG)                 (*(uint32_t*)0x40021424 &= FLAG)
#define Clr_GPIOF_AFRH(FLAG)                 (*(uint32_t*)0x40021424 |= ~FLAG)
#define Set_GPIOF_BRR(FLAG)                  (*(uint32_t*)0x40021428 &= FLAG)
#define Clr_GPIOF_BRR(FLAG)                  (*(uint32_t*)0x40021428 |= ~FLAG)
#define Set_GPIOG_MODER(FLAG)                (*(uint32_t*)0x40021800 &= FLAG)
#define Clr_GPIOG_MODER(FLAG)                (*(uint32_t*)0x40021800 |= ~FLAG)
#define Set_GPIOG_OTYPER(FLAG)               (*(uint32_t*)0x40021804 &= FLAG)
#define Clr_GPIOG_OTYPER(FLAG)               (*(uint32_t*)0x40021804 |= ~FLAG)
#define Set_GPIOG_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021808 &= FLAG)
#define Clr_GPIOG_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021808 |= ~FLAG)
#define Set_GPIOG_PUPDR(FLAG)                (*(uint32_t*)0x4002180c &= FLAG)
#define Clr_GPIOG_PUPDR(FLAG)                (*(uint32_t*)0x4002180c |= ~FLAG)
#define Set_GPIOG_IDR(FLAG)                  (*(uint32_t*)0x40021810 &= FLAG)
#define Clr_GPIOG_IDR(FLAG)                  (*(uint32_t*)0x40021810 |= ~FLAG)
#define Set_GPIOG_ODR(FLAG)                  (*(uint32_t*)0x40021814 &= FLAG)
#define Clr_GPIOG_ODR(FLAG)                  (*(uint32_t*)0x40021814 |= ~FLAG)
#define Set_GPIOG_BSRR(FLAG)                 (*(uint32_t*)0x40021818 &= FLAG)
#define Clr_GPIOG_BSRR(FLAG)                 (*(uint32_t*)0x40021818 |= ~FLAG)
#define Set_GPIOG_LCKR(FLAG)                 (*(uint32_t*)0x4002181c &= FLAG)
#define Clr_GPIOG_LCKR(FLAG)                 (*(uint32_t*)0x4002181c |= ~FLAG)
#define Set_GPIOG_AFRL(FLAG)                 (*(uint32_t*)0x40021820 &= FLAG)
#define Clr_GPIOG_AFRL(FLAG)                 (*(uint32_t*)0x40021820 |= ~FLAG)
#define Set_GPIOG_AFRH(FLAG)                 (*(uint32_t*)0x40021824 &= FLAG)
#define Clr_GPIOG_AFRH(FLAG)                 (*(uint32_t*)0x40021824 |= ~FLAG)
#define Set_GPIOG_BRR(FLAG)                  (*(uint32_t*)0x40021828 &= FLAG)
#define Clr_GPIOG_BRR(FLAG)                  (*(uint32_t*)0x40021828 |= ~FLAG)
#define Set_GPIOH_MODER(FLAG)                (*(uint32_t*)0x40021c00 &= FLAG)
#define Clr_GPIOH_MODER(FLAG)                (*(uint32_t*)0x40021c00 |= ~FLAG)
#define Set_GPIOH_OTYPER(FLAG)               (*(uint32_t*)0x40021c04 &= FLAG)
#define Clr_GPIOH_OTYPER(FLAG)               (*(uint32_t*)0x40021c04 |= ~FLAG)
#define Set_GPIOH_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021c08 &= FLAG)
#define Clr_GPIOH_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40021c08 |= ~FLAG)
#define Set_GPIOH_PUPDR(FLAG)                (*(uint32_t*)0x40021c0c &= FLAG)
#define Clr_GPIOH_PUPDR(FLAG)                (*(uint32_t*)0x40021c0c |= ~FLAG)
#define Set_GPIOH_IDR(FLAG)                  (*(uint32_t*)0x40021c10 &= FLAG)
#define Clr_GPIOH_IDR(FLAG)                  (*(uint32_t*)0x40021c10 |= ~FLAG)
#define Set_GPIOH_ODR(FLAG)                  (*(uint32_t*)0x40021c14 &= FLAG)
#define Clr_GPIOH_ODR(FLAG)                  (*(uint32_t*)0x40021c14 |= ~FLAG)
#define Set_GPIOH_BSRR(FLAG)                 (*(uint32_t*)0x40021c18 &= FLAG)
#define Clr_GPIOH_BSRR(FLAG)                 (*(uint32_t*)0x40021c18 |= ~FLAG)
#define Set_GPIOH_LCKR(FLAG)                 (*(uint32_t*)0x40021c1c &= FLAG)
#define Clr_GPIOH_LCKR(FLAG)                 (*(uint32_t*)0x40021c1c |= ~FLAG)
#define Set_GPIOH_AFRL(FLAG)                 (*(uint32_t*)0x40021c20 &= FLAG)
#define Clr_GPIOH_AFRL(FLAG)                 (*(uint32_t*)0x40021c20 |= ~FLAG)
#define Set_GPIOH_AFRH(FLAG)                 (*(uint32_t*)0x40021c24 &= FLAG)
#define Clr_GPIOH_AFRH(FLAG)                 (*(uint32_t*)0x40021c24 |= ~FLAG)
#define Set_GPIOH_BRR(FLAG)                  (*(uint32_t*)0x40021c28 &= FLAG)
#define Clr_GPIOH_BRR(FLAG)                  (*(uint32_t*)0x40021c28 |= ~FLAG)
#define Set_GPIOI_MODER(FLAG)                (*(uint32_t*)0x40022000 &= FLAG)
#define Clr_GPIOI_MODER(FLAG)                (*(uint32_t*)0x40022000 |= ~FLAG)
#define Set_GPIOI_OTYPER(FLAG)               (*(uint32_t*)0x40022004 &= FLAG)
#define Clr_GPIOI_OTYPER(FLAG)               (*(uint32_t*)0x40022004 |= ~FLAG)
#define Set_GPIOI_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022008 &= FLAG)
#define Clr_GPIOI_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022008 |= ~FLAG)
#define Set_GPIOI_PUPDR(FLAG)                (*(uint32_t*)0x4002200c &= FLAG)
#define Clr_GPIOI_PUPDR(FLAG)                (*(uint32_t*)0x4002200c |= ~FLAG)
#define Set_GPIOI_IDR(FLAG)                  (*(uint32_t*)0x40022010 &= FLAG)
#define Clr_GPIOI_IDR(FLAG)                  (*(uint32_t*)0x40022010 |= ~FLAG)
#define Set_GPIOI_ODR(FLAG)                  (*(uint32_t*)0x40022014 &= FLAG)
#define Clr_GPIOI_ODR(FLAG)                  (*(uint32_t*)0x40022014 |= ~FLAG)
#define Set_GPIOI_BSRR(FLAG)                 (*(uint32_t*)0x40022018 &= FLAG)
#define Clr_GPIOI_BSRR(FLAG)                 (*(uint32_t*)0x40022018 |= ~FLAG)
#define Set_GPIOI_LCKR(FLAG)                 (*(uint32_t*)0x4002201c &= FLAG)
#define Clr_GPIOI_LCKR(FLAG)                 (*(uint32_t*)0x4002201c |= ~FLAG)
#define Set_GPIOI_AFRL(FLAG)                 (*(uint32_t*)0x40022020 &= FLAG)
#define Clr_GPIOI_AFRL(FLAG)                 (*(uint32_t*)0x40022020 |= ~FLAG)
#define Set_GPIOI_AFRH(FLAG)                 (*(uint32_t*)0x40022024 &= FLAG)
#define Clr_GPIOI_AFRH(FLAG)                 (*(uint32_t*)0x40022024 |= ~FLAG)
#define Set_GPIOI_BRR(FLAG)                  (*(uint32_t*)0x40022028 &= FLAG)
#define Clr_GPIOI_BRR(FLAG)                  (*(uint32_t*)0x40022028 |= ~FLAG)
#define Set_GPIOJ_MODER(FLAG)                (*(uint32_t*)0x40022400 &= FLAG)
#define Clr_GPIOJ_MODER(FLAG)                (*(uint32_t*)0x40022400 |= ~FLAG)
#define Set_GPIOJ_OTYPER(FLAG)               (*(uint32_t*)0x40022404 &= FLAG)
#define Clr_GPIOJ_OTYPER(FLAG)               (*(uint32_t*)0x40022404 |= ~FLAG)
#define Set_GPIOJ_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022408 &= FLAG)
#define Clr_GPIOJ_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022408 |= ~FLAG)
#define Set_GPIOJ_PUPDR(FLAG)                (*(uint32_t*)0x4002240c &= FLAG)
#define Clr_GPIOJ_PUPDR(FLAG)                (*(uint32_t*)0x4002240c |= ~FLAG)
#define Set_GPIOJ_IDR(FLAG)                  (*(uint32_t*)0x40022410 &= FLAG)
#define Clr_GPIOJ_IDR(FLAG)                  (*(uint32_t*)0x40022410 |= ~FLAG)
#define Set_GPIOJ_ODR(FLAG)                  (*(uint32_t*)0x40022414 &= FLAG)
#define Clr_GPIOJ_ODR(FLAG)                  (*(uint32_t*)0x40022414 |= ~FLAG)
#define Set_GPIOJ_BSRR(FLAG)                 (*(uint32_t*)0x40022418 &= FLAG)
#define Clr_GPIOJ_BSRR(FLAG)                 (*(uint32_t*)0x40022418 |= ~FLAG)
#define Set_GPIOJ_LCKR(FLAG)                 (*(uint32_t*)0x4002241c &= FLAG)
#define Clr_GPIOJ_LCKR(FLAG)                 (*(uint32_t*)0x4002241c |= ~FLAG)
#define Set_GPIOJ_AFRL(FLAG)                 (*(uint32_t*)0x40022420 &= FLAG)
#define Clr_GPIOJ_AFRL(FLAG)                 (*(uint32_t*)0x40022420 |= ~FLAG)
#define Set_GPIOJ_AFRH(FLAG)                 (*(uint32_t*)0x40022424 &= FLAG)
#define Clr_GPIOJ_AFRH(FLAG)                 (*(uint32_t*)0x40022424 |= ~FLAG)
#define Set_GPIOJ_BRR(FLAG)                  (*(uint32_t*)0x40022428 &= FLAG)
#define Clr_GPIOJ_BRR(FLAG)                  (*(uint32_t*)0x40022428 |= ~FLAG)
#define Set_GPIOK_MODER(FLAG)                (*(uint32_t*)0x40022800 &= FLAG)
#define Clr_GPIOK_MODER(FLAG)                (*(uint32_t*)0x40022800 |= ~FLAG)
#define Set_GPIOK_OTYPER(FLAG)               (*(uint32_t*)0x40022804 &= FLAG)
#define Clr_GPIOK_OTYPER(FLAG)               (*(uint32_t*)0x40022804 |= ~FLAG)
#define Set_GPIOK_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022808 &= FLAG)
#define Clr_GPIOK_GPIOB_OSPEEDR(FLAG)        (*(uint32_t*)0x40022808 |= ~FLAG)
#define Set_GPIOK_PUPDR(FLAG)                (*(uint32_t*)0x4002280c &= FLAG)
#define Clr_GPIOK_PUPDR(FLAG)                (*(uint32_t*)0x4002280c |= ~FLAG)
#define Set_GPIOK_IDR(FLAG)                  (*(uint32_t*)0x40022810 &= FLAG)
#define Clr_GPIOK_IDR(FLAG)                  (*(uint32_t*)0x40022810 |= ~FLAG)
#define Set_GPIOK_ODR(FLAG)                  (*(uint32_t*)0x40022814 &= FLAG)
#define Clr_GPIOK_ODR(FLAG)                  (*(uint32_t*)0x40022814 |= ~FLAG)
#define Set_GPIOK_BSRR(FLAG)                 (*(uint32_t*)0x40022818 &= FLAG)
#define Clr_GPIOK_BSRR(FLAG)                 (*(uint32_t*)0x40022818 |= ~FLAG)
#define Set_GPIOK_LCKR(FLAG)                 (*(uint32_t*)0x4002281c &= FLAG)
#define Clr_GPIOK_LCKR(FLAG)                 (*(uint32_t*)0x4002281c |= ~FLAG)
#define Set_GPIOK_AFRL(FLAG)                 (*(uint32_t*)0x40022820 &= FLAG)
#define Clr_GPIOK_AFRL(FLAG)                 (*(uint32_t*)0x40022820 |= ~FLAG)
#define Set_GPIOK_AFRH(FLAG)                 (*(uint32_t*)0x40022824 &= FLAG)
#define Clr_GPIOK_AFRH(FLAG)                 (*(uint32_t*)0x40022824 |= ~FLAG)
#define Set_GPIOK_BRR(FLAG)                  (*(uint32_t*)0x40022828 &= FLAG)
#define Clr_GPIOK_BRR(FLAG)                  (*(uint32_t*)0x40022828 |= ~FLAG)
#define  _GPIOA_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOA_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOA_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOA_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOA_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOA_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOA_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOA_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOA_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOA_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOA_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOA_BRR_BR0                                      (0x1 << 0)    // Port A Reset bit 0
#define  _GPIOA_BRR_BR1                                      (0x1 << 1)    // Port A Reset bit 1
#define  _GPIOA_BRR_BR2                                      (0x1 << 2)    // Port A Reset bit 2
#define  _GPIOA_BRR_BR3                                      (0x1 << 3)    // Port A Reset bit 3
#define  _GPIOA_BRR_BR4                                      (0x1 << 4)    // Port A Reset bit 4
#define  _GPIOA_BRR_BR5                                      (0x1 << 5)    // Port A Reset bit 5
#define  _GPIOA_BRR_BR6                                      (0x1 << 6)    // Port A Reset bit 6
#define  _GPIOA_BRR_BR7                                      (0x1 << 7)    // Port A Reset bit 7
#define  _GPIOA_BRR_BR8                                      (0x1 << 8)    // Port A Reset bit 8
#define  _GPIOA_BRR_BR9                                      (0x1 << 9)    // Port A Reset bit 9
#define  _GPIOA_BRR_BR10                                     (0x1 << 10)    // Port A Reset bit 10
#define  _GPIOA_BRR_BR11                                     (0x1 << 11)    // Port A Reset bit 11
#define  _GPIOA_BRR_BR12                                     (0x1 << 12)    // Port A Reset bit 12
#define  _GPIOA_BRR_BR13                                     (0x1 << 13)    // Port A Reset bit 13
#define  _GPIOA_BRR_BR14                                     (0x1 << 14)    // Port A Reset bit 14
#define  _GPIOA_BRR_BR15                                     (0x1 << 15)    // Port A Reset bit 15
#define  _GPIOB_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOB_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOB_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOB_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOB_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOB_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOB_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOB_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOB_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOB_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOB_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOB_BRR_BR0                                      (0x1 << 0)    // Port B Reset bit 0
#define  _GPIOB_BRR_BR1                                      (0x1 << 1)    // Port B Reset bit 1
#define  _GPIOB_BRR_BR2                                      (0x1 << 2)    // Port B Reset bit 2
#define  _GPIOB_BRR_BR3                                      (0x1 << 3)    // Port B Reset bit 3
#define  _GPIOB_BRR_BR4                                      (0x1 << 4)    // Port B Reset bit 4
#define  _GPIOB_BRR_BR5                                      (0x1 << 5)    // Port B Reset bit 5
#define  _GPIOB_BRR_BR6                                      (0x1 << 6)    // Port B Reset bit 6
#define  _GPIOB_BRR_BR7                                      (0x1 << 7)    // Port B Reset bit 7
#define  _GPIOB_BRR_BR8                                      (0x1 << 8)    // Port B Reset bit 8
#define  _GPIOB_BRR_BR9                                      (0x1 << 9)    // Port B Reset bit 9
#define  _GPIOB_BRR_BR10                                     (0x1 << 10)    // Port B Reset bit 10
#define  _GPIOB_BRR_BR11                                     (0x1 << 11)    // Port B Reset bit 11
#define  _GPIOB_BRR_BR12                                     (0x1 << 12)    // Port B Reset bit 12
#define  _GPIOB_BRR_BR13                                     (0x1 << 13)    // Port B Reset bit 13
#define  _GPIOB_BRR_BR14                                     (0x1 << 14)    // Port B Reset bit 14
#define  _GPIOB_BRR_BR15                                     (0x1 << 15)    // Port B Reset bit 15
#define  _GPIOC_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOC_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOC_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOC_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOC_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOC_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOC_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOC_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOC_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOC_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOC_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOC_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOC_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOC_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOC_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOC_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOC_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOC_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOC_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOC_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOC_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOC_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOC_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOC_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOC_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOC_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOC_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOD_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOD_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOD_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOD_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOD_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOD_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOD_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOD_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOD_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOD_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOD_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOD_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOD_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOD_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOD_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOD_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOD_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOD_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOD_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOD_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOD_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOD_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOD_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOD_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOD_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOD_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOD_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOE_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOE_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOE_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOE_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOE_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOE_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOE_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOE_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOE_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOE_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOE_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOE_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOE_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOE_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOE_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOE_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOE_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOE_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOE_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOE_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOE_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOE_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOE_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOE_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOE_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOE_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOE_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOF_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOF_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOF_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOF_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOF_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOF_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOF_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOF_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOF_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOF_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOF_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOF_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOF_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOF_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOF_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOF_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOF_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOF_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOF_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOF_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOF_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOF_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOF_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOF_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOF_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOF_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOF_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOG_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOG_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOG_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOG_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOG_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOG_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOG_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOG_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOG_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOG_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOG_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOG_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOG_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOG_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOG_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOG_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOG_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOG_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOG_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOG_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOG_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOG_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOG_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOG_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOG_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOG_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOG_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOH_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOH_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOH_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOH_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOH_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOH_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOH_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOH_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOH_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOH_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOH_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOH_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOH_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOH_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOH_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOH_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOH_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOH_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOH_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOH_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOH_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOH_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOH_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOH_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOH_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOH_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOH_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOI_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOI_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOI_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOI_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOI_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOI_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOI_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOI_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOI_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOI_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOI_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOI_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOI_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOI_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOI_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOI_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOI_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOI_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOI_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOI_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOI_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOI_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOI_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOI_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOI_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOI_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOI_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOJ_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOJ_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOJ_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOJ_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOJ_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOJ_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOJ_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOJ_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOJ_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOJ_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOJ_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOJ_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOJ_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOJ_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOJ_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOJ_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOJ_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOJ_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOJ_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOJ_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOJ_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOJ_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOJ_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOJ_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOJ_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15
#define  _GPIOK_MODER_MODER15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_MODER_MODER0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT15                                  (0x1 << 15)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT14                                  (0x1 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT13                                  (0x1 << 13)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT12                                  (0x1 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT11                                  (0x1 << 11)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT10                                  (0x1 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT9                                   (0x1 << 9)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT8                                   (0x1 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT7                                   (0x1 << 7)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT6                                   (0x1 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT5                                   (0x1 << 5)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT4                                   (0x1 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT3                                   (0x1 << 3)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT2                                   (0x1 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT1                                   (0x1 << 1)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_OTYPER_OT0                                   (0x1 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR15                      (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR14                      (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR13                      (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR12                      (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR11                      (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR10                      (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR9                       (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR8                       (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR7                       (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR6                       (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR5                       (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR4                       (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR3                       (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR2                       (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR1                       (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_GPIOB_OSPEEDR_OSPEEDR0                       (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR15                                (0x3 << 30)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR14                                (0x3 << 28)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR13                                (0x3 << 26)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR12                                (0x3 << 24)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR11                                (0x3 << 22)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR10                                (0x3 << 20)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR9                                 (0x3 << 18)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR8                                 (0x3 << 16)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR7                                 (0x3 << 14)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR6                                 (0x3 << 12)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR5                                 (0x3 << 10)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR4                                 (0x3 << 8)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR3                                 (0x3 << 6)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR2                                 (0x3 << 4)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR1                                 (0x3 << 2)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_PUPDR_PUPDR0                                 (0x3 << 0)    // Port x configuration bits (y = 0..15)
#define  _GPIOK_IDR_IDR15                                    (0x1 << 15)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR14                                    (0x1 << 14)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR13                                    (0x1 << 13)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR12                                    (0x1 << 12)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR11                                    (0x1 << 11)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR10                                    (0x1 << 10)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR9                                     (0x1 << 9)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR8                                     (0x1 << 8)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR7                                     (0x1 << 7)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR6                                     (0x1 << 6)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR5                                     (0x1 << 5)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR4                                     (0x1 << 4)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR3                                     (0x1 << 3)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR2                                     (0x1 << 2)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR1                                     (0x1 << 1)    // Port input data (y = 0..15)
#define  _GPIOK_IDR_IDR0                                     (0x1 << 0)    // Port input data (y = 0..15)
#define  _GPIOK_ODR_ODR15                                    (0x1 << 15)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR14                                    (0x1 << 14)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR13                                    (0x1 << 13)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR12                                    (0x1 << 12)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR11                                    (0x1 << 11)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR10                                    (0x1 << 10)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR9                                     (0x1 << 9)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR8                                     (0x1 << 8)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR7                                     (0x1 << 7)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR6                                     (0x1 << 6)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR5                                     (0x1 << 5)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR4                                     (0x1 << 4)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR3                                     (0x1 << 3)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR2                                     (0x1 << 2)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR1                                     (0x1 << 1)    // Port output data (y = 0..15)
#define  _GPIOK_ODR_ODR0                                     (0x1 << 0)    // Port output data (y = 0..15)
#define  _GPIOK_BSRR_BR15                                    (0x1 << 31)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR14                                    (0x1 << 30)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR13                                    (0x1 << 29)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR12                                    (0x1 << 28)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR11                                    (0x1 << 27)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR10                                    (0x1 << 26)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR9                                     (0x1 << 25)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR8                                     (0x1 << 24)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR7                                     (0x1 << 23)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR6                                     (0x1 << 22)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR5                                     (0x1 << 21)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR4                                     (0x1 << 20)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR3                                     (0x1 << 19)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR2                                     (0x1 << 18)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR1                                     (0x1 << 17)    // Port x reset bit y (y = 0..15)
#define  _GPIOK_BSRR_BR0                                     (0x1 << 16)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS15                                    (0x1 << 15)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS14                                    (0x1 << 14)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS13                                    (0x1 << 13)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS12                                    (0x1 << 12)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS11                                    (0x1 << 11)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS10                                    (0x1 << 10)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS9                                     (0x1 << 9)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS8                                     (0x1 << 8)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS7                                     (0x1 << 7)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS6                                     (0x1 << 6)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS5                                     (0x1 << 5)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS4                                     (0x1 << 4)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS3                                     (0x1 << 3)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS2                                     (0x1 << 2)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS1                                     (0x1 << 1)    // Port x set bit y (y= 0..15)
#define  _GPIOK_BSRR_BS0                                     (0x1 << 0)    // Port x set bit y (y= 0..15)
#define  _GPIOK_LCKR_LCKK                                    (0x1 << 16)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK15                                   (0x1 << 15)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK14                                   (0x1 << 14)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK13                                   (0x1 << 13)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK12                                   (0x1 << 12)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK11                                   (0x1 << 11)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK10                                   (0x1 << 10)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK9                                    (0x1 << 9)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK8                                    (0x1 << 8)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK7                                    (0x1 << 7)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK6                                    (0x1 << 6)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK5                                    (0x1 << 5)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK4                                    (0x1 << 4)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK3                                    (0x1 << 3)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK2                                    (0x1 << 2)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK1                                    (0x1 << 1)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_LCKR_LCK0                                    (0x1 << 0)    // Port x lock bit y (y= 0..15)
#define  _GPIOK_AFRL_AFRL7                                   (0xf << 28)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL6                                   (0xf << 24)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL5                                   (0xf << 20)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL4                                   (0xf << 16)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL3                                   (0xf << 12)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL2                                   (0xf << 8)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL1                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRL_AFRL0                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 0..7)
#define  _GPIOK_AFRH_AFRH15                                  (0xf << 28)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH14                                  (0xf << 24)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH13                                  (0xf << 20)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH12                                  (0xf << 16)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH11                                  (0xf << 12)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH10                                  (0xf << 8)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH9                                   (0xf << 4)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_AFRH_AFRH8                                   (0xf << 0)    // Alternate function selection for port x bit y (y = 8..15)
#define  _GPIOK_BRR_BR0                                      (0x1 << 0)    // Port D Reset bit 0
#define  _GPIOK_BRR_BR1                                      (0x1 << 1)    // Port D Reset bit 1
#define  _GPIOK_BRR_BR2                                      (0x1 << 2)    // Port D Reset bit 2
#define  _GPIOK_BRR_BR3                                      (0x1 << 3)    // Port D Reset bit 3
#define  _GPIOK_BRR_BR4                                      (0x1 << 4)    // Port D Reset bit 4
#define  _GPIOK_BRR_BR5                                      (0x1 << 5)    // Port D Reset bit 5
#define  _GPIOK_BRR_BR6                                      (0x1 << 6)    // Port D Reset bit 6
#define  _GPIOK_BRR_BR7                                      (0x1 << 7)    // Port D Reset bit 7
#define  _GPIOK_BRR_BR8                                      (0x1 << 8)    // Port D Reset bit 8
#define  _GPIOK_BRR_BR9                                      (0x1 << 9)    // Port D Reset bit 9
#define  _GPIOK_BRR_BR10                                     (0x1 << 10)    // Port D Reset bit 10
#define  _GPIOK_BRR_BR11                                     (0x1 << 11)    // Port D Reset bit 11
#define  _GPIOK_BRR_BR12                                     (0x1 << 12)    // Port D Reset bit 12
#define  _GPIOK_BRR_BR13                                     (0x1 << 13)    // Port D Reset bit 13
#define  _GPIOK_BRR_BR14                                     (0x1 << 14)    // Port D Reset bit 14
#define  _GPIOK_BRR_BR15                                     (0x1 << 15)    // Port D Reset bit 15


typedef enum {
　
　drivers/inc/stm32f767xx_NVIC.h
#define Get_NVIC_ISER0(FLAG)                 (*(uint32_t*)0xe000e100 |= FLAG)
#define Get_NVIC_ISER1(FLAG)                 (*(uint32_t*)0xe000e104 |= FLAG)
#define Get_NVIC_ISER2(FLAG)                 (*(uint32_t*)0xe000e108 |= FLAG)
#define Get_NVIC_ICER0(FLAG)                 (*(uint32_t*)0xe000e180 |= FLAG)
#define Get_NVIC_ICER1(FLAG)                 (*(uint32_t*)0xe000e184 |= FLAG)
#define Get_NVIC_ICER2(FLAG)                 (*(uint32_t*)0xe000e188 |= FLAG)
#define Get_NVIC_ISPR0(FLAG)                 (*(uint32_t*)0xe000e200 |= FLAG)
#define Get_NVIC_ISPR1(FLAG)                 (*(uint32_t*)0xe000e204 |= FLAG)
#define Get_NVIC_ISPR2(FLAG)                 (*(uint32_t*)0xe000e208 |= FLAG)
#define Get_NVIC_ICPR0(FLAG)                 (*(uint32_t*)0xe000e280 |= FLAG)
#define Get_NVIC_ICPR1(FLAG)                 (*(uint32_t*)0xe000e284 |= FLAG)
#define Get_NVIC_ICPR2(FLAG)                 (*(uint32_t*)0xe000e288 |= FLAG)
#define Get_NVIC_IABR0(FLAG)                 (*(uint32_t*)0xe000e300 |= FLAG)
#define Get_NVIC_IABR1(FLAG)                 (*(uint32_t*)0xe000e304 |= FLAG)
#define Get_NVIC_IABR2(FLAG)                 (*(uint32_t*)0xe000e308 |= FLAG)
#define Get_NVIC_IPR0(FLAG)                  (*(uint32_t*)0xe000e400 |= FLAG)
#define Get_NVIC_IPR1(FLAG)                  (*(uint32_t*)0xe000e404 |= FLAG)
#define Get_NVIC_IPR2(FLAG)                  (*(uint32_t*)0xe000e408 |= FLAG)
#define Get_NVIC_IPR3(FLAG)                  (*(uint32_t*)0xe000e40c |= FLAG)
#define Get_NVIC_IPR4(FLAG)                  (*(uint32_t*)0xe000e410 |= FLAG)
#define Get_NVIC_IPR5(FLAG)                  (*(uint32_t*)0xe000e414 |= FLAG)
#define Get_NVIC_IPR6(FLAG)                  (*(uint32_t*)0xe000e418 |= FLAG)
#define Get_NVIC_IPR7(FLAG)                  (*(uint32_t*)0xe000e41c |= FLAG)
#define Get_NVIC_IPR8(FLAG)                  (*(uint32_t*)0xe000e420 |= FLAG)
#define Get_NVIC_IPR9(FLAG)                  (*(uint32_t*)0xe000e424 |= FLAG)
#define Get_NVIC_IPR10(FLAG)                 (*(uint32_t*)0xe000e428 |= FLAG)
#define Get_NVIC_IPR11(FLAG)                 (*(uint32_t*)0xe000e42c |= FLAG)
#define Get_NVIC_IPR12(FLAG)                 (*(uint32_t*)0xe000e430 |= FLAG)
#define Get_NVIC_IPR13(FLAG)                 (*(uint32_t*)0xe000e434 |= FLAG)
#define Get_NVIC_IPR14(FLAG)                 (*(uint32_t*)0xe000e438 |= FLAG)
#define Get_NVIC_IPR15(FLAG)                 (*(uint32_t*)0xe000e43c |= FLAG)
#define Get_NVIC_IPR16(FLAG)                 (*(uint32_t*)0xe000e440 |= FLAG)
#define Get_NVIC_IPR17(FLAG)                 (*(uint32_t*)0xe000e444 |= FLAG)
#define Get_NVIC_IPR18(FLAG)                 (*(uint32_t*)0xe000e448 |= FLAG)
#define Get_NVIC_IPR19(FLAG)                 (*(uint32_t*)0xe000e44c |= FLAG)
#define Get_NVIC_IPR20(FLAG)                 (*(uint32_t*)0xe000e450 |= FLAG)
#define Get_NVIC_ISER3(FLAG)                 (*(uint32_t*)0xe000e10c |= FLAG)
#define Get_NVIC_ICER3(FLAG)                 (*(uint32_t*)0xe000e18c |= FLAG)
#define Get_NVIC_ISPR3(FLAG)                 (*(uint32_t*)0xe000e20c |= FLAG)
#define Get_NVIC_ICPR3(FLAG)                 (*(uint32_t*)0xe000e28c |= FLAG)
#define Get_NVIC_IABR3(FLAG)                 (*(uint32_t*)0xe000e30c |= FLAG)
#define Get_NVIC_IPR21(FLAG)                 (*(uint32_t*)0xe000e454 |= FLAG)
#define Get_NVIC_IPR22(FLAG)                 (*(uint32_t*)0xe000e458 |= FLAG)
#define Get_NVIC_IPR23(FLAG)                 (*(uint32_t*)0xe000e45c |= FLAG)
#define Get_NVIC_IPR24(FLAG)                 (*(uint32_t*)0xe000e460 |= FLAG)
#define Get_NVIC_IPR25(FLAG)                 (*(uint32_t*)0xe000e464 |= FLAG)
#define Get_NVIC_IPR26(FLAG)                 (*(uint32_t*)0xe000e468 |= FLAG)
#define Get_NVIC_IPR27(FLAG)                 (*(uint32_t*)0xe000e46c |= FLAG)
#define Get_NVIC_IPR28(FLAG)                 (*(uint32_t*)0xe000e470 |= FLAG)
#define Get_NVIC_IPR29(FLAG)                 (*(uint32_t*)0xe000e474 |= FLAG)
#define Get_NVIC_STIR_STIR(FLAG)             (*(uint32_t*)0xe000ef00 |= FLAG)
#define Set_NVIC_ISER0(FLAG)                 (*(uint32_t*)0xe000e100 &= FLAG)
#define Clr_NVIC_ISER0(FLAG)                 (*(uint32_t*)0xe000e100 |= ~FLAG)
#define Set_NVIC_ISER1(FLAG)                 (*(uint32_t*)0xe000e104 &= FLAG)
#define Clr_NVIC_ISER1(FLAG)                 (*(uint32_t*)0xe000e104 |= ~FLAG)
#define Set_NVIC_ISER2(FLAG)                 (*(uint32_t*)0xe000e108 &= FLAG)
#define Clr_NVIC_ISER2(FLAG)                 (*(uint32_t*)0xe000e108 |= ~FLAG)
#define Set_NVIC_ICER0(FLAG)                 (*(uint32_t*)0xe000e180 &= FLAG)
#define Clr_NVIC_ICER0(FLAG)                 (*(uint32_t*)0xe000e180 |= ~FLAG)
#define Set_NVIC_ICER1(FLAG)                 (*(uint32_t*)0xe000e184 &= FLAG)
#define Clr_NVIC_ICER1(FLAG)                 (*(uint32_t*)0xe000e184 |= ~FLAG)
#define Set_NVIC_ICER2(FLAG)                 (*(uint32_t*)0xe000e188 &= FLAG)
#define Clr_NVIC_ICER2(FLAG)                 (*(uint32_t*)0xe000e188 |= ~FLAG)
#define Set_NVIC_ISPR0(FLAG)                 (*(uint32_t*)0xe000e200 &= FLAG)
#define Clr_NVIC_ISPR0(FLAG)                 (*(uint32_t*)0xe000e200 |= ~FLAG)
#define Set_NVIC_ISPR1(FLAG)                 (*(uint32_t*)0xe000e204 &= FLAG)
#define Clr_NVIC_ISPR1(FLAG)                 (*(uint32_t*)0xe000e204 |= ~FLAG)
#define Set_NVIC_ISPR2(FLAG)                 (*(uint32_t*)0xe000e208 &= FLAG)
#define Clr_NVIC_ISPR2(FLAG)                 (*(uint32_t*)0xe000e208 |= ~FLAG)
#define Set_NVIC_ICPR0(FLAG)                 (*(uint32_t*)0xe000e280 &= FLAG)
#define Clr_NVIC_ICPR0(FLAG)                 (*(uint32_t*)0xe000e280 |= ~FLAG)
#define Set_NVIC_ICPR1(FLAG)                 (*(uint32_t*)0xe000e284 &= FLAG)
#define Clr_NVIC_ICPR1(FLAG)                 (*(uint32_t*)0xe000e284 |= ~FLAG)
#define Set_NVIC_ICPR2(FLAG)                 (*(uint32_t*)0xe000e288 &= FLAG)
#define Clr_NVIC_ICPR2(FLAG)                 (*(uint32_t*)0xe000e288 |= ~FLAG)
#define Set_NVIC_IABR0(FLAG)                 (*(uint32_t*)0xe000e300 &= FLAG)
#define Clr_NVIC_IABR0(FLAG)                 (*(uint32_t*)0xe000e300 |= ~FLAG)
#define Set_NVIC_IABR1(FLAG)                 (*(uint32_t*)0xe000e304 &= FLAG)
#define Clr_NVIC_IABR1(FLAG)                 (*(uint32_t*)0xe000e304 |= ~FLAG)
#define Set_NVIC_IABR2(FLAG)                 (*(uint32_t*)0xe000e308 &= FLAG)
#define Clr_NVIC_IABR2(FLAG)                 (*(uint32_t*)0xe000e308 |= ~FLAG)
#define Set_NVIC_IPR0(FLAG)                  (*(uint32_t*)0xe000e400 &= FLAG)
#define Clr_NVIC_IPR0(FLAG)                  (*(uint32_t*)0xe000e400 |= ~FLAG)
#define Set_NVIC_IPR1(FLAG)                  (*(uint32_t*)0xe000e404 &= FLAG)
#define Clr_NVIC_IPR1(FLAG)                  (*(uint32_t*)0xe000e404 |= ~FLAG)
#define Set_NVIC_IPR2(FLAG)                  (*(uint32_t*)0xe000e408 &= FLAG)
#define Clr_NVIC_IPR2(FLAG)                  (*(uint32_t*)0xe000e408 |= ~FLAG)
#define Set_NVIC_IPR3(FLAG)                  (*(uint32_t*)0xe000e40c &= FLAG)
#define Clr_NVIC_IPR3(FLAG)                  (*(uint32_t*)0xe000e40c |= ~FLAG)
#define Set_NVIC_IPR4(FLAG)                  (*(uint32_t*)0xe000e410 &= FLAG)
#define Clr_NVIC_IPR4(FLAG)                  (*(uint32_t*)0xe000e410 |= ~FLAG)
#define Set_NVIC_IPR5(FLAG)                  (*(uint32_t*)0xe000e414 &= FLAG)
#define Clr_NVIC_IPR5(FLAG)                  (*(uint32_t*)0xe000e414 |= ~FLAG)
#define Set_NVIC_IPR6(FLAG)                  (*(uint32_t*)0xe000e418 &= FLAG)
#define Clr_NVIC_IPR6(FLAG)                  (*(uint32_t*)0xe000e418 |= ~FLAG)
#define Set_NVIC_IPR7(FLAG)                  (*(uint32_t*)0xe000e41c &= FLAG)
#define Clr_NVIC_IPR7(FLAG)                  (*(uint32_t*)0xe000e41c |= ~FLAG)
#define Set_NVIC_IPR8(FLAG)                  (*(uint32_t*)0xe000e420 &= FLAG)
#define Clr_NVIC_IPR8(FLAG)                  (*(uint32_t*)0xe000e420 |= ~FLAG)
#define Set_NVIC_IPR9(FLAG)                  (*(uint32_t*)0xe000e424 &= FLAG)
#define Clr_NVIC_IPR9(FLAG)                  (*(uint32_t*)0xe000e424 |= ~FLAG)
#define Set_NVIC_IPR10(FLAG)                 (*(uint32_t*)0xe000e428 &= FLAG)
#define Clr_NVIC_IPR10(FLAG)                 (*(uint32_t*)0xe000e428 |= ~FLAG)
#define Set_NVIC_IPR11(FLAG)                 (*(uint32_t*)0xe000e42c &= FLAG)
#define Clr_NVIC_IPR11(FLAG)                 (*(uint32_t*)0xe000e42c |= ~FLAG)
#define Set_NVIC_IPR12(FLAG)                 (*(uint32_t*)0xe000e430 &= FLAG)
#define Clr_NVIC_IPR12(FLAG)                 (*(uint32_t*)0xe000e430 |= ~FLAG)
#define Set_NVIC_IPR13(FLAG)                 (*(uint32_t*)0xe000e434 &= FLAG)
#define Clr_NVIC_IPR13(FLAG)                 (*(uint32_t*)0xe000e434 |= ~FLAG)
#define Set_NVIC_IPR14(FLAG)                 (*(uint32_t*)0xe000e438 &= FLAG)
#define Clr_NVIC_IPR14(FLAG)                 (*(uint32_t*)0xe000e438 |= ~FLAG)
#define Set_NVIC_IPR15(FLAG)                 (*(uint32_t*)0xe000e43c &= FLAG)
#define Clr_NVIC_IPR15(FLAG)                 (*(uint32_t*)0xe000e43c |= ~FLAG)
#define Set_NVIC_IPR16(FLAG)                 (*(uint32_t*)0xe000e440 &= FLAG)
#define Clr_NVIC_IPR16(FLAG)                 (*(uint32_t*)0xe000e440 |= ~FLAG)
#define Set_NVIC_IPR17(FLAG)                 (*(uint32_t*)0xe000e444 &= FLAG)
#define Clr_NVIC_IPR17(FLAG)                 (*(uint32_t*)0xe000e444 |= ~FLAG)
#define Set_NVIC_IPR18(FLAG)                 (*(uint32_t*)0xe000e448 &= FLAG)
#define Clr_NVIC_IPR18(FLAG)                 (*(uint32_t*)0xe000e448 |= ~FLAG)
#define Set_NVIC_IPR19(FLAG)                 (*(uint32_t*)0xe000e44c &= FLAG)
#define Clr_NVIC_IPR19(FLAG)                 (*(uint32_t*)0xe000e44c |= ~FLAG)
#define Set_NVIC_IPR20(FLAG)                 (*(uint32_t*)0xe000e450 &= FLAG)
#define Clr_NVIC_IPR20(FLAG)                 (*(uint32_t*)0xe000e450 |= ~FLAG)
#define Set_NVIC_ISER3(FLAG)                 (*(uint32_t*)0xe000e10c &= FLAG)
#define Clr_NVIC_ISER3(FLAG)                 (*(uint32_t*)0xe000e10c |= ~FLAG)
#define Set_NVIC_ICER3(FLAG)                 (*(uint32_t*)0xe000e18c &= FLAG)
#define Clr_NVIC_ICER3(FLAG)                 (*(uint32_t*)0xe000e18c |= ~FLAG)
#define Set_NVIC_ISPR3(FLAG)                 (*(uint32_t*)0xe000e20c &= FLAG)
#define Clr_NVIC_ISPR3(FLAG)                 (*(uint32_t*)0xe000e20c |= ~FLAG)
#define Set_NVIC_ICPR3(FLAG)                 (*(uint32_t*)0xe000e28c &= FLAG)
#define Clr_NVIC_ICPR3(FLAG)                 (*(uint32_t*)0xe000e28c |= ~FLAG)
#define Set_NVIC_IABR3(FLAG)                 (*(uint32_t*)0xe000e30c &= FLAG)
#define Clr_NVIC_IABR3(FLAG)                 (*(uint32_t*)0xe000e30c |= ~FLAG)
#define Set_NVIC_IPR21(FLAG)                 (*(uint32_t*)0xe000e454 &= FLAG)
#define Clr_NVIC_IPR21(FLAG)                 (*(uint32_t*)0xe000e454 |= ~FLAG)
#define Set_NVIC_IPR22(FLAG)                 (*(uint32_t*)0xe000e458 &= FLAG)
#define Clr_NVIC_IPR22(FLAG)                 (*(uint32_t*)0xe000e458 |= ~FLAG)
#define Set_NVIC_IPR23(FLAG)                 (*(uint32_t*)0xe000e45c &= FLAG)
#define Clr_NVIC_IPR23(FLAG)                 (*(uint32_t*)0xe000e45c |= ~FLAG)
#define Set_NVIC_IPR24(FLAG)                 (*(uint32_t*)0xe000e460 &= FLAG)
#define Clr_NVIC_IPR24(FLAG)                 (*(uint32_t*)0xe000e460 |= ~FLAG)
#define Set_NVIC_IPR25(FLAG)                 (*(uint32_t*)0xe000e464 &= FLAG)
#define Clr_NVIC_IPR25(FLAG)                 (*(uint32_t*)0xe000e464 |= ~FLAG)
#define Set_NVIC_IPR26(FLAG)                 (*(uint32_t*)0xe000e468 &= FLAG)
#define Clr_NVIC_IPR26(FLAG)                 (*(uint32_t*)0xe000e468 |= ~FLAG)
#define Set_NVIC_IPR27(FLAG)                 (*(uint32_t*)0xe000e46c &= FLAG)
#define Clr_NVIC_IPR27(FLAG)                 (*(uint32_t*)0xe000e46c |= ~FLAG)
#define Set_NVIC_IPR28(FLAG)                 (*(uint32_t*)0xe000e470 &= FLAG)
#define Clr_NVIC_IPR28(FLAG)                 (*(uint32_t*)0xe000e470 |= ~FLAG)
#define Set_NVIC_IPR29(FLAG)                 (*(uint32_t*)0xe000e474 &= FLAG)
#define Clr_NVIC_IPR29(FLAG)                 (*(uint32_t*)0xe000e474 |= ~FLAG)
#define Set_NVIC_STIR_STIR(FLAG)             (*(uint32_t*)0xe000ef00 &= FLAG)
#define Clr_NVIC_STIR_STIR(FLAG)             (*(uint32_t*)0xe000ef00 |= ~FLAG)
#define  _NVIC_ISER0_SETENA                                  (0xffffffff << 0)    // SETENA
#define  _NVIC_ISER1_SETENA                                  (0xffffffff << 0)    // SETENA
#define  _NVIC_ISER2_SETENA                                  (0xffffffff << 0)    // SETENA
#define  _NVIC_ICER0_CLRENA                                  (0xffffffff << 0)    // CLRENA
#define  _NVIC_ICER1_CLRENA                                  (0xffffffff << 0)    // CLRENA
#define  _NVIC_ICER2_CLRENA                                  (0xffffffff << 0)    // CLRENA
#define  _NVIC_ISPR0_SETPEND                                 (0xffffffff << 0)    // SETPEND
#define  _NVIC_ISPR1_SETPEND                                 (0xffffffff << 0)    // SETPEND
#define  _NVIC_ISPR2_SETPEND                                 (0xffffffff << 0)    // SETPEND
#define  _NVIC_ICPR0_CLRPEND                                 (0xffffffff << 0)    // CLRPEND
#define  _NVIC_ICPR1_CLRPEND                                 (0xffffffff << 0)    // CLRPEND
#define  _NVIC_ICPR2_CLRPEND                                 (0xffffffff << 0)    // CLRPEND
#define  _NVIC_IABR0_ACTIVE                                  (0xffffffff << 0)    // ACTIVE
#define  _NVIC_IABR1_ACTIVE                                  (0xffffffff << 0)    // ACTIVE
#define  _NVIC_IABR2_ACTIVE                                  (0xffffffff << 0)    // ACTIVE
#define  _NVIC_IPR0_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR0_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR0_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR0_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR1_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR1_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR1_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR1_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR2_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR2_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR2_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR2_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR3_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR3_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR3_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR3_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR4_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR4_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR4_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR4_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR5_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR5_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR5_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR5_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR6_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR6_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR6_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR6_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR7_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR7_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR7_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR7_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR8_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR8_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR8_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR8_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR9_IPR_N0                                   (0xff << 0)    // IPR_N0
#define  _NVIC_IPR9_IPR_N1                                   (0xff << 8)    // IPR_N1
#define  _NVIC_IPR9_IPR_N2                                   (0xff << 16)    // IPR_N2
#define  _NVIC_IPR9_IPR_N3                                   (0xff << 24)    // IPR_N3
#define  _NVIC_IPR10_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR10_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR10_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR10_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR11_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR11_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR11_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR11_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR12_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR12_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR12_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR12_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR13_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR13_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR13_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR13_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR14_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR14_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR14_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR14_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR15_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR15_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR15_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR15_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR16_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR16_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR16_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR16_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR17_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR17_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR17_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR17_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR18_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR18_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR18_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR18_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR19_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR19_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR19_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR19_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR20_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR20_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR20_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR20_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_ISER3_SETENA                                  (0xffffffff << 0)    // SETENA
#define  _NVIC_ICER3_CLRENA                                  (0xffffffff << 0)    // CLRENA
#define  _NVIC_ISPR3_SETPEND                                 (0xffffffff << 0)    // SETPEND
#define  _NVIC_ICPR3_CLRPEND                                 (0xffffffff << 0)    // CLRPEND
#define  _NVIC_IABR3_ACTIVE                                  (0xffffffff << 0)    // ACTIVE
#define  _NVIC_IPR21_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR21_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR21_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR21_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR22_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR22_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR22_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR22_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR23_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR23_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR23_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR23_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR24_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR24_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR24_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR24_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR25_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR25_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR25_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR25_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR26_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR26_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR26_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR26_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR27_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR27_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR27_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR27_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR28_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR28_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR28_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR28_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_IPR29_IPR_N0                                  (0xff << 0)    // IPR_N0
#define  _NVIC_IPR29_IPR_N1                                  (0xff << 8)    // IPR_N1
#define  _NVIC_IPR29_IPR_N2                                  (0xff << 16)    // IPR_N2
#define  _NVIC_IPR29_IPR_N3                                  (0xff << 24)    // IPR_N3
#define  _NVIC_STIR_STIR_INTID                               (0x1ff << 0)    // Software generated interrupt ID
　
　drivers/inc/stm32f767xx_RTC.h
#define Get_RTC_TR(FLAG)                     (*(uint32_t*)0x40002800 |= FLAG)
#define Get_RTC_DR(FLAG)                     (*(uint32_t*)0x40002804 |= FLAG)
#define Get_RTC_CR(FLAG)                     (*(uint32_t*)0x40002808 |= FLAG)
#define Get_RTC_ISR(FLAG)                    (*(uint32_t*)0x4000280c |= FLAG)
#define Get_RTC_PRER(FLAG)                   (*(uint32_t*)0x40002810 |= FLAG)
#define Get_RTC_WUTR(FLAG)                   (*(uint32_t*)0x40002814 |= FLAG)
#define Get_RTC_ALRMAR(FLAG)                 (*(uint32_t*)0x4000281c |= FLAG)
#define Get_RTC_ALRMBR(FLAG)                 (*(uint32_t*)0x40002820 |= FLAG)
#define Get_RTC_WPR(FLAG)                    (*(uint32_t*)0x40002824 |= FLAG)
#define Get_RTC_SSR(FLAG)                    (*(uint32_t*)0x40002828 |= FLAG)
#define Get_RTC_SHIFTR(FLAG)                 (*(uint32_t*)0x4000282c |= FLAG)
#define Get_RTC_TSTR(FLAG)                   (*(uint32_t*)0x40002830 |= FLAG)
#define Get_RTC_TSDR(FLAG)                   (*(uint32_t*)0x40002834 |= FLAG)
#define Get_RTC_TSSSR(FLAG)                  (*(uint32_t*)0x40002838 |= FLAG)
#define Get_RTC_CALR(FLAG)                   (*(uint32_t*)0x4000283c |= FLAG)
#define Get_RTC_TAMPCR(FLAG)                 (*(uint32_t*)0x40002840 |= FLAG)
#define Get_RTC_ALRMASSR(FLAG)               (*(uint32_t*)0x40002844 |= FLAG)
#define Get_RTC_ALRMBSSR(FLAG)               (*(uint32_t*)0x40002848 |= FLAG)
#define Get_RTC_OR(FLAG)                     (*(uint32_t*)0x4000284c |= FLAG)
#define Get_RTC_BKP0R(FLAG)                  (*(uint32_t*)0x40002850 |= FLAG)
#define Get_RTC_BKP1R(FLAG)                  (*(uint32_t*)0x40002854 |= FLAG)
#define Get_RTC_BKP2R(FLAG)                  (*(uint32_t*)0x40002858 |= FLAG)
#define Get_RTC_BKP3R(FLAG)                  (*(uint32_t*)0x4000285c |= FLAG)
#define Get_RTC_BKP4R(FLAG)                  (*(uint32_t*)0x40002860 |= FLAG)
#define Get_RTC_BKP5R(FLAG)                  (*(uint32_t*)0x40002864 |= FLAG)
#define Get_RTC_BKP6R(FLAG)                  (*(uint32_t*)0x40002868 |= FLAG)
#define Get_RTC_BKP7R(FLAG)                  (*(uint32_t*)0x4000286c |= FLAG)
#define Get_RTC_BKP8R(FLAG)                  (*(uint32_t*)0x40002870 |= FLAG)
#define Get_RTC_BKP9R(FLAG)                  (*(uint32_t*)0x40002874 |= FLAG)
#define Get_RTC_BKP10R(FLAG)                 (*(uint32_t*)0x40002878 |= FLAG)
#define Get_RTC_BKP11R(FLAG)                 (*(uint32_t*)0x4000287c |= FLAG)
#define Get_RTC_BKP12R(FLAG)                 (*(uint32_t*)0x40002880 |= FLAG)
#define Get_RTC_BKP13R(FLAG)                 (*(uint32_t*)0x40002884 |= FLAG)
#define Get_RTC_BKP14R(FLAG)                 (*(uint32_t*)0x40002888 |= FLAG)
#define Get_RTC_BKP15R(FLAG)                 (*(uint32_t*)0x4000288c |= FLAG)
#define Get_RTC_BKP16R(FLAG)                 (*(uint32_t*)0x40002890 |= FLAG)
#define Get_RTC_BKP17R(FLAG)                 (*(uint32_t*)0x40002894 |= FLAG)
#define Get_RTC_BKP18R(FLAG)                 (*(uint32_t*)0x40002898 |= FLAG)
#define Get_RTC_BKP19R(FLAG)                 (*(uint32_t*)0x4000289c |= FLAG)
#define Get_RTC_BKP20R(FLAG)                 (*(uint32_t*)0x400028a0 |= FLAG)
#define Get_RTC_BKP21R(FLAG)                 (*(uint32_t*)0x400028a4 |= FLAG)
#define Get_RTC_BKP22R(FLAG)                 (*(uint32_t*)0x400028a8 |= FLAG)
#define Get_RTC_BKP23R(FLAG)                 (*(uint32_t*)0x400028ac |= FLAG)
#define Get_RTC_BKP24R(FLAG)                 (*(uint32_t*)0x400028b0 |= FLAG)
#define Get_RTC_BKP25R(FLAG)                 (*(uint32_t*)0x400028b4 |= FLAG)
#define Get_RTC_BKP26R(FLAG)                 (*(uint32_t*)0x400028b8 |= FLAG)
#define Get_RTC_BKP27R(FLAG)                 (*(uint32_t*)0x400028bc |= FLAG)
#define Get_RTC_BKP28R(FLAG)                 (*(uint32_t*)0x400028c0 |= FLAG)
#define Get_RTC_BKP29R(FLAG)                 (*(uint32_t*)0x400028c4 |= FLAG)
#define Get_RTC_BKP30R(FLAG)                 (*(uint32_t*)0x400028c8 |= FLAG)
#define Get_RTC_BKP31R(FLAG)                 (*(uint32_t*)0x400028cc |= FLAG)
#define Set_RTC_TR(FLAG)                     (*(uint32_t*)0x40002800 &= FLAG)
#define Clr_RTC_TR(FLAG)                     (*(uint32_t*)0x40002800 |= ~FLAG)
#define Set_RTC_DR(FLAG)                     (*(uint32_t*)0x40002804 &= FLAG)
#define Clr_RTC_DR(FLAG)                     (*(uint32_t*)0x40002804 |= ~FLAG)
#define Set_RTC_CR(FLAG)                     (*(uint32_t*)0x40002808 &= FLAG)
#define Clr_RTC_CR(FLAG)                     (*(uint32_t*)0x40002808 |= ~FLAG)
#define Set_RTC_ISR(FLAG)                    (*(uint32_t*)0x4000280c &= FLAG)
#define Clr_RTC_ISR(FLAG)                    (*(uint32_t*)0x4000280c |= ~FLAG)
#define Set_RTC_PRER(FLAG)                   (*(uint32_t*)0x40002810 &= FLAG)
#define Clr_RTC_PRER(FLAG)                   (*(uint32_t*)0x40002810 |= ~FLAG)
#define Set_RTC_WUTR(FLAG)                   (*(uint32_t*)0x40002814 &= FLAG)
#define Clr_RTC_WUTR(FLAG)                   (*(uint32_t*)0x40002814 |= ~FLAG)
#define Set_RTC_ALRMAR(FLAG)                 (*(uint32_t*)0x4000281c &= FLAG)
#define Clr_RTC_ALRMAR(FLAG)                 (*(uint32_t*)0x4000281c |= ~FLAG)
#define Set_RTC_ALRMBR(FLAG)                 (*(uint32_t*)0x40002820 &= FLAG)
#define Clr_RTC_ALRMBR(FLAG)                 (*(uint32_t*)0x40002820 |= ~FLAG)
#define Set_RTC_WPR(FLAG)                    (*(uint32_t*)0x40002824 &= FLAG)
#define Clr_RTC_WPR(FLAG)                    (*(uint32_t*)0x40002824 |= ~FLAG)
#define Set_RTC_SSR(FLAG)                    (*(uint32_t*)0x40002828 &= FLAG)
#define Clr_RTC_SSR(FLAG)                    (*(uint32_t*)0x40002828 |= ~FLAG)
#define Set_RTC_SHIFTR(FLAG)                 (*(uint32_t*)0x4000282c &= FLAG)
#define Clr_RTC_SHIFTR(FLAG)                 (*(uint32_t*)0x4000282c |= ~FLAG)
#define Set_RTC_TSTR(FLAG)                   (*(uint32_t*)0x40002830 &= FLAG)
#define Clr_RTC_TSTR(FLAG)                   (*(uint32_t*)0x40002830 |= ~FLAG)
#define Set_RTC_TSDR(FLAG)                   (*(uint32_t*)0x40002834 &= FLAG)
#define Clr_RTC_TSDR(FLAG)                   (*(uint32_t*)0x40002834 |= ~FLAG)
#define Set_RTC_TSSSR(FLAG)                  (*(uint32_t*)0x40002838 &= FLAG)
#define Clr_RTC_TSSSR(FLAG)                  (*(uint32_t*)0x40002838 |= ~FLAG)
#define Set_RTC_CALR(FLAG)                   (*(uint32_t*)0x4000283c &= FLAG)
#define Clr_RTC_CALR(FLAG)                   (*(uint32_t*)0x4000283c |= ~FLAG)
#define Set_RTC_TAMPCR(FLAG)                 (*(uint32_t*)0x40002840 &= FLAG)
#define Clr_RTC_TAMPCR(FLAG)                 (*(uint32_t*)0x40002840 |= ~FLAG)
#define Set_RTC_ALRMASSR(FLAG)               (*(uint32_t*)0x40002844 &= FLAG)
#define Clr_RTC_ALRMASSR(FLAG)               (*(uint32_t*)0x40002844 |= ~FLAG)
#define Set_RTC_ALRMBSSR(FLAG)               (*(uint32_t*)0x40002848 &= FLAG)
#define Clr_RTC_ALRMBSSR(FLAG)               (*(uint32_t*)0x40002848 |= ~FLAG)
#define Set_RTC_OR(FLAG)                     (*(uint32_t*)0x4000284c &= FLAG)
#define Clr_RTC_OR(FLAG)                     (*(uint32_t*)0x4000284c |= ~FLAG)
#define Set_RTC_BKP0R(FLAG)                  (*(uint32_t*)0x40002850 &= FLAG)
#define Clr_RTC_BKP0R(FLAG)                  (*(uint32_t*)0x40002850 |= ~FLAG)
#define Set_RTC_BKP1R(FLAG)                  (*(uint32_t*)0x40002854 &= FLAG)
#define Clr_RTC_BKP1R(FLAG)                  (*(uint32_t*)0x40002854 |= ~FLAG)
#define Set_RTC_BKP2R(FLAG)                  (*(uint32_t*)0x40002858 &= FLAG)
#define Clr_RTC_BKP2R(FLAG)                  (*(uint32_t*)0x40002858 |= ~FLAG)
#define Set_RTC_BKP3R(FLAG)                  (*(uint32_t*)0x4000285c &= FLAG)
#define Clr_RTC_BKP3R(FLAG)                  (*(uint32_t*)0x4000285c |= ~FLAG)
#define Set_RTC_BKP4R(FLAG)                  (*(uint32_t*)0x40002860 &= FLAG)
#define Clr_RTC_BKP4R(FLAG)                  (*(uint32_t*)0x40002860 |= ~FLAG)
#define Set_RTC_BKP5R(FLAG)                  (*(uint32_t*)0x40002864 &= FLAG)
#define Clr_RTC_BKP5R(FLAG)                  (*(uint32_t*)0x40002864 |= ~FLAG)
#define Set_RTC_BKP6R(FLAG)                  (*(uint32_t*)0x40002868 &= FLAG)
#define Clr_RTC_BKP6R(FLAG)                  (*(uint32_t*)0x40002868 |= ~FLAG)
#define Set_RTC_BKP7R(FLAG)                  (*(uint32_t*)0x4000286c &= FLAG)
#define Clr_RTC_BKP7R(FLAG)                  (*(uint32_t*)0x4000286c |= ~FLAG)
#define Set_RTC_BKP8R(FLAG)                  (*(uint32_t*)0x40002870 &= FLAG)
#define Clr_RTC_BKP8R(FLAG)                  (*(uint32_t*)0x40002870 |= ~FLAG)
#define Set_RTC_BKP9R(FLAG)                  (*(uint32_t*)0x40002874 &= FLAG)
#define Clr_RTC_BKP9R(FLAG)                  (*(uint32_t*)0x40002874 |= ~FLAG)
#define Set_RTC_BKP10R(FLAG)                 (*(uint32_t*)0x40002878 &= FLAG)
#define Clr_RTC_BKP10R(FLAG)                 (*(uint32_t*)0x40002878 |= ~FLAG)
#define Set_RTC_BKP11R(FLAG)                 (*(uint32_t*)0x4000287c &= FLAG)
#define Clr_RTC_BKP11R(FLAG)                 (*(uint32_t*)0x4000287c |= ~FLAG)
#define Set_RTC_BKP12R(FLAG)                 (*(uint32_t*)0x40002880 &= FLAG)
#define Clr_RTC_BKP12R(FLAG)                 (*(uint32_t*)0x40002880 |= ~FLAG)
#define Set_RTC_BKP13R(FLAG)                 (*(uint32_t*)0x40002884 &= FLAG)
#define Clr_RTC_BKP13R(FLAG)                 (*(uint32_t*)0x40002884 |= ~FLAG)
#define Set_RTC_BKP14R(FLAG)                 (*(uint32_t*)0x40002888 &= FLAG)
#define Clr_RTC_BKP14R(FLAG)                 (*(uint32_t*)0x40002888 |= ~FLAG)
#define Set_RTC_BKP15R(FLAG)                 (*(uint32_t*)0x4000288c &= FLAG)
#define Clr_RTC_BKP15R(FLAG)                 (*(uint32_t*)0x4000288c |= ~FLAG)
#define Set_RTC_BKP16R(FLAG)                 (*(uint32_t*)0x40002890 &= FLAG)
#define Clr_RTC_BKP16R(FLAG)                 (*(uint32_t*)0x40002890 |= ~FLAG)
#define Set_RTC_BKP17R(FLAG)                 (*(uint32_t*)0x40002894 &= FLAG)
#define Clr_RTC_BKP17R(FLAG)                 (*(uint32_t*)0x40002894 |= ~FLAG)
#define Set_RTC_BKP18R(FLAG)                 (*(uint32_t*)0x40002898 &= FLAG)
#define Clr_RTC_BKP18R(FLAG)                 (*(uint32_t*)0x40002898 |= ~FLAG)
#define Set_RTC_BKP19R(FLAG)                 (*(uint32_t*)0x4000289c &= FLAG)
#define Clr_RTC_BKP19R(FLAG)                 (*(uint32_t*)0x4000289c |= ~FLAG)
#define Set_RTC_BKP20R(FLAG)                 (*(uint32_t*)0x400028a0 &= FLAG)
#define Clr_RTC_BKP20R(FLAG)                 (*(uint32_t*)0x400028a0 |= ~FLAG)
#define Set_RTC_BKP21R(FLAG)                 (*(uint32_t*)0x400028a4 &= FLAG)
#define Clr_RTC_BKP21R(FLAG)                 (*(uint32_t*)0x400028a4 |= ~FLAG)
#define Set_RTC_BKP22R(FLAG)                 (*(uint32_t*)0x400028a8 &= FLAG)
#define Clr_RTC_BKP22R(FLAG)                 (*(uint32_t*)0x400028a8 |= ~FLAG)
#define Set_RTC_BKP23R(FLAG)                 (*(uint32_t*)0x400028ac &= FLAG)
#define Clr_RTC_BKP23R(FLAG)                 (*(uint32_t*)0x400028ac |= ~FLAG)
#define Set_RTC_BKP24R(FLAG)                 (*(uint32_t*)0x400028b0 &= FLAG)
#define Clr_RTC_BKP24R(FLAG)                 (*(uint32_t*)0x400028b0 |= ~FLAG)
#define Set_RTC_BKP25R(FLAG)                 (*(uint32_t*)0x400028b4 &= FLAG)
#define Clr_RTC_BKP25R(FLAG)                 (*(uint32_t*)0x400028b4 |= ~FLAG)
#define Set_RTC_BKP26R(FLAG)                 (*(uint32_t*)0x400028b8 &= FLAG)
#define Clr_RTC_BKP26R(FLAG)                 (*(uint32_t*)0x400028b8 |= ~FLAG)
#define Set_RTC_BKP27R(FLAG)                 (*(uint32_t*)0x400028bc &= FLAG)
#define Clr_RTC_BKP27R(FLAG)                 (*(uint32_t*)0x400028bc |= ~FLAG)
#define Set_RTC_BKP28R(FLAG)                 (*(uint32_t*)0x400028c0 &= FLAG)
#define Clr_RTC_BKP28R(FLAG)                 (*(uint32_t*)0x400028c0 |= ~FLAG)
#define Set_RTC_BKP29R(FLAG)                 (*(uint32_t*)0x400028c4 &= FLAG)
#define Clr_RTC_BKP29R(FLAG)                 (*(uint32_t*)0x400028c4 |= ~FLAG)
#define Set_RTC_BKP30R(FLAG)                 (*(uint32_t*)0x400028c8 &= FLAG)
#define Clr_RTC_BKP30R(FLAG)                 (*(uint32_t*)0x400028c8 |= ~FLAG)
#define Set_RTC_BKP31R(FLAG)                 (*(uint32_t*)0x400028cc &= FLAG)
#define Clr_RTC_BKP31R(FLAG)                 (*(uint32_t*)0x400028cc |= ~FLAG)
#define  _RTC_TR_PM                                          (0x1 << 22)    // AM/PM notation
#define  _RTC_TR_HT                                          (0x3 << 20)    // Hour tens in BCD format
#define  _RTC_TR_HU                                          (0xf << 16)    // Hour units in BCD format
#define  _RTC_TR_MNT                                         (0x7 << 12)    // Minute tens in BCD format
#define  _RTC_TR_MNU                                         (0xf << 8)    // Minute units in BCD format
#define  _RTC_TR_ST                                          (0x7 << 4)    // Second tens in BCD format
#define  _RTC_TR_SU                                          (0xf << 0)    // Second units in BCD format
#define  _RTC_DR_YT                                          (0xf << 20)    // Year tens in BCD format
#define  _RTC_DR_YU                                          (0xf << 16)    // Year units in BCD format
#define  _RTC_DR_WDU                                         (0x7 << 13)    // Week day units
#define  _RTC_DR_MT                                          (0x1 << 12)    // Month tens in BCD format
#define  _RTC_DR_MU                                          (0xf << 8)    // Month units in BCD format
#define  _RTC_DR_DT                                          (0x3 << 4)    // Date tens in BCD format
#define  _RTC_DR_DU                                          (0xf << 0)    // Date units in BCD format
#define  _RTC_CR_WCKSEL                                      (0x7 << 0)    // Wakeup clock selection
#define  _RTC_CR_TSEDGE                                      (0x1 << 3)    // Time-stamp event active edge
#define  _RTC_CR_REFCKON                                     (0x1 << 4)    // Reference clock detection enable (50 or 60 Hz)
#define  _RTC_CR_BYPSHAD                                     (0x1 << 5)    // Bypass the shadow registers
#define  _RTC_CR_FMT                                         (0x1 << 6)    // Hour format
#define  _RTC_CR_ALRAE                                       (0x1 << 8)    // Alarm A enable
#define  _RTC_CR_ALRBE                                       (0x1 << 9)    // Alarm B enable
#define  _RTC_CR_WUTE                                        (0x1 << 10)    // Wakeup timer enable
#define  _RTC_CR_TSE                                         (0x1 << 11)    // Time stamp enable
#define  _RTC_CR_ALRAIE                                      (0x1 << 12)    // Alarm A interrupt enable
#define  _RTC_CR_ALRBIE                                      (0x1 << 13)    // Alarm B interrupt enable
#define  _RTC_CR_WUTIE                                       (0x1 << 14)    // Wakeup timer interrupt enable
#define  _RTC_CR_TSIE                                        (0x1 << 15)    // Time-stamp interrupt enable
#define  _RTC_CR_ADD1H                                       (0x1 << 16)    // Add 1 hour (summer time change)
#define  _RTC_CR_SUB1H                                       (0x1 << 17)    // Subtract 1 hour (winter time change)
#define  _RTC_CR_BKP                                         (0x1 << 18)    // Backup
#define  _RTC_CR_COSEL                                       (0x1 << 19)    // Calibration output selection
#define  _RTC_CR_POL                                         (0x1 << 20)    // Output polarity
#define  _RTC_CR_OSEL                                        (0x3 << 21)    // Output selection
#define  _RTC_CR_COE                                         (0x1 << 23)    // Calibration output enable
#define  _RTC_CR_ITSE                                        (0x1 << 24)    // timestamp on internal event enable
#define  _RTC_ISR_ALRAWF                                     (0x1 << 0)    // Alarm A write flag
#define  _RTC_ISR_ALRBWF                                     (0x1 << 1)    // Alarm B write flag
#define  _RTC_ISR_WUTWF                                      (0x1 << 2)    // Wakeup timer write flag
#define  _RTC_ISR_SHPF                                       (0x1 << 3)    // Shift operation pending
#define  _RTC_ISR_INITS                                      (0x1 << 4)    // Initialization status flag
#define  _RTC_ISR_RSF                                        (0x1 << 5)    // Registers synchronization flag
#define  _RTC_ISR_INITF                                      (0x1 << 6)    // Initialization flag
#define  _RTC_ISR_INIT                                       (0x1 << 7)    // Initialization mode
#define  _RTC_ISR_ALRAF                                      (0x1 << 8)    // Alarm A flag
#define  _RTC_ISR_ALRBF                                      (0x1 << 9)    // Alarm B flag
#define  _RTC_ISR_WUTF                                       (0x1 << 10)    // Wakeup timer flag
#define  _RTC_ISR_TSF                                        (0x1 << 11)    // Time-stamp flag
#define  _RTC_ISR_TSOVF                                      (0x1 << 12)    // Time-stamp overflow flag
#define  _RTC_ISR_TAMP1F                                     (0x1 << 13)    // Tamper detection flag
#define  _RTC_ISR_TAMP2F                                     (0x1 << 14)    // RTC_TAMP2 detection flag
#define  _RTC_ISR_TAMP3F                                     (0x1 << 15)    // RTC_TAMP3 detection flag
#define  _RTC_ISR_RECALPF                                    (0x1 << 16)    // Recalibration pending Flag
#define  _RTC_PRER_PREDIV_A                                  (0x7f << 16)    // Asynchronous prescaler factor
#define  _RTC_PRER_PREDIV_S                                  (0x7fff << 0)    // Synchronous prescaler factor
#define  _RTC_WUTR_WUT                                       (0xffff << 0)    // Wakeup auto-reload value bits
#define  _RTC_ALRMAR_MSK4                                    (0x1 << 31)    // Alarm A date mask
#define  _RTC_ALRMAR_WDSEL                                   (0x1 << 30)    // Week day selection
#define  _RTC_ALRMAR_DT                                      (0x3 << 28)    // Date tens in BCD format
#define  _RTC_ALRMAR_DU                                      (0xf << 24)    // Date units or day in BCD format
#define  _RTC_ALRMAR_MSK3                                    (0x1 << 23)    // Alarm A hours mask
#define  _RTC_ALRMAR_PM                                      (0x1 << 22)    // AM/PM notation
#define  _RTC_ALRMAR_HT                                      (0x3 << 20)    // Hour tens in BCD format
#define  _RTC_ALRMAR_HU                                      (0xf << 16)    // Hour units in BCD format
#define  _RTC_ALRMAR_MSK2                                    (0x1 << 15)    // Alarm A minutes mask
#define  _RTC_ALRMAR_MNT                                     (0x7 << 12)    // Minute tens in BCD format
#define  _RTC_ALRMAR_MNU                                     (0xf << 8)    // Minute units in BCD format
#define  _RTC_ALRMAR_MSK1                                    (0x1 << 7)    // Alarm A seconds mask
#define  _RTC_ALRMAR_ST                                      (0x7 << 4)    // Second tens in BCD format
#define  _RTC_ALRMAR_SU                                      (0xf << 0)    // Second units in BCD format
#define  _RTC_ALRMBR_MSK4                                    (0x1 << 31)    // Alarm B date mask
#define  _RTC_ALRMBR_WDSEL                                   (0x1 << 30)    // Week day selection
#define  _RTC_ALRMBR_DT                                      (0x3 << 28)    // Date tens in BCD format
#define  _RTC_ALRMBR_DU                                      (0xf << 24)    // Date units or day in BCD format
#define  _RTC_ALRMBR_MSK3                                    (0x1 << 23)    // Alarm B hours mask
#define  _RTC_ALRMBR_PM                                      (0x1 << 22)    // AM/PM notation
#define  _RTC_ALRMBR_HT                                      (0x3 << 20)    // Hour tens in BCD format
#define  _RTC_ALRMBR_HU                                      (0xf << 16)    // Hour units in BCD format
#define  _RTC_ALRMBR_MSK2                                    (0x1 << 15)    // Alarm B minutes mask
#define  _RTC_ALRMBR_MNT                                     (0x7 << 12)    // Minute tens in BCD format
#define  _RTC_ALRMBR_MNU                                     (0xf << 8)    // Minute units in BCD format
#define  _RTC_ALRMBR_MSK1                                    (0x1 << 7)    // Alarm B seconds mask
#define  _RTC_ALRMBR_ST                                      (0x7 << 4)    // Second tens in BCD format
#define  _RTC_ALRMBR_SU                                      (0xf << 0)    // Second units in BCD format
#define  _RTC_WPR_KEY                                        (0xff << 0)    // Write protection key
#define  _RTC_SSR_SS                                         (0xffff << 0)    // Sub second value
#define  _RTC_SHIFTR_ADD1S                                   (0x1 << 31)    // Add one second
#define  _RTC_SHIFTR_SUBFS                                   (0x7fff << 0)    // Subtract a fraction of a second
#define  _RTC_TSTR_SU                                        (0xf << 0)    // Second units in BCD format
#define  _RTC_TSTR_ST                                        (0x7 << 4)    // Second tens in BCD format
#define  _RTC_TSTR_MNU                                       (0xf << 8)    // Minute units in BCD format
#define  _RTC_TSTR_MNT                                       (0x7 << 12)    // Minute tens in BCD format
#define  _RTC_TSTR_HU                                        (0xf << 16)    // Hour units in BCD format
#define  _RTC_TSTR_HT                                        (0x3 << 20)    // Hour tens in BCD format
#define  _RTC_TSTR_PM                                        (0x1 << 22)    // AM/PM notation
#define  _RTC_TSDR_WDU                                       (0x7 << 13)    // Week day units
#define  _RTC_TSDR_MT                                        (0x1 << 12)    // Month tens in BCD format
#define  _RTC_TSDR_MU                                        (0xf << 8)    // Month units in BCD format
#define  _RTC_TSDR_DT                                        (0x3 << 4)    // Date tens in BCD format
#define  _RTC_TSDR_DU                                        (0xf << 0)    // Date units in BCD format
#define  _RTC_TSSSR_SS                                       (0xffff << 0)    // Sub second value
#define  _RTC_CALR_CALP                                      (0x1 << 15)    // Increase frequency of RTC by 488.5 ppm
#define  _RTC_CALR_CALW8                                     (0x1 << 14)    // Use an 8-second calibration cycle period
#define  _RTC_CALR_CALW16                                    (0x1 << 13)    // Use a 16-second calibration cycle period
#define  _RTC_CALR_CALM                                      (0x1ff << 0)    // Calibration minus
#define  _RTC_TAMPCR_TAMP1E                                  (0x1 << 0)    // Tamper 1 detection enable
#define  _RTC_TAMPCR_TAMP1TRG                                (0x1 << 1)    // Active level for tamper 1
#define  _RTC_TAMPCR_TAMPIE                                  (0x1 << 2)    // Tamper interrupt enable
#define  _RTC_TAMPCR_TAMP2E                                  (0x1 << 3)    // Tamper 2 detection enable
#define  _RTC_TAMPCR_TAMP2TRG                                (0x1 << 4)    // Active level for tamper 2
#define  _RTC_TAMPCR_TAMP3E                                  (0x1 << 5)    // Tamper 3 detection enable
#define  _RTC_TAMPCR_TAMP3TRG                                (0x1 << 6)    // Active level for tamper 3
#define  _RTC_TAMPCR_TAMPTS                                  (0x1 << 7)    // Activate timestamp on tamper detection event
#define  _RTC_TAMPCR_TAMPFREQ                                (0x7 << 8)    // Tamper sampling frequency
#define  _RTC_TAMPCR_TAMPFLT                                 (0x3 << 11)    // Tamper filter count
#define  _RTC_TAMPCR_TAMPPRCH                                (0x3 << 13)    // Tamper precharge duration
#define  _RTC_TAMPCR_TAMPPUDIS                               (0x1 << 15)    // TAMPER pull-up disable
#define  _RTC_TAMPCR_TAMP1IE                                 (0x1 << 16)    // Tamper 1 interrupt enable
#define  _RTC_TAMPCR_TAMP1NOERASE                            (0x1 << 17)    // Tamper 1 no erase
#define  _RTC_TAMPCR_TAMP1MF                                 (0x1 << 18)    // Tamper 1 mask flag
#define  _RTC_TAMPCR_TAMP2IE                                 (0x1 << 19)    // Tamper 2 interrupt enable
#define  _RTC_TAMPCR_TAMP2NOERASE                            (0x1 << 20)    // Tamper 2 no erase
#define  _RTC_TAMPCR_TAMP2MF                                 (0x1 << 21)    // Tamper 2 mask flag
#define  _RTC_TAMPCR_TAMP3IE                                 (0x1 << 22)    // Tamper 3 interrupt enable
#define  _RTC_TAMPCR_TAMP3NOERASE                            (0x1 << 23)    // Tamper 3 no erase
#define  _RTC_TAMPCR_TAMP3MF                                 (0x1 << 24)    // Tamper 3 mask flag
#define  _RTC_ALRMASSR_MASKSS                                (0xf << 24)    // Mask the most-significant bits starting at this bit
#define  _RTC_ALRMASSR_SS                                    (0x7fff << 0)    // Sub seconds value
#define  _RTC_ALRMBSSR_MASKSS                                (0xf << 24)    // Mask the most-significant bits starting at this bit
#define  _RTC_ALRMBSSR_SS                                    (0x7fff << 0)    // Sub seconds value
#define  _RTC_OR_RTC_ALARM_TYPE                              (0x1 << 0)    // RTC_ALARM on PC13 output type
#define  _RTC_OR_RTC_OUT_RMP                                 (0x1 << 1)    // RTC_OUT remap
#define  _RTC_BKP0R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP1R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP2R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP3R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP4R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP5R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP6R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP7R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP8R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP9R_BKP                                      (0xffffffff << 0)    // BKP
#define  _RTC_BKP10R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP11R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP12R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP13R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP14R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP15R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP16R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP17R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP18R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP19R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP20R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP21R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP22R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP23R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP24R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP25R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP26R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP27R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP28R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP29R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP30R_BKP                                     (0xffffffff << 0)    // BKP
#define  _RTC_BKP31R_BKP                                     (0xffffffff << 0)    // BKP
　
　drivers/inc/stm32f767xx_SCB.h
#define Get_SCB_ACTRL_ACTRL(FLAG)            (*(uint32_t*)0xe000e008 |= FLAG)
#define Get_SCB_CPUID(FLAG)                  (*(uint32_t*)0xe000ed00 |= FLAG)
#define Get_SCB_ICSR(FLAG)                   (*(uint32_t*)0xe000ed04 |= FLAG)
#define Get_SCB_VTOR(FLAG)                   (*(uint32_t*)0xe000ed08 |= FLAG)
#define Get_SCB_AIRCR(FLAG)                  (*(uint32_t*)0xe000ed0c |= FLAG)
#define Get_SCB_SCR(FLAG)                    (*(uint32_t*)0xe000ed10 |= FLAG)
#define Get_SCB_CCR(FLAG)                    (*(uint32_t*)0xe000ed14 |= FLAG)
#define Get_SCB_SHPR1(FLAG)                  (*(uint32_t*)0xe000ed18 |= FLAG)
#define Get_SCB_SHPR2(FLAG)                  (*(uint32_t*)0xe000ed1c |= FLAG)
#define Get_SCB_SHPR3(FLAG)                  (*(uint32_t*)0xe000ed20 |= FLAG)
#define Get_SCB_SHCSR(FLAG)                  (*(uint32_t*)0xe000ed24 |= FLAG)
#define Get_SCB_CFSR_UFSR_BFSR_MMFSR(FLAG)   (*(uint32_t*)0xe000ed28 |= FLAG)
#define Get_SCB_HFSR(FLAG)                   (*(uint32_t*)0xe000ed2c |= FLAG)
#define Get_SCB_MMFAR(FLAG)                  (*(uint32_t*)0xe000ed34 |= FLAG)
#define Get_SCB_BFAR(FLAG)                   (*(uint32_t*)0xe000ed38 |= FLAG)
#define Set_SCB_ACTRL_ACTRL(FLAG)            (*(uint32_t*)0xe000e008 &= FLAG)
#define Clr_SCB_ACTRL_ACTRL(FLAG)            (*(uint32_t*)0xe000e008 |= ~FLAG)
#define Set_SCB_CPUID(FLAG)                  (*(uint32_t*)0xe000ed00 &= FLAG)
#define Clr_SCB_CPUID(FLAG)                  (*(uint32_t*)0xe000ed00 |= ~FLAG)
#define Set_SCB_ICSR(FLAG)                   (*(uint32_t*)0xe000ed04 &= FLAG)
#define Clr_SCB_ICSR(FLAG)                   (*(uint32_t*)0xe000ed04 |= ~FLAG)
#define Set_SCB_VTOR(FLAG)                   (*(uint32_t*)0xe000ed08 &= FLAG)
#define Clr_SCB_VTOR(FLAG)                   (*(uint32_t*)0xe000ed08 |= ~FLAG)
#define Set_SCB_AIRCR(FLAG)                  (*(uint32_t*)0xe000ed0c &= FLAG)
#define Clr_SCB_AIRCR(FLAG)                  (*(uint32_t*)0xe000ed0c |= ~FLAG)
#define Set_SCB_SCR(FLAG)                    (*(uint32_t*)0xe000ed10 &= FLAG)
#define Clr_SCB_SCR(FLAG)                    (*(uint32_t*)0xe000ed10 |= ~FLAG)
#define Set_SCB_CCR(FLAG)                    (*(uint32_t*)0xe000ed14 &= FLAG)
#define Clr_SCB_CCR(FLAG)                    (*(uint32_t*)0xe000ed14 |= ~FLAG)
#define Set_SCB_SHPR1(FLAG)                  (*(uint32_t*)0xe000ed18 &= FLAG)
#define Clr_SCB_SHPR1(FLAG)                  (*(uint32_t*)0xe000ed18 |= ~FLAG)
#define Set_SCB_SHPR2(FLAG)                  (*(uint32_t*)0xe000ed1c &= FLAG)
#define Clr_SCB_SHPR2(FLAG)                  (*(uint32_t*)0xe000ed1c |= ~FLAG)
#define Set_SCB_SHPR3(FLAG)                  (*(uint32_t*)0xe000ed20 &= FLAG)
#define Clr_SCB_SHPR3(FLAG)                  (*(uint32_t*)0xe000ed20 |= ~FLAG)
#define Set_SCB_SHCSR(FLAG)                  (*(uint32_t*)0xe000ed24 &= FLAG)
#define Clr_SCB_SHCSR(FLAG)                  (*(uint32_t*)0xe000ed24 |= ~FLAG)
#define Set_SCB_CFSR_UFSR_BFSR_MMFSR(FLAG)   (*(uint32_t*)0xe000ed28 &= FLAG)
#define Clr_SCB_CFSR_UFSR_BFSR_MMFSR(FLAG)   (*(uint32_t*)0xe000ed28 |= ~FLAG)
#define Set_SCB_HFSR(FLAG)                   (*(uint32_t*)0xe000ed2c &= FLAG)
#define Clr_SCB_HFSR(FLAG)                   (*(uint32_t*)0xe000ed2c |= ~FLAG)
#define Set_SCB_MMFAR(FLAG)                  (*(uint32_t*)0xe000ed34 &= FLAG)
#define Clr_SCB_MMFAR(FLAG)                  (*(uint32_t*)0xe000ed34 |= ~FLAG)
#define Set_SCB_BFAR(FLAG)                   (*(uint32_t*)0xe000ed38 &= FLAG)
#define Clr_SCB_BFAR(FLAG)                   (*(uint32_t*)0xe000ed38 |= ~FLAG)
#define  _SCB_ACTRL_ACTRL_DISFOLD                            (0x1 << 2)    // DISFOLD
#define  _SCB_ACTRL_ACTRL_FPEXCODIS                          (0x1 << 10)    // FPEXCODIS
#define  _SCB_ACTRL_ACTRL_DISRAMODE                          (0x1 << 11)    // DISRAMODE
#define  _SCB_ACTRL_ACTRL_DISITMATBFLUSH                     (0x1 << 12)    // DISITMATBFLUSH
#define  _SCB_CPUID_Revision                                 (0xf << 0)    // Revision number
#define  _SCB_CPUID_PartNo                                   (0xfff << 4)    // Part number of the processor
#define  _SCB_CPUID_Constant                                 (0xf << 16)    // Reads as 0xF
#define  _SCB_CPUID_Variant                                  (0xf << 20)    // Variant number
#define  _SCB_CPUID_Implementer                              (0xff << 24)    // Implementer code
#define  _SCB_ICSR_VECTACTIVE                                (0x1ff << 0)    // Active vector
#define  _SCB_ICSR_RETTOBASE                                 (0x1 << 11)    // Return to base level
#define  _SCB_ICSR_VECTPENDING                               (0x7f << 12)    // Pending vector
#define  _SCB_ICSR_ISRPENDING                                (0x1 << 22)    // Interrupt pending flag
#define  _SCB_ICSR_PENDSTCLR                                 (0x1 << 25)    // SysTick exception clear-pending bit
#define  _SCB_ICSR_PENDSTSET                                 (0x1 << 26)    // SysTick exception set-pending bit
#define  _SCB_ICSR_PENDSVCLR                                 (0x1 << 27)    // PendSV clear-pending bit
#define  _SCB_ICSR_PENDSVSET                                 (0x1 << 28)    // PendSV set-pending bit
#define  _SCB_ICSR_NMIPENDSET                                (0x1 << 31)    // NMI set-pending bit.
#define  _SCB_VTOR_TBLOFF                                    (0x1fffff << 9)    // Vector table base offset field
#define  _SCB_AIRCR_VECTRESET                                (0x1 << 0)    // VECTRESET
#define  _SCB_AIRCR_VECTCLRACTIVE                            (0x1 << 1)    // VECTCLRACTIVE
#define  _SCB_AIRCR_SYSRESETREQ                              (0x1 << 2)    // SYSRESETREQ
#define  _SCB_AIRCR_PRIGROUP                                 (0x7 << 8)    // PRIGROUP
#define  _SCB_AIRCR_ENDIANESS                                (0x1 << 15)    // ENDIANESS
#define  _SCB_AIRCR_VECTKEYSTAT                              (0xffff << 16)    // Register key
#define  _SCB_SCR_SLEEPONEXIT                                (0x1 << 1)    // SLEEPONEXIT
#define  _SCB_SCR_SLEEPDEEP                                  (0x1 << 2)    // SLEEPDEEP
#define  _SCB_SCR_SEVEONPEND                                 (0x1 << 4)    // Send Event on Pending bit
#define  _SCB_CCR_NONBASETHRDENA                             (0x1 << 0)    // Configures how the processor enters Thread mode
#define  _SCB_CCR_USERSETMPEND                               (0x1 << 1)    // USERSETMPEND
#define  _SCB_CCR_UNALIGN__TRP                               (0x1 << 3)    // UNALIGN_ TRP
#define  _SCB_CCR_DIV_0_TRP                                  (0x1 << 4)    // DIV_0_TRP
#define  _SCB_CCR_BFHFNMIGN                                  (0x1 << 8)    // BFHFNMIGN
#define  _SCB_CCR_STKALIGN                                   (0x1 << 9)    // STKALIGN
#define  _SCB_CCR_DC                                         (0x1 << 16)    // DC
#define  _SCB_CCR_IC                                         (0x1 << 17)    // IC
#define  _SCB_CCR_BP                                         (0x1 << 18)    // BP
#define  _SCB_SHPR1_PRI_4                                    (0xff << 0)    // Priority of system handler 4
#define  _SCB_SHPR1_PRI_5                                    (0xff << 8)    // Priority of system handler 5
#define  _SCB_SHPR1_PRI_6                                    (0xff << 16)    // Priority of system handler 6
#define  _SCB_SHPR2_PRI_11                                   (0xff << 24)    // Priority of system handler 11
#define  _SCB_SHPR3_PRI_14                                   (0xff << 16)    // Priority of system handler 14
#define  _SCB_SHPR3_PRI_15                                   (0xff << 24)    // Priority of system handler 15
#define  _SCB_SHCSR_MEMFAULTACT                              (0x1 << 0)    // Memory management fault exception active bit
#define  _SCB_SHCSR_BUSFAULTACT                              (0x1 << 1)    // Bus fault exception active bit
#define  _SCB_SHCSR_USGFAULTACT                              (0x1 << 3)    // Usage fault exception active bit
#define  _SCB_SHCSR_SVCALLACT                                (0x1 << 7)    // SVC call active bit
#define  _SCB_SHCSR_MONITORACT                               (0x1 << 8)    // Debug monitor active bit
#define  _SCB_SHCSR_PENDSVACT                                (0x1 << 10)    // PendSV exception active bit
#define  _SCB_SHCSR_SYSTICKACT                               (0x1 << 11)    // SysTick exception active bit
#define  _SCB_SHCSR_USGFAULTPENDED                           (0x1 << 12)    // Usage fault exception pending bit
#define  _SCB_SHCSR_MEMFAULTPENDED                           (0x1 << 13)    // Memory management fault exception pending bit
#define  _SCB_SHCSR_BUSFAULTPENDED                           (0x1 << 14)    // Bus fault exception pending bit
#define  _SCB_SHCSR_SVCALLPENDED                             (0x1 << 15)    // SVC call pending bit
#define  _SCB_SHCSR_MEMFAULTENA                              (0x1 << 16)    // Memory management fault enable bit
#define  _SCB_SHCSR_BUSFAULTENA                              (0x1 << 17)    // Bus fault enable bit
#define  _SCB_SHCSR_USGFAULTENA                              (0x1 << 18)    // Usage fault enable bit
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_IACCVIOL                  (0x1 << 0)    // IACCVIOL
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_DACCVIOL                  (0x1 << 1)    // DACCVIOL
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_MUNSTKERR                 (0x1 << 3)    // MUNSTKERR
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_MSTKERR                   (0x1 << 4)    // MSTKERR
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_MLSPERR                   (0x1 << 5)    // MLSPERR
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_MMARVALID                 (0x1 << 7)    // MMARVALID
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_IBUSERR                   (0x1 << 8)    // Instruction bus error
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_PRECISERR                 (0x1 << 9)    // Precise data bus error
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_IMPRECISERR               (0x1 << 10)    // Imprecise data bus error
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_UNSTKERR                  (0x1 << 11)    // Bus fault on unstacking for a return from exception
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_STKERR                    (0x1 << 12)    // Bus fault on stacking for exception entry
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_LSPERR                    (0x1 << 13)    // Bus fault on floating-point lazy state preservation
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_BFARVALID                 (0x1 << 15)    // Bus Fault Address Register (BFAR) valid flag
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_UNDEFINSTR                (0x1 << 16)    // Undefined instruction usage fault
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_INVSTATE                  (0x1 << 17)    // Invalid state usage fault
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_INVPC                     (0x1 << 18)    // Invalid PC load usage fault
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_NOCP                      (0x1 << 19)    // No coprocessor usage fault.
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_UNALIGNED                 (0x1 << 24)    // Unaligned access usage fault
#define  _SCB_CFSR_UFSR_BFSR_MMFSR_DIVBYZERO                 (0x1 << 25)    // Divide by zero usage fault
#define  _SCB_HFSR_VECTTBL                                   (0x1 << 1)    // Vector table hard fault
#define  _SCB_HFSR_FORCED                                    (0x1 << 30)    // Forced hard fault
#define  _SCB_HFSR_DEBUG_VT                                  (0x1 << 31)    // Reserved for Debug use
#define  _SCB_MMFAR_ADDRESS                                  (0xffffffff << 0)    // Memory management fault address
#define  _SCB_BFAR_ADDRESS                                   (0xffffffff << 0)    // Bus fault address
　
　drivers/inc/stm32f767xx_LTDC.h
#define Get_LTCD_SSCR(FLAG)                  (*(uint32_t*)0x40016808 |= FLAG)
#define Get_LTCD_BPCR(FLAG)                  (*(uint32_t*)0x4001680c |= FLAG)
#define Get_LTCD_AWCR(FLAG)                  (*(uint32_t*)0x40016810 |= FLAG)
#define Get_LTCD_TWCR(FLAG)                  (*(uint32_t*)0x40016814 |= FLAG)
#define Get_LTCD_GCR(FLAG)                   (*(uint32_t*)0x40016818 |= FLAG)
#define Get_LTCD_SRCR(FLAG)                  (*(uint32_t*)0x40016824 |= FLAG)
#define Get_LTCD_BCCR(FLAG)                  (*(uint32_t*)0x4001682c |= FLAG)
#define Get_LTCD_IER(FLAG)                   (*(uint32_t*)0x40016834 |= FLAG)
#define Get_LTCD_ISR(FLAG)                   (*(uint32_t*)0x40016838 |= FLAG)
#define Get_LTCD_ICR(FLAG)                   (*(uint32_t*)0x4001683c |= FLAG)
#define Get_LTCD_LIPCR(FLAG)                 (*(uint32_t*)0x40016840 |= FLAG)
#define Get_LTCD_CPSR(FLAG)                  (*(uint32_t*)0x40016844 |= FLAG)
#define Get_LTCD_CDSR(FLAG)                  (*(uint32_t*)0x40016848 |= FLAG)
#define Get_LTCD_L1CR(FLAG)                  (*(uint32_t*)0x40016884 |= FLAG)
#define Get_LTCD_L1WHPCR(FLAG)               (*(uint32_t*)0x40016888 |= FLAG)
#define Get_LTCD_L1WVPCR(FLAG)               (*(uint32_t*)0x4001688c |= FLAG)
#define Get_LTCD_L1CKCR(FLAG)                (*(uint32_t*)0x40016890 |= FLAG)
#define Get_LTCD_L1PFCR(FLAG)                (*(uint32_t*)0x40016894 |= FLAG)
#define Get_LTCD_L1CACR(FLAG)                (*(uint32_t*)0x40016898 |= FLAG)
#define Get_LTCD_L1DCCR(FLAG)                (*(uint32_t*)0x4001689c |= FLAG)
#define Get_LTCD_L1BFCR(FLAG)                (*(uint32_t*)0x400168a0 |= FLAG)
#define Get_LTCD_L1CFBAR(FLAG)               (*(uint32_t*)0x400168ac |= FLAG)
#define Get_LTCD_L1CFBLR(FLAG)               (*(uint32_t*)0x400168b0 |= FLAG)
#define Get_LTCD_L1CFBLNR(FLAG)              (*(uint32_t*)0x400168b4 |= FLAG)
#define Get_LTCD_L1CLUTWR(FLAG)              (*(uint32_t*)0x400168c4 |= FLAG)
#define Get_LTCD_L2CR(FLAG)                  (*(uint32_t*)0x40016904 |= FLAG)
#define Get_LTCD_L2WHPCR(FLAG)               (*(uint32_t*)0x40016908 |= FLAG)
#define Get_LTCD_L2WVPCR(FLAG)               (*(uint32_t*)0x4001690c |= FLAG)
#define Get_LTCD_L2CKCR(FLAG)                (*(uint32_t*)0x40016910 |= FLAG)
#define Get_LTCD_L2PFCR(FLAG)                (*(uint32_t*)0x40016914 |= FLAG)
#define Get_LTCD_L2CACR(FLAG)                (*(uint32_t*)0x40016918 |= FLAG)
#define Get_LTCD_L2DCCR(FLAG)                (*(uint32_t*)0x4001691c |= FLAG)
#define Get_LTCD_L2BFCR(FLAG)                (*(uint32_t*)0x40016920 |= FLAG)
#define Get_LTCD_L2CFBAR(FLAG)               (*(uint32_t*)0x4001692c |= FLAG)
#define Get_LTCD_L2CFBLR(FLAG)               (*(uint32_t*)0x40016930 |= FLAG)
#define Get_LTCD_L2CFBLNR(FLAG)              (*(uint32_t*)0x40016934 |= FLAG)
#define Get_LTCD_L2CLUTWR(FLAG)              (*(uint32_t*)0x40016944 |= FLAG)
#define Set_LTCD_SSCR(FLAG)                  (*(uint32_t*)0x40016808 &= FLAG)
#define Clr_LTCD_SSCR(FLAG)                  (*(uint32_t*)0x40016808 |= ~FLAG)
#define Set_LTCD_BPCR(FLAG)                  (*(uint32_t*)0x4001680c &= FLAG)
#define Clr_LTCD_BPCR(FLAG)                  (*(uint32_t*)0x4001680c |= ~FLAG)
#define Set_LTCD_AWCR(FLAG)                  (*(uint32_t*)0x40016810 &= FLAG)
#define Clr_LTCD_AWCR(FLAG)                  (*(uint32_t*)0x40016810 |= ~FLAG)
#define Set_LTCD_TWCR(FLAG)                  (*(uint32_t*)0x40016814 &= FLAG)
#define Clr_LTCD_TWCR(FLAG)                  (*(uint32_t*)0x40016814 |= ~FLAG)
#define Set_LTCD_GCR(FLAG)                   (*(uint32_t*)0x40016818 &= FLAG)
#define Clr_LTCD_GCR(FLAG)                   (*(uint32_t*)0x40016818 |= ~FLAG)
#define Set_LTCD_SRCR(FLAG)                  (*(uint32_t*)0x40016824 &= FLAG)
#define Clr_LTCD_SRCR(FLAG)                  (*(uint32_t*)0x40016824 |= ~FLAG)
#define Set_LTCD_BCCR(FLAG)                  (*(uint32_t*)0x4001682c &= FLAG)
#define Clr_LTCD_BCCR(FLAG)                  (*(uint32_t*)0x4001682c |= ~FLAG)
#define Set_LTCD_IER(FLAG)                   (*(uint32_t*)0x40016834 &= FLAG)
#define Clr_LTCD_IER(FLAG)                   (*(uint32_t*)0x40016834 |= ~FLAG)
#define Set_LTCD_ISR(FLAG)                   (*(uint32_t*)0x40016838 &= FLAG)
#define Clr_LTCD_ISR(FLAG)                   (*(uint32_t*)0x40016838 |= ~FLAG)
#define Set_LTCD_ICR(FLAG)                   (*(uint32_t*)0x4001683c &= FLAG)
#define Clr_LTCD_ICR(FLAG)                   (*(uint32_t*)0x4001683c |= ~FLAG)
#define Set_LTCD_LIPCR(FLAG)                 (*(uint32_t*)0x40016840 &= FLAG)
#define Clr_LTCD_LIPCR(FLAG)                 (*(uint32_t*)0x40016840 |= ~FLAG)
#define Set_LTCD_CPSR(FLAG)                  (*(uint32_t*)0x40016844 &= FLAG)
#define Clr_LTCD_CPSR(FLAG)                  (*(uint32_t*)0x40016844 |= ~FLAG)
#define Set_LTCD_CDSR(FLAG)                  (*(uint32_t*)0x40016848 &= FLAG)
#define Clr_LTCD_CDSR(FLAG)                  (*(uint32_t*)0x40016848 |= ~FLAG)
#define Set_LTCD_L1CR(FLAG)                  (*(uint32_t*)0x40016884 &= FLAG)
#define Clr_LTCD_L1CR(FLAG)                  (*(uint32_t*)0x40016884 |= ~FLAG)
#define Set_LTCD_L1WHPCR(FLAG)               (*(uint32_t*)0x40016888 &= FLAG)
#define Clr_LTCD_L1WHPCR(FLAG)               (*(uint32_t*)0x40016888 |= ~FLAG)
#define Set_LTCD_L1WVPCR(FLAG)               (*(uint32_t*)0x4001688c &= FLAG)
#define Clr_LTCD_L1WVPCR(FLAG)               (*(uint32_t*)0x4001688c |= ~FLAG)
#define Set_LTCD_L1CKCR(FLAG)                (*(uint32_t*)0x40016890 &= FLAG)
#define Clr_LTCD_L1CKCR(FLAG)                (*(uint32_t*)0x40016890 |= ~FLAG)
#define Set_LTCD_L1PFCR(FLAG)                (*(uint32_t*)0x40016894 &= FLAG)
#define Clr_LTCD_L1PFCR(FLAG)                (*(uint32_t*)0x40016894 |= ~FLAG)
#define Set_LTCD_L1CACR(FLAG)                (*(uint32_t*)0x40016898 &= FLAG)
#define Clr_LTCD_L1CACR(FLAG)                (*(uint32_t*)0x40016898 |= ~FLAG)
#define Set_LTCD_L1DCCR(FLAG)                (*(uint32_t*)0x4001689c &= FLAG)
#define Clr_LTCD_L1DCCR(FLAG)                (*(uint32_t*)0x4001689c |= ~FLAG)
#define Set_LTCD_L1BFCR(FLAG)                (*(uint32_t*)0x400168a0 &= FLAG)
#define Clr_LTCD_L1BFCR(FLAG)                (*(uint32_t*)0x400168a0 |= ~FLAG)
#define Set_LTCD_L1CFBAR(FLAG)               (*(uint32_t*)0x400168ac &= FLAG)
#define Clr_LTCD_L1CFBAR(FLAG)               (*(uint32_t*)0x400168ac |= ~FLAG)
#define Set_LTCD_L1CFBLR(FLAG)               (*(uint32_t*)0x400168b0 &= FLAG)
#define Clr_LTCD_L1CFBLR(FLAG)               (*(uint32_t*)0x400168b0 |= ~FLAG)
#define Set_LTCD_L1CFBLNR(FLAG)              (*(uint32_t*)0x400168b4 &= FLAG)
#define Clr_LTCD_L1CFBLNR(FLAG)              (*(uint32_t*)0x400168b4 |= ~FLAG)
#define Set_LTCD_L1CLUTWR(FLAG)              (*(uint32_t*)0x400168c4 &= FLAG)
#define Clr_LTCD_L1CLUTWR(FLAG)              (*(uint32_t*)0x400168c4 |= ~FLAG)
#define Set_LTCD_L2CR(FLAG)                  (*(uint32_t*)0x40016904 &= FLAG)
#define Clr_LTCD_L2CR(FLAG)                  (*(uint32_t*)0x40016904 |= ~FLAG)
#define Set_LTCD_L2WHPCR(FLAG)               (*(uint32_t*)0x40016908 &= FLAG)
#define Clr_LTCD_L2WHPCR(FLAG)               (*(uint32_t*)0x40016908 |= ~FLAG)
#define Set_LTCD_L2WVPCR(FLAG)               (*(uint32_t*)0x4001690c &= FLAG)
#define Clr_LTCD_L2WVPCR(FLAG)               (*(uint32_t*)0x4001690c |= ~FLAG)
#define Set_LTCD_L2CKCR(FLAG)                (*(uint32_t*)0x40016910 &= FLAG)
#define Clr_LTCD_L2CKCR(FLAG)                (*(uint32_t*)0x40016910 |= ~FLAG)
#define Set_LTCD_L2PFCR(FLAG)                (*(uint32_t*)0x40016914 &= FLAG)
#define Clr_LTCD_L2PFCR(FLAG)                (*(uint32_t*)0x40016914 |= ~FLAG)
#define Set_LTCD_L2CACR(FLAG)                (*(uint32_t*)0x40016918 &= FLAG)
#define Clr_LTCD_L2CACR(FLAG)                (*(uint32_t*)0x40016918 |= ~FLAG)
#define Set_LTCD_L2DCCR(FLAG)                (*(uint32_t*)0x4001691c &= FLAG)
#define Clr_LTCD_L2DCCR(FLAG)                (*(uint32_t*)0x4001691c |= ~FLAG)
#define Set_LTCD_L2BFCR(FLAG)                (*(uint32_t*)0x40016920 &= FLAG)
#define Clr_LTCD_L2BFCR(FLAG)                (*(uint32_t*)0x40016920 |= ~FLAG)
#define Set_LTCD_L2CFBAR(FLAG)               (*(uint32_t*)0x4001692c &= FLAG)
#define Clr_LTCD_L2CFBAR(FLAG)               (*(uint32_t*)0x4001692c |= ~FLAG)
#define Set_LTCD_L2CFBLR(FLAG)               (*(uint32_t*)0x40016930 &= FLAG)
#define Clr_LTCD_L2CFBLR(FLAG)               (*(uint32_t*)0x40016930 |= ~FLAG)
#define Set_LTCD_L2CFBLNR(FLAG)              (*(uint32_t*)0x40016934 &= FLAG)
#define Clr_LTCD_L2CFBLNR(FLAG)              (*(uint32_t*)0x40016934 |= ~FLAG)
#define Set_LTCD_L2CLUTWR(FLAG)              (*(uint32_t*)0x40016944 &= FLAG)
#define Clr_LTCD_L2CLUTWR(FLAG)              (*(uint32_t*)0x40016944 |= ~FLAG)
#define  _LTCD_SSCR_HSW                                      (0x3ff << 16)    // Horizontal Synchronization Width (in units of pixel clock period)
#define  _LTCD_SSCR_VSH                                      (0x7ff << 0)    // Vertical Synchronization Height (in units of horizontal scan line)
#define  _LTCD_BPCR_AHBP                                     (0x3ff << 16)    // Accumulated Horizontal back porch (in units of pixel clock period)
#define  _LTCD_BPCR_AVBP                                     (0x7ff << 0)    // Accumulated Vertical back porch (in units of horizontal scan line)
#define  _LTCD_AWCR_AAV                                      (0x3ff << 16)    // AAV
#define  _LTCD_AWCR_AAH                                      (0x7ff << 0)    // Accumulated Active Height (in units of horizontal scan line)
#define  _LTCD_TWCR_TOTALW                                   (0x3ff << 16)    // Total Width (in units of pixel clock period)
#define  _LTCD_TWCR_TOTALH                                   (0x7ff << 0)    // Total Height (in units of horizontal scan line)
#define  _LTCD_GCR_HSPOL                                     (0x1 << 31)    // Horizontal Synchronization Polarity
#define  _LTCD_GCR_VSPOL                                     (0x1 << 30)    // Vertical Synchronization Polarity
#define  _LTCD_GCR_DEPOL                                     (0x1 << 29)    // Data Enable Polarity
#define  _LTCD_GCR_PCPOL                                     (0x1 << 28)    // Pixel Clock Polarity
#define  _LTCD_GCR_DEN                                       (0x1 << 16)    // Dither Enable
#define  _LTCD_GCR_DRW                                       (0x7 << 12)    // Dither Red Width
#define  _LTCD_GCR_DGW                                       (0x7 << 8)    // Dither Green Width
#define  _LTCD_GCR_DBW                                       (0x7 << 4)    // Dither Blue Width
#define  _LTCD_GCR_LTDCEN                                    (0x1 << 0)    // LCD-TFT controller enable bit
#define  _LTCD_SRCR_VBR                                      (0x1 << 1)    // Vertical Blanking Reload
#define  _LTCD_SRCR_IMR                                      (0x1 << 0)    // Immediate Reload
#define  _LTCD_BCCR_BC                                       (0xffffff << 0)    // Background Color Red value
#define  _LTCD_IER_RRIE                                      (0x1 << 3)    // Register Reload interrupt enable
#define  _LTCD_IER_TERRIE                                    (0x1 << 2)    // Transfer Error Interrupt Enable
#define  _LTCD_IER_FUIE                                      (0x1 << 1)    // FIFO Underrun Interrupt Enable
#define  _LTCD_IER_LIE                                       (0x1 << 0)    // Line Interrupt Enable
#define  _LTCD_ISR_RRIF                                      (0x1 << 3)    // Register Reload Interrupt Flag
#define  _LTCD_ISR_TERRIF                                    (0x1 << 2)    // Transfer Error interrupt flag
#define  _LTCD_ISR_FUIF                                      (0x1 << 1)    // FIFO Underrun Interrupt flag
#define  _LTCD_ISR_LIF                                       (0x1 << 0)    // Line Interrupt flag
#define  _LTCD_ICR_CRRIF                                     (0x1 << 3)    // Clears Register Reload Interrupt Flag
#define  _LTCD_ICR_CTERRIF                                   (0x1 << 2)    // Clears the Transfer Error Interrupt Flag
#define  _LTCD_ICR_CFUIF                                     (0x1 << 1)    // Clears the FIFO Underrun Interrupt flag
#define  _LTCD_ICR_CLIF                                      (0x1 << 0)    // Clears the Line Interrupt Flag
#define  _LTCD_LIPCR_LIPOS                                   (0x7ff << 0)    // Line Interrupt Position
#define  _LTCD_CPSR_CXPOS                                    (0xffff << 16)    // Current X Position
#define  _LTCD_CPSR_CYPOS                                    (0xffff << 0)    // Current Y Position
#define  _LTCD_CDSR_HSYNCS                                   (0x1 << 3)    // Horizontal Synchronization display Status
#define  _LTCD_CDSR_VSYNCS                                   (0x1 << 2)    // Vertical Synchronization display Status
#define  _LTCD_CDSR_HDES                                     (0x1 << 1)    // Horizontal Data Enable display Status
#define  _LTCD_CDSR_VDES                                     (0x1 << 0)    // Vertical Data Enable display Status
#define  _LTCD_L1CR_CLUTEN                                   (0x1 << 4)    // Color Look-Up Table Enable
#define  _LTCD_L1CR_COLKEN                                   (0x1 << 1)    // Color Keying Enable
#define  _LTCD_L1CR_LEN                                      (0x1 << 0)    // Layer Enable
#define  _LTCD_L1WHPCR_WHSPPOS                               (0xfff << 16)    // Window Horizontal Stop Position
#define  _LTCD_L1WHPCR_WHSTPOS                               (0xfff << 0)    // Window Horizontal Start Position
#define  _LTCD_L1WVPCR_WVSPPOS                               (0x7ff << 16)    // Window Vertical Stop Position
#define  _LTCD_L1WVPCR_WVSTPOS                               (0x7ff << 0)    // Window Vertical Start Position
#define  _LTCD_L1CKCR_CKRED                                  (0xff << 16)    // Color Key Red value
#define  _LTCD_L1CKCR_CKGREEN                                (0xff << 8)    // Color Key Green value
#define  _LTCD_L1CKCR_CKBLUE                                 (0xff << 0)    // Color Key Blue value
#define  _LTCD_L1PFCR_PF                                     (0x7 << 0)    // Pixel Format
#define  _LTCD_L1CACR_CONSTA                                 (0xff << 0)    // Constant Alpha
#define  _LTCD_L1DCCR_DCALPHA                                (0xff << 24)    // Default Color Alpha
#define  _LTCD_L1DCCR_DCRED                                  (0xff << 16)    // Default Color Red
#define  _LTCD_L1DCCR_DCGREEN                                (0xff << 8)    // Default Color Green
#define  _LTCD_L1DCCR_DCBLUE                                 (0xff << 0)    // Default Color Blue
#define  _LTCD_L1BFCR_BF1                                    (0x7 << 8)    // Blending Factor 1
#define  _LTCD_L1BFCR_BF2                                    (0x7 << 0)    // Blending Factor 2
#define  _LTCD_L1CFBAR_CFBADD                                (0xffffffff << 0)    // Color Frame Buffer Start Address
#define  _LTCD_L1CFBLR_CFBP                                  (0x1fff << 16)    // Color Frame Buffer Pitch in bytes
#define  _LTCD_L1CFBLR_CFBLL                                 (0x1fff << 0)    // Color Frame Buffer Line Length
#define  _LTCD_L1CFBLNR_CFBLNBR                              (0x7ff << 0)    // Frame Buffer Line Number
#define  _LTCD_L1CLUTWR_CLUTADD                              (0xff << 24)    // CLUT Address
#define  _LTCD_L1CLUTWR_RED                                  (0xff << 16)    // Red value
#define  _LTCD_L1CLUTWR_GREEN                                (0xff << 8)    // Green value
#define  _LTCD_L1CLUTWR_BLUE                                 (0xff << 0)    // Blue value
#define  _LTCD_L2CR_CLUTEN                                   (0x1 << 4)    // Color Look-Up Table Enable
#define  _LTCD_L2CR_COLKEN                                   (0x1 << 1)    // Color Keying Enable
#define  _LTCD_L2CR_LEN                                      (0x1 << 0)    // Layer Enable
#define  _LTCD_L2WHPCR_WHSPPOS                               (0xfff << 16)    // Window Horizontal Stop Position
#define  _LTCD_L2WHPCR_WHSTPOS                               (0xfff << 0)    // Window Horizontal Start Position
#define  _LTCD_L2WVPCR_WVSPPOS                               (0x7ff << 16)    // Window Vertical Stop Position
#define  _LTCD_L2WVPCR_WVSTPOS                               (0x7ff << 0)    // Window Vertical Start Position
#define  _LTCD_L2CKCR_CKRED                                  (0x1ff << 15)    // Color Key Red value
#define  _LTCD_L2CKCR_CKGREEN                                (0x7f << 8)    // Color Key Green value
#define  _LTCD_L2CKCR_CKBLUE                                 (0xff << 0)    // Color Key Blue value
#define  _LTCD_L2PFCR_PF                                     (0x7 << 0)    // Pixel Format
#define  _LTCD_L2CACR_CONSTA                                 (0xff << 0)    // Constant Alpha
#define  _LTCD_L2DCCR_DCALPHA                                (0xff << 24)    // Default Color Alpha
#define  _LTCD_L2DCCR_DCRED                                  (0xff << 16)    // Default Color Red
#define  _LTCD_L2DCCR_DCGREEN                                (0xff << 8)    // Default Color Green
#define  _LTCD_L2DCCR_DCBLUE                                 (0xff << 0)    // Default Color Blue
#define  _LTCD_L2BFCR_BF1                                    (0x7 << 8)    // Blending Factor 1
#define  _LTCD_L2BFCR_BF2                                    (0x7 << 0)    // Blending Factor 2
#define  _LTCD_L2CFBAR_CFBADD                                (0xffffffff << 0)    // Color Frame Buffer Start Address
#define  _LTCD_L2CFBLR_CFBP                                  (0x1fff << 16)    // Color Frame Buffer Pitch in bytes
#define  _LTCD_L2CFBLR_CFBLL                                 (0x1fff << 0)    // Color Frame Buffer Line Length
#define  _LTCD_L2CFBLNR_CFBLNBR                              (0x7ff << 0)    // Frame Buffer Line Number
#define  _LTCD_L2CLUTWR_CLUTADD                              (0xff << 24)    // CLUT Address
#define  _LTCD_L2CLUTWR_RED                                  (0xff << 16)    // Red value
#define  _LTCD_L2CLUTWR_GREEN                                (0xff << 8)    // Green value
#define  _LTCD_L2CLUTWR_BLUE                                 (0xff << 0)    // Blue value
　
　drivers/inc/stm32f767xx_FPU.h
#define Get_FPU_CPACR_CPACR(FLAG)            (*(uint32_t*)0xe000ed88 |= FLAG)
#define Get_FPU_FPCCR(FLAG)                  (*(uint32_t*)0xe000ef34 |= FLAG)
#define Get_FPU_FPCAR(FLAG)                  (*(uint32_t*)0xe000ef38 |= FLAG)
#define Get_FPU_FPSCR(FLAG)                  (*(uint32_t*)0xe000ef3c |= FLAG)
#define Set_FPU_CPACR_CPACR(FLAG)            (*(uint32_t*)0xe000ed88 &= FLAG)
#define Clr_FPU_CPACR_CPACR(FLAG)            (*(uint32_t*)0xe000ed88 |= ~FLAG)
#define Set_FPU_FPCCR(FLAG)                  (*(uint32_t*)0xe000ef34 &= FLAG)
#define Clr_FPU_FPCCR(FLAG)                  (*(uint32_t*)0xe000ef34 |= ~FLAG)
#define Set_FPU_FPCAR(FLAG)                  (*(uint32_t*)0xe000ef38 &= FLAG)
#define Clr_FPU_FPCAR(FLAG)                  (*(uint32_t*)0xe000ef38 |= ~FLAG)
#define Set_FPU_FPSCR(FLAG)                  (*(uint32_t*)0xe000ef3c &= FLAG)
#define Clr_FPU_FPSCR(FLAG)                  (*(uint32_t*)0xe000ef3c |= ~FLAG)
#define  _FPU_CPACR_CPACR_CP                                 (0xf << 20)    // CP
#define  _FPU_FPCCR_LSPACT                                   (0x1 << 0)    // LSPACT
#define  _FPU_FPCCR_USER                                     (0x1 << 1)    // USER
#define  _FPU_FPCCR_THREAD                                   (0x1 << 3)    // THREAD
#define  _FPU_FPCCR_HFRDY                                    (0x1 << 4)    // HFRDY
#define  _FPU_FPCCR_MMRDY                                    (0x1 << 5)    // MMRDY
#define  _FPU_FPCCR_BFRDY                                    (0x1 << 6)    // BFRDY
#define  _FPU_FPCCR_MONRDY                                   (0x1 << 8)    // MONRDY
#define  _FPU_FPCCR_LSPEN                                    (0x1 << 30)    // LSPEN
#define  _FPU_FPCCR_ASPEN                                    (0x1 << 31)    // ASPEN
#define  _FPU_FPCAR_ADDRESS                                  (0x1fffffff << 3)    // Location of unpopulated floating-point
#define  _FPU_FPSCR_IOC                                      (0x1 << 0)    // Invalid operation cumulative exception bit
#define  _FPU_FPSCR_DZC                                      (0x1 << 1)    // Division by zero cumulative exception bit.
#define  _FPU_FPSCR_OFC                                      (0x1 << 2)    // Overflow cumulative exception bit
#define  _FPU_FPSCR_UFC                                      (0x1 << 3)    // Underflow cumulative exception bit
#define  _FPU_FPSCR_IXC                                      (0x1 << 4)    // Inexact cumulative exception bit
#define  _FPU_FPSCR_IDC                                      (0x1 << 7)    // Input denormal cumulative exception bit.
#define  _FPU_FPSCR_RMode                                    (0x3 << 22)    // Rounding Mode control field
#define  _FPU_FPSCR_FZ                                       (0x1 << 24)    // Flush-to-zero mode control bit:
#define  _FPU_FPSCR_DN                                       (0x1 << 25)    // Default NaN mode control bit
#define  _FPU_FPSCR_AHP                                      (0x1 << 26)    // Alternative half-precision control bit
#define  _FPU_FPSCR_V                                        (0x1 << 28)    // Overflow condition code flag
#define  _FPU_FPSCR_C                                        (0x1 << 29)    // Carry condition code flag
#define  _FPU_FPSCR_Z                                        (0x1 << 30)    // Zero condition code flag
#define  _FPU_FPSCR_N                                        (0x1 << 31)    // Negative condition code flag
　
　drivers/inc/stm32f767xx_PWR.h
#define Get_PWR_CR1(FLAG)                    (*(uint32_t*)0x40007000 |= FLAG)
#define Get_PWR_CSR1(FLAG)                   (*(uint32_t*)0x40007004 |= FLAG)
#define Get_PWR_CR2(FLAG)                    (*(uint32_t*)0x40007008 |= FLAG)
#define Get_PWR_CSR2(FLAG)                   (*(uint32_t*)0x4000700c |= FLAG)
#define Set_PWR_CR1(FLAG)                    (*(uint32_t*)0x40007000 &= FLAG)
#define Clr_PWR_CR1(FLAG)                    (*(uint32_t*)0x40007000 |= ~FLAG)
#define Set_PWR_CSR1(FLAG)                   (*(uint32_t*)0x40007004 &= FLAG)
#define Clr_PWR_CSR1(FLAG)                   (*(uint32_t*)0x40007004 |= ~FLAG)
#define Set_PWR_CR2(FLAG)                    (*(uint32_t*)0x40007008 &= FLAG)
#define Clr_PWR_CR2(FLAG)                    (*(uint32_t*)0x40007008 |= ~FLAG)
#define Set_PWR_CSR2(FLAG)                   (*(uint32_t*)0x4000700c &= FLAG)
#define Clr_PWR_CSR2(FLAG)                   (*(uint32_t*)0x4000700c |= ~FLAG)
#define  _PWR_CR1_LPDS                                       (0x1 << 0)    // Low-power deep sleep
#define  _PWR_CR1_PDDS                                       (0x1 << 1)    // Power down deepsleep
#define  _PWR_CR1_CSBF                                       (0x1 << 3)    // Clear standby flag
#define  _PWR_CR1_PVDE                                       (0x1 << 4)    // Power voltage detector enable
#define  _PWR_CR1_PLS                                        (0x7 << 5)    // PVD level selection
#define  _PWR_CR1_DBP                                        (0x1 << 8)    // Disable backup domain write protection
#define  _PWR_CR1_FPDS                                       (0x1 << 9)    // Flash power down in Stop mode
#define  _PWR_CR1_LPUDS                                      (0x1 << 10)    // Low-power regulator in deepsleep under-drive mode
#define  _PWR_CR1_MRUDS                                      (0x1 << 11)    // Main regulator in deepsleep under-drive mode
#define  _PWR_CR1_ADCDC1                                     (0x1 << 13)    // ADCDC1
#define  _PWR_CR1_VOS                                        (0x3 << 14)    // Regulator voltage scaling output selection
#define  _PWR_CR1_ODEN                                       (0x1 << 16)    // Over-drive enable
#define  _PWR_CR1_ODSWEN                                     (0x1 << 17)    // Over-drive switching enabled
#define  _PWR_CR1_UDEN                                       (0x3 << 18)    // Under-drive enable in stop mode
#define  _PWR_CSR1_WUIF                                      (0x1 << 0)    // Wakeup internal flag
#define  _PWR_CSR1_SBF                                       (0x1 << 1)    // Standby flag
#define  _PWR_CSR1_PVDO                                      (0x1 << 2)    // PVD output
#define  _PWR_CSR1_BRR                                       (0x1 << 3)    // Backup regulator ready
#define  _PWR_CSR1_BRE                                       (0x1 << 9)    // Backup regulator enable
#define  _PWR_CSR1_VOSRDY                                    (0x1 << 14)    // Regulator voltage scaling output selection ready bit
#define  _PWR_CSR1_ODRDY                                     (0x1 << 16)    // Over-drive mode ready
#define  _PWR_CSR1_ODSWRDY                                   (0x1 << 17)    // Over-drive mode switching ready
#define  _PWR_CSR1_UDRDY                                     (0x3 << 18)    // Under-drive ready flag
#define  _PWR_CR2_CWUPF1                                     (0x1 << 0)    // Clear Wakeup Pin flag for PA0
#define  _PWR_CR2_CWUPF2                                     (0x1 << 1)    // Clear Wakeup Pin flag for PA2
#define  _PWR_CR2_CWUPF3                                     (0x1 << 2)    // Clear Wakeup Pin flag for PC1
#define  _PWR_CR2_CWUPF4                                     (0x1 << 3)    // Clear Wakeup Pin flag for PC13
#define  _PWR_CR2_CWUPF5                                     (0x1 << 4)    // Clear Wakeup Pin flag for PI8
#define  _PWR_CR2_CWUPF6                                     (0x1 << 5)    // Clear Wakeup Pin flag for PI11
#define  _PWR_CR2_WUPP1                                      (0x1 << 8)    // Wakeup pin polarity bit for PA0
#define  _PWR_CR2_WUPP2                                      (0x1 << 9)    // Wakeup pin polarity bit for PA2
#define  _PWR_CR2_WUPP3                                      (0x1 << 10)    // Wakeup pin polarity bit for PC1
#define  _PWR_CR2_WUPP4                                      (0x1 << 11)    // Wakeup pin polarity bit for PC13
#define  _PWR_CR2_WUPP5                                      (0x1 << 12)    // Wakeup pin polarity bit for PI8
#define  _PWR_CR2_WUPP6                                      (0x1 << 13)    // Wakeup pin polarity bit for PI11
#define  _PWR_CSR2_WUPF1                                     (0x1 << 0)    // Wakeup Pin flag for PA0
#define  _PWR_CSR2_WUPF2                                     (0x1 << 1)    // Wakeup Pin flag for PA2
#define  _PWR_CSR2_WUPF3                                     (0x1 << 2)    // Wakeup Pin flag for PC1
#define  _PWR_CSR2_WUPF4                                     (0x1 << 3)    // Wakeup Pin flag for PC13
#define  _PWR_CSR2_WUPF5                                     (0x1 << 4)    // Wakeup Pin flag for PI8
#define  _PWR_CSR2_WUPF6                                     (0x1 << 5)    // Wakeup Pin flag for PI11
#define  _PWR_CSR2_EWUP1                                     (0x1 << 8)    // Enable Wakeup pin for PA0
#define  _PWR_CSR2_EWUP2                                     (0x1 << 9)    // Enable Wakeup pin for PA2
#define  _PWR_CSR2_EWUP3                                     (0x1 << 10)    // Enable Wakeup pin for PC1
#define  _PWR_CSR2_EWUP4                                     (0x1 << 11)    // Enable Wakeup pin for PC13
#define  _PWR_CSR2_EWUP5                                     (0x1 << 12)    // Enable Wakeup pin for PI8
#define  _PWR_CSR2_EWUP6                                     (0x1 << 13)    // Enable Wakeup pin for PI11
　
　drivers/inc/stm32f767xx_SYSCFG.h
#define Get_SYSCFG_MEMRM(FLAG)               (*(uint32_t*)0x40013800 |= FLAG)
#define Get_SYSCFG_PMC(FLAG)                 (*(uint32_t*)0x40013804 |= FLAG)
#define Get_SYSCFG_EXTICR1(FLAG)             (*(uint32_t*)0x40013808 |= FLAG)
#define Get_SYSCFG_EXTICR2(FLAG)             (*(uint32_t*)0x4001380c |= FLAG)
#define Get_SYSCFG_EXTICR3(FLAG)             (*(uint32_t*)0x40013810 |= FLAG)
#define Get_SYSCFG_EXTICR4(FLAG)             (*(uint32_t*)0x40013814 |= FLAG)
#define Get_SYSCFG_CMPCR(FLAG)               (*(uint32_t*)0x40013820 |= FLAG)
#define Set_SYSCFG_MEMRM(FLAG)               (*(uint32_t*)0x40013800 &= FLAG)
#define Clr_SYSCFG_MEMRM(FLAG)               (*(uint32_t*)0x40013800 |= ~FLAG)
#define Set_SYSCFG_PMC(FLAG)                 (*(uint32_t*)0x40013804 &= FLAG)
#define Clr_SYSCFG_PMC(FLAG)                 (*(uint32_t*)0x40013804 |= ~FLAG)
#define Set_SYSCFG_EXTICR1(FLAG)             (*(uint32_t*)0x40013808 &= FLAG)
#define Clr_SYSCFG_EXTICR1(FLAG)             (*(uint32_t*)0x40013808 |= ~FLAG)
#define Set_SYSCFG_EXTICR2(FLAG)             (*(uint32_t*)0x4001380c &= FLAG)
#define Clr_SYSCFG_EXTICR2(FLAG)             (*(uint32_t*)0x4001380c |= ~FLAG)
#define Set_SYSCFG_EXTICR3(FLAG)             (*(uint32_t*)0x40013810 &= FLAG)
#define Clr_SYSCFG_EXTICR3(FLAG)             (*(uint32_t*)0x40013810 |= ~FLAG)
#define Set_SYSCFG_EXTICR4(FLAG)             (*(uint32_t*)0x40013814 &= FLAG)
#define Clr_SYSCFG_EXTICR4(FLAG)             (*(uint32_t*)0x40013814 |= ~FLAG)
#define Set_SYSCFG_CMPCR(FLAG)               (*(uint32_t*)0x40013820 &= FLAG)
#define Clr_SYSCFG_CMPCR(FLAG)               (*(uint32_t*)0x40013820 |= ~FLAG)
#define  _SYSCFG_MEMRM_MEM_MODE                              (0x7 << 0)    // Memory mapping selection
#define  _SYSCFG_MEMRM_FB_MODE                               (0x1 << 8)    // Flash bank mode selection
#define  _SYSCFG_MEMRM_SWP_FMC                               (0x3 << 10)    // FMC memory mapping swap
#define  _SYSCFG_PMC_MII_RMII_SEL                            (0x1 << 23)    // Ethernet PHY interface selection
#define  _SYSCFG_PMC_ADC1DC2                                 (0x1 << 16)    // ADC1DC2
#define  _SYSCFG_PMC_ADC2DC2                                 (0x1 << 17)    // ADC2DC2
#define  _SYSCFG_PMC_ADC3DC2                                 (0x1 << 18)    // ADC3DC2
#define  _SYSCFG_EXTICR1_EXTI3                               (0xf << 12)    // EXTI x configuration (x = 0 to 3)
#define  _SYSCFG_EXTICR1_EXTI2                               (0xf << 8)    // EXTI x configuration (x = 0 to 3)
#define  _SYSCFG_EXTICR1_EXTI1                               (0xf << 4)    // EXTI x configuration (x = 0 to 3)
#define  _SYSCFG_EXTICR1_EXTI0                               (0xf << 0)    // EXTI x configuration (x = 0 to 3)
#define  _SYSCFG_EXTICR2_EXTI7                               (0xf << 12)    // EXTI x configuration (x = 4 to 7)
#define  _SYSCFG_EXTICR2_EXTI6                               (0xf << 8)    // EXTI x configuration (x = 4 to 7)
#define  _SYSCFG_EXTICR2_EXTI5                               (0xf << 4)    // EXTI x configuration (x = 4 to 7)
#define  _SYSCFG_EXTICR2_EXTI4                               (0xf << 0)    // EXTI x configuration (x = 4 to 7)
#define  _SYSCFG_EXTICR3_EXTI11                              (0xf << 12)    // EXTI x configuration (x = 8 to 11)
#define  _SYSCFG_EXTICR3_EXTI10                              (0xf << 8)    // EXTI10
#define  _SYSCFG_EXTICR3_EXTI9                               (0xf << 4)    // EXTI x configuration (x = 8 to 11)
#define  _SYSCFG_EXTICR3_EXTI8                               (0xf << 0)    // EXTI x configuration (x = 8 to 11)
#define  _SYSCFG_EXTICR4_EXTI15                              (0xf << 12)    // EXTI x configuration (x = 12 to 15)
#define  _SYSCFG_EXTICR4_EXTI14                              (0xf << 8)    // EXTI x configuration (x = 12 to 15)
#define  _SYSCFG_EXTICR4_EXTI13                              (0xf << 4)    // EXTI x configuration (x = 12 to 15)
#define  _SYSCFG_EXTICR4_EXTI12                              (0xf << 0)    // EXTI x configuration (x = 12 to 15)
#define  _SYSCFG_CMPCR_READY                                 (0x1 << 8)    // READY
#define  _SYSCFG_CMPCR_CMP_PD                                (0x1 << 0)    // Compensation cell power-down
　
　drivers/inc/stm32f767xx_WWDG.h
#define Get_WWDG_CR(FLAG)                    (*(uint32_t*)0x40002c00 |= FLAG)
#define Get_WWDG_CFR(FLAG)                   (*(uint32_t*)0x40002c04 |= FLAG)
#define Get_WWDG_SR(FLAG)                    (*(uint32_t*)0x40002c08 |= FLAG)
#define Set_WWDG_CR(FLAG)                    (*(uint32_t*)0x40002c00 &= FLAG)
#define Clr_WWDG_CR(FLAG)                    (*(uint32_t*)0x40002c00 |= ~FLAG)
#define Set_WWDG_CFR(FLAG)                   (*(uint32_t*)0x40002c04 &= FLAG)
#define Clr_WWDG_CFR(FLAG)                   (*(uint32_t*)0x40002c04 |= ~FLAG)
#define Set_WWDG_SR(FLAG)                    (*(uint32_t*)0x40002c08 &= FLAG)
#define Clr_WWDG_SR(FLAG)                    (*(uint32_t*)0x40002c08 |= ~FLAG)
#define  _WWDG_CR_WDGA                                       (0x1 << 7)    // Activation bit
#define  _WWDG_CR_T                                          (0x7f << 0)    // 7-bit counter (MSB to LSB)
#define  _WWDG_CFR_EWI                                       (0x1 << 9)    // Early wakeup interrupt
#define  _WWDG_CFR_WDGTB1                                    (0x1 << 8)    // Timer base
#define  _WWDG_CFR_WDGTB0                                    (0x1 << 7)    // Timer base
#define  _WWDG_CFR_W                                         (0x7f << 0)    // 7-bit window value
#define  _WWDG_SR_EWIF                                       (0x1 << 0)    // Early wakeup interrupt flag
　
　drivers/inc/stm32f767xx_SPDIF_RX.h
#define Get_SPDIFRX_CR(FLAG)                 (*(uint32_t*)0x40004000 |= FLAG)
#define Get_SPDIFRX_IMR(FLAG)                (*(uint32_t*)0x40004004 |= FLAG)
#define Get_SPDIFRX_SR(FLAG)                 (*(uint32_t*)0x40004008 |= FLAG)
#define Get_SPDIFRX_IFCR(FLAG)               (*(uint32_t*)0x4000400c |= FLAG)
#define Get_SPDIFRX_DR(FLAG)                 (*(uint32_t*)0x40004010 |= FLAG)
#define Get_SPDIFRX_CSR(FLAG)                (*(uint32_t*)0x40004014 |= FLAG)
#define Get_SPDIFRX_DIR(FLAG)                (*(uint32_t*)0x40004018 |= FLAG)
#define Set_SPDIFRX_CR(FLAG)                 (*(uint32_t*)0x40004000 &= FLAG)
#define Clr_SPDIFRX_CR(FLAG)                 (*(uint32_t*)0x40004000 |= ~FLAG)
#define Set_SPDIFRX_IMR(FLAG)                (*(uint32_t*)0x40004004 &= FLAG)
#define Clr_SPDIFRX_IMR(FLAG)                (*(uint32_t*)0x40004004 |= ~FLAG)
#define Set_SPDIFRX_SR(FLAG)                 (*(uint32_t*)0x40004008 &= FLAG)
#define Clr_SPDIFRX_SR(FLAG)                 (*(uint32_t*)0x40004008 |= ~FLAG)
#define Set_SPDIFRX_IFCR(FLAG)               (*(uint32_t*)0x4000400c &= FLAG)
#define Clr_SPDIFRX_IFCR(FLAG)               (*(uint32_t*)0x4000400c |= ~FLAG)
#define Set_SPDIFRX_DR(FLAG)                 (*(uint32_t*)0x40004010 &= FLAG)
#define Clr_SPDIFRX_DR(FLAG)                 (*(uint32_t*)0x40004010 |= ~FLAG)
#define Set_SPDIFRX_CSR(FLAG)                (*(uint32_t*)0x40004014 &= FLAG)
#define Clr_SPDIFRX_CSR(FLAG)                (*(uint32_t*)0x40004014 |= ~FLAG)
#define Set_SPDIFRX_DIR(FLAG)                (*(uint32_t*)0x40004018 &= FLAG)
#define Clr_SPDIFRX_DIR(FLAG)                (*(uint32_t*)0x40004018 |= ~FLAG)
#define  _SPDIFRX_CR_SPDIFEN                                 (0x3 << 0)    // Peripheral Block Enable
#define  _SPDIFRX_CR_RXDMAEN                                 (0x1 << 2)    // Receiver DMA ENable for data flow
#define  _SPDIFRX_CR_RXSTEO                                  (0x1 << 3)    // STerEO Mode
#define  _SPDIFRX_CR_DRFMT                                   (0x3 << 4)    // RX Data format
#define  _SPDIFRX_CR_PMSK                                    (0x1 << 6)    // Mask Parity error bit
#define  _SPDIFRX_CR_VMSK                                    (0x1 << 7)    // Mask of Validity bit
#define  _SPDIFRX_CR_CUMSK                                   (0x1 << 8)    // Mask of channel status and user bits
#define  _SPDIFRX_CR_PTMSK                                   (0x1 << 9)    // Mask of Preamble Type bits
#define  _SPDIFRX_CR_CBDMAEN                                 (0x1 << 10)    // Control Buffer DMA ENable for control flow
#define  _SPDIFRX_CR_CHSEL                                   (0x1 << 11)    // Channel Selection
#define  _SPDIFRX_CR_NBTR                                    (0x3 << 12)    // Maximum allowed re-tries during synchronization phase
#define  _SPDIFRX_CR_WFA                                     (0x1 << 14)    // Wait For Activity
#define  _SPDIFRX_CR_INSEL                                   (0x7 << 16)    // input selection
#define  _SPDIFRX_IMR_RXNEIE                                 (0x1 << 0)    // RXNE interrupt enable
#define  _SPDIFRX_IMR_CSRNEIE                                (0x1 << 1)    // Control Buffer Ready Interrupt Enable
#define  _SPDIFRX_IMR_PERRIE                                 (0x1 << 2)    // Parity error interrupt enable
#define  _SPDIFRX_IMR_OVRIE                                  (0x1 << 3)    // Overrun error Interrupt Enable
#define  _SPDIFRX_IMR_SBLKIE                                 (0x1 << 4)    // Synchronization Block Detected Interrupt Enable
#define  _SPDIFRX_IMR_SYNCDIE                                (0x1 << 5)    // Synchronization Done
#define  _SPDIFRX_IMR_IFEIE                                  (0x1 << 6)    // Serial Interface Error Interrupt Enable
#define  _SPDIFRX_SR_RXNE                                    (0x1 << 0)    // Read data register not empty
#define  _SPDIFRX_SR_CSRNE                                   (0x1 << 1)    // Control Buffer register is not empty
#define  _SPDIFRX_SR_PERR                                    (0x1 << 2)    // Parity error
#define  _SPDIFRX_SR_OVR                                     (0x1 << 3)    // Overrun error
#define  _SPDIFRX_SR_SBD                                     (0x1 << 4)    // Synchronization Block Detected
#define  _SPDIFRX_SR_SYNCD                                   (0x1 << 5)    // Synchronization Done
#define  _SPDIFRX_SR_FERR                                    (0x1 << 6)    // Framing error
#define  _SPDIFRX_SR_SERR                                    (0x1 << 7)    // Synchronization error
#define  _SPDIFRX_SR_TERR                                    (0x1 << 8)    // Time-out error
#define  _SPDIFRX_SR_WIDTH5                                  (0x7fff << 16)    // Duration of 5 symbols counted with SPDIF_CLK
#define  _SPDIFRX_IFCR_PERRCF                                (0x1 << 2)    // Clears the Parity error flag
#define  _SPDIFRX_IFCR_OVRCF                                 (0x1 << 3)    // Clears the Overrun error flag
#define  _SPDIFRX_IFCR_SBDCF                                 (0x1 << 4)    // Clears the Synchronization Block Detected flag
#define  _SPDIFRX_IFCR_SYNCDCF                               (0x1 << 5)    // Clears the Synchronization Done flag
#define  _SPDIFRX_DR_DR                                      (0xffffff << 0)    // Parity Error bit
#define  _SPDIFRX_DR_PE                                      (0x1 << 24)    // Parity Error bit
#define  _SPDIFRX_DR_V                                       (0x1 << 25)    // Validity bit
#define  _SPDIFRX_DR_U                                       (0x1 << 26)    // User bit
#define  _SPDIFRX_DR_C                                       (0x1 << 27)    // Channel Status bit
#define  _SPDIFRX_DR_PT                                      (0x3 << 28)    // Preamble Type
#define  _SPDIFRX_CSR_USR                                    (0xffff << 0)    // User data information
#define  _SPDIFRX_CSR_CS                                     (0xff << 16)    // Channel A status information
#define  _SPDIFRX_CSR_SOB                                    (0x1 << 24)    // Start Of Block
#define  _SPDIFRX_DIR_THI                                    (0x1fff << 0)    // Threshold HIGH
#define  _SPDIFRX_DIR_TLO                                    (0x1fff << 16)    // Threshold LOW
　
　drivers/inc/stm32f767xx_DBGMCU.h
#define Get_DBGMCU_IDCODE(FLAG)              (*(uint32_t*)0xe0042000 |= FLAG)
#define Set_DBGMCU_IDCODE(FLAG)              (*(uint32_t*)0xe0042000 &= FLAG)
#define Clr_DBGMCU_IDCODE(FLAG)              (*(uint32_t*)0xe0042000 |= ~FLAG)
#define  _DBGMCU_IDCODE_DEV_ID                               (0xfff << 0)    // Device identifier
#define  _DBGMCU_IDCODE_REV_ID                               (0xffff << 16)    // Revision identifie
　
　drivers/inc/stm32f767xx_QUADSPI.h
#define Get_QUADSPI_CR(FLAG)                 (*(uint32_t*)0xa0001000 |= FLAG)
#define Get_QUADSPI_DCR(FLAG)                (*(uint32_t*)0xa0001004 |= FLAG)
#define Get_QUADSPI_SR(FLAG)                 (*(uint32_t*)0xa0001008 |= FLAG)
#define Get_QUADSPI_FCR(FLAG)                (*(uint32_t*)0xa000100c |= FLAG)
#define Get_QUADSPI_DLR(FLAG)                (*(uint32_t*)0xa0001010 |= FLAG)
#define Get_QUADSPI_CCR(FLAG)                (*(uint32_t*)0xa0001014 |= FLAG)
#define Get_QUADSPI_AR(FLAG)                 (*(uint32_t*)0xa0001018 |= FLAG)
#define Get_QUADSPI_ABR(FLAG)                (*(uint32_t*)0xa000101c |= FLAG)
#define Get_QUADSPI_DR(FLAG)                 (*(uint32_t*)0xa0001020 |= FLAG)
#define Get_QUADSPI_PSMKR(FLAG)              (*(uint32_t*)0xa0001024 |= FLAG)
#define Get_QUADSPI_PSMAR(FLAG)              (*(uint32_t*)0xa0001028 |= FLAG)
#define Get_QUADSPI_PIR(FLAG)                (*(uint32_t*)0xa000102c |= FLAG)
#define Get_QUADSPI_LPTR(FLAG)               (*(uint32_t*)0xa0001030 |= FLAG)
#define Set_QUADSPI_CR(FLAG)                 (*(uint32_t*)0xa0001000 &= FLAG)
#define Clr_QUADSPI_CR(FLAG)                 (*(uint32_t*)0xa0001000 |= ~FLAG)
#define Set_QUADSPI_DCR(FLAG)                (*(uint32_t*)0xa0001004 &= FLAG)
#define Clr_QUADSPI_DCR(FLAG)                (*(uint32_t*)0xa0001004 |= ~FLAG)
#define Set_QUADSPI_SR(FLAG)                 (*(uint32_t*)0xa0001008 &= FLAG)
#define Clr_QUADSPI_SR(FLAG)                 (*(uint32_t*)0xa0001008 |= ~FLAG)
#define Set_QUADSPI_FCR(FLAG)                (*(uint32_t*)0xa000100c &= FLAG)
#define Clr_QUADSPI_FCR(FLAG)                (*(uint32_t*)0xa000100c |= ~FLAG)
#define Set_QUADSPI_DLR(FLAG)                (*(uint32_t*)0xa0001010 &= FLAG)
#define Clr_QUADSPI_DLR(FLAG)                (*(uint32_t*)0xa0001010 |= ~FLAG)
#define Set_QUADSPI_CCR(FLAG)                (*(uint32_t*)0xa0001014 &= FLAG)
#define Clr_QUADSPI_CCR(FLAG)                (*(uint32_t*)0xa0001014 |= ~FLAG)
#define Set_QUADSPI_AR(FLAG)                 (*(uint32_t*)0xa0001018 &= FLAG)
#define Clr_QUADSPI_AR(FLAG)                 (*(uint32_t*)0xa0001018 |= ~FLAG)
#define Set_QUADSPI_ABR(FLAG)                (*(uint32_t*)0xa000101c &= FLAG)
#define Clr_QUADSPI_ABR(FLAG)                (*(uint32_t*)0xa000101c |= ~FLAG)
#define Set_QUADSPI_DR(FLAG)                 (*(uint32_t*)0xa0001020 &= FLAG)
#define Clr_QUADSPI_DR(FLAG)                 (*(uint32_t*)0xa0001020 |= ~FLAG)
#define Set_QUADSPI_PSMKR(FLAG)              (*(uint32_t*)0xa0001024 &= FLAG)
#define Clr_QUADSPI_PSMKR(FLAG)              (*(uint32_t*)0xa0001024 |= ~FLAG)
#define Set_QUADSPI_PSMAR(FLAG)              (*(uint32_t*)0xa0001028 &= FLAG)
#define Clr_QUADSPI_PSMAR(FLAG)              (*(uint32_t*)0xa0001028 |= ~FLAG)
#define Set_QUADSPI_PIR(FLAG)                (*(uint32_t*)0xa000102c &= FLAG)
#define Clr_QUADSPI_PIR(FLAG)                (*(uint32_t*)0xa000102c |= ~FLAG)
#define Set_QUADSPI_LPTR(FLAG)               (*(uint32_t*)0xa0001030 &= FLAG)
#define Clr_QUADSPI_LPTR(FLAG)               (*(uint32_t*)0xa0001030 |= ~FLAG)
#define  _QUADSPI_CR_PRESCALER                               (0xff << 24)    // Clock prescaler
#define  _QUADSPI_CR_PMM                                     (0x1 << 23)    // Polling match mode
#define  _QUADSPI_CR_APMS                                    (0x1 << 22)    // Automatic poll mode stop
#define  _QUADSPI_CR_TOIE                                    (0x1 << 20)    // TimeOut interrupt enable
#define  _QUADSPI_CR_SMIE                                    (0x1 << 19)    // Status match interrupt enable
#define  _QUADSPI_CR_FTIE                                    (0x1 << 18)    // FIFO threshold interrupt enable
#define  _QUADSPI_CR_TCIE                                    (0x1 << 17)    // Transfer complete interrupt enable
#define  _QUADSPI_CR_TEIE                                    (0x1 << 16)    // Transfer error interrupt enable
#define  _QUADSPI_CR_FTHRES                                  (0x1f << 8)    // IFO threshold level
#define  _QUADSPI_CR_FSEL                                    (0x1 << 7)    // FLASH memory selection
#define  _QUADSPI_CR_DFM                                     (0x1 << 6)    // Dual-flash mode
#define  _QUADSPI_CR_SSHIFT                                  (0x1 << 4)    // Sample shift
#define  _QUADSPI_CR_TCEN                                    (0x1 << 3)    // Timeout counter enable
#define  _QUADSPI_CR_DMAEN                                   (0x1 << 2)    // DMA enable
#define  _QUADSPI_CR_ABORT                                   (0x1 << 1)    // Abort request
#define  _QUADSPI_CR_EN                                      (0x1 << 0)    // Enable
#define  _QUADSPI_DCR_FSIZE                                  (0x1f << 16)    // FLASH memory size
#define  _QUADSPI_DCR_CSHT                                   (0x7 << 8)    // Chip select high time
#define  _QUADSPI_DCR_CKMODE                                 (0x1 << 0)    // Mode 0 / mode 3
#define  _QUADSPI_SR_FLEVEL                                  (0x7f << 8)    // FIFO level
#define  _QUADSPI_SR_BUSY                                    (0x1 << 5)    // Busy
#define  _QUADSPI_SR_TOF                                     (0x1 << 4)    // Timeout flag
#define  _QUADSPI_SR_SMF                                     (0x1 << 3)    // Status match flag
#define  _QUADSPI_SR_FTF                                     (0x1 << 2)    // FIFO threshold flag
#define  _QUADSPI_SR_TCF                                     (0x1 << 1)    // Transfer complete flag
#define  _QUADSPI_SR_TEF                                     (0x1 << 0)    // Transfer error flag
#define  _QUADSPI_FCR_CTOF                                   (0x1 << 4)    // Clear timeout flag
#define  _QUADSPI_FCR_CSMF                                   (0x1 << 3)    // Clear status match flag
#define  _QUADSPI_FCR_CTCF                                   (0x1 << 1)    // Clear transfer complete flag
#define  _QUADSPI_FCR_CTEF                                   (0x1 << 0)    // Clear transfer error flag
#define  _QUADSPI_DLR_DL                                     (0xffffffff << 0)    // Data length
#define  _QUADSPI_CCR_DDRM                                   (0x1 << 31)    // Double data rate mode
#define  _QUADSPI_CCR_DHHC                                   (0x1 << 30)    // DDR hold half cycle
#define  _QUADSPI_CCR_SIOO                                   (0x1 << 28)    // Send instruction only once mode
#define  _QUADSPI_CCR_FMODE                                  (0x3 << 26)    // Functional mode
#define  _QUADSPI_CCR_DMODE                                  (0x3 << 24)    // Data mode
#define  _QUADSPI_CCR_DCYC                                   (0x1f << 18)    // Number of dummy cycles
#define  _QUADSPI_CCR_ABSIZE                                 (0x3 << 16)    // Alternate bytes size
#define  _QUADSPI_CCR_ABMODE                                 (0x3 << 14)    // Alternate bytes mode
#define  _QUADSPI_CCR_ADSIZE                                 (0x3 << 12)    // Address size
#define  _QUADSPI_CCR_ADMODE                                 (0x3 << 10)    // Address mode
#define  _QUADSPI_CCR_IMODE                                  (0x3 << 8)    // Instruction mode
#define  _QUADSPI_CCR_INSTRUCTION                            (0xff << 0)    // Instruction
#define  _QUADSPI_AR_ADDRESS                                 (0xffffffff << 0)    // Address
#define  _QUADSPI_ABR_ALTERNATE                              (0xffffffff << 0)    // ALTERNATE
#define  _QUADSPI_DR_DATA                                    (0xffffffff << 0)    // Data
#define  _QUADSPI_PSMKR_MASK                                 (0xffffffff << 0)    // Status mask
#define  _QUADSPI_PSMAR_MATCH                                (0xffffffff << 0)    // Status match
#define  _QUADSPI_PIR_INTERVAL                               (0xffff << 0)    // Polling interval
#define  _QUADSPI_LPTR_TIMEOUT                               (0xffff << 0)    // Timeout period
　
　drivers/inc/stm32f767xx_DSI.h
#define Get_DSI_DSI_VR(FLAG)                 (*(uint32_t*)0x40016c00 |= FLAG)
#define Get_DSI_DSI_CR(FLAG)                 (*(uint32_t*)0x40016c04 |= FLAG)
#define Get_DSI_DSI_CCR(FLAG)                (*(uint32_t*)0x40016c08 |= FLAG)
#define Get_DSI_DSI_LVCIDR(FLAG)             (*(uint32_t*)0x40016c0c |= FLAG)
#define Get_DSI_DSI_LCOLCR(FLAG)             (*(uint32_t*)0x40016c10 |= FLAG)
#define Get_DSI_DSI_LPCR(FLAG)               (*(uint32_t*)0x40016c14 |= FLAG)
#define Get_DSI_DSI_LPMCR(FLAG)              (*(uint32_t*)0x40016c18 |= FLAG)
#define Get_DSI_DSI_PCR(FLAG)                (*(uint32_t*)0x40016c2c |= FLAG)
#define Get_DSI_DSI_GVCIDR(FLAG)             (*(uint32_t*)0x40016c30 |= FLAG)
#define Get_DSI_DSI_MCR(FLAG)                (*(uint32_t*)0x40016c34 |= FLAG)
#define Get_DSI_DSI_VMCR(FLAG)               (*(uint32_t*)0x40016c38 |= FLAG)
#define Get_DSI_DSI_VPCR(FLAG)               (*(uint32_t*)0x40016c3c |= FLAG)
#define Get_DSI_DSI_VCCR(FLAG)               (*(uint32_t*)0x40016c40 |= FLAG)
#define Get_DSI_DSI_VNPCR(FLAG)              (*(uint32_t*)0x40016c44 |= FLAG)
#define Get_DSI_DSI_VHSACR(FLAG)             (*(uint32_t*)0x40016c48 |= FLAG)
#define Get_DSI_DSI_VHBPCR(FLAG)             (*(uint32_t*)0x40016c4c |= FLAG)
#define Get_DSI_DSI_VLCR(FLAG)               (*(uint32_t*)0x40016c50 |= FLAG)
#define Get_DSI_DSI_VVSACR(FLAG)             (*(uint32_t*)0x40016c54 |= FLAG)
#define Get_DSI_DSI_VVBPCR(FLAG)             (*(uint32_t*)0x40016c58 |= FLAG)
#define Get_DSI_DSI_VVFPCR(FLAG)             (*(uint32_t*)0x40016c5c |= FLAG)
#define Get_DSI_DSI_VVACR(FLAG)              (*(uint32_t*)0x40016c60 |= FLAG)
#define Get_DSI_DSI_LCCR(FLAG)               (*(uint32_t*)0x40016c64 |= FLAG)
#define Get_DSI_DSI_CMCR(FLAG)               (*(uint32_t*)0x40016c68 |= FLAG)
#define Get_DSI_DSI_GHCR(FLAG)               (*(uint32_t*)0x40016c6c |= FLAG)
#define Get_DSI_DSI_GPDR(FLAG)               (*(uint32_t*)0x40016c70 |= FLAG)
#define Get_DSI_DSI_GPSR(FLAG)               (*(uint32_t*)0x40016c74 |= FLAG)
#define Get_DSI_DSI_TCCR0(FLAG)              (*(uint32_t*)0x40016c78 |= FLAG)
#define Get_DSI_DSI_TCCR1(FLAG)              (*(uint32_t*)0x40016c7c |= FLAG)
#define Get_DSI_DSI_TCCR2(FLAG)              (*(uint32_t*)0x40016c80 |= FLAG)
#define Get_DSI_DSI_TCCR3(FLAG)              (*(uint32_t*)0x40016c84 |= FLAG)
#define Get_DSI_DSI_TCCR4(FLAG)              (*(uint32_t*)0x40016c88 |= FLAG)
#define Get_DSI_DSI_TCCR5(FLAG)              (*(uint32_t*)0x40016c8c |= FLAG)
#define Get_DSI_DSI_CLCR(FLAG)               (*(uint32_t*)0x40016c94 |= FLAG)
#define Get_DSI_DSI_CLTCR(FLAG)              (*(uint32_t*)0x40016c98 |= FLAG)
#define Get_DSI_DSI_DLTCR(FLAG)              (*(uint32_t*)0x40016c9c |= FLAG)
#define Get_DSI_DSI_PCTLR(FLAG)              (*(uint32_t*)0x40016ca0 |= FLAG)
#define Get_DSI_DSI_PCONFR(FLAG)             (*(uint32_t*)0x40016ca4 |= FLAG)
#define Get_DSI_DSI_PUCR(FLAG)               (*(uint32_t*)0x40016ca8 |= FLAG)
#define Get_DSI_DSI_PTTCR(FLAG)              (*(uint32_t*)0x40016cac |= FLAG)
#define Get_DSI_DSI_PSR(FLAG)                (*(uint32_t*)0x40016cb0 |= FLAG)
#define Get_DSI_DSI_ISR0(FLAG)               (*(uint32_t*)0x40016cbc |= FLAG)
#define Get_DSI_DSI_ISR1(FLAG)               (*(uint32_t*)0x40016cc0 |= FLAG)
#define Get_DSI_DSI_IER0(FLAG)               (*(uint32_t*)0x40016cc4 |= FLAG)
#define Get_DSI_DSI_IER1(FLAG)               (*(uint32_t*)0x40016cc8 |= FLAG)
#define Get_DSI_DSI_FIR0(FLAG)               (*(uint32_t*)0x40016cd8 |= FLAG)
#define Get_DSI_DSI_FIR1(FLAG)               (*(uint32_t*)0x40016cdc |= FLAG)
#define Get_DSI_DSI_VSCR(FLAG)               (*(uint32_t*)0x40016d00 |= FLAG)
#define Get_DSI_DSI_LCVCIDR(FLAG)            (*(uint32_t*)0x40016d0c |= FLAG)
#define Get_DSI_DSI_LCCCR(FLAG)              (*(uint32_t*)0x40016d10 |= FLAG)
#define Get_DSI_DSI_LPMCCR(FLAG)             (*(uint32_t*)0x40016d18 |= FLAG)
#define Get_DSI_DSI_VMCCR(FLAG)              (*(uint32_t*)0x40016d38 |= FLAG)
#define Get_DSI_DSI_VPCCR(FLAG)              (*(uint32_t*)0x40016d3c |= FLAG)
#define Get_DSI_DSI_VCCCR(FLAG)              (*(uint32_t*)0x40016d40 |= FLAG)
#define Get_DSI_DSI_VNPCCR(FLAG)             (*(uint32_t*)0x40016d44 |= FLAG)
#define Get_DSI_DSI_VHSACCR(FLAG)            (*(uint32_t*)0x40016d48 |= FLAG)
#define Get_DSI_DSI_VHBPCCR(FLAG)            (*(uint32_t*)0x40016d4c |= FLAG)
#define Get_DSI_DSI_VLCCR(FLAG)              (*(uint32_t*)0x40016d50 |= FLAG)
#define Get_DSI_DSI_VVSACCR(FLAG)            (*(uint32_t*)0x40016d54 |= FLAG)
#define Get_DSI_DSI_VVBPCCR(FLAG)            (*(uint32_t*)0x40016d58 |= FLAG)
#define Get_DSI_DSI_VVFPCCR(FLAG)            (*(uint32_t*)0x40016d5c |= FLAG)
#define Get_DSI_DSI_VVACCR(FLAG)             (*(uint32_t*)0x40016d60 |= FLAG)
#define Get_DSI_DSI_WCFGR(FLAG)              (*(uint32_t*)0x40017000 |= FLAG)
#define Get_DSI_DSI_WCR(FLAG)                (*(uint32_t*)0x40017004 |= FLAG)
#define Get_DSI_DSI_WIER(FLAG)               (*(uint32_t*)0x40017008 |= FLAG)
#define Get_DSI_DSI_WISR(FLAG)               (*(uint32_t*)0x4001700c |= FLAG)
#define Get_DSI_DSI_WIFCR(FLAG)              (*(uint32_t*)0x40017010 |= FLAG)
#define Get_DSI_DSI_WPCR1(FLAG)              (*(uint32_t*)0x40017018 |= FLAG)
#define Get_DSI_DSI_WPCR2(FLAG)              (*(uint32_t*)0x4001701c |= FLAG)
#define Get_DSI_DSI_WPCR3(FLAG)              (*(uint32_t*)0x40017020 |= FLAG)
#define Get_DSI_DSI_WPCR4(FLAG)              (*(uint32_t*)0x40017024 |= FLAG)
#define Get_DSI_DSI_WPCR5(FLAG)              (*(uint32_t*)0x40017028 |= FLAG)
#define Get_DSI_DSI_WRPCR(FLAG)              (*(uint32_t*)0x40017030 |= FLAG)
#define Set_DSI_DSI_VR(FLAG)                 (*(uint32_t*)0x40016c00 &= FLAG)
#define Clr_DSI_DSI_VR(FLAG)                 (*(uint32_t*)0x40016c00 |= ~FLAG)
#define Set_DSI_DSI_CR(FLAG)                 (*(uint32_t*)0x40016c04 &= FLAG)
#define Clr_DSI_DSI_CR(FLAG)                 (*(uint32_t*)0x40016c04 |= ~FLAG)
#define Set_DSI_DSI_CCR(FLAG)                (*(uint32_t*)0x40016c08 &= FLAG)
#define Clr_DSI_DSI_CCR(FLAG)                (*(uint32_t*)0x40016c08 |= ~FLAG)
#define Set_DSI_DSI_LVCIDR(FLAG)             (*(uint32_t*)0x40016c0c &= FLAG)
#define Clr_DSI_DSI_LVCIDR(FLAG)             (*(uint32_t*)0x40016c0c |= ~FLAG)
#define Set_DSI_DSI_LCOLCR(FLAG)             (*(uint32_t*)0x40016c10 &= FLAG)
#define Clr_DSI_DSI_LCOLCR(FLAG)             (*(uint32_t*)0x40016c10 |= ~FLAG)
#define Set_DSI_DSI_LPCR(FLAG)               (*(uint32_t*)0x40016c14 &= FLAG)
#define Clr_DSI_DSI_LPCR(FLAG)               (*(uint32_t*)0x40016c14 |= ~FLAG)
#define Set_DSI_DSI_LPMCR(FLAG)              (*(uint32_t*)0x40016c18 &= FLAG)
#define Clr_DSI_DSI_LPMCR(FLAG)              (*(uint32_t*)0x40016c18 |= ~FLAG)
#define Set_DSI_DSI_PCR(FLAG)                (*(uint32_t*)0x40016c2c &= FLAG)
#define Clr_DSI_DSI_PCR(FLAG)                (*(uint32_t*)0x40016c2c |= ~FLAG)
#define Set_DSI_DSI_GVCIDR(FLAG)             (*(uint32_t*)0x40016c30 &= FLAG)
#define Clr_DSI_DSI_GVCIDR(FLAG)             (*(uint32_t*)0x40016c30 |= ~FLAG)
#define Set_DSI_DSI_MCR(FLAG)                (*(uint32_t*)0x40016c34 &= FLAG)
#define Clr_DSI_DSI_MCR(FLAG)                (*(uint32_t*)0x40016c34 |= ~FLAG)
#define Set_DSI_DSI_VMCR(FLAG)               (*(uint32_t*)0x40016c38 &= FLAG)
#define Clr_DSI_DSI_VMCR(FLAG)               (*(uint32_t*)0x40016c38 |= ~FLAG)
#define Set_DSI_DSI_VPCR(FLAG)               (*(uint32_t*)0x40016c3c &= FLAG)
#define Clr_DSI_DSI_VPCR(FLAG)               (*(uint32_t*)0x40016c3c |= ~FLAG)
#define Set_DSI_DSI_VCCR(FLAG)               (*(uint32_t*)0x40016c40 &= FLAG)
#define Clr_DSI_DSI_VCCR(FLAG)               (*(uint32_t*)0x40016c40 |= ~FLAG)
#define Set_DSI_DSI_VNPCR(FLAG)              (*(uint32_t*)0x40016c44 &= FLAG)
#define Clr_DSI_DSI_VNPCR(FLAG)              (*(uint32_t*)0x40016c44 |= ~FLAG)
#define Set_DSI_DSI_VHSACR(FLAG)             (*(uint32_t*)0x40016c48 &= FLAG)
#define Clr_DSI_DSI_VHSACR(FLAG)             (*(uint32_t*)0x40016c48 |= ~FLAG)
#define Set_DSI_DSI_VHBPCR(FLAG)             (*(uint32_t*)0x40016c4c &= FLAG)
#define Clr_DSI_DSI_VHBPCR(FLAG)             (*(uint32_t*)0x40016c4c |= ~FLAG)
#define Set_DSI_DSI_VLCR(FLAG)               (*(uint32_t*)0x40016c50 &= FLAG)
#define Clr_DSI_DSI_VLCR(FLAG)               (*(uint32_t*)0x40016c50 |= ~FLAG)
#define Set_DSI_DSI_VVSACR(FLAG)             (*(uint32_t*)0x40016c54 &= FLAG)
#define Clr_DSI_DSI_VVSACR(FLAG)             (*(uint32_t*)0x40016c54 |= ~FLAG)
#define Set_DSI_DSI_VVBPCR(FLAG)             (*(uint32_t*)0x40016c58 &= FLAG)
#define Clr_DSI_DSI_VVBPCR(FLAG)             (*(uint32_t*)0x40016c58 |= ~FLAG)
#define Set_DSI_DSI_VVFPCR(FLAG)             (*(uint32_t*)0x40016c5c &= FLAG)
#define Clr_DSI_DSI_VVFPCR(FLAG)             (*(uint32_t*)0x40016c5c |= ~FLAG)
#define Set_DSI_DSI_VVACR(FLAG)              (*(uint32_t*)0x40016c60 &= FLAG)
#define Clr_DSI_DSI_VVACR(FLAG)              (*(uint32_t*)0x40016c60 |= ~FLAG)
#define Set_DSI_DSI_LCCR(FLAG)               (*(uint32_t*)0x40016c64 &= FLAG)
#define Clr_DSI_DSI_LCCR(FLAG)               (*(uint32_t*)0x40016c64 |= ~FLAG)
#define Set_DSI_DSI_CMCR(FLAG)               (*(uint32_t*)0x40016c68 &= FLAG)
#define Clr_DSI_DSI_CMCR(FLAG)               (*(uint32_t*)0x40016c68 |= ~FLAG)
#define Set_DSI_DSI_GHCR(FLAG)               (*(uint32_t*)0x40016c6c &= FLAG)
#define Clr_DSI_DSI_GHCR(FLAG)               (*(uint32_t*)0x40016c6c |= ~FLAG)
#define Set_DSI_DSI_GPDR(FLAG)               (*(uint32_t*)0x40016c70 &= FLAG)
#define Clr_DSI_DSI_GPDR(FLAG)               (*(uint32_t*)0x40016c70 |= ~FLAG)
#define Set_DSI_DSI_GPSR(FLAG)               (*(uint32_t*)0x40016c74 &= FLAG)
#define Clr_DSI_DSI_GPSR(FLAG)               (*(uint32_t*)0x40016c74 |= ~FLAG)
#define Set_DSI_DSI_TCCR0(FLAG)              (*(uint32_t*)0x40016c78 &= FLAG)
#define Clr_DSI_DSI_TCCR0(FLAG)              (*(uint32_t*)0x40016c78 |= ~FLAG)
#define Set_DSI_DSI_TCCR1(FLAG)              (*(uint32_t*)0x40016c7c &= FLAG)
#define Clr_DSI_DSI_TCCR1(FLAG)              (*(uint32_t*)0x40016c7c |= ~FLAG)
#define Set_DSI_DSI_TCCR2(FLAG)              (*(uint32_t*)0x40016c80 &= FLAG)
#define Clr_DSI_DSI_TCCR2(FLAG)              (*(uint32_t*)0x40016c80 |= ~FLAG)
#define Set_DSI_DSI_TCCR3(FLAG)              (*(uint32_t*)0x40016c84 &= FLAG)
#define Clr_DSI_DSI_TCCR3(FLAG)              (*(uint32_t*)0x40016c84 |= ~FLAG)
#define Set_DSI_DSI_TCCR4(FLAG)              (*(uint32_t*)0x40016c88 &= FLAG)
#define Clr_DSI_DSI_TCCR4(FLAG)              (*(uint32_t*)0x40016c88 |= ~FLAG)
#define Set_DSI_DSI_TCCR5(FLAG)              (*(uint32_t*)0x40016c8c &= FLAG)
#define Clr_DSI_DSI_TCCR5(FLAG)              (*(uint32_t*)0x40016c8c |= ~FLAG)
#define Set_DSI_DSI_CLCR(FLAG)               (*(uint32_t*)0x40016c94 &= FLAG)
#define Clr_DSI_DSI_CLCR(FLAG)               (*(uint32_t*)0x40016c94 |= ~FLAG)
#define Set_DSI_DSI_CLTCR(FLAG)              (*(uint32_t*)0x40016c98 &= FLAG)
#define Clr_DSI_DSI_CLTCR(FLAG)              (*(uint32_t*)0x40016c98 |= ~FLAG)
#define Set_DSI_DSI_DLTCR(FLAG)              (*(uint32_t*)0x40016c9c &= FLAG)
#define Clr_DSI_DSI_DLTCR(FLAG)              (*(uint32_t*)0x40016c9c |= ~FLAG)
#define Set_DSI_DSI_PCTLR(FLAG)              (*(uint32_t*)0x40016ca0 &= FLAG)
#define Clr_DSI_DSI_PCTLR(FLAG)              (*(uint32_t*)0x40016ca0 |= ~FLAG)
#define Set_DSI_DSI_PCONFR(FLAG)             (*(uint32_t*)0x40016ca4 &= FLAG)
#define Clr_DSI_DSI_PCONFR(FLAG)             (*(uint32_t*)0x40016ca4 |= ~FLAG)
#define Set_DSI_DSI_PUCR(FLAG)               (*(uint32_t*)0x40016ca8 &= FLAG)
#define Clr_DSI_DSI_PUCR(FLAG)               (*(uint32_t*)0x40016ca8 |= ~FLAG)
#define Set_DSI_DSI_PTTCR(FLAG)              (*(uint32_t*)0x40016cac &= FLAG)
#define Clr_DSI_DSI_PTTCR(FLAG)              (*(uint32_t*)0x40016cac |= ~FLAG)
#define Set_DSI_DSI_PSR(FLAG)                (*(uint32_t*)0x40016cb0 &= FLAG)
#define Clr_DSI_DSI_PSR(FLAG)                (*(uint32_t*)0x40016cb0 |= ~FLAG)
#define Set_DSI_DSI_ISR0(FLAG)               (*(uint32_t*)0x40016cbc &= FLAG)
#define Clr_DSI_DSI_ISR0(FLAG)               (*(uint32_t*)0x40016cbc |= ~FLAG)
#define Set_DSI_DSI_ISR1(FLAG)               (*(uint32_t*)0x40016cc0 &= FLAG)
#define Clr_DSI_DSI_ISR1(FLAG)               (*(uint32_t*)0x40016cc0 |= ~FLAG)
#define Set_DSI_DSI_IER0(FLAG)               (*(uint32_t*)0x40016cc4 &= FLAG)
#define Clr_DSI_DSI_IER0(FLAG)               (*(uint32_t*)0x40016cc4 |= ~FLAG)
#define Set_DSI_DSI_IER1(FLAG)               (*(uint32_t*)0x40016cc8 &= FLAG)
#define Clr_DSI_DSI_IER1(FLAG)               (*(uint32_t*)0x40016cc8 |= ~FLAG)
#define Set_DSI_DSI_FIR0(FLAG)               (*(uint32_t*)0x40016cd8 &= FLAG)
#define Clr_DSI_DSI_FIR0(FLAG)               (*(uint32_t*)0x40016cd8 |= ~FLAG)
#define Set_DSI_DSI_FIR1(FLAG)               (*(uint32_t*)0x40016cdc &= FLAG)
#define Clr_DSI_DSI_FIR1(FLAG)               (*(uint32_t*)0x40016cdc |= ~FLAG)
#define Set_DSI_DSI_VSCR(FLAG)               (*(uint32_t*)0x40016d00 &= FLAG)
#define Clr_DSI_DSI_VSCR(FLAG)               (*(uint32_t*)0x40016d00 |= ~FLAG)
#define Set_DSI_DSI_LCVCIDR(FLAG)            (*(uint32_t*)0x40016d0c &= FLAG)
#define Clr_DSI_DSI_LCVCIDR(FLAG)            (*(uint32_t*)0x40016d0c |= ~FLAG)
#define Set_DSI_DSI_LCCCR(FLAG)              (*(uint32_t*)0x40016d10 &= FLAG)
#define Clr_DSI_DSI_LCCCR(FLAG)              (*(uint32_t*)0x40016d10 |= ~FLAG)
#define Set_DSI_DSI_LPMCCR(FLAG)             (*(uint32_t*)0x40016d18 &= FLAG)
#define Clr_DSI_DSI_LPMCCR(FLAG)             (*(uint32_t*)0x40016d18 |= ~FLAG)
#define Set_DSI_DSI_VMCCR(FLAG)              (*(uint32_t*)0x40016d38 &= FLAG)
#define Clr_DSI_DSI_VMCCR(FLAG)              (*(uint32_t*)0x40016d38 |= ~FLAG)
#define Set_DSI_DSI_VPCCR(FLAG)              (*(uint32_t*)0x40016d3c &= FLAG)
#define Clr_DSI_DSI_VPCCR(FLAG)              (*(uint32_t*)0x40016d3c |= ~FLAG)
#define Set_DSI_DSI_VCCCR(FLAG)              (*(uint32_t*)0x40016d40 &= FLAG)
#define Clr_DSI_DSI_VCCCR(FLAG)              (*(uint32_t*)0x40016d40 |= ~FLAG)
#define Set_DSI_DSI_VNPCCR(FLAG)             (*(uint32_t*)0x40016d44 &= FLAG)
#define Clr_DSI_DSI_VNPCCR(FLAG)             (*(uint32_t*)0x40016d44 |= ~FLAG)
#define Set_DSI_DSI_VHSACCR(FLAG)            (*(uint32_t*)0x40016d48 &= FLAG)
#define Clr_DSI_DSI_VHSACCR(FLAG)            (*(uint32_t*)0x40016d48 |= ~FLAG)
#define Set_DSI_DSI_VHBPCCR(FLAG)            (*(uint32_t*)0x40016d4c &= FLAG)
#define Clr_DSI_DSI_VHBPCCR(FLAG)            (*(uint32_t*)0x40016d4c |= ~FLAG)
#define Set_DSI_DSI_VLCCR(FLAG)              (*(uint32_t*)0x40016d50 &= FLAG)
#define Clr_DSI_DSI_VLCCR(FLAG)              (*(uint32_t*)0x40016d50 |= ~FLAG)
#define Set_DSI_DSI_VVSACCR(FLAG)            (*(uint32_t*)0x40016d54 &= FLAG)
#define Clr_DSI_DSI_VVSACCR(FLAG)            (*(uint32_t*)0x40016d54 |= ~FLAG)
#define Set_DSI_DSI_VVBPCCR(FLAG)            (*(uint32_t*)0x40016d58 &= FLAG)
#define Clr_DSI_DSI_VVBPCCR(FLAG)            (*(uint32_t*)0x40016d58 |= ~FLAG)
#define Set_DSI_DSI_VVFPCCR(FLAG)            (*(uint32_t*)0x40016d5c &= FLAG)
#define Clr_DSI_DSI_VVFPCCR(FLAG)            (*(uint32_t*)0x40016d5c |= ~FLAG)
#define Set_DSI_DSI_VVACCR(FLAG)             (*(uint32_t*)0x40016d60 &= FLAG)
#define Clr_DSI_DSI_VVACCR(FLAG)             (*(uint32_t*)0x40016d60 |= ~FLAG)
#define Set_DSI_DSI_WCFGR(FLAG)              (*(uint32_t*)0x40017000 &= FLAG)
#define Clr_DSI_DSI_WCFGR(FLAG)              (*(uint32_t*)0x40017000 |= ~FLAG)
#define Set_DSI_DSI_WCR(FLAG)                (*(uint32_t*)0x40017004 &= FLAG)
#define Clr_DSI_DSI_WCR(FLAG)                (*(uint32_t*)0x40017004 |= ~FLAG)
#define Set_DSI_DSI_WIER(FLAG)               (*(uint32_t*)0x40017008 &= FLAG)
#define Clr_DSI_DSI_WIER(FLAG)               (*(uint32_t*)0x40017008 |= ~FLAG)
#define Set_DSI_DSI_WISR(FLAG)               (*(uint32_t*)0x4001700c &= FLAG)
#define Clr_DSI_DSI_WISR(FLAG)               (*(uint32_t*)0x4001700c |= ~FLAG)
#define Set_DSI_DSI_WIFCR(FLAG)              (*(uint32_t*)0x40017010 &= FLAG)
#define Clr_DSI_DSI_WIFCR(FLAG)              (*(uint32_t*)0x40017010 |= ~FLAG)
#define Set_DSI_DSI_WPCR1(FLAG)              (*(uint32_t*)0x40017018 &= FLAG)
#define Clr_DSI_DSI_WPCR1(FLAG)              (*(uint32_t*)0x40017018 |= ~FLAG)
#define Set_DSI_DSI_WPCR2(FLAG)              (*(uint32_t*)0x4001701c &= FLAG)
#define Clr_DSI_DSI_WPCR2(FLAG)              (*(uint32_t*)0x4001701c |= ~FLAG)
#define Set_DSI_DSI_WPCR3(FLAG)              (*(uint32_t*)0x40017020 &= FLAG)
#define Clr_DSI_DSI_WPCR3(FLAG)              (*(uint32_t*)0x40017020 |= ~FLAG)
#define Set_DSI_DSI_WPCR4(FLAG)              (*(uint32_t*)0x40017024 &= FLAG)
#define Clr_DSI_DSI_WPCR4(FLAG)              (*(uint32_t*)0x40017024 |= ~FLAG)
#define Set_DSI_DSI_WPCR5(FLAG)              (*(uint32_t*)0x40017028 &= FLAG)
#define Clr_DSI_DSI_WPCR5(FLAG)              (*(uint32_t*)0x40017028 |= ~FLAG)
#define Set_DSI_DSI_WRPCR(FLAG)              (*(uint32_t*)0x40017030 &= FLAG)
#define Clr_DSI_DSI_WRPCR(FLAG)              (*(uint32_t*)0x40017030 |= ~FLAG)
#define  _DSI_DSI_VR_VERSION                                 (0xffffffff << 0)    // Version of the DSI Host
#define  _DSI_DSI_CR_EN                                      (0x1 << 0)    // Enable
#define  _DSI_DSI_CCR_TXECKDIV                               (0xff << 0)    // TX Escape Clock Division
#define  _DSI_DSI_CCR_TOCKDIV                                (0xff << 8)    // Timeout Clock Division
#define  _DSI_DSI_LVCIDR_VCID                                (0x3 << 0)    // Virtual Channel ID
#define  _DSI_DSI_LCOLCR_COLC                                (0xf << 0)    // Color Coding
#define  _DSI_DSI_LCOLCR_LPE                                 (0x1 << 8)    // Loosely Packet Enable
#define  _DSI_DSI_LPCR_DEP                                   (0x1 << 0)    // Data Enable Polarity
#define  _DSI_DSI_LPCR_VSP                                   (0x1 << 1)    // VSYNC Polarity
#define  _DSI_DSI_LPCR_HSP                                   (0x1 << 2)    // HSYNC Polarity
#define  _DSI_DSI_LPMCR_VLPSIZE                              (0xff << 0)    // VACT Largest Packet Size
#define  _DSI_DSI_LPMCR_LPSIZE                               (0xff << 16)    // Largest Packet Size
#define  _DSI_DSI_PCR_ETTXE                                  (0x1 << 0)    // EoTp Transmission Enable
#define  _DSI_DSI_PCR_ETRXE                                  (0x1 << 1)    // EoTp Reception Enable
#define  _DSI_DSI_PCR_BTAE                                   (0x1 << 2)    // Bus Turn Around Enable
#define  _DSI_DSI_PCR_ECCRXE                                 (0x1 << 3)    // ECC Reception Enable
#define  _DSI_DSI_PCR_CRCRXE                                 (0x1 << 4)    // CRC Reception Enable
#define  _DSI_DSI_GVCIDR_VCID                                (0x3 << 0)    // Virtual Channel ID
#define  _DSI_DSI_MCR_CMDM                                   (0x1 << 0)    // Command mode
#define  _DSI_DSI_VMCR_VMT                                   (0x3 << 0)    // Video mode Type
#define  _DSI_DSI_VMCR_LPVSAE                                (0x1 << 8)    // Low-Power Vertical Sync Active Enable
#define  _DSI_DSI_VMCR_LPVBPE                                (0x1 << 9)    // Low-power Vertical Back-Porch Enable
#define  _DSI_DSI_VMCR_LPVFPE                                (0x1 << 10)    // Low-power Vertical Front-porch Enable
#define  _DSI_DSI_VMCR_LPVAE                                 (0x1 << 11)    // Low-Power Vertical Active Enable
#define  _DSI_DSI_VMCR_LPHBPE                                (0x1 << 12)    // Low-Power Horizontal Back-Porch Enable
#define  _DSI_DSI_VMCR_LPHFPE                                (0x1 << 13)    // Low-Power Horizontal Front-Porch Enable
#define  _DSI_DSI_VMCR_FBTAAE                                (0x1 << 14)    // Frame Bus-Turn-Around Acknowledge Enable
#define  _DSI_DSI_VMCR_LPCE                                  (0x1 << 15)    // Low-Power Command Enable
#define  _DSI_DSI_VMCR_PGE                                   (0x1 << 16)    // Pattern Generator Enable
#define  _DSI_DSI_VMCR_PGM                                   (0x1 << 20)    // Pattern Generator mode
#define  _DSI_DSI_VMCR_PGO                                   (0x1 << 24)    // Pattern Generator Orientation
#define  _DSI_DSI_VPCR_VPSIZE                                (0x3fff << 0)    // Video Packet Size
#define  _DSI_DSI_VCCR_NUMC                                  (0x1fff << 0)    // Number of Chunks
#define  _DSI_DSI_VNPCR_NPSIZE                               (0x1fff << 0)    // Null Packet Size
#define  _DSI_DSI_VHSACR_HSA                                 (0xfff << 0)    // Horizontal Synchronism Active duration
#define  _DSI_DSI_VHBPCR_HBP                                 (0xfff << 0)    // Horizontal Back-Porch duration
#define  _DSI_DSI_VLCR_HLINE                                 (0x7fff << 0)    // Horizontal Line duration
#define  _DSI_DSI_VVSACR_VSA                                 (0x3ff << 0)    // Vertical Synchronism Active duration
#define  _DSI_DSI_VVBPCR_VBP                                 (0x3ff << 0)    // Vertical Back-Porch duration
#define  _DSI_DSI_VVFPCR_VFP                                 (0x3ff << 0)    // Vertical Front-Porch duration
#define  _DSI_DSI_VVACR_VA                                   (0x3fff << 0)    // Vertical Active duration
#define  _DSI_DSI_LCCR_CMDSIZE                               (0xffff << 0)    // Command Size
#define  _DSI_DSI_CMCR_TEARE                                 (0x1 << 0)    // Tearing Effect Acknowledge Request Enable
#define  _DSI_DSI_CMCR_ARE                                   (0x1 << 1)    // Acknowledge Request Enable
#define  _DSI_DSI_CMCR_GSW0TX                                (0x1 << 8)    // Generic Short Write Zero parameters Transmission
#define  _DSI_DSI_CMCR_GSW1TX                                (0x1 << 9)    // Generic Short Write One parameters Transmission
#define  _DSI_DSI_CMCR_GSW2TX                                (0x1 << 10)    // Generic Short Write Two parameters Transmission
#define  _DSI_DSI_CMCR_GSR0TX                                (0x1 << 11)    // Generic Short Read Zero parameters Transmission
#define  _DSI_DSI_CMCR_GSR1TX                                (0x1 << 12)    // Generic Short Read One parameters Transmission
#define  _DSI_DSI_CMCR_GSR2TX                                (0x1 << 13)    // Generic Short Read Two parameters Transmission
#define  _DSI_DSI_CMCR_GLWTX                                 (0x1 << 14)    // Generic Long Write Transmission
#define  _DSI_DSI_CMCR_DSW0TX                                (0x1 << 16)    // DCS Short Write Zero parameter Transmission
#define  _DSI_DSI_CMCR_DSW1TX                                (0x1 << 17)    // DCS Short Read One parameter Transmission
#define  _DSI_DSI_CMCR_DSR0TX                                (0x1 << 18)    // DCS Short Read Zero parameter Transmission
#define  _DSI_DSI_CMCR_DLWTX                                 (0x1 << 19)    // DCS Long Write Transmission
#define  _DSI_DSI_CMCR_MRDPS                                 (0x1 << 24)    // Maximum Read Packet Size
#define  _DSI_DSI_GHCR_DT                                    (0x3f << 0)    // Type
#define  _DSI_DSI_GHCR_VCID                                  (0x3 << 6)    // Channel
#define  _DSI_DSI_GHCR_WCLSB                                 (0xff << 8)    // WordCount LSB
#define  _DSI_DSI_GHCR_WCMSB                                 (0xff << 16)    // WordCount MSB
#define  _DSI_DSI_GPDR_DATA1                                 (0xff << 0)    // Payload Byte 1
#define  _DSI_DSI_GPDR_DATA2                                 (0xff << 8)    // Payload Byte 2
#define  _DSI_DSI_GPDR_DATA3                                 (0xff << 16)    // Payload Byte 3
#define  _DSI_DSI_GPDR_DATA4                                 (0xff << 24)    // Payload Byte 4
#define  _DSI_DSI_GPSR_CMDFE                                 (0x1 << 0)    // Command FIFO Empty
#define  _DSI_DSI_GPSR_CMDFF                                 (0x1 << 1)    // Command FIFO Full
#define  _DSI_DSI_GPSR_PWRFE                                 (0x1 << 2)    // Payload Write FIFO Empty
#define  _DSI_DSI_GPSR_PWRFF                                 (0x1 << 3)    // Payload Write FIFO Full
#define  _DSI_DSI_GPSR_PRDFE                                 (0x1 << 4)    // Payload Read FIFO Empty
#define  _DSI_DSI_GPSR_PRDFF                                 (0x1 << 5)    // Payload Read FIFO Full
#define  _DSI_DSI_GPSR_RCB                                   (0x1 << 6)    // Read Command Busy
#define  _DSI_DSI_TCCR0_LPRX_TOCNT                           (0xffff << 0)    // Low-power Reception Timeout Counter
#define  _DSI_DSI_TCCR0_HSTX_TOCNT                           (0xffff << 16)    // High-Speed Transmission Timeout Counter
#define  _DSI_DSI_TCCR1_HSRD_TOCNT                           (0xffff << 0)    // High-Speed Read Timeout Counter
#define  _DSI_DSI_TCCR2_LPRD_TOCNT                           (0xffff << 0)    // Low-Power Read Timeout Counter
#define  _DSI_DSI_TCCR3_HSWR_TOCNT                           (0xffff << 0)    // High-Speed Write Timeout Counter
#define  _DSI_DSI_TCCR3_PM                                   (0x1 << 24)    // Presp mode
#define  _DSI_DSI_TCCR4_LSWR_TOCNT                           (0xffff << 0)    // Low-Power Write Timeout Counter
#define  _DSI_DSI_TCCR5_BTA_TOCNT                            (0xffff << 0)    // Bus-Turn-Around Timeout Counter
#define  _DSI_DSI_CLCR_DPCC                                  (0x1 << 0)    // D-PHY Clock Control
#define  _DSI_DSI_CLCR_ACR                                   (0x1 << 1)    // Automatic Clock lane Control
#define  _DSI_DSI_CLTCR_LP2HS_TIME                           (0x3ff << 0)    // Low-Power to High-Speed Time
#define  _DSI_DSI_CLTCR_HS2LP_TIME                           (0x3ff << 16)    // High-Speed to Low-Power Time
#define  _DSI_DSI_DLTCR_MRD_TIME                             (0x7fff << 0)    // Maximum Read Time
#define  _DSI_DSI_DLTCR_LP2HS_TIME                           (0xff << 16)    // Low-Power To High-Speed Time
#define  _DSI_DSI_DLTCR_HS2LP_TIME                           (0xff << 24)    // High-Speed To Low-Power Time
#define  _DSI_DSI_PCTLR_DEN                                  (0x1 << 1)    // Digital Enable
#define  _DSI_DSI_PCTLR_CKE                                  (0x1 << 2)    // Clock Enable
#define  _DSI_DSI_PCONFR_NL                                  (0x3 << 0)    // Number of Lanes
#define  _DSI_DSI_PCONFR_SW_TIME                             (0xff << 8)    // Stop Wait Time
#define  _DSI_DSI_PUCR_URCL                                  (0x1 << 0)    // ULPS Request on Clock Lane
#define  _DSI_DSI_PUCR_UECL                                  (0x1 << 1)    // ULPS Exit on Clock Lane
#define  _DSI_DSI_PUCR_URDL                                  (0x1 << 2)    // ULPS Request on Data Lane
#define  _DSI_DSI_PUCR_UEDL                                  (0x1 << 3)    // ULPS Exit on Data Lane
#define  _DSI_DSI_PTTCR_TX_TRIG                              (0xf << 0)    // Transmission Trigger
#define  _DSI_DSI_PSR_PD                                     (0x1 << 1)    // PHY Direction
#define  _DSI_DSI_PSR_PSSC                                   (0x1 << 2)    // PHY Stop State Clock lane
#define  _DSI_DSI_PSR_UANC                                   (0x1 << 3)    // ULPS Active Not Clock lane
#define  _DSI_DSI_PSR_PSS0                                   (0x1 << 4)    // PHY Stop State lane 0
#define  _DSI_DSI_PSR_UAN0                                   (0x1 << 5)    // ULPS Active Not lane 1
#define  _DSI_DSI_PSR_RUE0                                   (0x1 << 6)    // RX ULPS Escape lane 0
#define  _DSI_DSI_PSR_PSS1                                   (0x1 << 7)    // PHY Stop State lane 1
#define  _DSI_DSI_PSR_UAN1                                   (0x1 << 8)    // ULPS Active Not lane 1
#define  _DSI_DSI_ISR0_AE0                                   (0x1 << 0)    // Acknowledge Error 0
#define  _DSI_DSI_ISR0_AE1                                   (0x1 << 1)    // Acknowledge Error 1
#define  _DSI_DSI_ISR0_AE2                                   (0x1 << 2)    // Acknowledge Error 2
#define  _DSI_DSI_ISR0_AE3                                   (0x1 << 3)    // Acknowledge Error 3
#define  _DSI_DSI_ISR0_AE4                                   (0x1 << 4)    // Acknowledge Error 4
#define  _DSI_DSI_ISR0_AE5                                   (0x1 << 5)    // Acknowledge Error 5
#define  _DSI_DSI_ISR0_AE6                                   (0x1 << 6)    // Acknowledge Error 6
#define  _DSI_DSI_ISR0_AE7                                   (0x1 << 7)    // Acknowledge Error 7
#define  _DSI_DSI_ISR0_AE8                                   (0x1 << 8)    // Acknowledge Error 8
#define  _DSI_DSI_ISR0_AE9                                   (0x1 << 9)    // Acknowledge Error 9
#define  _DSI_DSI_ISR0_AE10                                  (0x1 << 10)    // Acknowledge Error 10
#define  _DSI_DSI_ISR0_AE11                                  (0x1 << 11)    // Acknowledge Error 11
#define  _DSI_DSI_ISR0_AE12                                  (0x1 << 12)    // Acknowledge Error 12
#define  _DSI_DSI_ISR0_AE13                                  (0x1 << 13)    // Acknowledge Error 13
#define  _DSI_DSI_ISR0_AE14                                  (0x1 << 14)    // Acknowledge Error 14
#define  _DSI_DSI_ISR0_AE15                                  (0x1 << 15)    // Acknowledge Error 15
#define  _DSI_DSI_ISR0_PE0                                   (0x1 << 16)    // PHY Error 0
#define  _DSI_DSI_ISR0_PE1                                   (0x1 << 17)    // PHY Error 1
#define  _DSI_DSI_ISR0_PE2                                   (0x1 << 18)    // PHY Error 2
#define  _DSI_DSI_ISR0_PE3                                   (0x1 << 19)    // PHY Error 3
#define  _DSI_DSI_ISR0_PE4                                   (0x1 << 20)    // PHY Error 4
#define  _DSI_DSI_ISR1_TOHSTX                                (0x1 << 0)    // Timeout High-Speed Transmission
#define  _DSI_DSI_ISR1_TOLPRX                                (0x1 << 1)    // Timeout Low-Power Reception
#define  _DSI_DSI_ISR1_ECCSE                                 (0x1 << 2)    // ECC Single-bit Error
#define  _DSI_DSI_ISR1_ECCME                                 (0x1 << 3)    // ECC Multi-bit Error
#define  _DSI_DSI_ISR1_CRCE                                  (0x1 << 4)    // CRC Error
#define  _DSI_DSI_ISR1_PSE                                   (0x1 << 5)    // Packet Size Error
#define  _DSI_DSI_ISR1_EOTPE                                 (0x1 << 6)    // EoTp Error
#define  _DSI_DSI_ISR1_LPWRE                                 (0x1 << 7)    // LTDC Payload Write Error
#define  _DSI_DSI_ISR1_GCWRE                                 (0x1 << 8)    // Generic Command Write Error
#define  _DSI_DSI_ISR1_GPWRE                                 (0x1 << 9)    // Generic Payload Write Error
#define  _DSI_DSI_ISR1_GPTXE                                 (0x1 << 10)    // Generic Payload Transmit Error
#define  _DSI_DSI_ISR1_GPRDE                                 (0x1 << 11)    // Generic Payload Read Error
#define  _DSI_DSI_ISR1_GPRXE                                 (0x1 << 12)    // Generic Payload Receive Error
#define  _DSI_DSI_IER0_AE0IE                                 (0x1 << 0)    // Acknowledge Error 0 Interrupt Enable
#define  _DSI_DSI_IER0_AE1IE                                 (0x1 << 1)    // Acknowledge Error 1 Interrupt Enable
#define  _DSI_DSI_IER0_AE2IE                                 (0x1 << 2)    // Acknowledge Error 2 Interrupt Enable
#define  _DSI_DSI_IER0_AE3IE                                 (0x1 << 3)    // Acknowledge Error 3 Interrupt Enable
#define  _DSI_DSI_IER0_AE4IE                                 (0x1 << 4)    // Acknowledge Error 4 Interrupt Enable
#define  _DSI_DSI_IER0_AE5IE                                 (0x1 << 5)    // Acknowledge Error 5 Interrupt Enable
#define  _DSI_DSI_IER0_AE6IE                                 (0x1 << 6)    // Acknowledge Error 6 Interrupt Enable
#define  _DSI_DSI_IER0_AE7IE                                 (0x1 << 7)    // Acknowledge Error 7 Interrupt Enable
#define  _DSI_DSI_IER0_AE8IE                                 (0x1 << 8)    // Acknowledge Error 8 Interrupt Enable
#define  _DSI_DSI_IER0_AE9IE                                 (0x1 << 9)    // Acknowledge Error 9 Interrupt Enable
#define  _DSI_DSI_IER0_AE10IE                                (0x1 << 10)    // Acknowledge Error 10 Interrupt Enable
#define  _DSI_DSI_IER0_AE11IE                                (0x1 << 11)    // Acknowledge Error 11 Interrupt Enable
#define  _DSI_DSI_IER0_AE12IE                                (0x1 << 12)    // Acknowledge Error 12 Interrupt Enable
#define  _DSI_DSI_IER0_AE13IE                                (0x1 << 13)    // Acknowledge Error 13 Interrupt Enable
#define  _DSI_DSI_IER0_AE14IE                                (0x1 << 14)    // Acknowledge Error 14 Interrupt Enable
#define  _DSI_DSI_IER0_AE15IE                                (0x1 << 15)    // Acknowledge Error 15 Interrupt Enable
#define  _DSI_DSI_IER0_PE0IE                                 (0x1 << 16)    // PHY Error 0 Interrupt Enable
#define  _DSI_DSI_IER0_PE1IE                                 (0x1 << 17)    // PHY Error 1 Interrupt Enable
#define  _DSI_DSI_IER0_PE2IE                                 (0x1 << 18)    // PHY Error 2 Interrupt Enable
#define  _DSI_DSI_IER0_PE3IE                                 (0x1 << 19)    // PHY Error 3 Interrupt Enable
#define  _DSI_DSI_IER0_PE4IE                                 (0x1 << 20)    // PHY Error 4 Interrupt Enable
#define  _DSI_DSI_IER1_TOHSTXIE                              (0x1 << 0)    // Timeout High-Speed Transmission Interrupt Enable
#define  _DSI_DSI_IER1_TOLPRXIE                              (0x1 << 1)    // Timeout Low-Power Reception Interrupt Enable
#define  _DSI_DSI_IER1_ECCSEIE                               (0x1 << 2)    // ECC Single-bit Error Interrupt Enable
#define  _DSI_DSI_IER1_ECCMEIE                               (0x1 << 3)    // ECC Multi-bit Error Interrupt Enable
#define  _DSI_DSI_IER1_CRCEIE                                (0x1 << 4)    // CRC Error Interrupt Enable
#define  _DSI_DSI_IER1_PSEIE                                 (0x1 << 5)    // Packet Size Error Interrupt Enable
#define  _DSI_DSI_IER1_EOTPEIE                               (0x1 << 6)    // EoTp Error Interrupt Enable
#define  _DSI_DSI_IER1_LPWREIE                               (0x1 << 7)    // LTDC Payload Write Error Interrupt Enable
#define  _DSI_DSI_IER1_GCWREIE                               (0x1 << 8)    // Generic Command Write Error Interrupt Enable
#define  _DSI_DSI_IER1_GPWREIE                               (0x1 << 9)    // Generic Payload Write Error Interrupt Enable
#define  _DSI_DSI_IER1_GPTXEIE                               (0x1 << 10)    // Generic Payload Transmit Error Interrupt Enable
#define  _DSI_DSI_IER1_GPRDEIE                               (0x1 << 11)    // Generic Payload Read Error Interrupt Enable
#define  _DSI_DSI_IER1_GPRXEIE                               (0x1 << 12)    // Generic Payload Receive Error Interrupt Enable
#define  _DSI_DSI_FIR0_FAE0                                  (0x1 << 0)    // Force Acknowledge Error 0
#define  _DSI_DSI_FIR0_FAE1                                  (0x1 << 1)    // Force Acknowledge Error 1
#define  _DSI_DSI_FIR0_FAE2                                  (0x1 << 2)    // Force Acknowledge Error 2
#define  _DSI_DSI_FIR0_FAE3                                  (0x1 << 3)    // Force Acknowledge Error 3
#define  _DSI_DSI_FIR0_FAE4                                  (0x1 << 4)    // Force Acknowledge Error 4
#define  _DSI_DSI_FIR0_FAE5                                  (0x1 << 5)    // Force Acknowledge Error 5
#define  _DSI_DSI_FIR0_FAE6                                  (0x1 << 6)    // Force Acknowledge Error 6
#define  _DSI_DSI_FIR0_FAE7                                  (0x1 << 7)    // Force Acknowledge Error 7
#define  _DSI_DSI_FIR0_FAE8                                  (0x1 << 8)    // Force Acknowledge Error 8
#define  _DSI_DSI_FIR0_FAE9                                  (0x1 << 9)    // Force Acknowledge Error 9
#define  _DSI_DSI_FIR0_FAE10                                 (0x1 << 10)    // Force Acknowledge Error 10
#define  _DSI_DSI_FIR0_FAE11                                 (0x1 << 11)    // Force Acknowledge Error 11
#define  _DSI_DSI_FIR0_FAE12                                 (0x1 << 12)    // Force Acknowledge Error 12
#define  _DSI_DSI_FIR0_FAE13                                 (0x1 << 13)    // Force Acknowledge Error 13
#define  _DSI_DSI_FIR0_FAE14                                 (0x1 << 14)    // Force Acknowledge Error 14
#define  _DSI_DSI_FIR0_FAE15                                 (0x1 << 15)    // Force Acknowledge Error 15
#define  _DSI_DSI_FIR0_FPE0                                  (0x1 << 16)    // Force PHY Error 0
#define  _DSI_DSI_FIR0_FPE1                                  (0x1 << 17)    // Force PHY Error 1
#define  _DSI_DSI_FIR0_FPE2                                  (0x1 << 18)    // Force PHY Error 2
#define  _DSI_DSI_FIR0_FPE3                                  (0x1 << 19)    // Force PHY Error 3
#define  _DSI_DSI_FIR0_FPE4                                  (0x1 << 20)    // Force PHY Error 4
#define  _DSI_DSI_FIR1_FTOHSTX                               (0x1 << 0)    // Force Timeout High-Speed Transmission
#define  _DSI_DSI_FIR1_FTOLPRX                               (0x1 << 1)    // Force Timeout Low-Power Reception
#define  _DSI_DSI_FIR1_FECCSE                                (0x1 << 2)    // Force ECC Single-bit Error
#define  _DSI_DSI_FIR1_FECCME                                (0x1 << 3)    // Force ECC Multi-bit Error
#define  _DSI_DSI_FIR1_FCRCE                                 (0x1 << 4)    // Force CRC Error
#define  _DSI_DSI_FIR1_FPSE                                  (0x1 << 5)    // Force Packet Size Error
#define  _DSI_DSI_FIR1_FEOTPE                                (0x1 << 6)    // Force EoTp Error
#define  _DSI_DSI_FIR1_FLPWRE                                (0x1 << 7)    // Force LTDC Payload Write Error
#define  _DSI_DSI_FIR1_FGCWRE                                (0x1 << 8)    // Force Generic Command Write Error
#define  _DSI_DSI_FIR1_FGPWRE                                (0x1 << 9)    // Force Generic Payload Write Error
#define  _DSI_DSI_FIR1_FGPTXE                                (0x1 << 10)    // Force Generic Payload Transmit Error
#define  _DSI_DSI_FIR1_FGPRDE                                (0x1 << 11)    // Force Generic Payload Read Error
#define  _DSI_DSI_FIR1_FGPRXE                                (0x1 << 12)    // Force Generic Payload Receive Error
#define  _DSI_DSI_VSCR_EN                                    (0x1 << 0)    // Enable
#define  _DSI_DSI_VSCR_UR                                    (0x1 << 8)    // Update Register
#define  _DSI_DSI_LCVCIDR_VCID                               (0x3 << 0)    // Virtual Channel ID
#define  _DSI_DSI_LCCCR_COLC                                 (0xf << 0)    // Color Coding
#define  _DSI_DSI_LCCCR_LPE                                  (0x1 << 8)    // Loosely Packed Enable
#define  _DSI_DSI_LPMCCR_VLPSIZE                             (0xff << 0)    // VACT Largest Packet Size
#define  _DSI_DSI_LPMCCR_LPSIZE                              (0xff << 16)    // Largest Packet Size
#define  _DSI_DSI_VMCCR_VMT                                  (0x3 << 0)    // Video mode Type
#define  _DSI_DSI_VMCCR_LPVSAE                               (0x1 << 2)    // Low-Power Vertical Sync time Enable
#define  _DSI_DSI_VMCCR_LPVBPE                               (0x1 << 3)    // Low-power Vertical Back-Porch Enable
#define  _DSI_DSI_VMCCR_LPVFPE                               (0x1 << 4)    // Low-power Vertical Front-Porch Enable
#define  _DSI_DSI_VMCCR_LPVAE                                (0x1 << 5)    // Low-Power Vertical Active Enable
#define  _DSI_DSI_VMCCR_LPHBPE                               (0x1 << 6)    // Low-power Horizontal Back-Porch Enable
#define  _DSI_DSI_VMCCR_LPHFE                                (0x1 << 7)    // Low-Power Horizontal Front-Porch Enable
#define  _DSI_DSI_VMCCR_FBTAAE                               (0x1 << 8)    // Frame BTA Acknowledge Enable
#define  _DSI_DSI_VMCCR_LPCE                                 (0x1 << 9)    // Low-Power Command Enable
#define  _DSI_DSI_VPCCR_VPSIZE                               (0x3fff << 0)    // Video Packet Size
#define  _DSI_DSI_VCCCR_NUMC                                 (0x1fff << 0)    // Number of Chunks
#define  _DSI_DSI_VNPCCR_NPSIZE                              (0x1fff << 0)    // Null Packet Size
#define  _DSI_DSI_VHSACCR_HSA                                (0xfff << 0)    // Horizontal Synchronism Active duration
#define  _DSI_DSI_VHBPCCR_HBP                                (0xfff << 0)    // Horizontal Back-Porch duration
#define  _DSI_DSI_VLCCR_HLINE                                (0x7fff << 0)    // Horizontal Line duration
#define  _DSI_DSI_VVSACCR_VSA                                (0x3ff << 0)    // Vertical Synchronism Active duration
#define  _DSI_DSI_VVBPCCR_VBP                                (0x3ff << 0)    // Vertical Back-Porch duration
#define  _DSI_DSI_VVFPCCR_VFP                                (0x3ff << 0)    // Vertical Front-Porch duration
#define  _DSI_DSI_VVACCR_VA                                  (0x3fff << 0)    // Vertical Active duration
#define  _DSI_DSI_WCFGR_VSPOL                                (0x1 << 7)    // VSync Polarity
#define  _DSI_DSI_WCFGR_AR                                   (0x1 << 6)    // Automatic Refresh
#define  _DSI_DSI_WCFGR_TEPOL                                (0x1 << 5)    // TE Polarity
#define  _DSI_DSI_WCFGR_TESRC                                (0x1 << 4)    // TE Source
#define  _DSI_DSI_WCFGR_COLMUX                               (0x7 << 1)    // Color Multiplexing
#define  _DSI_DSI_WCFGR_DSIM                                 (0x1 << 0)    // DSI Mode
#define  _DSI_DSI_WCR_DSIEN                                  (0x1 << 3)    // DSI Enable
#define  _DSI_DSI_WCR_LTDCEN                                 (0x1 << 2)    // LTDC Enable
#define  _DSI_DSI_WCR_SHTDN                                  (0x1 << 1)    // Shutdown
#define  _DSI_DSI_WCR_COLM                                   (0x1 << 0)    // Color Mode
#define  _DSI_DSI_WIER_RRIE                                  (0x1 << 13)    // Regulator Ready Interrupt Enable
#define  _DSI_DSI_WIER_PLLUIE                                (0x1 << 10)    // PLL Unlock Interrupt Enable
#define  _DSI_DSI_WIER_PLLLIE                                (0x1 << 9)    // PLL Lock Interrupt Enable
#define  _DSI_DSI_WIER_ERIE                                  (0x1 << 1)    // End of Refresh Interrupt Enable
#define  _DSI_DSI_WIER_TEIE                                  (0x1 << 0)    // Tearing Effect Interrupt Enable
#define  _DSI_DSI_WISR_RRIF                                  (0x1 << 13)    // Regulator Ready Interrupt Flag
#define  _DSI_DSI_WISR_RRS                                   (0x1 << 12)    // Regulator Ready Status
#define  _DSI_DSI_WISR_PLLUIF                                (0x1 << 10)    // PLL Unlock Interrupt Flag
#define  _DSI_DSI_WISR_PLLLIF                                (0x1 << 9)    // PLL Lock Interrupt Flag
#define  _DSI_DSI_WISR_PLLLS                                 (0x1 << 8)    // PLL Lock Status
#define  _DSI_DSI_WISR_BUSY                                  (0x1 << 2)    // Busy Flag
#define  _DSI_DSI_WISR_ERIF                                  (0x1 << 1)    // End of Refresh Interrupt Flag
#define  _DSI_DSI_WISR_TEIF                                  (0x1 << 0)    // Tearing Effect Interrupt Flag
#define  _DSI_DSI_WIFCR_CRRIF                                (0x1 << 13)    // Clear Regulator Ready Interrupt Flag
#define  _DSI_DSI_WIFCR_CPLLUIF                              (0x1 << 10)    // Clear PLL Unlock Interrupt Flag
#define  _DSI_DSI_WIFCR_CPLLLIF                              (0x1 << 9)    // Clear PLL Lock Interrupt Flag
#define  _DSI_DSI_WIFCR_CERIF                                (0x1 << 1)    // Clear End of Refresh Interrupt Flag
#define  _DSI_DSI_WIFCR_CTEIF                                (0x1 << 0)    // Clear Tearing Effect Interrupt Flag
#define  _DSI_DSI_WPCR1_TCLKPOSTEN                           (0x1 << 27)    // custom time for tCLK-POST Enable
#define  _DSI_DSI_WPCR1_TLPXCEN                              (0x1 << 26)    // custom time for tLPX for Clock lane Enable
#define  _DSI_DSI_WPCR1_THSEXITEN                            (0x1 << 25)    // custom time for tHS-EXIT Enable
#define  _DSI_DSI_WPCR1_TLPXDEN                              (0x1 << 24)    // custom time for tLPX for Data lanes Enable
#define  _DSI_DSI_WPCR1_THSZEROEN                            (0x1 << 23)    // custom time for tHS-ZERO Enable
#define  _DSI_DSI_WPCR1_THSTRAILEN                           (0x1 << 22)    // custom time for tHS-TRAIL Enable
#define  _DSI_DSI_WPCR1_THSPREPEN                            (0x1 << 21)    // custom time for tHS-PREPARE Enable
#define  _DSI_DSI_WPCR1_TCLKZEROEN                           (0x1 << 20)    // custom time for tCLK-ZERO Enable
#define  _DSI_DSI_WPCR1_TCLKPREPEN                           (0x1 << 19)    // custom time for tCLK-PREPARE Enable
#define  _DSI_DSI_WPCR1_PDEN                                 (0x1 << 18)    // Pull-Down Enable
#define  _DSI_DSI_WPCR1_TDDL                                 (0x1 << 16)    // Turn Disable Data Lanes
#define  _DSI_DSI_WPCR1_CDOFFDL                              (0x1 << 14)    // Contention Detection OFF on Data Lanes
#define  _DSI_DSI_WPCR1_FTXSMDL                              (0x1 << 13)    // Force in TX Stop Mode the Data Lanes
#define  _DSI_DSI_WPCR1_FTXSMCL                              (0x1 << 12)    // Force in TX Stop Mode the Clock Lane
#define  _DSI_DSI_WPCR1_HSIDL1                               (0x1 << 11)    // Invert the High-Speed data signal on Data Lane 1
#define  _DSI_DSI_WPCR1_HSIDL0                               (0x1 << 10)    // Invert the Hight-Speed data signal on Data Lane 0
#define  _DSI_DSI_WPCR1_HSICL                                (0x1 << 9)    // Invert Hight-Speed data signal on Clock Lane
#define  _DSI_DSI_WPCR1_SWDL1                                (0x1 << 8)    // Swap Data Lane 1 pins
#define  _DSI_DSI_WPCR1_SWDL0                                (0x1 << 7)    // Swap Data Lane 0 pins
#define  _DSI_DSI_WPCR1_SWCL                                 (0x1 << 6)    // Swap Clock Lane pins
#define  _DSI_DSI_WPCR1_UIX4                                 (0x3f << 0)    // Unit Interval multiplied by 4
#define  _DSI_DSI_WPCR2_LPRXFT                               (0x3 << 25)    // Low-Power RX low-pass Filtering Tuning
#define  _DSI_DSI_WPCR2_FLPRXLPM                             (0x1 << 22)    // Forces LP Receiver in Low-Power Mode
#define  _DSI_DSI_WPCR2_HSTXSRCDL                            (0x3 << 18)    // High-Speed Transmission Slew Rate Control on Data Lanes
#define  _DSI_DSI_WPCR2_HSTXSRCCL                            (0x3 << 16)    // High-Speed Transmission Slew Rate Control on Clock Lane
#define  _DSI_DSI_WPCR2_SDCC                                 (0x1 << 12)    // SDD Control
#define  _DSI_DSI_WPCR2_LPSRDL                               (0x3 << 8)    // Low-Power transmission Slew Rate Compensation on Data Lanes
#define  _DSI_DSI_WPCR2_LPSRCL                               (0x3 << 6)    // Low-Power transmission Slew Rate Compensation on Clock Lane
#define  _DSI_DSI_WPCR2_HSTXDLL                              (0x3 << 2)    // High-Speed Transmission Delay on Data Lanes
#define  _DSI_DSI_WPCR2_HSTXDCL                              (0x3 << 0)    // High-Speed Transmission Delay on Clock Lane
#define  _DSI_DSI_WPCR3_THSTRAIL                             (0xff << 24)    // tHSTRAIL
#define  _DSI_DSI_WPCR3_THSPREP                              (0xff << 16)    // tHS-PREPARE
#define  _DSI_DSI_WPCR3_TCLKZEO                              (0xff << 8)    // tCLK-ZERO
#define  _DSI_DSI_WPCR3_TCLKPREP                             (0xff << 0)    // tCLK-PREPARE
#define  _DSI_DSI_WPCR4_TLPXC                                (0xff << 24)    // tLPXC for Clock lane
#define  _DSI_DSI_WPCR4_THSEXIT                              (0xff << 16)    // tHSEXIT
#define  _DSI_DSI_WPCR4_TLPXD                                (0xff << 8)    // tLPX for Data lanes
#define  _DSI_DSI_WPCR4_THSZERO                              (0xff << 0)    // tHS-ZERO
#define  _DSI_DSI_WPCR5_THSZERO                              (0xff << 0)    // tCLK-POST
#define  _DSI_DSI_WRPCR_REGEN                                (0x1 << 24)    // Regulator Enable
#define  _DSI_DSI_WRPCR_ODF                                  (0x3 << 16)    // PLL Output Division Factor
#define  _DSI_DSI_WRPCR_IDF                                  (0xf << 11)    // PLL Input Division Factor
#define  _DSI_DSI_WRPCR_NDIV                                 (0x7f << 2)    // PLL Loop Division Factor
#define  _DSI_DSI_WRPCR_PLLEN                                (0x1 << 0)    // PLL Enable
　
　drivers/inc/stm32f767xx_Ethernet.h
#define Get_Ethernet_MAC_MACCR(FLAG)         (*(uint32_t*)0x40028000 |= FLAG)
#define Get_Ethernet_MAC_MACFFR(FLAG)        (*(uint32_t*)0x40028004 |= FLAG)
#define Get_Ethernet_MAC_MACHTHR(FLAG)       (*(uint32_t*)0x40028008 |= FLAG)
#define Get_Ethernet_MAC_MACHTLR(FLAG)       (*(uint32_t*)0x4002800c |= FLAG)
#define Get_Ethernet_MAC_MACMIIAR(FLAG)      (*(uint32_t*)0x40028010 |= FLAG)
#define Get_Ethernet_MAC_MACMIIDR(FLAG)      (*(uint32_t*)0x40028014 |= FLAG)
#define Get_Ethernet_MAC_MACFCR(FLAG)        (*(uint32_t*)0x40028018 |= FLAG)
#define Get_Ethernet_MAC_MACVLANTR(FLAG)     (*(uint32_t*)0x4002801c |= FLAG)
#define Get_Ethernet_MAC_MACPMTCSR(FLAG)     (*(uint32_t*)0x4002802c |= FLAG)
#define Get_Ethernet_MAC_MACDBGR(FLAG)       (*(uint32_t*)0x40028034 |= FLAG)
#define Get_Ethernet_MAC_MACSR(FLAG)         (*(uint32_t*)0x40028038 |= FLAG)
#define Get_Ethernet_MAC_MACIMR(FLAG)        (*(uint32_t*)0x4002803c |= FLAG)
#define Get_Ethernet_MAC_MACA0HR(FLAG)       (*(uint32_t*)0x40028040 |= FLAG)
#define Get_Ethernet_MAC_MACA0LR(FLAG)       (*(uint32_t*)0x40028044 |= FLAG)
#define Get_Ethernet_MAC_MACA1HR(FLAG)       (*(uint32_t*)0x40028048 |= FLAG)
#define Get_Ethernet_MAC_MACA1LR(FLAG)       (*(uint32_t*)0x4002804c |= FLAG)
#define Get_Ethernet_MAC_MACA2HR(FLAG)       (*(uint32_t*)0x40028050 |= FLAG)
#define Get_Ethernet_MAC_MACA2LR(FLAG)       (*(uint32_t*)0x40028054 |= FLAG)
#define Get_Ethernet_MAC_MACA3HR(FLAG)       (*(uint32_t*)0x40028058 |= FLAG)
#define Get_Ethernet_MAC_MACA3LR(FLAG)       (*(uint32_t*)0x4002805c |= FLAG)
#define Get_Ethernet_MAC_MACRWUFFER(FLAG)    (*(uint32_t*)0x40028060 |= FLAG)
#define Get_Ethernet_MMC_MMCCR(FLAG)         (*(uint32_t*)0x40028100 |= FLAG)
#define Get_Ethernet_MMC_MMCRIR(FLAG)        (*(uint32_t*)0x40028104 |= FLAG)
#define Get_Ethernet_MMC_MMCTIR(FLAG)        (*(uint32_t*)0x40028108 |= FLAG)
#define Get_Ethernet_MMC_MMCRIMR(FLAG)       (*(uint32_t*)0x4002810c |= FLAG)
#define Get_Ethernet_MMC_MMCTIMR(FLAG)       (*(uint32_t*)0x40028110 |= FLAG)
#define Get_Ethernet_MMC_MMCTGFSCCR(FLAG)    (*(uint32_t*)0x4002814c |= FLAG)
#define Get_Ethernet_MMC_MMCTGFMSCCR(FLAG)   (*(uint32_t*)0x40028150 |= FLAG)
#define Get_Ethernet_MMC_MMCTGFCR(FLAG)      (*(uint32_t*)0x40028168 |= FLAG)
#define Get_Ethernet_MMC_MMCRFCECR(FLAG)     (*(uint32_t*)0x40028194 |= FLAG)
#define Get_Ethernet_MMC_MMCRFAECR(FLAG)     (*(uint32_t*)0x40028198 |= FLAG)
#define Get_Ethernet_MMC_MMCRGUFCR(FLAG)     (*(uint32_t*)0x400281c4 |= FLAG)
#define Get_Ethernet_PTP_PTPTSCR(FLAG)       (*(uint32_t*)0x40028700 |= FLAG)
#define Get_Ethernet_PTP_PTPSSIR(FLAG)       (*(uint32_t*)0x40028704 |= FLAG)
#define Get_Ethernet_PTP_PTPTSHR(FLAG)       (*(uint32_t*)0x40028708 |= FLAG)
#define Get_Ethernet_PTP_PTPTSLR(FLAG)       (*(uint32_t*)0x4002870c |= FLAG)
#define Get_Ethernet_PTP_PTPTSHUR(FLAG)      (*(uint32_t*)0x40028710 |= FLAG)
#define Get_Ethernet_PTP_PTPTSLUR(FLAG)      (*(uint32_t*)0x40028714 |= FLAG)
#define Get_Ethernet_PTP_PTPTSAR(FLAG)       (*(uint32_t*)0x40028718 |= FLAG)
#define Get_Ethernet_PTP_PTPTTHR(FLAG)       (*(uint32_t*)0x4002871c |= FLAG)
#define Get_Ethernet_PTP_PTPTTLR(FLAG)       (*(uint32_t*)0x40028720 |= FLAG)
#define Get_Ethernet_PTP_PTPTSSR(FLAG)       (*(uint32_t*)0x40028728 |= FLAG)
#define Get_Ethernet_PTP_PTPPPSCR(FLAG)      (*(uint32_t*)0x4002872c |= FLAG)
#define Get_Ethernet_DMA_DMABMR(FLAG)        (*(uint32_t*)0x40029000 |= FLAG)
#define Get_Ethernet_DMA_DMATPDR(FLAG)       (*(uint32_t*)0x40029004 |= FLAG)
#define Get_Ethernet_DMA_DMARPDR(FLAG)       (*(uint32_t*)0x40029008 |= FLAG)
#define Get_Ethernet_DMA_DMARDLAR(FLAG)      (*(uint32_t*)0x4002900c |= FLAG)
#define Get_Ethernet_DMA_DMATDLAR(FLAG)      (*(uint32_t*)0x40029010 |= FLAG)
#define Get_Ethernet_DMA_DMASR(FLAG)         (*(uint32_t*)0x40029014 |= FLAG)
#define Get_Ethernet_DMA_DMAOMR(FLAG)        (*(uint32_t*)0x40029018 |= FLAG)
#define Get_Ethernet_DMA_DMAIER(FLAG)        (*(uint32_t*)0x4002901c |= FLAG)
#define Get_Ethernet_DMA_DMAMFBOCR(FLAG)     (*(uint32_t*)0x40029020 |= FLAG)
#define Get_Ethernet_DMA_DMARSWTR(FLAG)      (*(uint32_t*)0x40029024 |= FLAG)
#define Get_Ethernet_DMA_DMACHTDR(FLAG)      (*(uint32_t*)0x40029048 |= FLAG)
#define Get_Ethernet_DMA_DMACHRDR(FLAG)      (*(uint32_t*)0x4002904c |= FLAG)
#define Get_Ethernet_DMA_DMACHTBAR(FLAG)     (*(uint32_t*)0x40029050 |= FLAG)
#define Get_Ethernet_DMA_DMACHRBAR(FLAG)     (*(uint32_t*)0x40029054 |= FLAG)
#define Set_Ethernet_MAC_MACCR(FLAG)         (*(uint32_t*)0x40028000 &= FLAG)
#define Clr_Ethernet_MAC_MACCR(FLAG)         (*(uint32_t*)0x40028000 |= ~FLAG)
#define Set_Ethernet_MAC_MACFFR(FLAG)        (*(uint32_t*)0x40028004 &= FLAG)
#define Clr_Ethernet_MAC_MACFFR(FLAG)        (*(uint32_t*)0x40028004 |= ~FLAG)
#define Set_Ethernet_MAC_MACHTHR(FLAG)       (*(uint32_t*)0x40028008 &= FLAG)
#define Clr_Ethernet_MAC_MACHTHR(FLAG)       (*(uint32_t*)0x40028008 |= ~FLAG)
#define Set_Ethernet_MAC_MACHTLR(FLAG)       (*(uint32_t*)0x4002800c &= FLAG)
#define Clr_Ethernet_MAC_MACHTLR(FLAG)       (*(uint32_t*)0x4002800c |= ~FLAG)
#define Set_Ethernet_MAC_MACMIIAR(FLAG)      (*(uint32_t*)0x40028010 &= FLAG)
#define Clr_Ethernet_MAC_MACMIIAR(FLAG)      (*(uint32_t*)0x40028010 |= ~FLAG)
#define Set_Ethernet_MAC_MACMIIDR(FLAG)      (*(uint32_t*)0x40028014 &= FLAG)
#define Clr_Ethernet_MAC_MACMIIDR(FLAG)      (*(uint32_t*)0x40028014 |= ~FLAG)
#define Set_Ethernet_MAC_MACFCR(FLAG)        (*(uint32_t*)0x40028018 &= FLAG)
#define Clr_Ethernet_MAC_MACFCR(FLAG)        (*(uint32_t*)0x40028018 |= ~FLAG)
#define Set_Ethernet_MAC_MACVLANTR(FLAG)     (*(uint32_t*)0x4002801c &= FLAG)
#define Clr_Ethernet_MAC_MACVLANTR(FLAG)     (*(uint32_t*)0x4002801c |= ~FLAG)
#define Set_Ethernet_MAC_MACPMTCSR(FLAG)     (*(uint32_t*)0x4002802c &= FLAG)
#define Clr_Ethernet_MAC_MACPMTCSR(FLAG)     (*(uint32_t*)0x4002802c |= ~FLAG)
#define Set_Ethernet_MAC_MACDBGR(FLAG)       (*(uint32_t*)0x40028034 &= FLAG)
#define Clr_Ethernet_MAC_MACDBGR(FLAG)       (*(uint32_t*)0x40028034 |= ~FLAG)
#define Set_Ethernet_MAC_MACSR(FLAG)         (*(uint32_t*)0x40028038 &= FLAG)
#define Clr_Ethernet_MAC_MACSR(FLAG)         (*(uint32_t*)0x40028038 |= ~FLAG)
#define Set_Ethernet_MAC_MACIMR(FLAG)        (*(uint32_t*)0x4002803c &= FLAG)
#define Clr_Ethernet_MAC_MACIMR(FLAG)        (*(uint32_t*)0x4002803c |= ~FLAG)
#define Set_Ethernet_MAC_MACA0HR(FLAG)       (*(uint32_t*)0x40028040 &= FLAG)
#define Clr_Ethernet_MAC_MACA0HR(FLAG)       (*(uint32_t*)0x40028040 |= ~FLAG)
#define Set_Ethernet_MAC_MACA0LR(FLAG)       (*(uint32_t*)0x40028044 &= FLAG)
#define Clr_Ethernet_MAC_MACA0LR(FLAG)       (*(uint32_t*)0x40028044 |= ~FLAG)
#define Set_Ethernet_MAC_MACA1HR(FLAG)       (*(uint32_t*)0x40028048 &= FLAG)
#define Clr_Ethernet_MAC_MACA1HR(FLAG)       (*(uint32_t*)0x40028048 |= ~FLAG)
#define Set_Ethernet_MAC_MACA1LR(FLAG)       (*(uint32_t*)0x4002804c &= FLAG)
#define Clr_Ethernet_MAC_MACA1LR(FLAG)       (*(uint32_t*)0x4002804c |= ~FLAG)
#define Set_Ethernet_MAC_MACA2HR(FLAG)       (*(uint32_t*)0x40028050 &= FLAG)
#define Clr_Ethernet_MAC_MACA2HR(FLAG)       (*(uint32_t*)0x40028050 |= ~FLAG)
#define Set_Ethernet_MAC_MACA2LR(FLAG)       (*(uint32_t*)0x40028054 &= FLAG)
#define Clr_Ethernet_MAC_MACA2LR(FLAG)       (*(uint32_t*)0x40028054 |= ~FLAG)
#define Set_Ethernet_MAC_MACA3HR(FLAG)       (*(uint32_t*)0x40028058 &= FLAG)
#define Clr_Ethernet_MAC_MACA3HR(FLAG)       (*(uint32_t*)0x40028058 |= ~FLAG)
#define Set_Ethernet_MAC_MACA3LR(FLAG)       (*(uint32_t*)0x4002805c &= FLAG)
#define Clr_Ethernet_MAC_MACA3LR(FLAG)       (*(uint32_t*)0x4002805c |= ~FLAG)
#define Set_Ethernet_MAC_MACRWUFFER(FLAG)    (*(uint32_t*)0x40028060 &= FLAG)
#define Clr_Ethernet_MAC_MACRWUFFER(FLAG)    (*(uint32_t*)0x40028060 |= ~FLAG)
#define Set_Ethernet_MMC_MMCCR(FLAG)         (*(uint32_t*)0x40028100 &= FLAG)
#define Clr_Ethernet_MMC_MMCCR(FLAG)         (*(uint32_t*)0x40028100 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRIR(FLAG)        (*(uint32_t*)0x40028104 &= FLAG)
#define Clr_Ethernet_MMC_MMCRIR(FLAG)        (*(uint32_t*)0x40028104 |= ~FLAG)
#define Set_Ethernet_MMC_MMCTIR(FLAG)        (*(uint32_t*)0x40028108 &= FLAG)
#define Clr_Ethernet_MMC_MMCTIR(FLAG)        (*(uint32_t*)0x40028108 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRIMR(FLAG)       (*(uint32_t*)0x4002810c &= FLAG)
#define Clr_Ethernet_MMC_MMCRIMR(FLAG)       (*(uint32_t*)0x4002810c |= ~FLAG)
#define Set_Ethernet_MMC_MMCTIMR(FLAG)       (*(uint32_t*)0x40028110 &= FLAG)
#define Clr_Ethernet_MMC_MMCTIMR(FLAG)       (*(uint32_t*)0x40028110 |= ~FLAG)
#define Set_Ethernet_MMC_MMCTGFSCCR(FLAG)    (*(uint32_t*)0x4002814c &= FLAG)
#define Clr_Ethernet_MMC_MMCTGFSCCR(FLAG)    (*(uint32_t*)0x4002814c |= ~FLAG)
#define Set_Ethernet_MMC_MMCTGFMSCCR(FLAG)   (*(uint32_t*)0x40028150 &= FLAG)
#define Clr_Ethernet_MMC_MMCTGFMSCCR(FLAG)   (*(uint32_t*)0x40028150 |= ~FLAG)
#define Set_Ethernet_MMC_MMCTGFCR(FLAG)      (*(uint32_t*)0x40028168 &= FLAG)
#define Clr_Ethernet_MMC_MMCTGFCR(FLAG)      (*(uint32_t*)0x40028168 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRFCECR(FLAG)     (*(uint32_t*)0x40028194 &= FLAG)
#define Clr_Ethernet_MMC_MMCRFCECR(FLAG)     (*(uint32_t*)0x40028194 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRFAECR(FLAG)     (*(uint32_t*)0x40028198 &= FLAG)
#define Clr_Ethernet_MMC_MMCRFAECR(FLAG)     (*(uint32_t*)0x40028198 |= ~FLAG)
#define Set_Ethernet_MMC_MMCRGUFCR(FLAG)     (*(uint32_t*)0x400281c4 &= FLAG)
#define Clr_Ethernet_MMC_MMCRGUFCR(FLAG)     (*(uint32_t*)0x400281c4 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSCR(FLAG)       (*(uint32_t*)0x40028700 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSCR(FLAG)       (*(uint32_t*)0x40028700 |= ~FLAG)
#define Set_Ethernet_PTP_PTPSSIR(FLAG)       (*(uint32_t*)0x40028704 &= FLAG)
#define Clr_Ethernet_PTP_PTPSSIR(FLAG)       (*(uint32_t*)0x40028704 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSHR(FLAG)       (*(uint32_t*)0x40028708 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSHR(FLAG)       (*(uint32_t*)0x40028708 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSLR(FLAG)       (*(uint32_t*)0x4002870c &= FLAG)
#define Clr_Ethernet_PTP_PTPTSLR(FLAG)       (*(uint32_t*)0x4002870c |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSHUR(FLAG)      (*(uint32_t*)0x40028710 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSHUR(FLAG)      (*(uint32_t*)0x40028710 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSLUR(FLAG)      (*(uint32_t*)0x40028714 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSLUR(FLAG)      (*(uint32_t*)0x40028714 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSAR(FLAG)       (*(uint32_t*)0x40028718 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSAR(FLAG)       (*(uint32_t*)0x40028718 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTTHR(FLAG)       (*(uint32_t*)0x4002871c &= FLAG)
#define Clr_Ethernet_PTP_PTPTTHR(FLAG)       (*(uint32_t*)0x4002871c |= ~FLAG)
#define Set_Ethernet_PTP_PTPTTLR(FLAG)       (*(uint32_t*)0x40028720 &= FLAG)
#define Clr_Ethernet_PTP_PTPTTLR(FLAG)       (*(uint32_t*)0x40028720 |= ~FLAG)
#define Set_Ethernet_PTP_PTPTSSR(FLAG)       (*(uint32_t*)0x40028728 &= FLAG)
#define Clr_Ethernet_PTP_PTPTSSR(FLAG)       (*(uint32_t*)0x40028728 |= ~FLAG)
#define Set_Ethernet_PTP_PTPPPSCR(FLAG)      (*(uint32_t*)0x4002872c &= FLAG)
#define Clr_Ethernet_PTP_PTPPPSCR(FLAG)      (*(uint32_t*)0x4002872c |= ~FLAG)
#define Set_Ethernet_DMA_DMABMR(FLAG)        (*(uint32_t*)0x40029000 &= FLAG)
#define Clr_Ethernet_DMA_DMABMR(FLAG)        (*(uint32_t*)0x40029000 |= ~FLAG)
#define Set_Ethernet_DMA_DMATPDR(FLAG)       (*(uint32_t*)0x40029004 &= FLAG)
#define Clr_Ethernet_DMA_DMATPDR(FLAG)       (*(uint32_t*)0x40029004 |= ~FLAG)
#define Set_Ethernet_DMA_DMARPDR(FLAG)       (*(uint32_t*)0x40029008 &= FLAG)
#define Clr_Ethernet_DMA_DMARPDR(FLAG)       (*(uint32_t*)0x40029008 |= ~FLAG)
#define Set_Ethernet_DMA_DMARDLAR(FLAG)      (*(uint32_t*)0x4002900c &= FLAG)
#define Clr_Ethernet_DMA_DMARDLAR(FLAG)      (*(uint32_t*)0x4002900c |= ~FLAG)
#define Set_Ethernet_DMA_DMATDLAR(FLAG)      (*(uint32_t*)0x40029010 &= FLAG)
#define Clr_Ethernet_DMA_DMATDLAR(FLAG)      (*(uint32_t*)0x40029010 |= ~FLAG)
#define Set_Ethernet_DMA_DMASR(FLAG)         (*(uint32_t*)0x40029014 &= FLAG)
#define Clr_Ethernet_DMA_DMASR(FLAG)         (*(uint32_t*)0x40029014 |= ~FLAG)
#define Set_Ethernet_DMA_DMAOMR(FLAG)        (*(uint32_t*)0x40029018 &= FLAG)
#define Clr_Ethernet_DMA_DMAOMR(FLAG)        (*(uint32_t*)0x40029018 |= ~FLAG)
#define Set_Ethernet_DMA_DMAIER(FLAG)        (*(uint32_t*)0x4002901c &= FLAG)
#define Clr_Ethernet_DMA_DMAIER(FLAG)        (*(uint32_t*)0x4002901c |= ~FLAG)
#define Set_Ethernet_DMA_DMAMFBOCR(FLAG)     (*(uint32_t*)0x40029020 &= FLAG)
#define Clr_Ethernet_DMA_DMAMFBOCR(FLAG)     (*(uint32_t*)0x40029020 |= ~FLAG)
#define Set_Ethernet_DMA_DMARSWTR(FLAG)      (*(uint32_t*)0x40029024 &= FLAG)
#define Clr_Ethernet_DMA_DMARSWTR(FLAG)      (*(uint32_t*)0x40029024 |= ~FLAG)
#define Set_Ethernet_DMA_DMACHTDR(FLAG)      (*(uint32_t*)0x40029048 &= FLAG)
#define Clr_Ethernet_DMA_DMACHTDR(FLAG)      (*(uint32_t*)0x40029048 |= ~FLAG)
#define Set_Ethernet_DMA_DMACHRDR(FLAG)      (*(uint32_t*)0x4002904c &= FLAG)
#define Clr_Ethernet_DMA_DMACHRDR(FLAG)      (*(uint32_t*)0x4002904c |= ~FLAG)
#define Set_Ethernet_DMA_DMACHTBAR(FLAG)     (*(uint32_t*)0x40029050 &= FLAG)
#define Clr_Ethernet_DMA_DMACHTBAR(FLAG)     (*(uint32_t*)0x40029050 |= ~FLAG)
#define Set_Ethernet_DMA_DMACHRBAR(FLAG)     (*(uint32_t*)0x40029054 &= FLAG)
#define Clr_Ethernet_DMA_DMACHRBAR(FLAG)     (*(uint32_t*)0x40029054 |= ~FLAG)
#define  _Ethernet_MAC_MACCR_RE                              (0x1 << 2)    // RE
#define  _Ethernet_MAC_MACCR_TE                              (0x1 << 3)    // TE
#define  _Ethernet_MAC_MACCR_DC                              (0x1 << 4)    // DC
#define  _Ethernet_MAC_MACCR_BL                              (0x3 << 5)    // BL
#define  _Ethernet_MAC_MACCR_APCS                            (0x1 << 7)    // APCS
#define  _Ethernet_MAC_MACCR_RD                              (0x1 << 9)    // RD
#define  _Ethernet_MAC_MACCR_IPCO                            (0x1 << 10)    // IPCO
#define  _Ethernet_MAC_MACCR_DM                              (0x1 << 11)    // DM
#define  _Ethernet_MAC_MACCR_LM                              (0x1 << 12)    // LM
#define  _Ethernet_MAC_MACCR_ROD                             (0x1 << 13)    // ROD
#define  _Ethernet_MAC_MACCR_FES                             (0x1 << 14)    // FES
#define  _Ethernet_MAC_MACCR_CSD                             (0x1 << 16)    // CSD
#define  _Ethernet_MAC_MACCR_IFG                             (0x7 << 17)    // IFG
#define  _Ethernet_MAC_MACCR_JD                              (0x1 << 22)    // JD
#define  _Ethernet_MAC_MACCR_WD                              (0x1 << 23)    // WD
#define  _Ethernet_MAC_MACCR_CSTF                            (0x1 << 25)    // CSTF
#define  _Ethernet_MAC_MACFFR_PM                             (0x1 << 0)    // PM
#define  _Ethernet_MAC_MACFFR_HU                             (0x1 << 1)    // HU
#define  _Ethernet_MAC_MACFFR_HM                             (0x1 << 2)    // HM
#define  _Ethernet_MAC_MACFFR_DAIF                           (0x1 << 3)    // DAIF
#define  _Ethernet_MAC_MACFFR_RAM                            (0x1 << 4)    // RAM
#define  _Ethernet_MAC_MACFFR_BFD                            (0x1 << 5)    // BFD
#define  _Ethernet_MAC_MACFFR_PCF                            (0x1 << 6)    // PCF
#define  _Ethernet_MAC_MACFFR_SAIF                           (0x1 << 7)    // SAIF
#define  _Ethernet_MAC_MACFFR_SAF                            (0x1 << 8)    // SAF
#define  _Ethernet_MAC_MACFFR_HPF                            (0x1 << 9)    // HPF
#define  _Ethernet_MAC_MACFFR_RA                             (0x1 << 31)    // RA
#define  _Ethernet_MAC_MACHTHR_HTH                           (0xffffffff << 0)    // HTH
#define  _Ethernet_MAC_MACHTLR_HTL                           (0xffffffff << 0)    // HTL
#define  _Ethernet_MAC_MACMIIAR_MB                           (0x1 << 0)    // MB
#define  _Ethernet_MAC_MACMIIAR_MW                           (0x1 << 1)    // MW
#define  _Ethernet_MAC_MACMIIAR_CR                           (0x7 << 2)    // CR
#define  _Ethernet_MAC_MACMIIAR_MR                           (0x1f << 6)    // MR
#define  _Ethernet_MAC_MACMIIAR_PA                           (0x1f << 11)    // PA
#define  _Ethernet_MAC_MACMIIDR_TD                           (0xffff << 0)    // TD
#define  _Ethernet_MAC_MACFCR_FCB                            (0x1 << 0)    // FCB
#define  _Ethernet_MAC_MACFCR_TFCE                           (0x1 << 1)    // TFCE
#define  _Ethernet_MAC_MACFCR_RFCE                           (0x1 << 2)    // RFCE
#define  _Ethernet_MAC_MACFCR_UPFD                           (0x1 << 3)    // UPFD
#define  _Ethernet_MAC_MACFCR_PLT                            (0x3 << 4)    // PLT
#define  _Ethernet_MAC_MACFCR_ZQPD                           (0x1 << 7)    // ZQPD
#define  _Ethernet_MAC_MACFCR_PT                             (0xffff << 16)    // PT
#define  _Ethernet_MAC_MACVLANTR_VLANTI                      (0xffff << 0)    // VLANTI
#define  _Ethernet_MAC_MACVLANTR_VLANTC                      (0x1 << 16)    // VLANTC
#define  _Ethernet_MAC_MACPMTCSR_PD                          (0x1 << 0)    // PD
#define  _Ethernet_MAC_MACPMTCSR_MPE                         (0x1 << 1)    // MPE
#define  _Ethernet_MAC_MACPMTCSR_WFE                         (0x1 << 2)    // WFE
#define  _Ethernet_MAC_MACPMTCSR_MPR                         (0x1 << 5)    // MPR
#define  _Ethernet_MAC_MACPMTCSR_WFR                         (0x1 << 6)    // WFR
#define  _Ethernet_MAC_MACPMTCSR_GU                          (0x1 << 9)    // GU
#define  _Ethernet_MAC_MACPMTCSR_WFFRPR                      (0x1 << 31)    // WFFRPR
#define  _Ethernet_MAC_MACDBGR_CR                            (0x1 << 0)    // CR
#define  _Ethernet_MAC_MACDBGR_CSR                           (0x1 << 1)    // CSR
#define  _Ethernet_MAC_MACDBGR_ROR                           (0x1 << 2)    // ROR
#define  _Ethernet_MAC_MACDBGR_MCF                           (0x1 << 3)    // MCF
#define  _Ethernet_MAC_MACDBGR_MCP                           (0x1 << 4)    // MCP
#define  _Ethernet_MAC_MACDBGR_MCFHP                         (0x1 << 5)    // MCFHP
#define  _Ethernet_MAC_MACSR_PMTS                            (0x1 << 3)    // PMTS
#define  _Ethernet_MAC_MACSR_MMCS                            (0x1 << 4)    // MMCS
#define  _Ethernet_MAC_MACSR_MMCRS                           (0x1 << 5)    // MMCRS
#define  _Ethernet_MAC_MACSR_MMCTS                           (0x1 << 6)    // MMCTS
#define  _Ethernet_MAC_MACSR_TSTS                            (0x1 << 9)    // TSTS
#define  _Ethernet_MAC_MACIMR_PMTIM                          (0x1 << 3)    // PMTIM
#define  _Ethernet_MAC_MACIMR_TSTIM                          (0x1 << 9)    // TSTIM
#define  _Ethernet_MAC_MACA0HR_MACA0H                        (0xffff << 0)    // MAC address0 high
#define  _Ethernet_MAC_MACA0HR_MO                            (0x1 << 31)    // Always 1
#define  _Ethernet_MAC_MACA0LR_MACA0L                        (0xffffffff << 0)    // 0
#define  _Ethernet_MAC_MACA1HR_MACA1H                        (0xffff << 0)    // MACA1H
#define  _Ethernet_MAC_MACA1HR_MBC                           (0x3f << 24)    // MBC
#define  _Ethernet_MAC_MACA1HR_SA                            (0x1 << 30)    // SA
#define  _Ethernet_MAC_MACA1HR_AE                            (0x1 << 31)    // AE
#define  _Ethernet_MAC_MACA1LR_MACA1LR                       (0xffffffff << 0)    // MACA1LR
#define  _Ethernet_MAC_MACA2HR_MAC2AH                        (0xffff << 0)    // MAC2AH
#define  _Ethernet_MAC_MACA2HR_MBC                           (0x3f << 24)    // MBC
#define  _Ethernet_MAC_MACA2HR_SA                            (0x1 << 30)    // SA
#define  _Ethernet_MAC_MACA2HR_AE                            (0x1 << 31)    // AE
#define  _Ethernet_MAC_MACA2LR_MACA2L                        (0x7fffffff << 0)    // MACA2L
#define  _Ethernet_MAC_MACA3HR_MACA3H                        (0xffff << 0)    // MACA3H
#define  _Ethernet_MAC_MACA3HR_MBC                           (0x3f << 24)    // MBC
#define  _Ethernet_MAC_MACA3HR_SA                            (0x1 << 30)    // SA
#define  _Ethernet_MAC_MACA3HR_AE                            (0x1 << 31)    // AE
#define  _Ethernet_MAC_MACA3LR_MBCA3L                        (0xffffffff << 0)    // MBCA3L
#define  _Ethernet_MMC_MMCCR_CR                              (0x1 << 0)    // CR
#define  _Ethernet_MMC_MMCCR_CSR                             (0x1 << 1)    // CSR
#define  _Ethernet_MMC_MMCCR_ROR                             (0x1 << 2)    // ROR
#define  _Ethernet_MMC_MMCCR_MCF                             (0x1 << 3)    // MCF
#define  _Ethernet_MMC_MMCCR_MCP                             (0x1 << 4)    // MCP
#define  _Ethernet_MMC_MMCCR_MCFHP                           (0x1 << 5)    // MCFHP
#define  _Ethernet_MMC_MMCRIR_RFCES                          (0x1 << 5)    // RFCES
#define  _Ethernet_MMC_MMCRIR_RFAES                          (0x1 << 6)    // RFAES
#define  _Ethernet_MMC_MMCRIR_RGUFS                          (0x1 << 17)    // RGUFS
#define  _Ethernet_MMC_MMCTIR_TGFSCS                         (0x1 << 14)    // TGFSCS
#define  _Ethernet_MMC_MMCTIR_TGFMSCS                        (0x1 << 15)    // TGFMSCS
#define  _Ethernet_MMC_MMCTIR_TGFS                           (0x1 << 21)    // TGFS
#define  _Ethernet_MMC_MMCRIMR_RFCEM                         (0x1 << 5)    // RFCEM
#define  _Ethernet_MMC_MMCRIMR_RFAEM                         (0x1 << 6)    // RFAEM
#define  _Ethernet_MMC_MMCRIMR_RGUFM                         (0x1 << 17)    // RGUFM
#define  _Ethernet_MMC_MMCTIMR_TGFSCM                        (0x1 << 14)    // TGFSCM
#define  _Ethernet_MMC_MMCTIMR_TGFMSCM                       (0x1 << 15)    // TGFMSCM
#define  _Ethernet_MMC_MMCTIMR_TGFM                          (0x1 << 16)    // TGFM
#define  _Ethernet_MMC_MMCTGFSCCR_TGFSCC                     (0xffffffff << 0)    // TGFSCC
#define  _Ethernet_MMC_MMCTGFMSCCR_TGFMSCC                   (0xffffffff << 0)    // TGFMSCC
#define  _Ethernet_MMC_MMCTGFCR_TGFC                         (0xffffffff << 0)    // HTL
#define  _Ethernet_MMC_MMCRFCECR_RFCFC                       (0xffffffff << 0)    // RFCFC
#define  _Ethernet_MMC_MMCRFAECR_RFAEC                       (0xffffffff << 0)    // RFAEC
#define  _Ethernet_MMC_MMCRGUFCR_RGUFC                       (0xffffffff << 0)    // RGUFC
#define  _Ethernet_PTP_PTPTSCR_TSE                           (0x1 << 0)    // TSE
#define  _Ethernet_PTP_PTPTSCR_TSFCU                         (0x1 << 1)    // TSFCU
#define  _Ethernet_PTP_PTPTSCR_TSPTPPSV2E                    (0x1 << 10)    // TSPTPPSV2E
#define  _Ethernet_PTP_PTPTSCR_TSSPTPOEFE                    (0x1 << 11)    // TSSPTPOEFE
#define  _Ethernet_PTP_PTPTSCR_TSSIPV6FE                     (0x1 << 12)    // TSSIPV6FE
#define  _Ethernet_PTP_PTPTSCR_TSSIPV4FE                     (0x1 << 13)    // TSSIPV4FE
#define  _Ethernet_PTP_PTPTSCR_TSSEME                        (0x1 << 14)    // TSSEME
#define  _Ethernet_PTP_PTPTSCR_TSSMRME                       (0x1 << 15)    // TSSMRME
#define  _Ethernet_PTP_PTPTSCR_TSCNT                         (0x3 << 16)    // TSCNT
#define  _Ethernet_PTP_PTPTSCR_TSPFFMAE                      (0x1 << 18)    // TSPFFMAE
#define  _Ethernet_PTP_PTPTSCR_TSSTI                         (0x1 << 2)    // TSSTI
#define  _Ethernet_PTP_PTPTSCR_TSSTU                         (0x1 << 3)    // TSSTU
#define  _Ethernet_PTP_PTPTSCR_TSITE                         (0x1 << 4)    // TSITE
#define  _Ethernet_PTP_PTPTSCR_TTSARU                        (0x1 << 5)    // TTSARU
#define  _Ethernet_PTP_PTPTSCR_TSSARFE                       (0x1 << 8)    // TSSARFE
#define  _Ethernet_PTP_PTPTSCR_TSSSR                         (0x1 << 9)    // TSSSR
#define  _Ethernet_PTP_PTPSSIR_STSSI                         (0xff << 0)    // STSSI
#define  _Ethernet_PTP_PTPTSHR_STS                           (0xffffffff << 0)    // STS
#define  _Ethernet_PTP_PTPTSLR_STSS                          (0x7fffffff << 0)    // STSS
#define  _Ethernet_PTP_PTPTSLR_STPNS                         (0x1 << 31)    // STPNS
#define  _Ethernet_PTP_PTPTSHUR_TSUS                         (0xffffffff << 0)    // TSUS
#define  _Ethernet_PTP_PTPTSLUR_TSUSS                        (0x7fffffff << 0)    // TSUSS
#define  _Ethernet_PTP_PTPTSLUR_TSUPNS                       (0x1 << 31)    // TSUPNS
#define  _Ethernet_PTP_PTPTSAR_TSA                           (0xffffffff << 0)    // TSA
#define  _Ethernet_PTP_PTPTTHR_TTSH                          (0xffffffff << 0)    // 0
#define  _Ethernet_PTP_PTPTTLR_TTSL                          (0xffffffff << 0)    // TTSL
#define  _Ethernet_PTP_PTPTSSR_TSSO                          (0x1 << 0)    // TSSO
#define  _Ethernet_PTP_PTPTSSR_TSTTR                         (0x1 << 1)    // TSTTR
#define  _Ethernet_PTP_PTPPPSCR_TSSO                         (0x1 << 0)    // TSSO
#define  _Ethernet_PTP_PTPPPSCR_TSTTR                        (0x1 << 1)    // TSTTR
#define  _Ethernet_DMA_DMABMR_SR                             (0x1 << 0)    // SR
#define  _Ethernet_DMA_DMABMR_DA                             (0x1 << 1)    // DA
#define  _Ethernet_DMA_DMABMR_DSL                            (0x1f << 2)    // DSL
#define  _Ethernet_DMA_DMABMR_EDFE                           (0x1 << 7)    // EDFE
#define  _Ethernet_DMA_DMABMR_PBL                            (0x3f << 8)    // PBL
#define  _Ethernet_DMA_DMABMR_RTPR                           (0x3 << 14)    // RTPR
#define  _Ethernet_DMA_DMABMR_FB                             (0x1 << 16)    // FB
#define  _Ethernet_DMA_DMABMR_RDP                            (0x3f << 17)    // RDP
#define  _Ethernet_DMA_DMABMR_USP                            (0x1 << 23)    // USP
#define  _Ethernet_DMA_DMABMR_FPM                            (0x1 << 24)    // FPM
#define  _Ethernet_DMA_DMABMR_AAB                            (0x1 << 25)    // AAB
#define  _Ethernet_DMA_DMABMR_MB                             (0x1 << 26)    // MB
#define  _Ethernet_DMA_DMATPDR_TPD                           (0xffffffff << 0)    // TPD
#define  _Ethernet_DMA_DMARPDR_RPD                           (0xffffffff << 0)    // RPD
#define  _Ethernet_DMA_DMARDLAR_SRL                          (0xffffffff << 0)    // SRL
#define  _Ethernet_DMA_DMATDLAR_STL                          (0xffffffff << 0)    // STL
#define  _Ethernet_DMA_DMASR_TS                              (0x1 << 0)    // TS
#define  _Ethernet_DMA_DMASR_TPSS                            (0x1 << 1)    // TPSS
#define  _Ethernet_DMA_DMASR_TBUS                            (0x1 << 2)    // TBUS
#define  _Ethernet_DMA_DMASR_TJTS                            (0x1 << 3)    // TJTS
#define  _Ethernet_DMA_DMASR_ROS                             (0x1 << 4)    // ROS
#define  _Ethernet_DMA_DMASR_TUS                             (0x1 << 5)    // TUS
#define  _Ethernet_DMA_DMASR_RS                              (0x1 << 6)    // RS
#define  _Ethernet_DMA_DMASR_RBUS                            (0x1 << 7)    // RBUS
#define  _Ethernet_DMA_DMASR_RPSS                            (0x1 << 8)    // RPSS
#define  _Ethernet_DMA_DMASR_PWTS                            (0x1 << 9)    // PWTS
#define  _Ethernet_DMA_DMASR_ETS                             (0x1 << 10)    // ETS
#define  _Ethernet_DMA_DMASR_FBES                            (0x1 << 13)    // FBES
#define  _Ethernet_DMA_DMASR_ERS                             (0x1 << 14)    // ERS
#define  _Ethernet_DMA_DMASR_AIS                             (0x1 << 15)    // AIS
#define  _Ethernet_DMA_DMASR_NIS                             (0x1 << 16)    // NIS
#define  _Ethernet_DMA_DMASR_RPS                             (0x7 << 17)    // RPS
#define  _Ethernet_DMA_DMASR_TPS                             (0x7 << 20)    // TPS
#define  _Ethernet_DMA_DMASR_EBS                             (0x7 << 23)    // EBS
#define  _Ethernet_DMA_DMASR_MMCS                            (0x1 << 27)    // MMCS
#define  _Ethernet_DMA_DMASR_PMTS                            (0x1 << 28)    // PMTS
#define  _Ethernet_DMA_DMASR_TSTS                            (0x1 << 29)    // TSTS
#define  _Ethernet_DMA_DMAOMR_SR                             (0x1 << 1)    // SR
#define  _Ethernet_DMA_DMAOMR_OSF                            (0x1 << 2)    // OSF
#define  _Ethernet_DMA_DMAOMR_RTC                            (0x3 << 3)    // RTC
#define  _Ethernet_DMA_DMAOMR_FUGF                           (0x1 << 6)    // FUGF
#define  _Ethernet_DMA_DMAOMR_FEF                            (0x1 << 7)    // FEF
#define  _Ethernet_DMA_DMAOMR_ST                             (0x1 << 13)    // ST
#define  _Ethernet_DMA_DMAOMR_TTC                            (0x7 << 14)    // TTC
#define  _Ethernet_DMA_DMAOMR_FTF                            (0x1 << 20)    // FTF
#define  _Ethernet_DMA_DMAOMR_TSF                            (0x1 << 21)    // TSF
#define  _Ethernet_DMA_DMAOMR_DFRF                           (0x1 << 24)    // DFRF
#define  _Ethernet_DMA_DMAOMR_RSF                            (0x1 << 25)    // RSF
#define  _Ethernet_DMA_DMAOMR_DTCEFD                         (0x1 << 26)    // DTCEFD
#define  _Ethernet_DMA_DMAIER_TIE                            (0x1 << 0)    // TIE
#define  _Ethernet_DMA_DMAIER_TPSIE                          (0x1 << 1)    // TPSIE
#define  _Ethernet_DMA_DMAIER_TBUIE                          (0x1 << 2)    // TBUIE
#define  _Ethernet_DMA_DMAIER_TJTIE                          (0x1 << 3)    // TJTIE
#define  _Ethernet_DMA_DMAIER_ROIE                           (0x1 << 4)    // ROIE
#define  _Ethernet_DMA_DMAIER_TUIE                           (0x1 << 5)    // TUIE
#define  _Ethernet_DMA_DMAIER_RIE                            (0x1 << 6)    // RIE
#define  _Ethernet_DMA_DMAIER_RBUIE                          (0x1 << 7)    // RBUIE
#define  _Ethernet_DMA_DMAIER_RPSIE                          (0x1 << 8)    // RPSIE
#define  _Ethernet_DMA_DMAIER_RWTIE                          (0x1 << 9)    // RWTIE
#define  _Ethernet_DMA_DMAIER_ETIE                           (0x1 << 10)    // ETIE
#define  _Ethernet_DMA_DMAIER_FBEIE                          (0x1 << 13)    // FBEIE
#define  _Ethernet_DMA_DMAIER_ERIE                           (0x1 << 14)    // ERIE
#define  _Ethernet_DMA_DMAIER_AISE                           (0x1 << 15)    // AISE
#define  _Ethernet_DMA_DMAIER_NISE                           (0x1 << 16)    // NISE
#define  _Ethernet_DMA_DMAMFBOCR_MFC                         (0xffff << 0)    // MFC
#define  _Ethernet_DMA_DMAMFBOCR_OMFC                        (0x1 << 16)    // OMFC
#define  _Ethernet_DMA_DMAMFBOCR_MFA                         (0x7ff << 17)    // MFA
#define  _Ethernet_DMA_DMAMFBOCR_OFOC                        (0x1 << 28)    // OFOC
#define  _Ethernet_DMA_DMARSWTR_RSWTC                        (0xff << 0)    // RSWTC
#define  _Ethernet_DMA_DMACHTDR_HTDAP                        (0xffffffff << 0)    // HTDAP
#define  _Ethernet_DMA_DMACHRDR_HRDAP                        (0xffffffff << 0)    // HRDAP
#define  _Ethernet_DMA_DMACHTBAR_HTBAP                       (0xffffffff << 0)    // HTBAP
#define  _Ethernet_DMA_DMACHRBAR_HRBAP                       (0xffffffff << 0)    // HRBAP
　
　drivers/inc/stm32f767xx_SPI.h

//Get and set functions 
//FLAGS are macro starts with _
#define Get_SPI2_CR1(FLAG)                   (*(uint32_t*)0x40003800 |= FLAG)
#define Get_SPI2_CR2(FLAG)                   (*(uint32_t*)0x40003804 |= FLAG)
#define Get_SPI2_SR(FLAG)                    (*(uint32_t*)0x40003808 |= FLAG)
#define Get_SPI2_DR(FLAG)                    (*(uint32_t*)0x4000380c |= FLAG)
#define Get_SPI2_CRCPR(FLAG)                 (*(uint32_t*)0x40003810 |= FLAG)
#define Get_SPI2_RXCRCR(FLAG)                (*(uint32_t*)0x40003814 |= FLAG)
#define Get_SPI2_TXCRCR(FLAG)                (*(uint32_t*)0x40003818 |= FLAG)
#define Get_SPI2_I2SCFGR(FLAG)               (*(uint32_t*)0x4000381c |= FLAG)
#define Get_SPI2_I2SPR(FLAG)                 (*(uint32_t*)0x40003820 |= FLAG)
#define Get_SPI3_CR1(FLAG)                   (*(uint32_t*)0x40003c00 |= FLAG)
#define Get_SPI3_CR2(FLAG)                   (*(uint32_t*)0x40003c04 |= FLAG)
#define Get_SPI3_SR(FLAG)                    (*(uint32_t*)0x40003c08 |= FLAG)
#define Get_SPI3_DR(FLAG)                    (*(uint32_t*)0x40003c0c |= FLAG)
#define Get_SPI3_CRCPR(FLAG)                 (*(uint32_t*)0x40003c10 |= FLAG)
#define Get_SPI3_RXCRCR(FLAG)                (*(uint32_t*)0x40003c14 |= FLAG)
#define Get_SPI3_TXCRCR(FLAG)                (*(uint32_t*)0x40003c18 |= FLAG)
#define Get_SPI3_I2SCFGR(FLAG)               (*(uint32_t*)0x40003c1c |= FLAG)
#define Get_SPI3_I2SPR(FLAG)                 (*(uint32_t*)0x40003c20 |= FLAG)
#define Get_SPI1_CR1(FLAG)                   (*(uint32_t*)0x40013000 |= FLAG)
#define Get_SPI1_CR2(FLAG)                   (*(uint32_t*)0x40013004 |= FLAG)
#define Get_SPI1_SR(FLAG)                    (*(uint32_t*)0x40013008 |= FLAG)
#define Get_SPI1_DR(FLAG)                    (*(uint32_t*)0x4001300c |= FLAG)
#define Get_SPI1_CRCPR(FLAG)                 (*(uint32_t*)0x40013010 |= FLAG)
#define Get_SPI1_RXCRCR(FLAG)                (*(uint32_t*)0x40013014 |= FLAG)
#define Get_SPI1_TXCRCR(FLAG)                (*(uint32_t*)0x40013018 |= FLAG)
#define Get_SPI1_I2SCFGR(FLAG)               (*(uint32_t*)0x4001301c |= FLAG)
#define Get_SPI1_I2SPR(FLAG)                 (*(uint32_t*)0x40013020 |= FLAG)
#define Get_SPI4_CR1(FLAG)                   (*(uint32_t*)0x40013400 |= FLAG)
#define Get_SPI4_CR2(FLAG)                   (*(uint32_t*)0x40013404 |= FLAG)
#define Get_SPI4_SR(FLAG)                    (*(uint32_t*)0x40013408 |= FLAG)
#define Get_SPI4_DR(FLAG)                    (*(uint32_t*)0x4001340c |= FLAG)
#define Get_SPI4_CRCPR(FLAG)                 (*(uint32_t*)0x40013410 |= FLAG)
#define Get_SPI4_RXCRCR(FLAG)                (*(uint32_t*)0x40013414 |= FLAG)
#define Get_SPI4_TXCRCR(FLAG)                (*(uint32_t*)0x40013418 |= FLAG)
#define Get_SPI4_I2SCFGR(FLAG)               (*(uint32_t*)0x4001341c |= FLAG)
#define Get_SPI4_I2SPR(FLAG)                 (*(uint32_t*)0x40013420 |= FLAG)
#define Get_SPI5_CR1(FLAG)                   (*(uint32_t*)0x40015000 |= FLAG)
#define Get_SPI5_CR2(FLAG)                   (*(uint32_t*)0x40015004 |= FLAG)
#define Get_SPI5_SR(FLAG)                    (*(uint32_t*)0x40015008 |= FLAG)
#define Get_SPI5_DR(FLAG)                    (*(uint32_t*)0x4001500c |= FLAG)
#define Get_SPI5_CRCPR(FLAG)                 (*(uint32_t*)0x40015010 |= FLAG)
#define Get_SPI5_RXCRCR(FLAG)                (*(uint32_t*)0x40015014 |= FLAG)
#define Get_SPI5_TXCRCR(FLAG)                (*(uint32_t*)0x40015018 |= FLAG)
#define Get_SPI5_I2SCFGR(FLAG)               (*(uint32_t*)0x4001501c |= FLAG)
#define Get_SPI5_I2SPR(FLAG)                 (*(uint32_t*)0x40015020 |= FLAG)
#define Get_SPI6_CR1(FLAG)                   (*(uint32_t*)0x40015400 |= FLAG)
#define Get_SPI6_CR2(FLAG)                   (*(uint32_t*)0x40015404 |= FLAG)
#define Get_SPI6_SR(FLAG)                    (*(uint32_t*)0x40015408 |= FLAG)
#define Get_SPI6_DR(FLAG)                    (*(uint32_t*)0x4001540c |= FLAG)
#define Get_SPI6_CRCPR(FLAG)                 (*(uint32_t*)0x40015410 |= FLAG)
#define Get_SPI6_RXCRCR(FLAG)                (*(uint32_t*)0x40015414 |= FLAG)
#define Get_SPI6_TXCRCR(FLAG)                (*(uint32_t*)0x40015418 |= FLAG)
#define Get_SPI6_I2SCFGR(FLAG)               (*(uint32_t*)0x4001541c |= FLAG)
#define Get_SPI6_I2SPR(FLAG)                 (*(uint32_t*)0x40015420 |= FLAG)
#define Set_SPI2_CR1(FLAG)                   (*(uint32_t*)0x40003800 &= FLAG)
#define Clr_SPI2_CR1(FLAG)                   (*(uint32_t*)0x40003800 |= ~FLAG)
#define Set_SPI2_CR2(FLAG)                   (*(uint32_t*)0x40003804 &= FLAG)
#define Clr_SPI2_CR2(FLAG)                   (*(uint32_t*)0x40003804 |= ~FLAG)
#define Set_SPI2_SR(FLAG)                    (*(uint32_t*)0x40003808 &= FLAG)
#define Clr_SPI2_SR(FLAG)                    (*(uint32_t*)0x40003808 |= ~FLAG)
#define Set_SPI2_DR(FLAG)                    (*(uint32_t*)0x4000380c &= FLAG)
#define Clr_SPI2_DR(FLAG)                    (*(uint32_t*)0x4000380c |= ~FLAG)
#define Set_SPI2_CRCPR(FLAG)                 (*(uint32_t*)0x40003810 &= FLAG)
#define Clr_SPI2_CRCPR(FLAG)                 (*(uint32_t*)0x40003810 |= ~FLAG)
#define Set_SPI2_RXCRCR(FLAG)                (*(uint32_t*)0x40003814 &= FLAG)
#define Clr_SPI2_RXCRCR(FLAG)                (*(uint32_t*)0x40003814 |= ~FLAG)
#define Set_SPI2_TXCRCR(FLAG)                (*(uint32_t*)0x40003818 &= FLAG)
#define Clr_SPI2_TXCRCR(FLAG)                (*(uint32_t*)0x40003818 |= ~FLAG)
#define Set_SPI2_I2SCFGR(FLAG)               (*(uint32_t*)0x4000381c &= FLAG)
#define Clr_SPI2_I2SCFGR(FLAG)               (*(uint32_t*)0x4000381c |= ~FLAG)
#define Set_SPI2_I2SPR(FLAG)                 (*(uint32_t*)0x40003820 &= FLAG)
#define Clr_SPI2_I2SPR(FLAG)                 (*(uint32_t*)0x40003820 |= ~FLAG)
#define Set_SPI3_CR1(FLAG)                   (*(uint32_t*)0x40003c00 &= FLAG)
#define Clr_SPI3_CR1(FLAG)                   (*(uint32_t*)0x40003c00 |= ~FLAG)
#define Set_SPI3_CR2(FLAG)                   (*(uint32_t*)0x40003c04 &= FLAG)
#define Clr_SPI3_CR2(FLAG)                   (*(uint32_t*)0x40003c04 |= ~FLAG)
#define Set_SPI3_SR(FLAG)                    (*(uint32_t*)0x40003c08 &= FLAG)
#define Clr_SPI3_SR(FLAG)                    (*(uint32_t*)0x40003c08 |= ~FLAG)
#define Set_SPI3_DR(FLAG)                    (*(uint32_t*)0x40003c0c &= FLAG)
#define Clr_SPI3_DR(FLAG)                    (*(uint32_t*)0x40003c0c |= ~FLAG)
#define Set_SPI3_CRCPR(FLAG)                 (*(uint32_t*)0x40003c10 &= FLAG)
#define Clr_SPI3_CRCPR(FLAG)                 (*(uint32_t*)0x40003c10 |= ~FLAG)
#define Set_SPI3_RXCRCR(FLAG)                (*(uint32_t*)0x40003c14 &= FLAG)
#define Clr_SPI3_RXCRCR(FLAG)                (*(uint32_t*)0x40003c14 |= ~FLAG)
#define Set_SPI3_TXCRCR(FLAG)                (*(uint32_t*)0x40003c18 &= FLAG)
#define Clr_SPI3_TXCRCR(FLAG)                (*(uint32_t*)0x40003c18 |= ~FLAG)
#define Set_SPI3_I2SCFGR(FLAG)               (*(uint32_t*)0x40003c1c &= FLAG)
#define Clr_SPI3_I2SCFGR(FLAG)               (*(uint32_t*)0x40003c1c |= ~FLAG)
#define Set_SPI3_I2SPR(FLAG)                 (*(uint32_t*)0x40003c20 &= FLAG)
#define Clr_SPI3_I2SPR(FLAG)                 (*(uint32_t*)0x40003c20 |= ~FLAG)
#define Set_SPI1_CR1(FLAG)                   (*(uint32_t*)0x40013000 &= FLAG)
#define Clr_SPI1_CR1(FLAG)                   (*(uint32_t*)0x40013000 |= ~FLAG)
#define Set_SPI1_CR2(FLAG)                   (*(uint32_t*)0x40013004 &= FLAG)
#define Clr_SPI1_CR2(FLAG)                   (*(uint32_t*)0x40013004 |= ~FLAG)
#define Set_SPI1_SR(FLAG)                    (*(uint32_t*)0x40013008 &= FLAG)
#define Clr_SPI1_SR(FLAG)                    (*(uint32_t*)0x40013008 |= ~FLAG)
#define Set_SPI1_DR(FLAG)                    (*(uint32_t*)0x4001300c &= FLAG)
#define Clr_SPI1_DR(FLAG)                    (*(uint32_t*)0x4001300c |= ~FLAG)
#define Set_SPI1_CRCPR(FLAG)                 (*(uint32_t*)0x40013010 &= FLAG)
#define Clr_SPI1_CRCPR(FLAG)                 (*(uint32_t*)0x40013010 |= ~FLAG)
#define Set_SPI1_RXCRCR(FLAG)                (*(uint32_t*)0x40013014 &= FLAG)
#define Clr_SPI1_RXCRCR(FLAG)                (*(uint32_t*)0x40013014 |= ~FLAG)
#define Set_SPI1_TXCRCR(FLAG)                (*(uint32_t*)0x40013018 &= FLAG)
#define Clr_SPI1_TXCRCR(FLAG)                (*(uint32_t*)0x40013018 |= ~FLAG)
#define Set_SPI1_I2SCFGR(FLAG)               (*(uint32_t*)0x4001301c &= FLAG)
#define Clr_SPI1_I2SCFGR(FLAG)               (*(uint32_t*)0x4001301c |= ~FLAG)
#define Set_SPI1_I2SPR(FLAG)                 (*(uint32_t*)0x40013020 &= FLAG)
#define Clr_SPI1_I2SPR(FLAG)                 (*(uint32_t*)0x40013020 |= ~FLAG)
#define Set_SPI4_CR1(FLAG)                   (*(uint32_t*)0x40013400 &= FLAG)
#define Clr_SPI4_CR1(FLAG)                   (*(uint32_t*)0x40013400 |= ~FLAG)
#define Set_SPI4_CR2(FLAG)                   (*(uint32_t*)0x40013404 &= FLAG)
#define Clr_SPI4_CR2(FLAG)                   (*(uint32_t*)0x40013404 |= ~FLAG)
#define Set_SPI4_SR(FLAG)                    (*(uint32_t*)0x40013408 &= FLAG)
#define Clr_SPI4_SR(FLAG)                    (*(uint32_t*)0x40013408 |= ~FLAG)
#define Set_SPI4_DR(FLAG)                    (*(uint32_t*)0x4001340c &= FLAG)
#define Clr_SPI4_DR(FLAG)                    (*(uint32_t*)0x4001340c |= ~FLAG)
#define Set_SPI4_CRCPR(FLAG)                 (*(uint32_t*)0x40013410 &= FLAG)
#define Clr_SPI4_CRCPR(FLAG)                 (*(uint32_t*)0x40013410 |= ~FLAG)
#define Set_SPI4_RXCRCR(FLAG)                (*(uint32_t*)0x40013414 &= FLAG)
#define Clr_SPI4_RXCRCR(FLAG)                (*(uint32_t*)0x40013414 |= ~FLAG)
#define Set_SPI4_TXCRCR(FLAG)                (*(uint32_t*)0x40013418 &= FLAG)
#define Clr_SPI4_TXCRCR(FLAG)                (*(uint32_t*)0x40013418 |= ~FLAG)
#define Set_SPI4_I2SCFGR(FLAG)               (*(uint32_t*)0x4001341c &= FLAG)
#define Clr_SPI4_I2SCFGR(FLAG)               (*(uint32_t*)0x4001341c |= ~FLAG)
#define Set_SPI4_I2SPR(FLAG)                 (*(uint32_t*)0x40013420 &= FLAG)
#define Clr_SPI4_I2SPR(FLAG)                 (*(uint32_t*)0x40013420 |= ~FLAG)
#define Set_SPI5_CR1(FLAG)                   (*(uint32_t*)0x40015000 &= FLAG)
#define Clr_SPI5_CR1(FLAG)                   (*(uint32_t*)0x40015000 |= ~FLAG)
#define Set_SPI5_CR2(FLAG)                   (*(uint32_t*)0x40015004 &= FLAG)
#define Clr_SPI5_CR2(FLAG)                   (*(uint32_t*)0x40015004 |= ~FLAG)
#define Set_SPI5_SR(FLAG)                    (*(uint32_t*)0x40015008 &= FLAG)
#define Clr_SPI5_SR(FLAG)                    (*(uint32_t*)0x40015008 |= ~FLAG)
#define Set_SPI5_DR(FLAG)                    (*(uint32_t*)0x4001500c &= FLAG)
#define Clr_SPI5_DR(FLAG)                    (*(uint32_t*)0x4001500c |= ~FLAG)
#define Set_SPI5_CRCPR(FLAG)                 (*(uint32_t*)0x40015010 &= FLAG)
#define Clr_SPI5_CRCPR(FLAG)                 (*(uint32_t*)0x40015010 |= ~FLAG)
#define Set_SPI5_RXCRCR(FLAG)                (*(uint32_t*)0x40015014 &= FLAG)
#define Clr_SPI5_RXCRCR(FLAG)                (*(uint32_t*)0x40015014 |= ~FLAG)
#define Set_SPI5_TXCRCR(FLAG)                (*(uint32_t*)0x40015018 &= FLAG)
#define Clr_SPI5_TXCRCR(FLAG)                (*(uint32_t*)0x40015018 |= ~FLAG)
#define Set_SPI5_I2SCFGR(FLAG)               (*(uint32_t*)0x4001501c &= FLAG)
#define Clr_SPI5_I2SCFGR(FLAG)               (*(uint32_t*)0x4001501c |= ~FLAG)
#define Set_SPI5_I2SPR(FLAG)                 (*(uint32_t*)0x40015020 &= FLAG)
#define Clr_SPI5_I2SPR(FLAG)                 (*(uint32_t*)0x40015020 |= ~FLAG)
#define Set_SPI6_CR1(FLAG)                   (*(uint32_t*)0x40015400 &= FLAG)
#define Clr_SPI6_CR1(FLAG)                   (*(uint32_t*)0x40015400 |= ~FLAG)
#define Set_SPI6_CR2(FLAG)                   (*(uint32_t*)0x40015404 &= FLAG)
#define Clr_SPI6_CR2(FLAG)                   (*(uint32_t*)0x40015404 |= ~FLAG)
#define Set_SPI6_SR(FLAG)                    (*(uint32_t*)0x40015408 &= FLAG)
#define Clr_SPI6_SR(FLAG)                    (*(uint32_t*)0x40015408 |= ~FLAG)
#define Set_SPI6_DR(FLAG)                    (*(uint32_t*)0x4001540c &= FLAG)
#define Clr_SPI6_DR(FLAG)                    (*(uint32_t*)0x4001540c |= ~FLAG)
#define Set_SPI6_CRCPR(FLAG)                 (*(uint32_t*)0x40015410 &= FLAG)
#define Clr_SPI6_CRCPR(FLAG)                 (*(uint32_t*)0x40015410 |= ~FLAG)
#define Set_SPI6_RXCRCR(FLAG)                (*(uint32_t*)0x40015414 &= FLAG)
#define Clr_SPI6_RXCRCR(FLAG)                (*(uint32_t*)0x40015414 |= ~FLAG)
#define Set_SPI6_TXCRCR(FLAG)                (*(uint32_t*)0x40015418 &= FLAG)
#define Clr_SPI6_TXCRCR(FLAG)                (*(uint32_t*)0x40015418 |= ~FLAG)
#define Set_SPI6_I2SCFGR(FLAG)               (*(uint32_t*)0x4001541c &= FLAG)
#define Clr_SPI6_I2SCFGR(FLAG)               (*(uint32_t*)0x4001541c |= ~FLAG)
#define Set_SPI6_I2SPR(FLAG)                 (*(uint32_t*)0x40015420 &= FLAG)
#define Clr_SPI6_I2SPR(FLAG)                 (*(uint32_t*)0x40015420 |= ~FLAG)

// Flags
#define  _SPI2_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
#define  _SPI2_CR1_BIDIOE                                    (0x1 << 14)    // Output enable in bidirectional mode
#define  _SPI2_CR1_CRCEN                                     (0x1 << 13)    // Hardware CRC calculation enable
#define  _SPI2_CR1_CRCNEXT                                   (0x1 << 12)    // CRC transfer next
#define  _SPI2_CR1_CRCL                                      (0x1 << 11)    // CRC length
#define  _SPI2_CR1_RXONLY                                    (0x1 << 10)    // Receive only
#define  _SPI2_CR1_SSM                                       (0x1 << 9)    // Software slave management
#define  _SPI2_CR1_SSI                                       (0x1 << 8)    // Internal slave select
#define  _SPI2_CR1_LSBFIRST                                  (0x1 << 7)    // Frame format
#define  _SPI2_CR1_SPE                                       (0x1 << 6)    // SPI enable
#define  _SPI2_CR1_BR                                        (0x7 << 3)    // Baud rate control
#define  _SPI2_CR1_MSTR                                      (0x1 << 2)    // Master selection
#define  _SPI2_CR1_CPOL                                      (0x1 << 1)    // Clock polarity
#define  _SPI2_CR1_CPHA                                      (0x1 << 0)    // Clock phase
#define  _SPI2_CR2_RXDMAEN                                   (0x1 << 0)    // Rx buffer DMA enable
#define  _SPI2_CR2_TXDMAEN                                   (0x1 << 1)    // Tx buffer DMA enable
#define  _SPI2_CR2_SSOE                                      (0x1 << 2)    // SS output enable
#define  _SPI2_CR2_NSSP                                      (0x1 << 3)    // NSS pulse management
#define  _SPI2_CR2_FRF                                       (0x1 << 4)    // Frame format
#define  _SPI2_CR2_ERRIE                                     (0x1 << 5)    // Error interrupt enable
#define  _SPI2_CR2_RXNEIE                                    (0x1 << 6)    // RX buffer not empty interrupt enable
#define  _SPI2_CR2_TXEIE                                     (0x1 << 7)    // Tx buffer empty interrupt enable
#define  _SPI2_CR2_DS                                        (0xf << 8)    // Data size
#define  _SPI2_CR2_FRXTH                                     (0x1 << 12)    // FIFO reception threshold
#define  _SPI2_CR2_LDMA_RX                                   (0x1 << 13)    // Last DMA transfer for reception
#define  _SPI2_CR2_LDMA_TX                                   (0x1 << 14)    // Last DMA transfer for transmission
#define  _SPI2_SR_FRE                                        (0x1 << 8)    // Frame format error
#define  _SPI2_SR_BSY                                        (0x1 << 7)    // Busy flag
#define  _SPI2_SR_OVR                                        (0x1 << 6)    // Overrun flag
#define  _SPI2_SR_MODF                                       (0x1 << 5)    // Mode fault
#define  _SPI2_SR_CRCERR                                     (0x1 << 4)    // CRC error flag
#define  _SPI2_SR_UDR                                        (0x1 << 3)    // Underrun flag
#define  _SPI2_SR_CHSIDE                                     (0x1 << 2)    // Channel side
#define  _SPI2_SR_TXE                                        (0x1 << 1)    // Transmit buffer empty
#define  _SPI2_SR_RXNE                                       (0x1 << 0)    // Receive buffer not empty
#define  _SPI2_SR_FRLVL                                      (0x3 << 9)    // FIFO reception level
#define  _SPI2_SR_FTLVL                                      (0x3 << 11)    // FIFO Transmission Level
#define  _SPI2_DR_DR                                         (0xffff << 0)    // Data register
#define  _SPI2_CRCPR_CRCPOLY                                 (0xffff << 0)    // CRC polynomial register
#define  _SPI2_RXCRCR_RxCRC                                  (0xffff << 0)    // Rx CRC register
#define  _SPI2_TXCRCR_TxCRC                                  (0xffff << 0)    // Tx CRC register
#define  _SPI2_I2SCFGR_I2SMOD                                (0x1 << 11)    // I2S mode selection
#define  _SPI2_I2SCFGR_I2SE                                  (0x1 << 10)    // I2S Enable
#define  _SPI2_I2SCFGR_I2SCFG                                (0x3 << 8)    // I2S configuration mode
#define  _SPI2_I2SCFGR_PCMSYNC                               (0x1 << 7)    // PCM frame synchronization
#define  _SPI2_I2SCFGR_I2SSTD                                (0x3 << 4)    // I2S standard selection
#define  _SPI2_I2SCFGR_CKPOL                                 (0x1 << 3)    // Steady state clock polarity
#define  _SPI2_I2SCFGR_DATLEN                                (0x3 << 1)    // Data length to be transferred
#define  _SPI2_I2SCFGR_CHLEN                                 (0x1 << 0)    // Channel length (number of bits per audio channel)
#define  _SPI2_I2SCFGR_ASTRTEN                               (0x1 << 12)    // Asynchronous start enable
#define  _SPI2_I2SPR_MCKOE                                   (0x1 << 9)    // Master clock output enable
#define  _SPI2_I2SPR_ODD                                     (0x1 << 8)    // Odd factor for the prescaler
#define  _SPI2_I2SPR_I2SDIV                                  (0xff << 0)    // I2S Linear prescaler
#define  _SPI3_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
#define  _SPI3_CR1_BIDIOE                                    (0x1 << 14)    // Output enable in bidirectional mode
#define  _SPI3_CR1_CRCEN                                     (0x1 << 13)    // Hardware CRC calculation enable
#define  _SPI3_CR1_CRCNEXT                                   (0x1 << 12)    // CRC transfer next
#define  _SPI3_CR1_CRCL                                      (0x1 << 11)    // CRC length
#define  _SPI3_CR1_RXONLY                                    (0x1 << 10)    // Receive only
#define  _SPI3_CR1_SSM                                       (0x1 << 9)    // Software slave management
#define  _SPI3_CR1_SSI                                       (0x1 << 8)    // Internal slave select
#define  _SPI3_CR1_LSBFIRST                                  (0x1 << 7)    // Frame format
#define  _SPI3_CR1_SPE                                       (0x1 << 6)    // SPI enable
#define  _SPI3_CR1_BR                                        (0x7 << 3)    // Baud rate control
#define  _SPI3_CR1_MSTR                                      (0x1 << 2)    // Master selection
#define  _SPI3_CR1_CPOL                                      (0x1 << 1)    // Clock polarity
#define  _SPI3_CR1_CPHA                                      (0x1 << 0)    // Clock phase
#define  _SPI3_CR2_RXDMAEN                                   (0x1 << 0)    // Rx buffer DMA enable
#define  _SPI3_CR2_TXDMAEN                                   (0x1 << 1)    // Tx buffer DMA enable
#define  _SPI3_CR2_SSOE                                      (0x1 << 2)    // SS output enable
#define  _SPI3_CR2_NSSP                                      (0x1 << 3)    // NSS pulse management
#define  _SPI3_CR2_FRF                                       (0x1 << 4)    // Frame format
#define  _SPI3_CR2_ERRIE                                     (0x1 << 5)    // Error interrupt enable
#define  _SPI3_CR2_RXNEIE                                    (0x1 << 6)    // RX buffer not empty interrupt enable
#define  _SPI3_CR2_TXEIE                                     (0x1 << 7)    // Tx buffer empty interrupt enable
#define  _SPI3_CR2_DS                                        (0xf << 8)    // Data size
#define  _SPI3_CR2_FRXTH                                     (0x1 << 12)    // FIFO reception threshold
#define  _SPI3_CR2_LDMA_RX                                   (0x1 << 13)    // Last DMA transfer for reception
#define  _SPI3_CR2_LDMA_TX                                   (0x1 << 14)    // Last DMA transfer for transmission
#define  _SPI3_SR_FRE                                        (0x1 << 8)    // Frame format error
#define  _SPI3_SR_BSY                                        (0x1 << 7)    // Busy flag
#define  _SPI3_SR_OVR                                        (0x1 << 6)    // Overrun flag
#define  _SPI3_SR_MODF                                       (0x1 << 5)    // Mode fault
#define  _SPI3_SR_CRCERR                                     (0x1 << 4)    // CRC error flag
#define  _SPI3_SR_UDR                                        (0x1 << 3)    // Underrun flag
#define  _SPI3_SR_CHSIDE                                     (0x1 << 2)    // Channel side
#define  _SPI3_SR_TXE                                        (0x1 << 1)    // Transmit buffer empty
#define  _SPI3_SR_RXNE                                       (0x1 << 0)    // Receive buffer not empty
#define  _SPI3_SR_FRLVL                                      (0x3 << 9)    // FIFO reception level
#define  _SPI3_SR_FTLVL                                      (0x3 << 11)    // FIFO Transmission Level
#define  _SPI3_DR_DR                                         (0xffff << 0)    // Data register
#define  _SPI3_CRCPR_CRCPOLY                                 (0xffff << 0)    // CRC polynomial register
#define  _SPI3_RXCRCR_RxCRC                                  (0xffff << 0)    // Rx CRC register
#define  _SPI3_TXCRCR_TxCRC                                  (0xffff << 0)    // Tx CRC register
#define  _SPI3_I2SCFGR_I2SMOD                                (0x1 << 11)    // I2S mode selection
#define  _SPI3_I2SCFGR_I2SE                                  (0x1 << 10)    // I2S Enable
#define  _SPI3_I2SCFGR_I2SCFG                                (0x3 << 8)    // I2S configuration mode
#define  _SPI3_I2SCFGR_PCMSYNC                               (0x1 << 7)    // PCM frame synchronization
#define  _SPI3_I2SCFGR_I2SSTD                                (0x3 << 4)    // I2S standard selection
#define  _SPI3_I2SCFGR_CKPOL                                 (0x1 << 3)    // Steady state clock polarity
#define  _SPI3_I2SCFGR_DATLEN                                (0x3 << 1)    // Data length to be transferred
#define  _SPI3_I2SCFGR_CHLEN                                 (0x1 << 0)    // Channel length (number of bits per audio channel)
#define  _SPI3_I2SCFGR_ASTRTEN                               (0x1 << 12)    // Asynchronous start enable
#define  _SPI3_I2SPR_MCKOE                                   (0x1 << 9)    // Master clock output enable
#define  _SPI3_I2SPR_ODD                                     (0x1 << 8)    // Odd factor for the prescaler
#define  _SPI3_I2SPR_I2SDIV                                  (0xff << 0)    // I2S Linear prescaler
#define  _SPI1_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
#define  _SPI1_CR1_BIDIOE                                    (0x1 << 14)    // Output enable in bidirectional mode
#define  _SPI1_CR1_CRCEN                                     (0x1 << 13)    // Hardware CRC calculation enable
#define  _SPI1_CR1_CRCNEXT                                   (0x1 << 12)    // CRC transfer next
#define  _SPI1_CR1_CRCL                                      (0x1 << 11)    // CRC length
#define  _SPI1_CR1_RXONLY                                    (0x1 << 10)    // Receive only
#define  _SPI1_CR1_SSM                                       (0x1 << 9)    // Software slave management
#define  _SPI1_CR1_SSI                                       (0x1 << 8)    // Internal slave select
#define  _SPI1_CR1_LSBFIRST                                  (0x1 << 7)    // Frame format
#define  _SPI1_CR1_SPE                                       (0x1 << 6)    // SPI enable
#define  _SPI1_CR1_BR                                        (0x7 << 3)    // Baud rate control
#define  _SPI1_CR1_MSTR                                      (0x1 << 2)    // Master selection
#define  _SPI1_CR1_CPOL                                      (0x1 << 1)    // Clock polarity
#define  _SPI1_CR1_CPHA                                      (0x1 << 0)    // Clock phase
#define  _SPI1_CR2_RXDMAEN                                   (0x1 << 0)    // Rx buffer DMA enable
#define  _SPI1_CR2_TXDMAEN                                   (0x1 << 1)    // Tx buffer DMA enable
#define  _SPI1_CR2_SSOE                                      (0x1 << 2)    // SS output enable
#define  _SPI1_CR2_NSSP                                      (0x1 << 3)    // NSS pulse management
#define  _SPI1_CR2_FRF                                       (0x1 << 4)    // Frame format
#define  _SPI1_CR2_ERRIE                                     (0x1 << 5)    // Error interrupt enable
#define  _SPI1_CR2_RXNEIE                                    (0x1 << 6)    // RX buffer not empty interrupt enable
#define  _SPI1_CR2_TXEIE                                     (0x1 << 7)    // Tx buffer empty interrupt enable
#define  _SPI1_CR2_DS                                        (0xf << 8)    // Data size
#define  _SPI1_CR2_FRXTH                                     (0x1 << 12)    // FIFO reception threshold
#define  _SPI1_CR2_LDMA_RX                                   (0x1 << 13)    // Last DMA transfer for reception
#define  _SPI1_CR2_LDMA_TX                                   (0x1 << 14)    // Last DMA transfer for transmission
#define  _SPI1_SR_FRE                                        (0x1 << 8)    // Frame format error
#define  _SPI1_SR_BSY                                        (0x1 << 7)    // Busy flag
#define  _SPI1_SR_OVR                                        (0x1 << 6)    // Overrun flag
#define  _SPI1_SR_MODF                                       (0x1 << 5)    // Mode fault
#define  _SPI1_SR_CRCERR                                     (0x1 << 4)    // CRC error flag
#define  _SPI1_SR_UDR                                        (0x1 << 3)    // Underrun flag
#define  _SPI1_SR_CHSIDE                                     (0x1 << 2)    // Channel side
#define  _SPI1_SR_TXE                                        (0x1 << 1)    // Transmit buffer empty
#define  _SPI1_SR_RXNE                                       (0x1 << 0)    // Receive buffer not empty
#define  _SPI1_SR_FRLVL                                      (0x3 << 9)    // FIFO reception level
#define  _SPI1_SR_FTLVL                                      (0x3 << 11)    // FIFO Transmission Level
#define  _SPI1_DR_DR                                         (0xffff << 0)    // Data register
#define  _SPI1_CRCPR_CRCPOLY                                 (0xffff << 0)    // CRC polynomial register
#define  _SPI1_RXCRCR_RxCRC                                  (0xffff << 0)    // Rx CRC register
#define  _SPI1_TXCRCR_TxCRC                                  (0xffff << 0)    // Tx CRC register
#define  _SPI1_I2SCFGR_I2SMOD                                (0x1 << 11)    // I2S mode selection
#define  _SPI1_I2SCFGR_I2SE                                  (0x1 << 10)    // I2S Enable
#define  _SPI1_I2SCFGR_I2SCFG                                (0x3 << 8)    // I2S configuration mode
#define  _SPI1_I2SCFGR_PCMSYNC                               (0x1 << 7)    // PCM frame synchronization
#define  _SPI1_I2SCFGR_I2SSTD                                (0x3 << 4)    // I2S standard selection
#define  _SPI1_I2SCFGR_CKPOL                                 (0x1 << 3)    // Steady state clock polarity
#define  _SPI1_I2SCFGR_DATLEN                                (0x3 << 1)    // Data length to be transferred
#define  _SPI1_I2SCFGR_CHLEN                                 (0x1 << 0)    // Channel length (number of bits per audio channel)
#define  _SPI1_I2SCFGR_ASTRTEN                               (0x1 << 12)    // Asynchronous start enable
#define  _SPI1_I2SPR_MCKOE                                   (0x1 << 9)    // Master clock output enable
#define  _SPI1_I2SPR_ODD                                     (0x1 << 8)    // Odd factor for the prescaler
#define  _SPI1_I2SPR_I2SDIV                                  (0xff << 0)    // I2S Linear prescaler
#define  _SPI4_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
#define  _SPI4_CR1_BIDIOE                                    (0x1 << 14)    // Output enable in bidirectional mode
#define  _SPI4_CR1_CRCEN                                     (0x1 << 13)    // Hardware CRC calculation enable
#define  _SPI4_CR1_CRCNEXT                                   (0x1 << 12)    // CRC transfer next
#define  _SPI4_CR1_CRCL                                      (0x1 << 11)    // CRC length
#define  _SPI4_CR1_RXONLY                                    (0x1 << 10)    // Receive only
#define  _SPI4_CR1_SSM                                       (0x1 << 9)    // Software slave management
#define  _SPI4_CR1_SSI                                       (0x1 << 8)    // Internal slave select
#define  _SPI4_CR1_LSBFIRST                                  (0x1 << 7)    // Frame format
#define  _SPI4_CR1_SPE                                       (0x1 << 6)    // SPI enable
#define  _SPI4_CR1_BR                                        (0x7 << 3)    // Baud rate control
#define  _SPI4_CR1_MSTR                                      (0x1 << 2)    // Master selection
#define  _SPI4_CR1_CPOL                                      (0x1 << 1)    // Clock polarity
#define  _SPI4_CR1_CPHA                                      (0x1 << 0)    // Clock phase
#define  _SPI4_CR2_RXDMAEN                                   (0x1 << 0)    // Rx buffer DMA enable
#define  _SPI4_CR2_TXDMAEN                                   (0x1 << 1)    // Tx buffer DMA enable
#define  _SPI4_CR2_SSOE                                      (0x1 << 2)    // SS output enable
#define  _SPI4_CR2_NSSP                                      (0x1 << 3)    // NSS pulse management
#define  _SPI4_CR2_FRF                                       (0x1 << 4)    // Frame format
#define  _SPI4_CR2_ERRIE                                     (0x1 << 5)    // Error interrupt enable
#define  _SPI4_CR2_RXNEIE                                    (0x1 << 6)    // RX buffer not empty interrupt enable
#define  _SPI4_CR2_TXEIE                                     (0x1 << 7)    // Tx buffer empty interrupt enable
#define  _SPI4_CR2_DS                                        (0xf << 8)    // Data size
#define  _SPI4_CR2_FRXTH                                     (0x1 << 12)    // FIFO reception threshold
#define  _SPI4_CR2_LDMA_RX                                   (0x1 << 13)    // Last DMA transfer for reception
#define  _SPI4_CR2_LDMA_TX                                   (0x1 << 14)    // Last DMA transfer for transmission
#define  _SPI4_SR_FRE                                        (0x1 << 8)    // Frame format error
#define  _SPI4_SR_BSY                                        (0x1 << 7)    // Busy flag
#define  _SPI4_SR_OVR                                        (0x1 << 6)    // Overrun flag
#define  _SPI4_SR_MODF                                       (0x1 << 5)    // Mode fault
#define  _SPI4_SR_CRCERR                                     (0x1 << 4)    // CRC error flag
#define  _SPI4_SR_UDR                                        (0x1 << 3)    // Underrun flag
#define  _SPI4_SR_CHSIDE                                     (0x1 << 2)    // Channel side
#define  _SPI4_SR_TXE                                        (0x1 << 1)    // Transmit buffer empty
#define  _SPI4_SR_RXNE                                       (0x1 << 0)    // Receive buffer not empty
#define  _SPI4_SR_FRLVL                                      (0x3 << 9)    // FIFO reception level
#define  _SPI4_SR_FTLVL                                      (0x3 << 11)    // FIFO Transmission Level
#define  _SPI4_DR_DR                                         (0xffff << 0)    // Data register
#define  _SPI4_CRCPR_CRCPOLY                                 (0xffff << 0)    // CRC polynomial register
#define  _SPI4_RXCRCR_RxCRC                                  (0xffff << 0)    // Rx CRC register
#define  _SPI4_TXCRCR_TxCRC                                  (0xffff << 0)    // Tx CRC register
#define  _SPI4_I2SCFGR_I2SMOD                                (0x1 << 11)    // I2S mode selection
#define  _SPI4_I2SCFGR_I2SE                                  (0x1 << 10)    // I2S Enable
#define  _SPI4_I2SCFGR_I2SCFG                                (0x3 << 8)    // I2S configuration mode
#define  _SPI4_I2SCFGR_PCMSYNC                               (0x1 << 7)    // PCM frame synchronization
#define  _SPI4_I2SCFGR_I2SSTD                                (0x3 << 4)    // I2S standard selection
#define  _SPI4_I2SCFGR_CKPOL                                 (0x1 << 3)    // Steady state clock polarity
#define  _SPI4_I2SCFGR_DATLEN                                (0x3 << 1)    // Data length to be transferred
#define  _SPI4_I2SCFGR_CHLEN                                 (0x1 << 0)    // Channel length (number of bits per audio channel)
#define  _SPI4_I2SCFGR_ASTRTEN                               (0x1 << 12)    // Asynchronous start enable
#define  _SPI4_I2SPR_MCKOE                                   (0x1 << 9)    // Master clock output enable
#define  _SPI4_I2SPR_ODD                                     (0x1 << 8)    // Odd factor for the prescaler
#define  _SPI4_I2SPR_I2SDIV                                  (0xff << 0)    // I2S Linear prescaler
#define  _SPI5_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
#define  _SPI5_CR1_BIDIOE                                    (0x1 << 14)    // Output enable in bidirectional mode
#define  _SPI5_CR1_CRCEN                                     (0x1 << 13)    // Hardware CRC calculation enable
#define  _SPI5_CR1_CRCNEXT                                   (0x1 << 12)    // CRC transfer next
#define  _SPI5_CR1_CRCL                                      (0x1 << 11)    // CRC length
#define  _SPI5_CR1_RXONLY                                    (0x1 << 10)    // Receive only
#define  _SPI5_CR1_SSM                                       (0x1 << 9)    // Software slave management
#define  _SPI5_CR1_SSI                                       (0x1 << 8)    // Internal slave select
#define  _SPI5_CR1_LSBFIRST                                  (0x1 << 7)    // Frame format
#define  _SPI5_CR1_SPE                                       (0x1 << 6)    // SPI enable
#define  _SPI5_CR1_BR                                        (0x7 << 3)    // Baud rate control
#define  _SPI5_CR1_MSTR                                      (0x1 << 2)    // Master selection
#define  _SPI5_CR1_CPOL                                      (0x1 << 1)    // Clock polarity
#define  _SPI5_CR1_CPHA                                      (0x1 << 0)    // Clock phase
#define  _SPI5_CR2_RXDMAEN                                   (0x1 << 0)    // Rx buffer DMA enable
#define  _SPI5_CR2_TXDMAEN                                   (0x1 << 1)    // Tx buffer DMA enable
#define  _SPI5_CR2_SSOE                                      (0x1 << 2)    // SS output enable
#define  _SPI5_CR2_NSSP                                      (0x1 << 3)    // NSS pulse management
#define  _SPI5_CR2_FRF                                       (0x1 << 4)    // Frame format
#define  _SPI5_CR2_ERRIE                                     (0x1 << 5)    // Error interrupt enable
#define  _SPI5_CR2_RXNEIE                                    (0x1 << 6)    // RX buffer not empty interrupt enable
#define  _SPI5_CR2_TXEIE                                     (0x1 << 7)    // Tx buffer empty interrupt enable
#define  _SPI5_CR2_DS                                        (0xf << 8)    // Data size
#define  _SPI5_CR2_FRXTH                                     (0x1 << 12)    // FIFO reception threshold
#define  _SPI5_CR2_LDMA_RX                                   (0x1 << 13)    // Last DMA transfer for reception
#define  _SPI5_CR2_LDMA_TX                                   (0x1 << 14)    // Last DMA transfer for transmission
#define  _SPI5_SR_FRE                                        (0x1 << 8)    // Frame format error
#define  _SPI5_SR_BSY                                        (0x1 << 7)    // Busy flag
#define  _SPI5_SR_OVR                                        (0x1 << 6)    // Overrun flag
#define  _SPI5_SR_MODF                                       (0x1 << 5)    // Mode fault
#define  _SPI5_SR_CRCERR                                     (0x1 << 4)    // CRC error flag
#define  _SPI5_SR_UDR                                        (0x1 << 3)    // Underrun flag
#define  _SPI5_SR_CHSIDE                                     (0x1 << 2)    // Channel side
#define  _SPI5_SR_TXE                                        (0x1 << 1)    // Transmit buffer empty
#define  _SPI5_SR_RXNE                                       (0x1 << 0)    // Receive buffer not empty
#define  _SPI5_SR_FRLVL                                      (0x3 << 9)    // FIFO reception level
#define  _SPI5_SR_FTLVL                                      (0x3 << 11)    // FIFO Transmission Level
#define  _SPI5_DR_DR                                         (0xffff << 0)    // Data register
#define  _SPI5_CRCPR_CRCPOLY                                 (0xffff << 0)    // CRC polynomial register
#define  _SPI5_RXCRCR_RxCRC                                  (0xffff << 0)    // Rx CRC register
#define  _SPI5_TXCRCR_TxCRC                                  (0xffff << 0)    // Tx CRC register
#define  _SPI5_I2SCFGR_I2SMOD                                (0x1 << 11)    // I2S mode selection
#define  _SPI5_I2SCFGR_I2SE                                  (0x1 << 10)    // I2S Enable
#define  _SPI5_I2SCFGR_I2SCFG                                (0x3 << 8)    // I2S configuration mode
#define  _SPI5_I2SCFGR_PCMSYNC                               (0x1 << 7)    // PCM frame synchronization
#define  _SPI5_I2SCFGR_I2SSTD                                (0x3 << 4)    // I2S standard selection
#define  _SPI5_I2SCFGR_CKPOL                                 (0x1 << 3)    // Steady state clock polarity
#define  _SPI5_I2SCFGR_DATLEN                                (0x3 << 1)    // Data length to be transferred
#define  _SPI5_I2SCFGR_CHLEN                                 (0x1 << 0)    // Channel length (number of bits per audio channel)
#define  _SPI5_I2SCFGR_ASTRTEN                               (0x1 << 12)    // Asynchronous start enable
#define  _SPI5_I2SPR_MCKOE                                   (0x1 << 9)    // Master clock output enable
#define  _SPI5_I2SPR_ODD                                     (0x1 << 8)    // Odd factor for the prescaler
#define  _SPI5_I2SPR_I2SDIV                                  (0xff << 0)    // I2S Linear prescaler
#define  _SPI6_CR1_BIDIMODE                                  (0x1 << 15)    // Bidirectional data mode enable
#define  _SPI6_CR1_BIDIOE                                    (0x1 << 14)    // Output enable in bidirectional mode
#define  _SPI6_CR1_CRCEN                                     (0x1 << 13)    // Hardware CRC calculation enable
#define  _SPI6_CR1_CRCNEXT                                   (0x1 << 12)    // CRC transfer next
#define  _SPI6_CR1_CRCL                                      (0x1 << 11)    // CRC length
#define  _SPI6_CR1_RXONLY                                    (0x1 << 10)    // Receive only
#define  _SPI6_CR1_SSM                                       (0x1 << 9)    // Software slave management
#define  _SPI6_CR1_SSI                                       (0x1 << 8)    // Internal slave select
#define  _SPI6_CR1_LSBFIRST                                  (0x1 << 7)    // Frame format
#define  _SPI6_CR1_SPE                                       (0x1 << 6)    // SPI enable
#define  _SPI6_CR1_BR                                        (0x7 << 3)    // Baud rate control
#define  _SPI6_CR1_MSTR                                      (0x1 << 2)    // Master selection
#define  _SPI6_CR1_CPOL                                      (0x1 << 1)    // Clock polarity
#define  _SPI6_CR1_CPHA                                      (0x1 << 0)    // Clock phase
#define  _SPI6_CR2_RXDMAEN                                   (0x1 << 0)    // Rx buffer DMA enable
#define  _SPI6_CR2_TXDMAEN                                   (0x1 << 1)    // Tx buffer DMA enable
#define  _SPI6_CR2_SSOE                                      (0x1 << 2)    // SS output enable
#define  _SPI6_CR2_NSSP                                      (0x1 << 3)    // NSS pulse management
#define  _SPI6_CR2_FRF                                       (0x1 << 4)    // Frame format
#define  _SPI6_CR2_ERRIE                                     (0x1 << 5)    // Error interrupt enable
#define  _SPI6_CR2_RXNEIE                                    (0x1 << 6)    // RX buffer not empty interrupt enable
#define  _SPI6_CR2_TXEIE                                     (0x1 << 7)    // Tx buffer empty interrupt enable
#define  _SPI6_CR2_DS                                        (0xf << 8)    // Data size
#define  _SPI6_CR2_FRXTH                                     (0x1 << 12)    // FIFO reception threshold
#define  _SPI6_CR2_LDMA_RX                                   (0x1 << 13)    // Last DMA transfer for reception
#define  _SPI6_CR2_LDMA_TX                                   (0x1 << 14)    // Last DMA transfer for transmission
#define  _SPI6_SR_FRE                                        (0x1 << 8)    // Frame format error
#define  _SPI6_SR_BSY                                        (0x1 << 7)    // Busy flag
#define  _SPI6_SR_OVR                                        (0x1 << 6)    // Overrun flag
#define  _SPI6_SR_MODF                                       (0x1 << 5)    // Mode fault
#define  _SPI6_SR_CRCERR                                     (0x1 << 4)    // CRC error flag
#define  _SPI6_SR_UDR                                        (0x1 << 3)    // Underrun flag
#define  _SPI6_SR_CHSIDE                                     (0x1 << 2)    // Channel side
#define  _SPI6_SR_TXE                                        (0x1 << 1)    // Transmit buffer empty
#define  _SPI6_SR_RXNE                                       (0x1 << 0)    // Receive buffer not empty
#define  _SPI6_SR_FRLVL                                      (0x3 << 9)    // FIFO reception level
#define  _SPI6_SR_FTLVL                                      (0x3 << 11)    // FIFO Transmission Level
#define  _SPI6_DR_DR                                         (0xffff << 0)    // Data register
#define  _SPI6_CRCPR_CRCPOLY                                 (0xffff << 0)    // CRC polynomial register
#define  _SPI6_RXCRCR_RxCRC                                  (0xffff << 0)    // Rx CRC register
#define  _SPI6_TXCRCR_TxCRC                                  (0xffff << 0)    // Tx CRC register
#define  _SPI6_I2SCFGR_I2SMOD                                (0x1 << 11)    // I2S mode selection
#define  _SPI6_I2SCFGR_I2SE                                  (0x1 << 10)    // I2S Enable
#define  _SPI6_I2SCFGR_I2SCFG                                (0x3 << 8)    // I2S configuration mode
#define  _SPI6_I2SCFGR_PCMSYNC                               (0x1 << 7)    // PCM frame synchronization
#define  _SPI6_I2SCFGR_I2SSTD                                (0x3 << 4)    // I2S standard selection
#define  _SPI6_I2SCFGR_CKPOL                                 (0x1 << 3)    // Steady state clock polarity
#define  _SPI6_I2SCFGR_DATLEN                                (0x3 << 1)    // Data length to be transferred
#define  _SPI6_I2SCFGR_CHLEN                                 (0x1 << 0)    // Channel length (number of bits per audio channel)
#define  _SPI6_I2SCFGR_ASTRTEN                               (0x1 << 12)    // Asynchronous start enable
#define  _SPI6_I2SPR_MCKOE                                   (0x1 << 9)    // Master clock output enable
#define  _SPI6_I2SPR_ODD                                     (0x1 << 8)    // Odd factor for the prescaler
#define  _SPI6_I2SPR_I2SDIV                                  (0xff << 0)    // I2S Linear prescaler


/* 
 * spi config flags
 */

#define SPI_Config_CPHA     (1 << 0 )
#define SPI_Config_CPOL     (1 << 1 )
#define SPI_Config_MASTER   (1 << 2 )
#define SPI_Config_LSB_FST  (1 << 3 )
#define SPI_Config_SSI      (1 << 4 )
#define SPI_Config_SSM      (1 << 5 )
#define SPI_Config_RX_ONLY  (1 << 6 )
#define SPI_Config_CRC_16B  (1 << 7 )
#define SPI_Config_CRC_NEXT (1 << 8 )
#define SPI_Config_CRC_EN   (1 << 9 )
#define SPI_Config_BIDIOE   (1 << 10)
#define SPI_Config_BIDIEN   (1 << 11)
#define SPI_Config_RXDMAEN  (1 << 12)
#define SPI_Config_TXDMAEN  (1 << 13)
#define SPI_Config_SSOE     (1 << 14)
#define SPI_Config_NSSP     (1 << 15)
#define SPI_Config_FRF      (1 << 16)
#define SPI_Config_ERRIE    (1 << 17)
#define SPI_Config_RXNEIE   (1 << 18)
#define SPI_Config_TXEIE    (1 << 19)
#define SPI_Config_FRXTH    (1 << 20)
#define SPI_Config_LDMA_RX  (1 << 21)
#define SPI_Config_LDMA_TX  (1 << 22)


typedef enum {
　
　drivers/inc/stm32f767xx_USART.h
#define Get_USART2_CR1(FLAG)                 (*(uint32_t*)0x40004400 |= FLAG)
#define Get_USART2_CR2(FLAG)                 (*(uint32_t*)0x40004404 |= FLAG)
#define Get_USART2_CR3(FLAG)                 (*(uint32_t*)0x40004408 |= FLAG)
#define Get_USART2_BRR(FLAG)                 (*(uint32_t*)0x4000440c |= FLAG)
#define Get_USART2_GTPR(FLAG)                (*(uint32_t*)0x40004410 |= FLAG)
#define Get_USART2_RTOR(FLAG)                (*(uint32_t*)0x40004414 |= FLAG)
#define Get_USART2_RQR(FLAG)                 (*(uint32_t*)0x40004418 |= FLAG)
#define Get_USART2_ISR(FLAG)                 (*(uint32_t*)0x4000441c |= FLAG)
#define Get_USART2_ICR(FLAG)                 (*(uint32_t*)0x40004420 |= FLAG)
#define Get_USART2_RDR(FLAG)                 (*(uint32_t*)0x40004424 |= FLAG)
#define Get_USART2_TDR(FLAG)                 (*(uint32_t*)0x40004428 |= FLAG)
#define Get_USART3_CR1(FLAG)                 (*(uint32_t*)0x40004800 |= FLAG)
#define Get_USART3_CR2(FLAG)                 (*(uint32_t*)0x40004804 |= FLAG)
#define Get_USART3_CR3(FLAG)                 (*(uint32_t*)0x40004808 |= FLAG)
#define Get_USART3_BRR(FLAG)                 (*(uint32_t*)0x4000480c |= FLAG)
#define Get_USART3_GTPR(FLAG)                (*(uint32_t*)0x40004810 |= FLAG)
#define Get_USART3_RTOR(FLAG)                (*(uint32_t*)0x40004814 |= FLAG)
#define Get_USART3_RQR(FLAG)                 (*(uint32_t*)0x40004818 |= FLAG)
#define Get_USART3_ISR(FLAG)                 (*(uint32_t*)0x4000481c |= FLAG)
#define Get_USART3_ICR(FLAG)                 (*(uint32_t*)0x40004820 |= FLAG)
#define Get_USART3_RDR(FLAG)                 (*(uint32_t*)0x40004824 |= FLAG)
#define Get_USART3_TDR(FLAG)                 (*(uint32_t*)0x40004828 |= FLAG)
#define Get_UART4_CR1(FLAG)                  (*(uint32_t*)0x40004c00 |= FLAG)
#define Get_UART4_CR2(FLAG)                  (*(uint32_t*)0x40004c04 |= FLAG)
#define Get_UART4_CR3(FLAG)                  (*(uint32_t*)0x40004c08 |= FLAG)
#define Get_UART4_BRR(FLAG)                  (*(uint32_t*)0x40004c0c |= FLAG)
#define Get_UART4_GTPR(FLAG)                 (*(uint32_t*)0x40004c10 |= FLAG)
#define Get_UART4_RTOR(FLAG)                 (*(uint32_t*)0x40004c14 |= FLAG)
#define Get_UART4_RQR(FLAG)                  (*(uint32_t*)0x40004c18 |= FLAG)
#define Get_UART4_ISR(FLAG)                  (*(uint32_t*)0x40004c1c |= FLAG)
#define Get_UART4_ICR(FLAG)                  (*(uint32_t*)0x40004c20 |= FLAG)
#define Get_UART4_RDR(FLAG)                  (*(uint32_t*)0x40004c24 |= FLAG)
#define Get_UART4_TDR(FLAG)                  (*(uint32_t*)0x40004c28 |= FLAG)
#define Get_UART5_CR1(FLAG)                  (*(uint32_t*)0x40005000 |= FLAG)
#define Get_UART5_CR2(FLAG)                  (*(uint32_t*)0x40005004 |= FLAG)
#define Get_UART5_CR3(FLAG)                  (*(uint32_t*)0x40005008 |= FLAG)
#define Get_UART5_BRR(FLAG)                  (*(uint32_t*)0x4000500c |= FLAG)
#define Get_UART5_GTPR(FLAG)                 (*(uint32_t*)0x40005010 |= FLAG)
#define Get_UART5_RTOR(FLAG)                 (*(uint32_t*)0x40005014 |= FLAG)
#define Get_UART5_RQR(FLAG)                  (*(uint32_t*)0x40005018 |= FLAG)
#define Get_UART5_ISR(FLAG)                  (*(uint32_t*)0x4000501c |= FLAG)
#define Get_UART5_ICR(FLAG)                  (*(uint32_t*)0x40005020 |= FLAG)
#define Get_UART5_RDR(FLAG)                  (*(uint32_t*)0x40005024 |= FLAG)
#define Get_UART5_TDR(FLAG)                  (*(uint32_t*)0x40005028 |= FLAG)
#define Get_UART7_CR1(FLAG)                  (*(uint32_t*)0x40007800 |= FLAG)
#define Get_UART7_CR2(FLAG)                  (*(uint32_t*)0x40007804 |= FLAG)
#define Get_UART7_CR3(FLAG)                  (*(uint32_t*)0x40007808 |= FLAG)
#define Get_UART7_BRR(FLAG)                  (*(uint32_t*)0x4000780c |= FLAG)
#define Get_UART7_GTPR(FLAG)                 (*(uint32_t*)0x40007810 |= FLAG)
#define Get_UART7_RTOR(FLAG)                 (*(uint32_t*)0x40007814 |= FLAG)
#define Get_UART7_RQR(FLAG)                  (*(uint32_t*)0x40007818 |= FLAG)
#define Get_UART7_ISR(FLAG)                  (*(uint32_t*)0x4000781c |= FLAG)
#define Get_UART7_ICR(FLAG)                  (*(uint32_t*)0x40007820 |= FLAG)
#define Get_UART7_RDR(FLAG)                  (*(uint32_t*)0x40007824 |= FLAG)
#define Get_UART7_TDR(FLAG)                  (*(uint32_t*)0x40007828 |= FLAG)
#define Get_UART8_CR1(FLAG)                  (*(uint32_t*)0x40007c00 |= FLAG)
#define Get_UART8_CR2(FLAG)                  (*(uint32_t*)0x40007c04 |= FLAG)
#define Get_UART8_CR3(FLAG)                  (*(uint32_t*)0x40007c08 |= FLAG)
#define Get_UART8_BRR(FLAG)                  (*(uint32_t*)0x40007c0c |= FLAG)
#define Get_UART8_GTPR(FLAG)                 (*(uint32_t*)0x40007c10 |= FLAG)
#define Get_UART8_RTOR(FLAG)                 (*(uint32_t*)0x40007c14 |= FLAG)
#define Get_UART8_RQR(FLAG)                  (*(uint32_t*)0x40007c18 |= FLAG)
#define Get_UART8_ISR(FLAG)                  (*(uint32_t*)0x40007c1c |= FLAG)
#define Get_UART8_ICR(FLAG)                  (*(uint32_t*)0x40007c20 |= FLAG)
#define Get_UART8_RDR(FLAG)                  (*(uint32_t*)0x40007c24 |= FLAG)
#define Get_UART8_TDR(FLAG)                  (*(uint32_t*)0x40007c28 |= FLAG)
#define Get_USART1_CR1(FLAG)                 (*(uint32_t*)0x40011000 |= FLAG)
#define Get_USART1_CR2(FLAG)                 (*(uint32_t*)0x40011004 |= FLAG)
#define Get_USART1_CR3(FLAG)                 (*(uint32_t*)0x40011008 |= FLAG)
#define Get_USART1_BRR(FLAG)                 (*(uint32_t*)0x4001100c |= FLAG)
#define Get_USART1_GTPR(FLAG)                (*(uint32_t*)0x40011010 |= FLAG)
#define Get_USART1_RTOR(FLAG)                (*(uint32_t*)0x40011014 |= FLAG)
#define Get_USART1_RQR(FLAG)                 (*(uint32_t*)0x40011018 |= FLAG)
#define Get_USART1_ISR(FLAG)                 (*(uint32_t*)0x4001101c |= FLAG)
#define Get_USART1_ICR(FLAG)                 (*(uint32_t*)0x40011020 |= FLAG)
#define Get_USART1_RDR(FLAG)                 (*(uint32_t*)0x40011024 |= FLAG)
#define Get_USART1_TDR(FLAG)                 (*(uint32_t*)0x40011028 |= FLAG)
#define Get_USART6_CR1(FLAG)                 (*(uint32_t*)0x40011400 |= FLAG)
#define Get_USART6_CR2(FLAG)                 (*(uint32_t*)0x40011404 |= FLAG)
#define Get_USART6_CR3(FLAG)                 (*(uint32_t*)0x40011408 |= FLAG)
#define Get_USART6_BRR(FLAG)                 (*(uint32_t*)0x4001140c |= FLAG)
#define Get_USART6_GTPR(FLAG)                (*(uint32_t*)0x40011410 |= FLAG)
#define Get_USART6_RTOR(FLAG)                (*(uint32_t*)0x40011414 |= FLAG)
#define Get_USART6_RQR(FLAG)                 (*(uint32_t*)0x40011418 |= FLAG)
#define Get_USART6_ISR(FLAG)                 (*(uint32_t*)0x4001141c |= FLAG)
#define Get_USART6_ICR(FLAG)                 (*(uint32_t*)0x40011420 |= FLAG)
#define Get_USART6_RDR(FLAG)                 (*(uint32_t*)0x40011424 |= FLAG)
#define Get_USART6_TDR(FLAG)                 (*(uint32_t*)0x40011428 |= FLAG)
#define Set_USART2_CR1(FLAG)                 (*(uint32_t*)0x40004400 &= FLAG)
#define Clr_USART2_CR1(FLAG)                 (*(uint32_t*)0x40004400 |= ~FLAG)
#define Set_USART2_CR2(FLAG)                 (*(uint32_t*)0x40004404 &= FLAG)
#define Clr_USART2_CR2(FLAG)                 (*(uint32_t*)0x40004404 |= ~FLAG)
#define Set_USART2_CR3(FLAG)                 (*(uint32_t*)0x40004408 &= FLAG)
#define Clr_USART2_CR3(FLAG)                 (*(uint32_t*)0x40004408 |= ~FLAG)
#define Set_USART2_BRR(FLAG)                 (*(uint32_t*)0x4000440c &= FLAG)
#define Clr_USART2_BRR(FLAG)                 (*(uint32_t*)0x4000440c |= ~FLAG)
#define Set_USART2_GTPR(FLAG)                (*(uint32_t*)0x40004410 &= FLAG)
#define Clr_USART2_GTPR(FLAG)                (*(uint32_t*)0x40004410 |= ~FLAG)
#define Set_USART2_RTOR(FLAG)                (*(uint32_t*)0x40004414 &= FLAG)
#define Clr_USART2_RTOR(FLAG)                (*(uint32_t*)0x40004414 |= ~FLAG)
#define Set_USART2_RQR(FLAG)                 (*(uint32_t*)0x40004418 &= FLAG)
#define Clr_USART2_RQR(FLAG)                 (*(uint32_t*)0x40004418 |= ~FLAG)
#define Set_USART2_ISR(FLAG)                 (*(uint32_t*)0x4000441c &= FLAG)
#define Clr_USART2_ISR(FLAG)                 (*(uint32_t*)0x4000441c |= ~FLAG)
#define Set_USART2_ICR(FLAG)                 (*(uint32_t*)0x40004420 &= FLAG)
#define Clr_USART2_ICR(FLAG)                 (*(uint32_t*)0x40004420 |= ~FLAG)
#define Set_USART2_RDR(FLAG)                 (*(uint32_t*)0x40004424 &= FLAG)
#define Clr_USART2_RDR(FLAG)                 (*(uint32_t*)0x40004424 |= ~FLAG)
#define Set_USART2_TDR(FLAG)                 (*(uint32_t*)0x40004428 &= FLAG)
#define Clr_USART2_TDR(FLAG)                 (*(uint32_t*)0x40004428 |= ~FLAG)
#define Set_USART3_CR1(FLAG)                 (*(uint32_t*)0x40004800 &= FLAG)
#define Clr_USART3_CR1(FLAG)                 (*(uint32_t*)0x40004800 |= ~FLAG)
#define Set_USART3_CR2(FLAG)                 (*(uint32_t*)0x40004804 &= FLAG)
#define Clr_USART3_CR2(FLAG)                 (*(uint32_t*)0x40004804 |= ~FLAG)
#define Set_USART3_CR3(FLAG)                 (*(uint32_t*)0x40004808 &= FLAG)
#define Clr_USART3_CR3(FLAG)                 (*(uint32_t*)0x40004808 |= ~FLAG)
#define Set_USART3_BRR(FLAG)                 (*(uint32_t*)0x4000480c &= FLAG)
#define Clr_USART3_BRR(FLAG)                 (*(uint32_t*)0x4000480c |= ~FLAG)
#define Set_USART3_GTPR(FLAG)                (*(uint32_t*)0x40004810 &= FLAG)
#define Clr_USART3_GTPR(FLAG)                (*(uint32_t*)0x40004810 |= ~FLAG)
#define Set_USART3_RTOR(FLAG)                (*(uint32_t*)0x40004814 &= FLAG)
#define Clr_USART3_RTOR(FLAG)                (*(uint32_t*)0x40004814 |= ~FLAG)
#define Set_USART3_RQR(FLAG)                 (*(uint32_t*)0x40004818 &= FLAG)
#define Clr_USART3_RQR(FLAG)                 (*(uint32_t*)0x40004818 |= ~FLAG)
#define Set_USART3_ISR(FLAG)                 (*(uint32_t*)0x4000481c &= FLAG)
#define Clr_USART3_ISR(FLAG)                 (*(uint32_t*)0x4000481c |= ~FLAG)
#define Set_USART3_ICR(FLAG)                 (*(uint32_t*)0x40004820 &= FLAG)
#define Clr_USART3_ICR(FLAG)                 (*(uint32_t*)0x40004820 |= ~FLAG)
#define Set_USART3_RDR(FLAG)                 (*(uint32_t*)0x40004824 &= FLAG)
#define Clr_USART3_RDR(FLAG)                 (*(uint32_t*)0x40004824 |= ~FLAG)
#define Set_USART3_TDR(FLAG)                 (*(uint32_t*)0x40004828 &= FLAG)
#define Clr_USART3_TDR(FLAG)                 (*(uint32_t*)0x40004828 |= ~FLAG)
#define Set_UART4_CR1(FLAG)                  (*(uint32_t*)0x40004c00 &= FLAG)
#define Clr_UART4_CR1(FLAG)                  (*(uint32_t*)0x40004c00 |= ~FLAG)
#define Set_UART4_CR2(FLAG)                  (*(uint32_t*)0x40004c04 &= FLAG)
#define Clr_UART4_CR2(FLAG)                  (*(uint32_t*)0x40004c04 |= ~FLAG)
#define Set_UART4_CR3(FLAG)                  (*(uint32_t*)0x40004c08 &= FLAG)
#define Clr_UART4_CR3(FLAG)                  (*(uint32_t*)0x40004c08 |= ~FLAG)
#define Set_UART4_BRR(FLAG)                  (*(uint32_t*)0x40004c0c &= FLAG)
#define Clr_UART4_BRR(FLAG)                  (*(uint32_t*)0x40004c0c |= ~FLAG)
#define Set_UART4_GTPR(FLAG)                 (*(uint32_t*)0x40004c10 &= FLAG)
#define Clr_UART4_GTPR(FLAG)                 (*(uint32_t*)0x40004c10 |= ~FLAG)
#define Set_UART4_RTOR(FLAG)                 (*(uint32_t*)0x40004c14 &= FLAG)
#define Clr_UART4_RTOR(FLAG)                 (*(uint32_t*)0x40004c14 |= ~FLAG)
#define Set_UART4_RQR(FLAG)                  (*(uint32_t*)0x40004c18 &= FLAG)
#define Clr_UART4_RQR(FLAG)                  (*(uint32_t*)0x40004c18 |= ~FLAG)
#define Set_UART4_ISR(FLAG)                  (*(uint32_t*)0x40004c1c &= FLAG)
#define Clr_UART4_ISR(FLAG)                  (*(uint32_t*)0x40004c1c |= ~FLAG)
#define Set_UART4_ICR(FLAG)                  (*(uint32_t*)0x40004c20 &= FLAG)
#define Clr_UART4_ICR(FLAG)                  (*(uint32_t*)0x40004c20 |= ~FLAG)
#define Set_UART4_RDR(FLAG)                  (*(uint32_t*)0x40004c24 &= FLAG)
#define Clr_UART4_RDR(FLAG)                  (*(uint32_t*)0x40004c24 |= ~FLAG)
#define Set_UART4_TDR(FLAG)                  (*(uint32_t*)0x40004c28 &= FLAG)
#define Clr_UART4_TDR(FLAG)                  (*(uint32_t*)0x40004c28 |= ~FLAG)
#define Set_UART5_CR1(FLAG)                  (*(uint32_t*)0x40005000 &= FLAG)
#define Clr_UART5_CR1(FLAG)                  (*(uint32_t*)0x40005000 |= ~FLAG)
#define Set_UART5_CR2(FLAG)                  (*(uint32_t*)0x40005004 &= FLAG)
#define Clr_UART5_CR2(FLAG)                  (*(uint32_t*)0x40005004 |= ~FLAG)
#define Set_UART5_CR3(FLAG)                  (*(uint32_t*)0x40005008 &= FLAG)
#define Clr_UART5_CR3(FLAG)                  (*(uint32_t*)0x40005008 |= ~FLAG)
#define Set_UART5_BRR(FLAG)                  (*(uint32_t*)0x4000500c &= FLAG)
#define Clr_UART5_BRR(FLAG)                  (*(uint32_t*)0x4000500c |= ~FLAG)
#define Set_UART5_GTPR(FLAG)                 (*(uint32_t*)0x40005010 &= FLAG)
#define Clr_UART5_GTPR(FLAG)                 (*(uint32_t*)0x40005010 |= ~FLAG)
#define Set_UART5_RTOR(FLAG)                 (*(uint32_t*)0x40005014 &= FLAG)
#define Clr_UART5_RTOR(FLAG)                 (*(uint32_t*)0x40005014 |= ~FLAG)
#define Set_UART5_RQR(FLAG)                  (*(uint32_t*)0x40005018 &= FLAG)
#define Clr_UART5_RQR(FLAG)                  (*(uint32_t*)0x40005018 |= ~FLAG)
#define Set_UART5_ISR(FLAG)                  (*(uint32_t*)0x4000501c &= FLAG)
#define Clr_UART5_ISR(FLAG)                  (*(uint32_t*)0x4000501c |= ~FLAG)
#define Set_UART5_ICR(FLAG)                  (*(uint32_t*)0x40005020 &= FLAG)
#define Clr_UART5_ICR(FLAG)                  (*(uint32_t*)0x40005020 |= ~FLAG)
#define Set_UART5_RDR(FLAG)                  (*(uint32_t*)0x40005024 &= FLAG)
#define Clr_UART5_RDR(FLAG)                  (*(uint32_t*)0x40005024 |= ~FLAG)
#define Set_UART5_TDR(FLAG)                  (*(uint32_t*)0x40005028 &= FLAG)
#define Clr_UART5_TDR(FLAG)                  (*(uint32_t*)0x40005028 |= ~FLAG)
#define Set_UART7_CR1(FLAG)                  (*(uint32_t*)0x40007800 &= FLAG)
#define Clr_UART7_CR1(FLAG)                  (*(uint32_t*)0x40007800 |= ~FLAG)
#define Set_UART7_CR2(FLAG)                  (*(uint32_t*)0x40007804 &= FLAG)
#define Clr_UART7_CR2(FLAG)                  (*(uint32_t*)0x40007804 |= ~FLAG)
#define Set_UART7_CR3(FLAG)                  (*(uint32_t*)0x40007808 &= FLAG)
#define Clr_UART7_CR3(FLAG)                  (*(uint32_t*)0x40007808 |= ~FLAG)
#define Set_UART7_BRR(FLAG)                  (*(uint32_t*)0x4000780c &= FLAG)
#define Clr_UART7_BRR(FLAG)                  (*(uint32_t*)0x4000780c |= ~FLAG)
#define Set_UART7_GTPR(FLAG)                 (*(uint32_t*)0x40007810 &= FLAG)
#define Clr_UART7_GTPR(FLAG)                 (*(uint32_t*)0x40007810 |= ~FLAG)
#define Set_UART7_RTOR(FLAG)                 (*(uint32_t*)0x40007814 &= FLAG)
#define Clr_UART7_RTOR(FLAG)                 (*(uint32_t*)0x40007814 |= ~FLAG)
#define Set_UART7_RQR(FLAG)                  (*(uint32_t*)0x40007818 &= FLAG)
#define Clr_UART7_RQR(FLAG)                  (*(uint32_t*)0x40007818 |= ~FLAG)
#define Set_UART7_ISR(FLAG)                  (*(uint32_t*)0x4000781c &= FLAG)
#define Clr_UART7_ISR(FLAG)                  (*(uint32_t*)0x4000781c |= ~FLAG)
#define Set_UART7_ICR(FLAG)                  (*(uint32_t*)0x40007820 &= FLAG)
#define Clr_UART7_ICR(FLAG)                  (*(uint32_t*)0x40007820 |= ~FLAG)
#define Set_UART7_RDR(FLAG)                  (*(uint32_t*)0x40007824 &= FLAG)
#define Clr_UART7_RDR(FLAG)                  (*(uint32_t*)0x40007824 |= ~FLAG)
#define Set_UART7_TDR(FLAG)                  (*(uint32_t*)0x40007828 &= FLAG)
#define Clr_UART7_TDR(FLAG)                  (*(uint32_t*)0x40007828 |= ~FLAG)
#define Set_UART8_CR1(FLAG)                  (*(uint32_t*)0x40007c00 &= FLAG)
#define Clr_UART8_CR1(FLAG)                  (*(uint32_t*)0x40007c00 |= ~FLAG)
#define Set_UART8_CR2(FLAG)                  (*(uint32_t*)0x40007c04 &= FLAG)
#define Clr_UART8_CR2(FLAG)                  (*(uint32_t*)0x40007c04 |= ~FLAG)
#define Set_UART8_CR3(FLAG)                  (*(uint32_t*)0x40007c08 &= FLAG)
#define Clr_UART8_CR3(FLAG)                  (*(uint32_t*)0x40007c08 |= ~FLAG)
#define Set_UART8_BRR(FLAG)                  (*(uint32_t*)0x40007c0c &= FLAG)
#define Clr_UART8_BRR(FLAG)                  (*(uint32_t*)0x40007c0c |= ~FLAG)
#define Set_UART8_GTPR(FLAG)                 (*(uint32_t*)0x40007c10 &= FLAG)
#define Clr_UART8_GTPR(FLAG)                 (*(uint32_t*)0x40007c10 |= ~FLAG)
#define Set_UART8_RTOR(FLAG)                 (*(uint32_t*)0x40007c14 &= FLAG)
#define Clr_UART8_RTOR(FLAG)                 (*(uint32_t*)0x40007c14 |= ~FLAG)
#define Set_UART8_RQR(FLAG)                  (*(uint32_t*)0x40007c18 &= FLAG)
#define Clr_UART8_RQR(FLAG)                  (*(uint32_t*)0x40007c18 |= ~FLAG)
#define Set_UART8_ISR(FLAG)                  (*(uint32_t*)0x40007c1c &= FLAG)
#define Clr_UART8_ISR(FLAG)                  (*(uint32_t*)0x40007c1c |= ~FLAG)
#define Set_UART8_ICR(FLAG)                  (*(uint32_t*)0x40007c20 &= FLAG)
#define Clr_UART8_ICR(FLAG)                  (*(uint32_t*)0x40007c20 |= ~FLAG)
#define Set_UART8_RDR(FLAG)                  (*(uint32_t*)0x40007c24 &= FLAG)
#define Clr_UART8_RDR(FLAG)                  (*(uint32_t*)0x40007c24 |= ~FLAG)
#define Set_UART8_TDR(FLAG)                  (*(uint32_t*)0x40007c28 &= FLAG)
#define Clr_UART8_TDR(FLAG)                  (*(uint32_t*)0x40007c28 |= ~FLAG)
#define Set_USART1_CR1(FLAG)                 (*(uint32_t*)0x40011000 &= FLAG)
#define Clr_USART1_CR1(FLAG)                 (*(uint32_t*)0x40011000 |= ~FLAG)
#define Set_USART1_CR2(FLAG)                 (*(uint32_t*)0x40011004 &= FLAG)
#define Clr_USART1_CR2(FLAG)                 (*(uint32_t*)0x40011004 |= ~FLAG)
#define Set_USART1_CR3(FLAG)                 (*(uint32_t*)0x40011008 &= FLAG)
#define Clr_USART1_CR3(FLAG)                 (*(uint32_t*)0x40011008 |= ~FLAG)
#define Set_USART1_BRR(FLAG)                 (*(uint32_t*)0x4001100c &= FLAG)
#define Clr_USART1_BRR(FLAG)                 (*(uint32_t*)0x4001100c |= ~FLAG)
#define Set_USART1_GTPR(FLAG)                (*(uint32_t*)0x40011010 &= FLAG)
#define Clr_USART1_GTPR(FLAG)                (*(uint32_t*)0x40011010 |= ~FLAG)
#define Set_USART1_RTOR(FLAG)                (*(uint32_t*)0x40011014 &= FLAG)
#define Clr_USART1_RTOR(FLAG)                (*(uint32_t*)0x40011014 |= ~FLAG)
#define Set_USART1_RQR(FLAG)                 (*(uint32_t*)0x40011018 &= FLAG)
#define Clr_USART1_RQR(FLAG)                 (*(uint32_t*)0x40011018 |= ~FLAG)
#define Set_USART1_ISR(FLAG)                 (*(uint32_t*)0x4001101c &= FLAG)
#define Clr_USART1_ISR(FLAG)                 (*(uint32_t*)0x4001101c |= ~FLAG)
#define Set_USART1_ICR(FLAG)                 (*(uint32_t*)0x40011020 &= FLAG)
#define Clr_USART1_ICR(FLAG)                 (*(uint32_t*)0x40011020 |= ~FLAG)
#define Set_USART1_RDR(FLAG)                 (*(uint32_t*)0x40011024 &= FLAG)
#define Clr_USART1_RDR(FLAG)                 (*(uint32_t*)0x40011024 |= ~FLAG)
#define Set_USART1_TDR(FLAG)                 (*(uint32_t*)0x40011028 &= FLAG)
#define Clr_USART1_TDR(FLAG)                 (*(uint32_t*)0x40011028 |= ~FLAG)
#define Set_USART6_CR1(FLAG)                 (*(uint32_t*)0x40011400 &= FLAG)
#define Clr_USART6_CR1(FLAG)                 (*(uint32_t*)0x40011400 |= ~FLAG)
#define Set_USART6_CR2(FLAG)                 (*(uint32_t*)0x40011404 &= FLAG)
#define Clr_USART6_CR2(FLAG)                 (*(uint32_t*)0x40011404 |= ~FLAG)
#define Set_USART6_CR3(FLAG)                 (*(uint32_t*)0x40011408 &= FLAG)
#define Clr_USART6_CR3(FLAG)                 (*(uint32_t*)0x40011408 |= ~FLAG)
#define Set_USART6_BRR(FLAG)                 (*(uint32_t*)0x4001140c &= FLAG)
#define Clr_USART6_BRR(FLAG)                 (*(uint32_t*)0x4001140c |= ~FLAG)
#define Set_USART6_GTPR(FLAG)                (*(uint32_t*)0x40011410 &= FLAG)
#define Clr_USART6_GTPR(FLAG)                (*(uint32_t*)0x40011410 |= ~FLAG)
#define Set_USART6_RTOR(FLAG)                (*(uint32_t*)0x40011414 &= FLAG)
#define Clr_USART6_RTOR(FLAG)                (*(uint32_t*)0x40011414 |= ~FLAG)
#define Set_USART6_RQR(FLAG)                 (*(uint32_t*)0x40011418 &= FLAG)
#define Clr_USART6_RQR(FLAG)                 (*(uint32_t*)0x40011418 |= ~FLAG)
#define Set_USART6_ISR(FLAG)                 (*(uint32_t*)0x4001141c &= FLAG)
#define Clr_USART6_ISR(FLAG)                 (*(uint32_t*)0x4001141c |= ~FLAG)
#define Set_USART6_ICR(FLAG)                 (*(uint32_t*)0x40011420 &= FLAG)
#define Clr_USART6_ICR(FLAG)                 (*(uint32_t*)0x40011420 |= ~FLAG)
#define Set_USART6_RDR(FLAG)                 (*(uint32_t*)0x40011424 &= FLAG)
#define Clr_USART6_RDR(FLAG)                 (*(uint32_t*)0x40011424 |= ~FLAG)
#define Set_USART6_TDR(FLAG)                 (*(uint32_t*)0x40011428 &= FLAG)
#define Clr_USART6_TDR(FLAG)                 (*(uint32_t*)0x40011428 |= ~FLAG)
#define  _USART2_CR1_M1                                      (0x1 << 28)    // Word length
#define  _USART2_CR1_EOBIE                                   (0x1 << 27)    // End of Block interrupt enable
#define  _USART2_CR1_RTOIE                                   (0x1 << 26)    // Receiver timeout interrupt enable
#define  _USART2_CR1_DEAT4                                   (0x1 << 25)    // Driver Enable assertion time
#define  _USART2_CR1_DEAT3                                   (0x1 << 24)    // DEAT3
#define  _USART2_CR1_DEAT2                                   (0x1 << 23)    // DEAT2
#define  _USART2_CR1_DEAT1                                   (0x1 << 22)    // DEAT1
#define  _USART2_CR1_DEAT0                                   (0x1 << 21)    // DEAT0
#define  _USART2_CR1_DEDT4                                   (0x1 << 20)    // Driver Enable de-assertion time
#define  _USART2_CR1_DEDT3                                   (0x1 << 19)    // DEDT3
#define  _USART2_CR1_DEDT2                                   (0x1 << 18)    // DEDT2
#define  _USART2_CR1_DEDT1                                   (0x1 << 17)    // DEDT1
#define  _USART2_CR1_DEDT0                                   (0x1 << 16)    // DEDT0
#define  _USART2_CR1_OVER8                                   (0x1 << 15)    // Oversampling mode
#define  _USART2_CR1_CMIE                                    (0x1 << 14)    // Character match interrupt enable
#define  _USART2_CR1_MME                                     (0x1 << 13)    // Mute mode enable
#define  _USART2_CR1_M0                                      (0x1 << 12)    // Word length
#define  _USART2_CR1_WAKE                                    (0x1 << 11)    // Receiver wakeup method
#define  _USART2_CR1_PCE                                     (0x1 << 10)    // Parity control enable
#define  _USART2_CR1_PS                                      (0x1 << 9)    // Parity selection
#define  _USART2_CR1_PEIE                                    (0x1 << 8)    // PE interrupt enable
#define  _USART2_CR1_TXEIE                                   (0x1 << 7)    // interrupt enable
#define  _USART2_CR1_TCIE                                    (0x1 << 6)    // Transmission complete interrupt enable
#define  _USART2_CR1_RXNEIE                                  (0x1 << 5)    // RXNE interrupt enable
#define  _USART2_CR1_IDLEIE                                  (0x1 << 4)    // IDLE interrupt enable
#define  _USART2_CR1_TE                                      (0x1 << 3)    // Transmitter enable
#define  _USART2_CR1_RE                                      (0x1 << 2)    // Receiver enable
#define  _USART2_CR1_UESM                                    (0x1 << 1)    // USART enable in Stop mode
#define  _USART2_CR1_UE                                      (0x1 << 0)    // USART enable
#define  _USART2_CR2_ADD4_7                                  (0xf << 28)    // Address of the USART node
#define  _USART2_CR2_ADD0_3                                  (0xf << 24)    // Address of the USART node
#define  _USART2_CR2_RTOEN                                   (0x1 << 23)    // Receiver timeout enable
#define  _USART2_CR2_ABRMOD1                                 (0x1 << 22)    // Auto baud rate mode
#define  _USART2_CR2_ABRMOD0                                 (0x1 << 21)    // ABRMOD0
#define  _USART2_CR2_ABREN                                   (0x1 << 20)    // Auto baud rate enable
#define  _USART2_CR2_MSBFIRST                                (0x1 << 19)    // Most significant bit first
#define  _USART2_CR2_TAINV                                   (0x1 << 18)    // Binary data inversion
#define  _USART2_CR2_TXINV                                   (0x1 << 17)    // TX pin active level inversion
#define  _USART2_CR2_RXINV                                   (0x1 << 16)    // RX pin active level inversion
#define  _USART2_CR2_SWAP                                    (0x1 << 15)    // Swap TX/RX pins
#define  _USART2_CR2_LINEN                                   (0x1 << 14)    // LIN mode enable
#define  _USART2_CR2_STOP                                    (0x3 << 12)    // STOP bits
#define  _USART2_CR2_CLKEN                                   (0x1 << 11)    // Clock enable
#define  _USART2_CR2_CPOL                                    (0x1 << 10)    // Clock polarity
#define  _USART2_CR2_CPHA                                    (0x1 << 9)    // Clock phase
#define  _USART2_CR2_LBCL                                    (0x1 << 8)    // Last bit clock pulse
#define  _USART2_CR2_LBDIE                                   (0x1 << 6)    // LIN break detection interrupt enable
#define  _USART2_CR2_LBDL                                    (0x1 << 5)    // LIN break detection length
#define  _USART2_CR2_ADDM7                                   (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _USART2_CR3_WUFIE                                   (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _USART2_CR3_WUS                                     (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _USART2_CR3_SCARCNT                                 (0x7 << 17)    // Smartcard auto-retry count
#define  _USART2_CR3_DEP                                     (0x1 << 15)    // Driver enable polarity selection
#define  _USART2_CR3_DEM                                     (0x1 << 14)    // Driver enable mode
#define  _USART2_CR3_DDRE                                    (0x1 << 13)    // DMA Disable on Reception Error
#define  _USART2_CR3_OVRDIS                                  (0x1 << 12)    // Overrun Disable
#define  _USART2_CR3_ONEBIT                                  (0x1 << 11)    // One sample bit method enable
#define  _USART2_CR3_CTSIE                                   (0x1 << 10)    // CTS interrupt enable
#define  _USART2_CR3_CTSE                                    (0x1 << 9)    // CTS enable
#define  _USART2_CR3_RTSE                                    (0x1 << 8)    // RTS enable
#define  _USART2_CR3_DMAT                                    (0x1 << 7)    // DMA enable transmitter
#define  _USART2_CR3_DMAR                                    (0x1 << 6)    // DMA enable receiver
#define  _USART2_CR3_SCEN                                    (0x1 << 5)    // Smartcard mode enable
#define  _USART2_CR3_NACK                                    (0x1 << 4)    // Smartcard NACK enable
#define  _USART2_CR3_HDSEL                                   (0x1 << 3)    // Half-duplex selection
#define  _USART2_CR3_IRLP                                    (0x1 << 2)    // Ir low-power
#define  _USART2_CR3_IREN                                    (0x1 << 1)    // Ir mode enable
#define  _USART2_CR3_EIE                                     (0x1 << 0)    // Error interrupt enable
#define  _USART2_BRR_DIV_Mantissa                            (0xfff << 4)    // DIV_Mantissa
#define  _USART2_BRR_DIV_Fraction                            (0xf << 0)    // DIV_Fraction
#define  _USART2_GTPR_GT                                     (0xff << 8)    // Guard time value
#define  _USART2_GTPR_PSC                                    (0xff << 0)    // Prescaler value
#define  _USART2_RTOR_BLEN                                   (0xff << 24)    // Block Length
#define  _USART2_RTOR_RTO                                    (0xffffff << 0)    // Receiver timeout value
#define  _USART2_RQR_TXFRQ                                   (0x1 << 4)    // Transmit data flush request
#define  _USART2_RQR_RXFRQ                                   (0x1 << 3)    // Receive data flush request
#define  _USART2_RQR_MMRQ                                    (0x1 << 2)    // Mute mode request
#define  _USART2_RQR_SBKRQ                                   (0x1 << 1)    // Send break request
#define  _USART2_RQR_ABRRQ                                   (0x1 << 0)    // Auto baud rate request
#define  _USART2_ISR_REACK                                   (0x1 << 22)    // REACK
#define  _USART2_ISR_TEACK                                   (0x1 << 21)    // TEACK
#define  _USART2_ISR_WUF                                     (0x1 << 20)    // WUF
#define  _USART2_ISR_RWU                                     (0x1 << 19)    // RWU
#define  _USART2_ISR_SBKF                                    (0x1 << 18)    // SBKF
#define  _USART2_ISR_CMF                                     (0x1 << 17)    // CMF
#define  _USART2_ISR_BUSY                                    (0x1 << 16)    // BUSY
#define  _USART2_ISR_ABRF                                    (0x1 << 15)    // ABRF
#define  _USART2_ISR_ABRE                                    (0x1 << 14)    // ABRE
#define  _USART2_ISR_EOBF                                    (0x1 << 12)    // EOBF
#define  _USART2_ISR_RTOF                                    (0x1 << 11)    // RTOF
#define  _USART2_ISR_CTS                                     (0x1 << 10)    // CTS
#define  _USART2_ISR_CTSIF                                   (0x1 << 9)    // CTSIF
#define  _USART2_ISR_LBDF                                    (0x1 << 8)    // LBDF
#define  _USART2_ISR_TXE                                     (0x1 << 7)    // TXE
#define  _USART2_ISR_TC                                      (0x1 << 6)    // TC
#define  _USART2_ISR_RXNE                                    (0x1 << 5)    // RXNE
#define  _USART2_ISR_IDLE                                    (0x1 << 4)    // IDLE
#define  _USART2_ISR_ORE                                     (0x1 << 3)    // ORE
#define  _USART2_ISR_NF                                      (0x1 << 2)    // NF
#define  _USART2_ISR_FE                                      (0x1 << 1)    // FE
#define  _USART2_ISR_PE                                      (0x1 << 0)    // PE
#define  _USART2_ICR_WUCF                                    (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _USART2_ICR_CMCF                                    (0x1 << 17)    // Character match clear flag
#define  _USART2_ICR_EOBCF                                   (0x1 << 12)    // End of block clear flag
#define  _USART2_ICR_RTOCF                                   (0x1 << 11)    // Receiver timeout clear flag
#define  _USART2_ICR_CTSCF                                   (0x1 << 9)    // CTS clear flag
#define  _USART2_ICR_LBDCF                                   (0x1 << 8)    // LIN break detection clear flag
#define  _USART2_ICR_TCCF                                    (0x1 << 6)    // Transmission complete clear flag
#define  _USART2_ICR_IDLECF                                  (0x1 << 4)    // Idle line detected clear flag
#define  _USART2_ICR_ORECF                                   (0x1 << 3)    // Overrun error clear flag
#define  _USART2_ICR_NCF                                     (0x1 << 2)    // Noise detected clear flag
#define  _USART2_ICR_FECF                                    (0x1 << 1)    // Framing error clear flag
#define  _USART2_ICR_PECF                                    (0x1 << 0)    // Parity error clear flag
#define  _USART2_RDR_RDR                                     (0x1ff << 0)    // Receive data value
#define  _USART2_TDR_TDR                                     (0x1ff << 0)    // Transmit data value
#define  _USART3_CR1_M1                                      (0x1 << 28)    // Word length
#define  _USART3_CR1_EOBIE                                   (0x1 << 27)    // End of Block interrupt enable
#define  _USART3_CR1_RTOIE                                   (0x1 << 26)    // Receiver timeout interrupt enable
#define  _USART3_CR1_DEAT4                                   (0x1 << 25)    // Driver Enable assertion time
#define  _USART3_CR1_DEAT3                                   (0x1 << 24)    // DEAT3
#define  _USART3_CR1_DEAT2                                   (0x1 << 23)    // DEAT2
#define  _USART3_CR1_DEAT1                                   (0x1 << 22)    // DEAT1
#define  _USART3_CR1_DEAT0                                   (0x1 << 21)    // DEAT0
#define  _USART3_CR1_DEDT4                                   (0x1 << 20)    // Driver Enable de-assertion time
#define  _USART3_CR1_DEDT3                                   (0x1 << 19)    // DEDT3
#define  _USART3_CR1_DEDT2                                   (0x1 << 18)    // DEDT2
#define  _USART3_CR1_DEDT1                                   (0x1 << 17)    // DEDT1
#define  _USART3_CR1_DEDT0                                   (0x1 << 16)    // DEDT0
#define  _USART3_CR1_OVER8                                   (0x1 << 15)    // Oversampling mode
#define  _USART3_CR1_CMIE                                    (0x1 << 14)    // Character match interrupt enable
#define  _USART3_CR1_MME                                     (0x1 << 13)    // Mute mode enable
#define  _USART3_CR1_M0                                      (0x1 << 12)    // Word length
#define  _USART3_CR1_WAKE                                    (0x1 << 11)    // Receiver wakeup method
#define  _USART3_CR1_PCE                                     (0x1 << 10)    // Parity control enable
#define  _USART3_CR1_PS                                      (0x1 << 9)    // Parity selection
#define  _USART3_CR1_PEIE                                    (0x1 << 8)    // PE interrupt enable
#define  _USART3_CR1_TXEIE                                   (0x1 << 7)    // interrupt enable
#define  _USART3_CR1_TCIE                                    (0x1 << 6)    // Transmission complete interrupt enable
#define  _USART3_CR1_RXNEIE                                  (0x1 << 5)    // RXNE interrupt enable
#define  _USART3_CR1_IDLEIE                                  (0x1 << 4)    // IDLE interrupt enable
#define  _USART3_CR1_TE                                      (0x1 << 3)    // Transmitter enable
#define  _USART3_CR1_RE                                      (0x1 << 2)    // Receiver enable
#define  _USART3_CR1_UESM                                    (0x1 << 1)    // USART enable in Stop mode
#define  _USART3_CR1_UE                                      (0x1 << 0)    // USART enable
#define  _USART3_CR2_ADD4_7                                  (0xf << 28)    // Address of the USART node
#define  _USART3_CR2_ADD0_3                                  (0xf << 24)    // Address of the USART node
#define  _USART3_CR2_RTOEN                                   (0x1 << 23)    // Receiver timeout enable
#define  _USART3_CR2_ABRMOD1                                 (0x1 << 22)    // Auto baud rate mode
#define  _USART3_CR2_ABRMOD0                                 (0x1 << 21)    // ABRMOD0
#define  _USART3_CR2_ABREN                                   (0x1 << 20)    // Auto baud rate enable
#define  _USART3_CR2_MSBFIRST                                (0x1 << 19)    // Most significant bit first
#define  _USART3_CR2_TAINV                                   (0x1 << 18)    // Binary data inversion
#define  _USART3_CR2_TXINV                                   (0x1 << 17)    // TX pin active level inversion
#define  _USART3_CR2_RXINV                                   (0x1 << 16)    // RX pin active level inversion
#define  _USART3_CR2_SWAP                                    (0x1 << 15)    // Swap TX/RX pins
#define  _USART3_CR2_LINEN                                   (0x1 << 14)    // LIN mode enable
#define  _USART3_CR2_STOP                                    (0x3 << 12)    // STOP bits
#define  _USART3_CR2_CLKEN                                   (0x1 << 11)    // Clock enable
#define  _USART3_CR2_CPOL                                    (0x1 << 10)    // Clock polarity
#define  _USART3_CR2_CPHA                                    (0x1 << 9)    // Clock phase
#define  _USART3_CR2_LBCL                                    (0x1 << 8)    // Last bit clock pulse
#define  _USART3_CR2_LBDIE                                   (0x1 << 6)    // LIN break detection interrupt enable
#define  _USART3_CR2_LBDL                                    (0x1 << 5)    // LIN break detection length
#define  _USART3_CR2_ADDM7                                   (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _USART3_CR3_WUFIE                                   (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _USART3_CR3_WUS                                     (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _USART3_CR3_SCARCNT                                 (0x7 << 17)    // Smartcard auto-retry count
#define  _USART3_CR3_DEP                                     (0x1 << 15)    // Driver enable polarity selection
#define  _USART3_CR3_DEM                                     (0x1 << 14)    // Driver enable mode
#define  _USART3_CR3_DDRE                                    (0x1 << 13)    // DMA Disable on Reception Error
#define  _USART3_CR3_OVRDIS                                  (0x1 << 12)    // Overrun Disable
#define  _USART3_CR3_ONEBIT                                  (0x1 << 11)    // One sample bit method enable
#define  _USART3_CR3_CTSIE                                   (0x1 << 10)    // CTS interrupt enable
#define  _USART3_CR3_CTSE                                    (0x1 << 9)    // CTS enable
#define  _USART3_CR3_RTSE                                    (0x1 << 8)    // RTS enable
#define  _USART3_CR3_DMAT                                    (0x1 << 7)    // DMA enable transmitter
#define  _USART3_CR3_DMAR                                    (0x1 << 6)    // DMA enable receiver
#define  _USART3_CR3_SCEN                                    (0x1 << 5)    // Smartcard mode enable
#define  _USART3_CR3_NACK                                    (0x1 << 4)    // Smartcard NACK enable
#define  _USART3_CR3_HDSEL                                   (0x1 << 3)    // Half-duplex selection
#define  _USART3_CR3_IRLP                                    (0x1 << 2)    // Ir low-power
#define  _USART3_CR3_IREN                                    (0x1 << 1)    // Ir mode enable
#define  _USART3_CR3_EIE                                     (0x1 << 0)    // Error interrupt enable
#define  _USART3_BRR_DIV_Mantissa                            (0xfff << 4)    // DIV_Mantissa
#define  _USART3_BRR_DIV_Fraction                            (0xf << 0)    // DIV_Fraction
#define  _USART3_GTPR_GT                                     (0xff << 8)    // Guard time value
#define  _USART3_GTPR_PSC                                    (0xff << 0)    // Prescaler value
#define  _USART3_RTOR_BLEN                                   (0xff << 24)    // Block Length
#define  _USART3_RTOR_RTO                                    (0xffffff << 0)    // Receiver timeout value
#define  _USART3_RQR_TXFRQ                                   (0x1 << 4)    // Transmit data flush request
#define  _USART3_RQR_RXFRQ                                   (0x1 << 3)    // Receive data flush request
#define  _USART3_RQR_MMRQ                                    (0x1 << 2)    // Mute mode request
#define  _USART3_RQR_SBKRQ                                   (0x1 << 1)    // Send break request
#define  _USART3_RQR_ABRRQ                                   (0x1 << 0)    // Auto baud rate request
#define  _USART3_ISR_REACK                                   (0x1 << 22)    // REACK
#define  _USART3_ISR_TEACK                                   (0x1 << 21)    // TEACK
#define  _USART3_ISR_WUF                                     (0x1 << 20)    // WUF
#define  _USART3_ISR_RWU                                     (0x1 << 19)    // RWU
#define  _USART3_ISR_SBKF                                    (0x1 << 18)    // SBKF
#define  _USART3_ISR_CMF                                     (0x1 << 17)    // CMF
#define  _USART3_ISR_BUSY                                    (0x1 << 16)    // BUSY
#define  _USART3_ISR_ABRF                                    (0x1 << 15)    // ABRF
#define  _USART3_ISR_ABRE                                    (0x1 << 14)    // ABRE
#define  _USART3_ISR_EOBF                                    (0x1 << 12)    // EOBF
#define  _USART3_ISR_RTOF                                    (0x1 << 11)    // RTOF
#define  _USART3_ISR_CTS                                     (0x1 << 10)    // CTS
#define  _USART3_ISR_CTSIF                                   (0x1 << 9)    // CTSIF
#define  _USART3_ISR_LBDF                                    (0x1 << 8)    // LBDF
#define  _USART3_ISR_TXE                                     (0x1 << 7)    // TXE
#define  _USART3_ISR_TC                                      (0x1 << 6)    // TC
#define  _USART3_ISR_RXNE                                    (0x1 << 5)    // RXNE
#define  _USART3_ISR_IDLE                                    (0x1 << 4)    // IDLE
#define  _USART3_ISR_ORE                                     (0x1 << 3)    // ORE
#define  _USART3_ISR_NF                                      (0x1 << 2)    // NF
#define  _USART3_ISR_FE                                      (0x1 << 1)    // FE
#define  _USART3_ISR_PE                                      (0x1 << 0)    // PE
#define  _USART3_ICR_WUCF                                    (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _USART3_ICR_CMCF                                    (0x1 << 17)    // Character match clear flag
#define  _USART3_ICR_EOBCF                                   (0x1 << 12)    // End of block clear flag
#define  _USART3_ICR_RTOCF                                   (0x1 << 11)    // Receiver timeout clear flag
#define  _USART3_ICR_CTSCF                                   (0x1 << 9)    // CTS clear flag
#define  _USART3_ICR_LBDCF                                   (0x1 << 8)    // LIN break detection clear flag
#define  _USART3_ICR_TCCF                                    (0x1 << 6)    // Transmission complete clear flag
#define  _USART3_ICR_IDLECF                                  (0x1 << 4)    // Idle line detected clear flag
#define  _USART3_ICR_ORECF                                   (0x1 << 3)    // Overrun error clear flag
#define  _USART3_ICR_NCF                                     (0x1 << 2)    // Noise detected clear flag
#define  _USART3_ICR_FECF                                    (0x1 << 1)    // Framing error clear flag
#define  _USART3_ICR_PECF                                    (0x1 << 0)    // Parity error clear flag
#define  _USART3_RDR_RDR                                     (0x1ff << 0)    // Receive data value
#define  _USART3_TDR_TDR                                     (0x1ff << 0)    // Transmit data value
#define  _UART4_CR1_M1                                       (0x1 << 28)    // Word length
#define  _UART4_CR1_EOBIE                                    (0x1 << 27)    // End of Block interrupt enable
#define  _UART4_CR1_RTOIE                                    (0x1 << 26)    // Receiver timeout interrupt enable
#define  _UART4_CR1_DEAT4                                    (0x1 << 25)    // Driver Enable assertion time
#define  _UART4_CR1_DEAT3                                    (0x1 << 24)    // DEAT3
#define  _UART4_CR1_DEAT2                                    (0x1 << 23)    // DEAT2
#define  _UART4_CR1_DEAT1                                    (0x1 << 22)    // DEAT1
#define  _UART4_CR1_DEAT0                                    (0x1 << 21)    // DEAT0
#define  _UART4_CR1_DEDT4                                    (0x1 << 20)    // Driver Enable de-assertion time
#define  _UART4_CR1_DEDT3                                    (0x1 << 19)    // DEDT3
#define  _UART4_CR1_DEDT2                                    (0x1 << 18)    // DEDT2
#define  _UART4_CR1_DEDT1                                    (0x1 << 17)    // DEDT1
#define  _UART4_CR1_DEDT0                                    (0x1 << 16)    // DEDT0
#define  _UART4_CR1_OVER8                                    (0x1 << 15)    // Oversampling mode
#define  _UART4_CR1_CMIE                                     (0x1 << 14)    // Character match interrupt enable
#define  _UART4_CR1_MME                                      (0x1 << 13)    // Mute mode enable
#define  _UART4_CR1_M0                                       (0x1 << 12)    // Word length
#define  _UART4_CR1_WAKE                                     (0x1 << 11)    // Receiver wakeup method
#define  _UART4_CR1_PCE                                      (0x1 << 10)    // Parity control enable
#define  _UART4_CR1_PS                                       (0x1 << 9)    // Parity selection
#define  _UART4_CR1_PEIE                                     (0x1 << 8)    // PE interrupt enable
#define  _UART4_CR1_TXEIE                                    (0x1 << 7)    // interrupt enable
#define  _UART4_CR1_TCIE                                     (0x1 << 6)    // Transmission complete interrupt enable
#define  _UART4_CR1_RXNEIE                                   (0x1 << 5)    // RXNE interrupt enable
#define  _UART4_CR1_IDLEIE                                   (0x1 << 4)    // IDLE interrupt enable
#define  _UART4_CR1_TE                                       (0x1 << 3)    // Transmitter enable
#define  _UART4_CR1_RE                                       (0x1 << 2)    // Receiver enable
#define  _UART4_CR1_UESM                                     (0x1 << 1)    // USART enable in Stop mode
#define  _UART4_CR1_UE                                       (0x1 << 0)    // USART enable
#define  _UART4_CR2_ADD4_7                                   (0xf << 28)    // Address of the USART node
#define  _UART4_CR2_ADD0_3                                   (0xf << 24)    // Address of the USART node
#define  _UART4_CR2_RTOEN                                    (0x1 << 23)    // Receiver timeout enable
#define  _UART4_CR2_ABRMOD1                                  (0x1 << 22)    // Auto baud rate mode
#define  _UART4_CR2_ABRMOD0                                  (0x1 << 21)    // ABRMOD0
#define  _UART4_CR2_ABREN                                    (0x1 << 20)    // Auto baud rate enable
#define  _UART4_CR2_MSBFIRST                                 (0x1 << 19)    // Most significant bit first
#define  _UART4_CR2_TAINV                                    (0x1 << 18)    // Binary data inversion
#define  _UART4_CR2_TXINV                                    (0x1 << 17)    // TX pin active level inversion
#define  _UART4_CR2_RXINV                                    (0x1 << 16)    // RX pin active level inversion
#define  _UART4_CR2_SWAP                                     (0x1 << 15)    // Swap TX/RX pins
#define  _UART4_CR2_LINEN                                    (0x1 << 14)    // LIN mode enable
#define  _UART4_CR2_STOP                                     (0x3 << 12)    // STOP bits
#define  _UART4_CR2_CLKEN                                    (0x1 << 11)    // Clock enable
#define  _UART4_CR2_CPOL                                     (0x1 << 10)    // Clock polarity
#define  _UART4_CR2_CPHA                                     (0x1 << 9)    // Clock phase
#define  _UART4_CR2_LBCL                                     (0x1 << 8)    // Last bit clock pulse
#define  _UART4_CR2_LBDIE                                    (0x1 << 6)    // LIN break detection interrupt enable
#define  _UART4_CR2_LBDL                                     (0x1 << 5)    // LIN break detection length
#define  _UART4_CR2_ADDM7                                    (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _UART4_CR3_WUFIE                                    (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _UART4_CR3_WUS                                      (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _UART4_CR3_SCARCNT                                  (0x7 << 17)    // Smartcard auto-retry count
#define  _UART4_CR3_DEP                                      (0x1 << 15)    // Driver enable polarity selection
#define  _UART4_CR3_DEM                                      (0x1 << 14)    // Driver enable mode
#define  _UART4_CR3_DDRE                                     (0x1 << 13)    // DMA Disable on Reception Error
#define  _UART4_CR3_OVRDIS                                   (0x1 << 12)    // Overrun Disable
#define  _UART4_CR3_ONEBIT                                   (0x1 << 11)    // One sample bit method enable
#define  _UART4_CR3_CTSIE                                    (0x1 << 10)    // CTS interrupt enable
#define  _UART4_CR3_CTSE                                     (0x1 << 9)    // CTS enable
#define  _UART4_CR3_RTSE                                     (0x1 << 8)    // RTS enable
#define  _UART4_CR3_DMAT                                     (0x1 << 7)    // DMA enable transmitter
#define  _UART4_CR3_DMAR                                     (0x1 << 6)    // DMA enable receiver
#define  _UART4_CR3_SCEN                                     (0x1 << 5)    // Smartcard mode enable
#define  _UART4_CR3_NACK                                     (0x1 << 4)    // Smartcard NACK enable
#define  _UART4_CR3_HDSEL                                    (0x1 << 3)    // Half-duplex selection
#define  _UART4_CR3_IRLP                                     (0x1 << 2)    // Ir low-power
#define  _UART4_CR3_IREN                                     (0x1 << 1)    // Ir mode enable
#define  _UART4_CR3_EIE                                      (0x1 << 0)    // Error interrupt enable
#define  _UART4_BRR_DIV_Mantissa                             (0xfff << 4)    // DIV_Mantissa
#define  _UART4_BRR_DIV_Fraction                             (0xf << 0)    // DIV_Fraction
#define  _UART4_GTPR_GT                                      (0xff << 8)    // Guard time value
#define  _UART4_GTPR_PSC                                     (0xff << 0)    // Prescaler value
#define  _UART4_RTOR_BLEN                                    (0xff << 24)    // Block Length
#define  _UART4_RTOR_RTO                                     (0xffffff << 0)    // Receiver timeout value
#define  _UART4_RQR_TXFRQ                                    (0x1 << 4)    // Transmit data flush request
#define  _UART4_RQR_RXFRQ                                    (0x1 << 3)    // Receive data flush request
#define  _UART4_RQR_MMRQ                                     (0x1 << 2)    // Mute mode request
#define  _UART4_RQR_SBKRQ                                    (0x1 << 1)    // Send break request
#define  _UART4_RQR_ABRRQ                                    (0x1 << 0)    // Auto baud rate request
#define  _UART4_ISR_REACK                                    (0x1 << 22)    // REACK
#define  _UART4_ISR_TEACK                                    (0x1 << 21)    // TEACK
#define  _UART4_ISR_WUF                                      (0x1 << 20)    // WUF
#define  _UART4_ISR_RWU                                      (0x1 << 19)    // RWU
#define  _UART4_ISR_SBKF                                     (0x1 << 18)    // SBKF
#define  _UART4_ISR_CMF                                      (0x1 << 17)    // CMF
#define  _UART4_ISR_BUSY                                     (0x1 << 16)    // BUSY
#define  _UART4_ISR_ABRF                                     (0x1 << 15)    // ABRF
#define  _UART4_ISR_ABRE                                     (0x1 << 14)    // ABRE
#define  _UART4_ISR_EOBF                                     (0x1 << 12)    // EOBF
#define  _UART4_ISR_RTOF                                     (0x1 << 11)    // RTOF
#define  _UART4_ISR_CTS                                      (0x1 << 10)    // CTS
#define  _UART4_ISR_CTSIF                                    (0x1 << 9)    // CTSIF
#define  _UART4_ISR_LBDF                                     (0x1 << 8)    // LBDF
#define  _UART4_ISR_TXE                                      (0x1 << 7)    // TXE
#define  _UART4_ISR_TC                                       (0x1 << 6)    // TC
#define  _UART4_ISR_RXNE                                     (0x1 << 5)    // RXNE
#define  _UART4_ISR_IDLE                                     (0x1 << 4)    // IDLE
#define  _UART4_ISR_ORE                                      (0x1 << 3)    // ORE
#define  _UART4_ISR_NF                                       (0x1 << 2)    // NF
#define  _UART4_ISR_FE                                       (0x1 << 1)    // FE
#define  _UART4_ISR_PE                                       (0x1 << 0)    // PE
#define  _UART4_ICR_WUCF                                     (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _UART4_ICR_CMCF                                     (0x1 << 17)    // Character match clear flag
#define  _UART4_ICR_EOBCF                                    (0x1 << 12)    // End of block clear flag
#define  _UART4_ICR_RTOCF                                    (0x1 << 11)    // Receiver timeout clear flag
#define  _UART4_ICR_CTSCF                                    (0x1 << 9)    // CTS clear flag
#define  _UART4_ICR_LBDCF                                    (0x1 << 8)    // LIN break detection clear flag
#define  _UART4_ICR_TCCF                                     (0x1 << 6)    // Transmission complete clear flag
#define  _UART4_ICR_IDLECF                                   (0x1 << 4)    // Idle line detected clear flag
#define  _UART4_ICR_ORECF                                    (0x1 << 3)    // Overrun error clear flag
#define  _UART4_ICR_NCF                                      (0x1 << 2)    // Noise detected clear flag
#define  _UART4_ICR_FECF                                     (0x1 << 1)    // Framing error clear flag
#define  _UART4_ICR_PECF                                     (0x1 << 0)    // Parity error clear flag
#define  _UART4_RDR_RDR                                      (0x1ff << 0)    // Receive data value
#define  _UART4_TDR_TDR                                      (0x1ff << 0)    // Transmit data value
#define  _UART5_CR1_M1                                       (0x1 << 28)    // Word length
#define  _UART5_CR1_EOBIE                                    (0x1 << 27)    // End of Block interrupt enable
#define  _UART5_CR1_RTOIE                                    (0x1 << 26)    // Receiver timeout interrupt enable
#define  _UART5_CR1_DEAT4                                    (0x1 << 25)    // Driver Enable assertion time
#define  _UART5_CR1_DEAT3                                    (0x1 << 24)    // DEAT3
#define  _UART5_CR1_DEAT2                                    (0x1 << 23)    // DEAT2
#define  _UART5_CR1_DEAT1                                    (0x1 << 22)    // DEAT1
#define  _UART5_CR1_DEAT0                                    (0x1 << 21)    // DEAT0
#define  _UART5_CR1_DEDT4                                    (0x1 << 20)    // Driver Enable de-assertion time
#define  _UART5_CR1_DEDT3                                    (0x1 << 19)    // DEDT3
#define  _UART5_CR1_DEDT2                                    (0x1 << 18)    // DEDT2
#define  _UART5_CR1_DEDT1                                    (0x1 << 17)    // DEDT1
#define  _UART5_CR1_DEDT0                                    (0x1 << 16)    // DEDT0
#define  _UART5_CR1_OVER8                                    (0x1 << 15)    // Oversampling mode
#define  _UART5_CR1_CMIE                                     (0x1 << 14)    // Character match interrupt enable
#define  _UART5_CR1_MME                                      (0x1 << 13)    // Mute mode enable
#define  _UART5_CR1_M0                                       (0x1 << 12)    // Word length
#define  _UART5_CR1_WAKE                                     (0x1 << 11)    // Receiver wakeup method
#define  _UART5_CR1_PCE                                      (0x1 << 10)    // Parity control enable
#define  _UART5_CR1_PS                                       (0x1 << 9)    // Parity selection
#define  _UART5_CR1_PEIE                                     (0x1 << 8)    // PE interrupt enable
#define  _UART5_CR1_TXEIE                                    (0x1 << 7)    // interrupt enable
#define  _UART5_CR1_TCIE                                     (0x1 << 6)    // Transmission complete interrupt enable
#define  _UART5_CR1_RXNEIE                                   (0x1 << 5)    // RXNE interrupt enable
#define  _UART5_CR1_IDLEIE                                   (0x1 << 4)    // IDLE interrupt enable
#define  _UART5_CR1_TE                                       (0x1 << 3)    // Transmitter enable
#define  _UART5_CR1_RE                                       (0x1 << 2)    // Receiver enable
#define  _UART5_CR1_UESM                                     (0x1 << 1)    // USART enable in Stop mode
#define  _UART5_CR1_UE                                       (0x1 << 0)    // USART enable
#define  _UART5_CR2_ADD4_7                                   (0xf << 28)    // Address of the USART node
#define  _UART5_CR2_ADD0_3                                   (0xf << 24)    // Address of the USART node
#define  _UART5_CR2_RTOEN                                    (0x1 << 23)    // Receiver timeout enable
#define  _UART5_CR2_ABRMOD1                                  (0x1 << 22)    // Auto baud rate mode
#define  _UART5_CR2_ABRMOD0                                  (0x1 << 21)    // ABRMOD0
#define  _UART5_CR2_ABREN                                    (0x1 << 20)    // Auto baud rate enable
#define  _UART5_CR2_MSBFIRST                                 (0x1 << 19)    // Most significant bit first
#define  _UART5_CR2_TAINV                                    (0x1 << 18)    // Binary data inversion
#define  _UART5_CR2_TXINV                                    (0x1 << 17)    // TX pin active level inversion
#define  _UART5_CR2_RXINV                                    (0x1 << 16)    // RX pin active level inversion
#define  _UART5_CR2_SWAP                                     (0x1 << 15)    // Swap TX/RX pins
#define  _UART5_CR2_LINEN                                    (0x1 << 14)    // LIN mode enable
#define  _UART5_CR2_STOP                                     (0x3 << 12)    // STOP bits
#define  _UART5_CR2_CLKEN                                    (0x1 << 11)    // Clock enable
#define  _UART5_CR2_CPOL                                     (0x1 << 10)    // Clock polarity
#define  _UART5_CR2_CPHA                                     (0x1 << 9)    // Clock phase
#define  _UART5_CR2_LBCL                                     (0x1 << 8)    // Last bit clock pulse
#define  _UART5_CR2_LBDIE                                    (0x1 << 6)    // LIN break detection interrupt enable
#define  _UART5_CR2_LBDL                                     (0x1 << 5)    // LIN break detection length
#define  _UART5_CR2_ADDM7                                    (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _UART5_CR3_WUFIE                                    (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _UART5_CR3_WUS                                      (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _UART5_CR3_SCARCNT                                  (0x7 << 17)    // Smartcard auto-retry count
#define  _UART5_CR3_DEP                                      (0x1 << 15)    // Driver enable polarity selection
#define  _UART5_CR3_DEM                                      (0x1 << 14)    // Driver enable mode
#define  _UART5_CR3_DDRE                                     (0x1 << 13)    // DMA Disable on Reception Error
#define  _UART5_CR3_OVRDIS                                   (0x1 << 12)    // Overrun Disable
#define  _UART5_CR3_ONEBIT                                   (0x1 << 11)    // One sample bit method enable
#define  _UART5_CR3_CTSIE                                    (0x1 << 10)    // CTS interrupt enable
#define  _UART5_CR3_CTSE                                     (0x1 << 9)    // CTS enable
#define  _UART5_CR3_RTSE                                     (0x1 << 8)    // RTS enable
#define  _UART5_CR3_DMAT                                     (0x1 << 7)    // DMA enable transmitter
#define  _UART5_CR3_DMAR                                     (0x1 << 6)    // DMA enable receiver
#define  _UART5_CR3_SCEN                                     (0x1 << 5)    // Smartcard mode enable
#define  _UART5_CR3_NACK                                     (0x1 << 4)    // Smartcard NACK enable
#define  _UART5_CR3_HDSEL                                    (0x1 << 3)    // Half-duplex selection
#define  _UART5_CR3_IRLP                                     (0x1 << 2)    // Ir low-power
#define  _UART5_CR3_IREN                                     (0x1 << 1)    // Ir mode enable
#define  _UART5_CR3_EIE                                      (0x1 << 0)    // Error interrupt enable
#define  _UART5_BRR_DIV_Mantissa                             (0xfff << 4)    // DIV_Mantissa
#define  _UART5_BRR_DIV_Fraction                             (0xf << 0)    // DIV_Fraction
#define  _UART5_GTPR_GT                                      (0xff << 8)    // Guard time value
#define  _UART5_GTPR_PSC                                     (0xff << 0)    // Prescaler value
#define  _UART5_RTOR_BLEN                                    (0xff << 24)    // Block Length
#define  _UART5_RTOR_RTO                                     (0xffffff << 0)    // Receiver timeout value
#define  _UART5_RQR_TXFRQ                                    (0x1 << 4)    // Transmit data flush request
#define  _UART5_RQR_RXFRQ                                    (0x1 << 3)    // Receive data flush request
#define  _UART5_RQR_MMRQ                                     (0x1 << 2)    // Mute mode request
#define  _UART5_RQR_SBKRQ                                    (0x1 << 1)    // Send break request
#define  _UART5_RQR_ABRRQ                                    (0x1 << 0)    // Auto baud rate request
#define  _UART5_ISR_REACK                                    (0x1 << 22)    // REACK
#define  _UART5_ISR_TEACK                                    (0x1 << 21)    // TEACK
#define  _UART5_ISR_WUF                                      (0x1 << 20)    // WUF
#define  _UART5_ISR_RWU                                      (0x1 << 19)    // RWU
#define  _UART5_ISR_SBKF                                     (0x1 << 18)    // SBKF
#define  _UART5_ISR_CMF                                      (0x1 << 17)    // CMF
#define  _UART5_ISR_BUSY                                     (0x1 << 16)    // BUSY
#define  _UART5_ISR_ABRF                                     (0x1 << 15)    // ABRF
#define  _UART5_ISR_ABRE                                     (0x1 << 14)    // ABRE
#define  _UART5_ISR_EOBF                                     (0x1 << 12)    // EOBF
#define  _UART5_ISR_RTOF                                     (0x1 << 11)    // RTOF
#define  _UART5_ISR_CTS                                      (0x1 << 10)    // CTS
#define  _UART5_ISR_CTSIF                                    (0x1 << 9)    // CTSIF
#define  _UART5_ISR_LBDF                                     (0x1 << 8)    // LBDF
#define  _UART5_ISR_TXE                                      (0x1 << 7)    // TXE
#define  _UART5_ISR_TC                                       (0x1 << 6)    // TC
#define  _UART5_ISR_RXNE                                     (0x1 << 5)    // RXNE
#define  _UART5_ISR_IDLE                                     (0x1 << 4)    // IDLE
#define  _UART5_ISR_ORE                                      (0x1 << 3)    // ORE
#define  _UART5_ISR_NF                                       (0x1 << 2)    // NF
#define  _UART5_ISR_FE                                       (0x1 << 1)    // FE
#define  _UART5_ISR_PE                                       (0x1 << 0)    // PE
#define  _UART5_ICR_WUCF                                     (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _UART5_ICR_CMCF                                     (0x1 << 17)    // Character match clear flag
#define  _UART5_ICR_EOBCF                                    (0x1 << 12)    // End of block clear flag
#define  _UART5_ICR_RTOCF                                    (0x1 << 11)    // Receiver timeout clear flag
#define  _UART5_ICR_CTSCF                                    (0x1 << 9)    // CTS clear flag
#define  _UART5_ICR_LBDCF                                    (0x1 << 8)    // LIN break detection clear flag
#define  _UART5_ICR_TCCF                                     (0x1 << 6)    // Transmission complete clear flag
#define  _UART5_ICR_IDLECF                                   (0x1 << 4)    // Idle line detected clear flag
#define  _UART5_ICR_ORECF                                    (0x1 << 3)    // Overrun error clear flag
#define  _UART5_ICR_NCF                                      (0x1 << 2)    // Noise detected clear flag
#define  _UART5_ICR_FECF                                     (0x1 << 1)    // Framing error clear flag
#define  _UART5_ICR_PECF                                     (0x1 << 0)    // Parity error clear flag
#define  _UART5_RDR_RDR                                      (0x1ff << 0)    // Receive data value
#define  _UART5_TDR_TDR                                      (0x1ff << 0)    // Transmit data value
#define  _UART7_CR1_M1                                       (0x1 << 28)    // Word length
#define  _UART7_CR1_EOBIE                                    (0x1 << 27)    // End of Block interrupt enable
#define  _UART7_CR1_RTOIE                                    (0x1 << 26)    // Receiver timeout interrupt enable
#define  _UART7_CR1_DEAT4                                    (0x1 << 25)    // Driver Enable assertion time
#define  _UART7_CR1_DEAT3                                    (0x1 << 24)    // DEAT3
#define  _UART7_CR1_DEAT2                                    (0x1 << 23)    // DEAT2
#define  _UART7_CR1_DEAT1                                    (0x1 << 22)    // DEAT1
#define  _UART7_CR1_DEAT0                                    (0x1 << 21)    // DEAT0
#define  _UART7_CR1_DEDT4                                    (0x1 << 20)    // Driver Enable de-assertion time
#define  _UART7_CR1_DEDT3                                    (0x1 << 19)    // DEDT3
#define  _UART7_CR1_DEDT2                                    (0x1 << 18)    // DEDT2
#define  _UART7_CR1_DEDT1                                    (0x1 << 17)    // DEDT1
#define  _UART7_CR1_DEDT0                                    (0x1 << 16)    // DEDT0
#define  _UART7_CR1_OVER8                                    (0x1 << 15)    // Oversampling mode
#define  _UART7_CR1_CMIE                                     (0x1 << 14)    // Character match interrupt enable
#define  _UART7_CR1_MME                                      (0x1 << 13)    // Mute mode enable
#define  _UART7_CR1_M0                                       (0x1 << 12)    // Word length
#define  _UART7_CR1_WAKE                                     (0x1 << 11)    // Receiver wakeup method
#define  _UART7_CR1_PCE                                      (0x1 << 10)    // Parity control enable
#define  _UART7_CR1_PS                                       (0x1 << 9)    // Parity selection
#define  _UART7_CR1_PEIE                                     (0x1 << 8)    // PE interrupt enable
#define  _UART7_CR1_TXEIE                                    (0x1 << 7)    // interrupt enable
#define  _UART7_CR1_TCIE                                     (0x1 << 6)    // Transmission complete interrupt enable
#define  _UART7_CR1_RXNEIE                                   (0x1 << 5)    // RXNE interrupt enable
#define  _UART7_CR1_IDLEIE                                   (0x1 << 4)    // IDLE interrupt enable
#define  _UART7_CR1_TE                                       (0x1 << 3)    // Transmitter enable
#define  _UART7_CR1_RE                                       (0x1 << 2)    // Receiver enable
#define  _UART7_CR1_UESM                                     (0x1 << 1)    // USART enable in Stop mode
#define  _UART7_CR1_UE                                       (0x1 << 0)    // USART enable
#define  _UART7_CR2_ADD4_7                                   (0xf << 28)    // Address of the USART node
#define  _UART7_CR2_ADD0_3                                   (0xf << 24)    // Address of the USART node
#define  _UART7_CR2_RTOEN                                    (0x1 << 23)    // Receiver timeout enable
#define  _UART7_CR2_ABRMOD1                                  (0x1 << 22)    // Auto baud rate mode
#define  _UART7_CR2_ABRMOD0                                  (0x1 << 21)    // ABRMOD0
#define  _UART7_CR2_ABREN                                    (0x1 << 20)    // Auto baud rate enable
#define  _UART7_CR2_MSBFIRST                                 (0x1 << 19)    // Most significant bit first
#define  _UART7_CR2_TAINV                                    (0x1 << 18)    // Binary data inversion
#define  _UART7_CR2_TXINV                                    (0x1 << 17)    // TX pin active level inversion
#define  _UART7_CR2_RXINV                                    (0x1 << 16)    // RX pin active level inversion
#define  _UART7_CR2_SWAP                                     (0x1 << 15)    // Swap TX/RX pins
#define  _UART7_CR2_LINEN                                    (0x1 << 14)    // LIN mode enable
#define  _UART7_CR2_STOP                                     (0x3 << 12)    // STOP bits
#define  _UART7_CR2_CLKEN                                    (0x1 << 11)    // Clock enable
#define  _UART7_CR2_CPOL                                     (0x1 << 10)    // Clock polarity
#define  _UART7_CR2_CPHA                                     (0x1 << 9)    // Clock phase
#define  _UART7_CR2_LBCL                                     (0x1 << 8)    // Last bit clock pulse
#define  _UART7_CR2_LBDIE                                    (0x1 << 6)    // LIN break detection interrupt enable
#define  _UART7_CR2_LBDL                                     (0x1 << 5)    // LIN break detection length
#define  _UART7_CR2_ADDM7                                    (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _UART7_CR3_WUFIE                                    (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _UART7_CR3_WUS                                      (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _UART7_CR3_SCARCNT                                  (0x7 << 17)    // Smartcard auto-retry count
#define  _UART7_CR3_DEP                                      (0x1 << 15)    // Driver enable polarity selection
#define  _UART7_CR3_DEM                                      (0x1 << 14)    // Driver enable mode
#define  _UART7_CR3_DDRE                                     (0x1 << 13)    // DMA Disable on Reception Error
#define  _UART7_CR3_OVRDIS                                   (0x1 << 12)    // Overrun Disable
#define  _UART7_CR3_ONEBIT                                   (0x1 << 11)    // One sample bit method enable
#define  _UART7_CR3_CTSIE                                    (0x1 << 10)    // CTS interrupt enable
#define  _UART7_CR3_CTSE                                     (0x1 << 9)    // CTS enable
#define  _UART7_CR3_RTSE                                     (0x1 << 8)    // RTS enable
#define  _UART7_CR3_DMAT                                     (0x1 << 7)    // DMA enable transmitter
#define  _UART7_CR3_DMAR                                     (0x1 << 6)    // DMA enable receiver
#define  _UART7_CR3_SCEN                                     (0x1 << 5)    // Smartcard mode enable
#define  _UART7_CR3_NACK                                     (0x1 << 4)    // Smartcard NACK enable
#define  _UART7_CR3_HDSEL                                    (0x1 << 3)    // Half-duplex selection
#define  _UART7_CR3_IRLP                                     (0x1 << 2)    // Ir low-power
#define  _UART7_CR3_IREN                                     (0x1 << 1)    // Ir mode enable
#define  _UART7_CR3_EIE                                      (0x1 << 0)    // Error interrupt enable
#define  _UART7_BRR_DIV_Mantissa                             (0xfff << 4)    // DIV_Mantissa
#define  _UART7_BRR_DIV_Fraction                             (0xf << 0)    // DIV_Fraction
#define  _UART7_GTPR_GT                                      (0xff << 8)    // Guard time value
#define  _UART7_GTPR_PSC                                     (0xff << 0)    // Prescaler value
#define  _UART7_RTOR_BLEN                                    (0xff << 24)    // Block Length
#define  _UART7_RTOR_RTO                                     (0xffffff << 0)    // Receiver timeout value
#define  _UART7_RQR_TXFRQ                                    (0x1 << 4)    // Transmit data flush request
#define  _UART7_RQR_RXFRQ                                    (0x1 << 3)    // Receive data flush request
#define  _UART7_RQR_MMRQ                                     (0x1 << 2)    // Mute mode request
#define  _UART7_RQR_SBKRQ                                    (0x1 << 1)    // Send break request
#define  _UART7_RQR_ABRRQ                                    (0x1 << 0)    // Auto baud rate request
#define  _UART7_ISR_REACK                                    (0x1 << 22)    // REACK
#define  _UART7_ISR_TEACK                                    (0x1 << 21)    // TEACK
#define  _UART7_ISR_WUF                                      (0x1 << 20)    // WUF
#define  _UART7_ISR_RWU                                      (0x1 << 19)    // RWU
#define  _UART7_ISR_SBKF                                     (0x1 << 18)    // SBKF
#define  _UART7_ISR_CMF                                      (0x1 << 17)    // CMF
#define  _UART7_ISR_BUSY                                     (0x1 << 16)    // BUSY
#define  _UART7_ISR_ABRF                                     (0x1 << 15)    // ABRF
#define  _UART7_ISR_ABRE                                     (0x1 << 14)    // ABRE
#define  _UART7_ISR_EOBF                                     (0x1 << 12)    // EOBF
#define  _UART7_ISR_RTOF                                     (0x1 << 11)    // RTOF
#define  _UART7_ISR_CTS                                      (0x1 << 10)    // CTS
#define  _UART7_ISR_CTSIF                                    (0x1 << 9)    // CTSIF
#define  _UART7_ISR_LBDF                                     (0x1 << 8)    // LBDF
#define  _UART7_ISR_TXE                                      (0x1 << 7)    // TXE
#define  _UART7_ISR_TC                                       (0x1 << 6)    // TC
#define  _UART7_ISR_RXNE                                     (0x1 << 5)    // RXNE
#define  _UART7_ISR_IDLE                                     (0x1 << 4)    // IDLE
#define  _UART7_ISR_ORE                                      (0x1 << 3)    // ORE
#define  _UART7_ISR_NF                                       (0x1 << 2)    // NF
#define  _UART7_ISR_FE                                       (0x1 << 1)    // FE
#define  _UART7_ISR_PE                                       (0x1 << 0)    // PE
#define  _UART7_ICR_WUCF                                     (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _UART7_ICR_CMCF                                     (0x1 << 17)    // Character match clear flag
#define  _UART7_ICR_EOBCF                                    (0x1 << 12)    // End of block clear flag
#define  _UART7_ICR_RTOCF                                    (0x1 << 11)    // Receiver timeout clear flag
#define  _UART7_ICR_CTSCF                                    (0x1 << 9)    // CTS clear flag
#define  _UART7_ICR_LBDCF                                    (0x1 << 8)    // LIN break detection clear flag
#define  _UART7_ICR_TCCF                                     (0x1 << 6)    // Transmission complete clear flag
#define  _UART7_ICR_IDLECF                                   (0x1 << 4)    // Idle line detected clear flag
#define  _UART7_ICR_ORECF                                    (0x1 << 3)    // Overrun error clear flag
#define  _UART7_ICR_NCF                                      (0x1 << 2)    // Noise detected clear flag
#define  _UART7_ICR_FECF                                     (0x1 << 1)    // Framing error clear flag
#define  _UART7_ICR_PECF                                     (0x1 << 0)    // Parity error clear flag
#define  _UART7_RDR_RDR                                      (0x1ff << 0)    // Receive data value
#define  _UART7_TDR_TDR                                      (0x1ff << 0)    // Transmit data value
#define  _UART8_CR1_M1                                       (0x1 << 28)    // Word length
#define  _UART8_CR1_EOBIE                                    (0x1 << 27)    // End of Block interrupt enable
#define  _UART8_CR1_RTOIE                                    (0x1 << 26)    // Receiver timeout interrupt enable
#define  _UART8_CR1_DEAT4                                    (0x1 << 25)    // Driver Enable assertion time
#define  _UART8_CR1_DEAT3                                    (0x1 << 24)    // DEAT3
#define  _UART8_CR1_DEAT2                                    (0x1 << 23)    // DEAT2
#define  _UART8_CR1_DEAT1                                    (0x1 << 22)    // DEAT1
#define  _UART8_CR1_DEAT0                                    (0x1 << 21)    // DEAT0
#define  _UART8_CR1_DEDT4                                    (0x1 << 20)    // Driver Enable de-assertion time
#define  _UART8_CR1_DEDT3                                    (0x1 << 19)    // DEDT3
#define  _UART8_CR1_DEDT2                                    (0x1 << 18)    // DEDT2
#define  _UART8_CR1_DEDT1                                    (0x1 << 17)    // DEDT1
#define  _UART8_CR1_DEDT0                                    (0x1 << 16)    // DEDT0
#define  _UART8_CR1_OVER8                                    (0x1 << 15)    // Oversampling mode
#define  _UART8_CR1_CMIE                                     (0x1 << 14)    // Character match interrupt enable
#define  _UART8_CR1_MME                                      (0x1 << 13)    // Mute mode enable
#define  _UART8_CR1_M0                                       (0x1 << 12)    // Word length
#define  _UART8_CR1_WAKE                                     (0x1 << 11)    // Receiver wakeup method
#define  _UART8_CR1_PCE                                      (0x1 << 10)    // Parity control enable
#define  _UART8_CR1_PS                                       (0x1 << 9)    // Parity selection
#define  _UART8_CR1_PEIE                                     (0x1 << 8)    // PE interrupt enable
#define  _UART8_CR1_TXEIE                                    (0x1 << 7)    // interrupt enable
#define  _UART8_CR1_TCIE                                     (0x1 << 6)    // Transmission complete interrupt enable
#define  _UART8_CR1_RXNEIE                                   (0x1 << 5)    // RXNE interrupt enable
#define  _UART8_CR1_IDLEIE                                   (0x1 << 4)    // IDLE interrupt enable
#define  _UART8_CR1_TE                                       (0x1 << 3)    // Transmitter enable
#define  _UART8_CR1_RE                                       (0x1 << 2)    // Receiver enable
#define  _UART8_CR1_UESM                                     (0x1 << 1)    // USART enable in Stop mode
#define  _UART8_CR1_UE                                       (0x1 << 0)    // USART enable
#define  _UART8_CR2_ADD4_7                                   (0xf << 28)    // Address of the USART node
#define  _UART8_CR2_ADD0_3                                   (0xf << 24)    // Address of the USART node
#define  _UART8_CR2_RTOEN                                    (0x1 << 23)    // Receiver timeout enable
#define  _UART8_CR2_ABRMOD1                                  (0x1 << 22)    // Auto baud rate mode
#define  _UART8_CR2_ABRMOD0                                  (0x1 << 21)    // ABRMOD0
#define  _UART8_CR2_ABREN                                    (0x1 << 20)    // Auto baud rate enable
#define  _UART8_CR2_MSBFIRST                                 (0x1 << 19)    // Most significant bit first
#define  _UART8_CR2_TAINV                                    (0x1 << 18)    // Binary data inversion
#define  _UART8_CR2_TXINV                                    (0x1 << 17)    // TX pin active level inversion
#define  _UART8_CR2_RXINV                                    (0x1 << 16)    // RX pin active level inversion
#define  _UART8_CR2_SWAP                                     (0x1 << 15)    // Swap TX/RX pins
#define  _UART8_CR2_LINEN                                    (0x1 << 14)    // LIN mode enable
#define  _UART8_CR2_STOP                                     (0x3 << 12)    // STOP bits
#define  _UART8_CR2_CLKEN                                    (0x1 << 11)    // Clock enable
#define  _UART8_CR2_CPOL                                     (0x1 << 10)    // Clock polarity
#define  _UART8_CR2_CPHA                                     (0x1 << 9)    // Clock phase
#define  _UART8_CR2_LBCL                                     (0x1 << 8)    // Last bit clock pulse
#define  _UART8_CR2_LBDIE                                    (0x1 << 6)    // LIN break detection interrupt enable
#define  _UART8_CR2_LBDL                                     (0x1 << 5)    // LIN break detection length
#define  _UART8_CR2_ADDM7                                    (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _UART8_CR3_WUFIE                                    (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _UART8_CR3_WUS                                      (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _UART8_CR3_SCARCNT                                  (0x7 << 17)    // Smartcard auto-retry count
#define  _UART8_CR3_DEP                                      (0x1 << 15)    // Driver enable polarity selection
#define  _UART8_CR3_DEM                                      (0x1 << 14)    // Driver enable mode
#define  _UART8_CR3_DDRE                                     (0x1 << 13)    // DMA Disable on Reception Error
#define  _UART8_CR3_OVRDIS                                   (0x1 << 12)    // Overrun Disable
#define  _UART8_CR3_ONEBIT                                   (0x1 << 11)    // One sample bit method enable
#define  _UART8_CR3_CTSIE                                    (0x1 << 10)    // CTS interrupt enable
#define  _UART8_CR3_CTSE                                     (0x1 << 9)    // CTS enable
#define  _UART8_CR3_RTSE                                     (0x1 << 8)    // RTS enable
#define  _UART8_CR3_DMAT                                     (0x1 << 7)    // DMA enable transmitter
#define  _UART8_CR3_DMAR                                     (0x1 << 6)    // DMA enable receiver
#define  _UART8_CR3_SCEN                                     (0x1 << 5)    // Smartcard mode enable
#define  _UART8_CR3_NACK                                     (0x1 << 4)    // Smartcard NACK enable
#define  _UART8_CR3_HDSEL                                    (0x1 << 3)    // Half-duplex selection
#define  _UART8_CR3_IRLP                                     (0x1 << 2)    // Ir low-power
#define  _UART8_CR3_IREN                                     (0x1 << 1)    // Ir mode enable
#define  _UART8_CR3_EIE                                      (0x1 << 0)    // Error interrupt enable
#define  _UART8_BRR_DIV_Mantissa                             (0xfff << 4)    // DIV_Mantissa
#define  _UART8_BRR_DIV_Fraction                             (0xf << 0)    // DIV_Fraction
#define  _UART8_GTPR_GT                                      (0xff << 8)    // Guard time value
#define  _UART8_GTPR_PSC                                     (0xff << 0)    // Prescaler value
#define  _UART8_RTOR_BLEN                                    (0xff << 24)    // Block Length
#define  _UART8_RTOR_RTO                                     (0xffffff << 0)    // Receiver timeout value
#define  _UART8_RQR_TXFRQ                                    (0x1 << 4)    // Transmit data flush request
#define  _UART8_RQR_RXFRQ                                    (0x1 << 3)    // Receive data flush request
#define  _UART8_RQR_MMRQ                                     (0x1 << 2)    // Mute mode request
#define  _UART8_RQR_SBKRQ                                    (0x1 << 1)    // Send break request
#define  _UART8_RQR_ABRRQ                                    (0x1 << 0)    // Auto baud rate request
#define  _UART8_ISR_REACK                                    (0x1 << 22)    // REACK
#define  _UART8_ISR_TEACK                                    (0x1 << 21)    // TEACK
#define  _UART8_ISR_WUF                                      (0x1 << 20)    // WUF
#define  _UART8_ISR_RWU                                      (0x1 << 19)    // RWU
#define  _UART8_ISR_SBKF                                     (0x1 << 18)    // SBKF
#define  _UART8_ISR_CMF                                      (0x1 << 17)    // CMF
#define  _UART8_ISR_BUSY                                     (0x1 << 16)    // BUSY
#define  _UART8_ISR_ABRF                                     (0x1 << 15)    // ABRF
#define  _UART8_ISR_ABRE                                     (0x1 << 14)    // ABRE
#define  _UART8_ISR_EOBF                                     (0x1 << 12)    // EOBF
#define  _UART8_ISR_RTOF                                     (0x1 << 11)    // RTOF
#define  _UART8_ISR_CTS                                      (0x1 << 10)    // CTS
#define  _UART8_ISR_CTSIF                                    (0x1 << 9)    // CTSIF
#define  _UART8_ISR_LBDF                                     (0x1 << 8)    // LBDF
#define  _UART8_ISR_TXE                                      (0x1 << 7)    // TXE
#define  _UART8_ISR_TC                                       (0x1 << 6)    // TC
#define  _UART8_ISR_RXNE                                     (0x1 << 5)    // RXNE
#define  _UART8_ISR_IDLE                                     (0x1 << 4)    // IDLE
#define  _UART8_ISR_ORE                                      (0x1 << 3)    // ORE
#define  _UART8_ISR_NF                                       (0x1 << 2)    // NF
#define  _UART8_ISR_FE                                       (0x1 << 1)    // FE
#define  _UART8_ISR_PE                                       (0x1 << 0)    // PE
#define  _UART8_ICR_WUCF                                     (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _UART8_ICR_CMCF                                     (0x1 << 17)    // Character match clear flag
#define  _UART8_ICR_EOBCF                                    (0x1 << 12)    // End of block clear flag
#define  _UART8_ICR_RTOCF                                    (0x1 << 11)    // Receiver timeout clear flag
#define  _UART8_ICR_CTSCF                                    (0x1 << 9)    // CTS clear flag
#define  _UART8_ICR_LBDCF                                    (0x1 << 8)    // LIN break detection clear flag
#define  _UART8_ICR_TCCF                                     (0x1 << 6)    // Transmission complete clear flag
#define  _UART8_ICR_IDLECF                                   (0x1 << 4)    // Idle line detected clear flag
#define  _UART8_ICR_ORECF                                    (0x1 << 3)    // Overrun error clear flag
#define  _UART8_ICR_NCF                                      (0x1 << 2)    // Noise detected clear flag
#define  _UART8_ICR_FECF                                     (0x1 << 1)    // Framing error clear flag
#define  _UART8_ICR_PECF                                     (0x1 << 0)    // Parity error clear flag
#define  _UART8_RDR_RDR                                      (0x1ff << 0)    // Receive data value
#define  _UART8_TDR_TDR                                      (0x1ff << 0)    // Transmit data value
#define  _USART1_CR1_M1                                      (0x1 << 28)    // Word length
#define  _USART1_CR1_EOBIE                                   (0x1 << 27)    // End of Block interrupt enable
#define  _USART1_CR1_RTOIE                                   (0x1 << 26)    // Receiver timeout interrupt enable
#define  _USART1_CR1_DEAT4                                   (0x1 << 25)    // Driver Enable assertion time
#define  _USART1_CR1_DEAT3                                   (0x1 << 24)    // DEAT3
#define  _USART1_CR1_DEAT2                                   (0x1 << 23)    // DEAT2
#define  _USART1_CR1_DEAT1                                   (0x1 << 22)    // DEAT1
#define  _USART1_CR1_DEAT0                                   (0x1 << 21)    // DEAT0
#define  _USART1_CR1_DEDT4                                   (0x1 << 20)    // Driver Enable de-assertion time
#define  _USART1_CR1_DEDT3                                   (0x1 << 19)    // DEDT3
#define  _USART1_CR1_DEDT2                                   (0x1 << 18)    // DEDT2
#define  _USART1_CR1_DEDT1                                   (0x1 << 17)    // DEDT1
#define  _USART1_CR1_DEDT0                                   (0x1 << 16)    // DEDT0
#define  _USART1_CR1_OVER8                                   (0x1 << 15)    // Oversampling mode
#define  _USART1_CR1_CMIE                                    (0x1 << 14)    // Character match interrupt enable
#define  _USART1_CR1_MME                                     (0x1 << 13)    // Mute mode enable
#define  _USART1_CR1_M0                                      (0x1 << 12)    // Word length
#define  _USART1_CR1_WAKE                                    (0x1 << 11)    // Receiver wakeup method
#define  _USART1_CR1_PCE                                     (0x1 << 10)    // Parity control enable
#define  _USART1_CR1_PS                                      (0x1 << 9)    // Parity selection
#define  _USART1_CR1_PEIE                                    (0x1 << 8)    // PE interrupt enable
#define  _USART1_CR1_TXEIE                                   (0x1 << 7)    // interrupt enable
#define  _USART1_CR1_TCIE                                    (0x1 << 6)    // Transmission complete interrupt enable
#define  _USART1_CR1_RXNEIE                                  (0x1 << 5)    // RXNE interrupt enable
#define  _USART1_CR1_IDLEIE                                  (0x1 << 4)    // IDLE interrupt enable
#define  _USART1_CR1_TE                                      (0x1 << 3)    // Transmitter enable
#define  _USART1_CR1_RE                                      (0x1 << 2)    // Receiver enable
#define  _USART1_CR1_UESM                                    (0x1 << 1)    // USART enable in Stop mode
#define  _USART1_CR1_UE                                      (0x1 << 0)    // USART enable
#define  _USART1_CR2_ADD4_7                                  (0xf << 28)    // Address of the USART node
#define  _USART1_CR2_ADD0_3                                  (0xf << 24)    // Address of the USART node
#define  _USART1_CR2_RTOEN                                   (0x1 << 23)    // Receiver timeout enable
#define  _USART1_CR2_ABRMOD1                                 (0x1 << 22)    // Auto baud rate mode
#define  _USART1_CR2_ABRMOD0                                 (0x1 << 21)    // ABRMOD0
#define  _USART1_CR2_ABREN                                   (0x1 << 20)    // Auto baud rate enable
#define  _USART1_CR2_MSBFIRST                                (0x1 << 19)    // Most significant bit first
#define  _USART1_CR2_TAINV                                   (0x1 << 18)    // Binary data inversion
#define  _USART1_CR2_TXINV                                   (0x1 << 17)    // TX pin active level inversion
#define  _USART1_CR2_RXINV                                   (0x1 << 16)    // RX pin active level inversion
#define  _USART1_CR2_SWAP                                    (0x1 << 15)    // Swap TX/RX pins
#define  _USART1_CR2_LINEN                                   (0x1 << 14)    // LIN mode enable
#define  _USART1_CR2_STOP                                    (0x3 << 12)    // STOP bits
#define  _USART1_CR2_CLKEN                                   (0x1 << 11)    // Clock enable
#define  _USART1_CR2_CPOL                                    (0x1 << 10)    // Clock polarity
#define  _USART1_CR2_CPHA                                    (0x1 << 9)    // Clock phase
#define  _USART1_CR2_LBCL                                    (0x1 << 8)    // Last bit clock pulse
#define  _USART1_CR2_LBDIE                                   (0x1 << 6)    // LIN break detection interrupt enable
#define  _USART1_CR2_LBDL                                    (0x1 << 5)    // LIN break detection length
#define  _USART1_CR2_ADDM7                                   (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _USART1_CR3_WUFIE                                   (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _USART1_CR3_WUS                                     (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _USART1_CR3_SCARCNT                                 (0x7 << 17)    // Smartcard auto-retry count
#define  _USART1_CR3_DEP                                     (0x1 << 15)    // Driver enable polarity selection
#define  _USART1_CR3_DEM                                     (0x1 << 14)    // Driver enable mode
#define  _USART1_CR3_DDRE                                    (0x1 << 13)    // DMA Disable on Reception Error
#define  _USART1_CR3_OVRDIS                                  (0x1 << 12)    // Overrun Disable
#define  _USART1_CR3_ONEBIT                                  (0x1 << 11)    // One sample bit method enable
#define  _USART1_CR3_CTSIE                                   (0x1 << 10)    // CTS interrupt enable
#define  _USART1_CR3_CTSE                                    (0x1 << 9)    // CTS enable
#define  _USART1_CR3_RTSE                                    (0x1 << 8)    // RTS enable
#define  _USART1_CR3_DMAT                                    (0x1 << 7)    // DMA enable transmitter
#define  _USART1_CR3_DMAR                                    (0x1 << 6)    // DMA enable receiver
#define  _USART1_CR3_SCEN                                    (0x1 << 5)    // Smartcard mode enable
#define  _USART1_CR3_NACK                                    (0x1 << 4)    // Smartcard NACK enable
#define  _USART1_CR3_HDSEL                                   (0x1 << 3)    // Half-duplex selection
#define  _USART1_CR3_IRLP                                    (0x1 << 2)    // Ir low-power
#define  _USART1_CR3_IREN                                    (0x1 << 1)    // Ir mode enable
#define  _USART1_CR3_EIE                                     (0x1 << 0)    // Error interrupt enable
#define  _USART1_BRR_DIV_Mantissa                            (0xfff << 4)    // DIV_Mantissa
#define  _USART1_BRR_DIV_Fraction                            (0xf << 0)    // DIV_Fraction
#define  _USART1_GTPR_GT                                     (0xff << 8)    // Guard time value
#define  _USART1_GTPR_PSC                                    (0xff << 0)    // Prescaler value
#define  _USART1_RTOR_BLEN                                   (0xff << 24)    // Block Length
#define  _USART1_RTOR_RTO                                    (0xffffff << 0)    // Receiver timeout value
#define  _USART1_RQR_TXFRQ                                   (0x1 << 4)    // Transmit data flush request
#define  _USART1_RQR_RXFRQ                                   (0x1 << 3)    // Receive data flush request
#define  _USART1_RQR_MMRQ                                    (0x1 << 2)    // Mute mode request
#define  _USART1_RQR_SBKRQ                                   (0x1 << 1)    // Send break request
#define  _USART1_RQR_ABRRQ                                   (0x1 << 0)    // Auto baud rate request
#define  _USART1_ISR_REACK                                   (0x1 << 22)    // REACK
#define  _USART1_ISR_TEACK                                   (0x1 << 21)    // TEACK
#define  _USART1_ISR_WUF                                     (0x1 << 20)    // WUF
#define  _USART1_ISR_RWU                                     (0x1 << 19)    // RWU
#define  _USART1_ISR_SBKF                                    (0x1 << 18)    // SBKF
#define  _USART1_ISR_CMF                                     (0x1 << 17)    // CMF
#define  _USART1_ISR_BUSY                                    (0x1 << 16)    // BUSY
#define  _USART1_ISR_ABRF                                    (0x1 << 15)    // ABRF
#define  _USART1_ISR_ABRE                                    (0x1 << 14)    // ABRE
#define  _USART1_ISR_EOBF                                    (0x1 << 12)    // EOBF
#define  _USART1_ISR_RTOF                                    (0x1 << 11)    // RTOF
#define  _USART1_ISR_CTS                                     (0x1 << 10)    // CTS
#define  _USART1_ISR_CTSIF                                   (0x1 << 9)    // CTSIF
#define  _USART1_ISR_LBDF                                    (0x1 << 8)    // LBDF
#define  _USART1_ISR_TXE                                     (0x1 << 7)    // TXE
#define  _USART1_ISR_TC                                      (0x1 << 6)    // TC
#define  _USART1_ISR_RXNE                                    (0x1 << 5)    // RXNE
#define  _USART1_ISR_IDLE                                    (0x1 << 4)    // IDLE
#define  _USART1_ISR_ORE                                     (0x1 << 3)    // ORE
#define  _USART1_ISR_NF                                      (0x1 << 2)    // NF
#define  _USART1_ISR_FE                                      (0x1 << 1)    // FE
#define  _USART1_ISR_PE                                      (0x1 << 0)    // PE
#define  _USART1_ICR_WUCF                                    (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _USART1_ICR_CMCF                                    (0x1 << 17)    // Character match clear flag
#define  _USART1_ICR_EOBCF                                   (0x1 << 12)    // End of block clear flag
#define  _USART1_ICR_RTOCF                                   (0x1 << 11)    // Receiver timeout clear flag
#define  _USART1_ICR_CTSCF                                   (0x1 << 9)    // CTS clear flag
#define  _USART1_ICR_LBDCF                                   (0x1 << 8)    // LIN break detection clear flag
#define  _USART1_ICR_TCCF                                    (0x1 << 6)    // Transmission complete clear flag
#define  _USART1_ICR_IDLECF                                  (0x1 << 4)    // Idle line detected clear flag
#define  _USART1_ICR_ORECF                                   (0x1 << 3)    // Overrun error clear flag
#define  _USART1_ICR_NCF                                     (0x1 << 2)    // Noise detected clear flag
#define  _USART1_ICR_FECF                                    (0x1 << 1)    // Framing error clear flag
#define  _USART1_ICR_PECF                                    (0x1 << 0)    // Parity error clear flag
#define  _USART1_RDR_RDR                                     (0x1ff << 0)    // Receive data value
#define  _USART1_TDR_TDR                                     (0x1ff << 0)    // Transmit data value
#define  _USART6_CR1_M1                                      (0x1 << 28)    // Word length
#define  _USART6_CR1_EOBIE                                   (0x1 << 27)    // End of Block interrupt enable
#define  _USART6_CR1_RTOIE                                   (0x1 << 26)    // Receiver timeout interrupt enable
#define  _USART6_CR1_DEAT4                                   (0x1 << 25)    // Driver Enable assertion time
#define  _USART6_CR1_DEAT3                                   (0x1 << 24)    // DEAT3
#define  _USART6_CR1_DEAT2                                   (0x1 << 23)    // DEAT2
#define  _USART6_CR1_DEAT1                                   (0x1 << 22)    // DEAT1
#define  _USART6_CR1_DEAT0                                   (0x1 << 21)    // DEAT0
#define  _USART6_CR1_DEDT4                                   (0x1 << 20)    // Driver Enable de-assertion time
#define  _USART6_CR1_DEDT3                                   (0x1 << 19)    // DEDT3
#define  _USART6_CR1_DEDT2                                   (0x1 << 18)    // DEDT2
#define  _USART6_CR1_DEDT1                                   (0x1 << 17)    // DEDT1
#define  _USART6_CR1_DEDT0                                   (0x1 << 16)    // DEDT0
#define  _USART6_CR1_OVER8                                   (0x1 << 15)    // Oversampling mode
#define  _USART6_CR1_CMIE                                    (0x1 << 14)    // Character match interrupt enable
#define  _USART6_CR1_MME                                     (0x1 << 13)    // Mute mode enable
#define  _USART6_CR1_M0                                      (0x1 << 12)    // Word length
#define  _USART6_CR1_WAKE                                    (0x1 << 11)    // Receiver wakeup method
#define  _USART6_CR1_PCE                                     (0x1 << 10)    // Parity control enable
#define  _USART6_CR1_PS                                      (0x1 << 9)    // Parity selection
#define  _USART6_CR1_PEIE                                    (0x1 << 8)    // PE interrupt enable
#define  _USART6_CR1_TXEIE                                   (0x1 << 7)    // interrupt enable
#define  _USART6_CR1_TCIE                                    (0x1 << 6)    // Transmission complete interrupt enable
#define  _USART6_CR1_RXNEIE                                  (0x1 << 5)    // RXNE interrupt enable
#define  _USART6_CR1_IDLEIE                                  (0x1 << 4)    // IDLE interrupt enable
#define  _USART6_CR1_TE                                      (0x1 << 3)    // Transmitter enable
#define  _USART6_CR1_RE                                      (0x1 << 2)    // Receiver enable
#define  _USART6_CR1_UESM                                    (0x1 << 1)    // USART enable in Stop mode
#define  _USART6_CR1_UE                                      (0x1 << 0)    // USART enable
#define  _USART6_CR2_ADD4_7                                  (0xf << 28)    // Address of the USART node
#define  _USART6_CR2_ADD0_3                                  (0xf << 24)    // Address of the USART node
#define  _USART6_CR2_RTOEN                                   (0x1 << 23)    // Receiver timeout enable
#define  _USART6_CR2_ABRMOD1                                 (0x1 << 22)    // Auto baud rate mode
#define  _USART6_CR2_ABRMOD0                                 (0x1 << 21)    // ABRMOD0
#define  _USART6_CR2_ABREN                                   (0x1 << 20)    // Auto baud rate enable
#define  _USART6_CR2_MSBFIRST                                (0x1 << 19)    // Most significant bit first
#define  _USART6_CR2_TAINV                                   (0x1 << 18)    // Binary data inversion
#define  _USART6_CR2_TXINV                                   (0x1 << 17)    // TX pin active level inversion
#define  _USART6_CR2_RXINV                                   (0x1 << 16)    // RX pin active level inversion
#define  _USART6_CR2_SWAP                                    (0x1 << 15)    // Swap TX/RX pins
#define  _USART6_CR2_LINEN                                   (0x1 << 14)    // LIN mode enable
#define  _USART6_CR2_STOP                                    (0x3 << 12)    // STOP bits
#define  _USART6_CR2_CLKEN                                   (0x1 << 11)    // Clock enable
#define  _USART6_CR2_CPOL                                    (0x1 << 10)    // Clock polarity
#define  _USART6_CR2_CPHA                                    (0x1 << 9)    // Clock phase
#define  _USART6_CR2_LBCL                                    (0x1 << 8)    // Last bit clock pulse
#define  _USART6_CR2_LBDIE                                   (0x1 << 6)    // LIN break detection interrupt enable
#define  _USART6_CR2_LBDL                                    (0x1 << 5)    // LIN break detection length
#define  _USART6_CR2_ADDM7                                   (0x1 << 4)    // 7-bit Address Detection/4-bit Address Detection
#define  _USART6_CR3_WUFIE                                   (0x1 << 22)    // Wakeup from Stop mode interrupt enable
#define  _USART6_CR3_WUS                                     (0x3 << 20)    // Wakeup from Stop mode interrupt flag selection
#define  _USART6_CR3_SCARCNT                                 (0x7 << 17)    // Smartcard auto-retry count
#define  _USART6_CR3_DEP                                     (0x1 << 15)    // Driver enable polarity selection
#define  _USART6_CR3_DEM                                     (0x1 << 14)    // Driver enable mode
#define  _USART6_CR3_DDRE                                    (0x1 << 13)    // DMA Disable on Reception Error
#define  _USART6_CR3_OVRDIS                                  (0x1 << 12)    // Overrun Disable
#define  _USART6_CR3_ONEBIT                                  (0x1 << 11)    // One sample bit method enable
#define  _USART6_CR3_CTSIE                                   (0x1 << 10)    // CTS interrupt enable
#define  _USART6_CR3_CTSE                                    (0x1 << 9)    // CTS enable
#define  _USART6_CR3_RTSE                                    (0x1 << 8)    // RTS enable
#define  _USART6_CR3_DMAT                                    (0x1 << 7)    // DMA enable transmitter
#define  _USART6_CR3_DMAR                                    (0x1 << 6)    // DMA enable receiver
#define  _USART6_CR3_SCEN                                    (0x1 << 5)    // Smartcard mode enable
#define  _USART6_CR3_NACK                                    (0x1 << 4)    // Smartcard NACK enable
#define  _USART6_CR3_HDSEL                                   (0x1 << 3)    // Half-duplex selection
#define  _USART6_CR3_IRLP                                    (0x1 << 2)    // Ir low-power
#define  _USART6_CR3_IREN                                    (0x1 << 1)    // Ir mode enable
#define  _USART6_CR3_EIE                                     (0x1 << 0)    // Error interrupt enable
#define  _USART6_BRR_DIV_Mantissa                            (0xfff << 4)    // DIV_Mantissa
#define  _USART6_BRR_DIV_Fraction                            (0xf << 0)    // DIV_Fraction
#define  _USART6_GTPR_GT                                     (0xff << 8)    // Guard time value
#define  _USART6_GTPR_PSC                                    (0xff << 0)    // Prescaler value
#define  _USART6_RTOR_BLEN                                   (0xff << 24)    // Block Length
#define  _USART6_RTOR_RTO                                    (0xffffff << 0)    // Receiver timeout value
#define  _USART6_RQR_TXFRQ                                   (0x1 << 4)    // Transmit data flush request
#define  _USART6_RQR_RXFRQ                                   (0x1 << 3)    // Receive data flush request
#define  _USART6_RQR_MMRQ                                    (0x1 << 2)    // Mute mode request
#define  _USART6_RQR_SBKRQ                                   (0x1 << 1)    // Send break request
#define  _USART6_RQR_ABRRQ                                   (0x1 << 0)    // Auto baud rate request
#define  _USART6_ISR_REACK                                   (0x1 << 22)    // REACK
#define  _USART6_ISR_TEACK                                   (0x1 << 21)    // TEACK
#define  _USART6_ISR_WUF                                     (0x1 << 20)    // WUF
#define  _USART6_ISR_RWU                                     (0x1 << 19)    // RWU
#define  _USART6_ISR_SBKF                                    (0x1 << 18)    // SBKF
#define  _USART6_ISR_CMF                                     (0x1 << 17)    // CMF
#define  _USART6_ISR_BUSY                                    (0x1 << 16)    // BUSY
#define  _USART6_ISR_ABRF                                    (0x1 << 15)    // ABRF
#define  _USART6_ISR_ABRE                                    (0x1 << 14)    // ABRE
#define  _USART6_ISR_EOBF                                    (0x1 << 12)    // EOBF
#define  _USART6_ISR_RTOF                                    (0x1 << 11)    // RTOF
#define  _USART6_ISR_CTS                                     (0x1 << 10)    // CTS
#define  _USART6_ISR_CTSIF                                   (0x1 << 9)    // CTSIF
#define  _USART6_ISR_LBDF                                    (0x1 << 8)    // LBDF
#define  _USART6_ISR_TXE                                     (0x1 << 7)    // TXE
#define  _USART6_ISR_TC                                      (0x1 << 6)    // TC
#define  _USART6_ISR_RXNE                                    (0x1 << 5)    // RXNE
#define  _USART6_ISR_IDLE                                    (0x1 << 4)    // IDLE
#define  _USART6_ISR_ORE                                     (0x1 << 3)    // ORE
#define  _USART6_ISR_NF                                      (0x1 << 2)    // NF
#define  _USART6_ISR_FE                                      (0x1 << 1)    // FE
#define  _USART6_ISR_PE                                      (0x1 << 0)    // PE
#define  _USART6_ICR_WUCF                                    (0x1 << 20)    // Wakeup from Stop mode clear flag
#define  _USART6_ICR_CMCF                                    (0x1 << 17)    // Character match clear flag
#define  _USART6_ICR_EOBCF                                   (0x1 << 12)    // End of block clear flag
#define  _USART6_ICR_RTOCF                                   (0x1 << 11)    // Receiver timeout clear flag
#define  _USART6_ICR_CTSCF                                   (0x1 << 9)    // CTS clear flag
#define  _USART6_ICR_LBDCF                                   (0x1 << 8)    // LIN break detection clear flag
#define  _USART6_ICR_TCCF                                    (0x1 << 6)    // Transmission complete clear flag
#define  _USART6_ICR_IDLECF                                  (0x1 << 4)    // Idle line detected clear flag
#define  _USART6_ICR_ORECF                                   (0x1 << 3)    // Overrun error clear flag
#define  _USART6_ICR_NCF                                     (0x1 << 2)    // Noise detected clear flag
#define  _USART6_ICR_FECF                                    (0x1 << 1)    // Framing error clear flag
#define  _USART6_ICR_PECF                                    (0x1 << 0)    // Parity error clear flag
#define  _USART6_RDR_RDR                                     (0x1ff << 0)    // Receive data value
#define  _USART6_TDR_TDR                                     (0x1ff << 0)    // Transmit data value
　
　drivers/inc/stm32f767xx_USB_OTG_HS.h
#define Get_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 |= FLAG)
#define Get_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 |= FLAG)
#define Get_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 |= FLAG)
#define Get_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 |= FLAG)
#define Get_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 |= FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GOTGCTL(FLAG)(*(uint32_t*)0x40040000 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GOTGINT(FLAG)(*(uint32_t*)0x40040004 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GAHBCFG(FLAG)(*(uint32_t*)0x40040008 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GUSBCFG(FLAG)(*(uint32_t*)0x4004000c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRSTCTL(FLAG)(*(uint32_t*)0x40040010 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GINTSTS(FLAG)(*(uint32_t*)0x40040014 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GINTMSK(FLAG)(*(uint32_t*)0x40040018 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host(FLAG)(*(uint32_t*)0x4004001c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host(FLAG)(*(uint32_t*)0x40040020 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXFSIZ(FLAG)(*(uint32_t*)0x40040024 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host(FLAG)(*(uint32_t*)0x40040028 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device(FLAG)(*(uint32_t*)0x40040028 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GNPTXSTS(FLAG)(*(uint32_t*)0x4004002c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GCCFG(FLAG) (*(uint32_t*)0x40040038 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_CID(FLAG)   (*(uint32_t*)0x4004003c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ(FLAG)(*(uint32_t*)0x40040100 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF1(FLAG)(*(uint32_t*)0x40040104 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF2(FLAG)(*(uint32_t*)0x40040108 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF3(FLAG)(*(uint32_t*)0x4004011c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF4(FLAG)(*(uint32_t*)0x40040120 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF5(FLAG)(*(uint32_t*)0x40040124 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF6(FLAG)(*(uint32_t*)0x40040128 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_DIEPTXF7(FLAG)(*(uint32_t*)0x4004012c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device(FLAG)(*(uint32_t*)0x4004001c |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device(FLAG)(*(uint32_t*)0x40040020 |= ~FLAG)
#define Set_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 &= FLAG)
#define Clr_OTG_HS_GLOBAL_OTG_HS_GLPMCFG(FLAG)(*(uint32_t*)0x40040054 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCFG(FLAG)    (*(uint32_t*)0x40040400 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HFIR(FLAG)    (*(uint32_t*)0x40040404 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HFNUM(FLAG)   (*(uint32_t*)0x40040408 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HPTXSTS(FLAG) (*(uint32_t*)0x40040410 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HAINT(FLAG)   (*(uint32_t*)0x40040414 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HAINTMSK(FLAG)(*(uint32_t*)0x40040418 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HPRT(FLAG)    (*(uint32_t*)0x40040440 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR0(FLAG) (*(uint32_t*)0x40040500 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR1(FLAG) (*(uint32_t*)0x40040520 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR2(FLAG) (*(uint32_t*)0x40040540 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR3(FLAG) (*(uint32_t*)0x40040560 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR4(FLAG) (*(uint32_t*)0x40040580 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR5(FLAG) (*(uint32_t*)0x400405a0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR6(FLAG) (*(uint32_t*)0x400405c0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR7(FLAG) (*(uint32_t*)0x400405e0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR8(FLAG) (*(uint32_t*)0x40040600 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR9(FLAG) (*(uint32_t*)0x40040620 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR10(FLAG)(*(uint32_t*)0x40040640 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR11(FLAG)(*(uint32_t*)0x40040660 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT0(FLAG) (*(uint32_t*)0x40040504 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT1(FLAG) (*(uint32_t*)0x40040524 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT2(FLAG) (*(uint32_t*)0x40040544 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT3(FLAG) (*(uint32_t*)0x40040564 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT4(FLAG) (*(uint32_t*)0x40040584 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT5(FLAG) (*(uint32_t*)0x400405a4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT6(FLAG) (*(uint32_t*)0x400405c4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT7(FLAG) (*(uint32_t*)0x400405e4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT8(FLAG) (*(uint32_t*)0x40040604 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT9(FLAG) (*(uint32_t*)0x40040624 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT10(FLAG)(*(uint32_t*)0x40040644 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT11(FLAG)(*(uint32_t*)0x40040664 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT0(FLAG)  (*(uint32_t*)0x40040508 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT1(FLAG)  (*(uint32_t*)0x40040528 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT2(FLAG)  (*(uint32_t*)0x40040548 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT3(FLAG)  (*(uint32_t*)0x40040568 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT4(FLAG)  (*(uint32_t*)0x40040588 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT5(FLAG)  (*(uint32_t*)0x400405a8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT6(FLAG)  (*(uint32_t*)0x400405c8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT7(FLAG)  (*(uint32_t*)0x400405e8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT8(FLAG)  (*(uint32_t*)0x40040608 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT9(FLAG)  (*(uint32_t*)0x40040628 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT10(FLAG) (*(uint32_t*)0x40040648 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT11(FLAG) (*(uint32_t*)0x40040668 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK0(FLAG)(*(uint32_t*)0x4004050c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK1(FLAG)(*(uint32_t*)0x4004052c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK2(FLAG)(*(uint32_t*)0x4004054c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK3(FLAG)(*(uint32_t*)0x4004056c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK4(FLAG)(*(uint32_t*)0x4004058c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK5(FLAG)(*(uint32_t*)0x400405ac |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK6(FLAG)(*(uint32_t*)0x400405cc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK7(FLAG)(*(uint32_t*)0x400405ec |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK8(FLAG)(*(uint32_t*)0x4004060c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK9(FLAG)(*(uint32_t*)0x4004062c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK10(FLAG)(*(uint32_t*)0x4004064c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK11(FLAG)(*(uint32_t*)0x4004066c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ0(FLAG) (*(uint32_t*)0x40040510 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ1(FLAG) (*(uint32_t*)0x40040530 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ2(FLAG) (*(uint32_t*)0x40040550 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ3(FLAG) (*(uint32_t*)0x40040570 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ4(FLAG) (*(uint32_t*)0x40040590 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ5(FLAG) (*(uint32_t*)0x400405b0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ6(FLAG) (*(uint32_t*)0x400405d0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ7(FLAG) (*(uint32_t*)0x400405f0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ8(FLAG) (*(uint32_t*)0x40040610 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ9(FLAG) (*(uint32_t*)0x40040630 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ10(FLAG)(*(uint32_t*)0x40040650 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ11(FLAG)(*(uint32_t*)0x40040670 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA0(FLAG)  (*(uint32_t*)0x40040514 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA1(FLAG)  (*(uint32_t*)0x40040534 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA2(FLAG)  (*(uint32_t*)0x40040554 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA3(FLAG)  (*(uint32_t*)0x40040574 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA4(FLAG)  (*(uint32_t*)0x40040594 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA5(FLAG)  (*(uint32_t*)0x400405b4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA6(FLAG)  (*(uint32_t*)0x400405d4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA7(FLAG)  (*(uint32_t*)0x400405f4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA8(FLAG)  (*(uint32_t*)0x40040614 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA9(FLAG)  (*(uint32_t*)0x40040634 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA10(FLAG) (*(uint32_t*)0x40040654 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA11(FLAG) (*(uint32_t*)0x40040674 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR12(FLAG)(*(uint32_t*)0x40040678 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT12(FLAG)(*(uint32_t*)0x4004067c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT12(FLAG) (*(uint32_t*)0x40040680 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK12(FLAG)(*(uint32_t*)0x40040684 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ12(FLAG)(*(uint32_t*)0x40040688 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA12(FLAG) (*(uint32_t*)0x4004068c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR13(FLAG)(*(uint32_t*)0x40040690 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT13(FLAG)(*(uint32_t*)0x40040694 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT13(FLAG) (*(uint32_t*)0x40040698 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK13(FLAG)(*(uint32_t*)0x4004069c |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ13(FLAG)(*(uint32_t*)0x400406a0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA13(FLAG) (*(uint32_t*)0x400406a4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR14(FLAG)(*(uint32_t*)0x400406a8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT14(FLAG)(*(uint32_t*)0x400406ac |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT14(FLAG) (*(uint32_t*)0x400406b0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK14(FLAG)(*(uint32_t*)0x400406b4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ14(FLAG)(*(uint32_t*)0x400406b8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA14(FLAG) (*(uint32_t*)0x400406bc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCCHAR15(FLAG)(*(uint32_t*)0x400406c0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCSPLT15(FLAG)(*(uint32_t*)0x400406c4 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINT15(FLAG) (*(uint32_t*)0x400406c8 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCINTMSK15(FLAG)(*(uint32_t*)0x400406cc |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCTSIZ15(FLAG)(*(uint32_t*)0x400406d0 |= ~FLAG)
#define Set_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 &= FLAG)
#define Clr_OTG_HS_HOST_OTG_HS_HCDMA15(FLAG) (*(uint32_t*)0x400406d4 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DCFG(FLAG)  (*(uint32_t*)0x40040800 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DCTL(FLAG)  (*(uint32_t*)0x40040804 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DSTS(FLAG)  (*(uint32_t*)0x40040808 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPMSK(FLAG)(*(uint32_t*)0x40040810 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPMSK(FLAG)(*(uint32_t*)0x40040814 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DAINT(FLAG) (*(uint32_t*)0x40040818 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DAINTMSK(FLAG)(*(uint32_t*)0x4004081c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DVBUSDIS(FLAG)(*(uint32_t*)0x40040828 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DVBUSPULSE(FLAG)(*(uint32_t*)0x4004082c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTHRCTL(FLAG)(*(uint32_t*)0x40040830 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK(FLAG)(*(uint32_t*)0x40040834 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DEACHINT(FLAG)(*(uint32_t*)0x40040838 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DEACHINTMSK(FLAG)(*(uint32_t*)0x4004083c |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL0(FLAG)(*(uint32_t*)0x40040900 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL1(FLAG)(*(uint32_t*)0x40040920 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL2(FLAG)(*(uint32_t*)0x40040940 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL3(FLAG)(*(uint32_t*)0x40040960 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL4(FLAG)(*(uint32_t*)0x40040980 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL5(FLAG)(*(uint32_t*)0x400409a0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL6(FLAG)(*(uint32_t*)0x400409c0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPCTL7(FLAG)(*(uint32_t*)0x400409e0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT0(FLAG)(*(uint32_t*)0x40040908 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT1(FLAG)(*(uint32_t*)0x40040928 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT2(FLAG)(*(uint32_t*)0x40040948 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT3(FLAG)(*(uint32_t*)0x40040968 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT4(FLAG)(*(uint32_t*)0x40040988 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT5(FLAG)(*(uint32_t*)0x400409a8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT6(FLAG)(*(uint32_t*)0x400409c8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPINT7(FLAG)(*(uint32_t*)0x400409e8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0(FLAG)(*(uint32_t*)0x40040910 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA1(FLAG)(*(uint32_t*)0x40040914 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA2(FLAG)(*(uint32_t*)0x40040934 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA3(FLAG)(*(uint32_t*)0x40040954 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA4(FLAG)(*(uint32_t*)0x40040974 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPDMA5(FLAG)(*(uint32_t*)0x40040994 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS0(FLAG)(*(uint32_t*)0x40040918 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS1(FLAG)(*(uint32_t*)0x40040938 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS2(FLAG)(*(uint32_t*)0x40040958 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS3(FLAG)(*(uint32_t*)0x40040978 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS4(FLAG)(*(uint32_t*)0x40040998 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS5(FLAG)(*(uint32_t*)0x400409b8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1(FLAG)(*(uint32_t*)0x40040930 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2(FLAG)(*(uint32_t*)0x40040950 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3(FLAG)(*(uint32_t*)0x40040970 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4(FLAG)(*(uint32_t*)0x40040990 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5(FLAG)(*(uint32_t*)0x400409b0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL0(FLAG)(*(uint32_t*)0x40040b00 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL1(FLAG)(*(uint32_t*)0x40040b20 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL2(FLAG)(*(uint32_t*)0x40040b40 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL3(FLAG)(*(uint32_t*)0x40040b60 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT0(FLAG)(*(uint32_t*)0x40040b08 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT1(FLAG)(*(uint32_t*)0x40040b28 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT2(FLAG)(*(uint32_t*)0x40040b48 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT3(FLAG)(*(uint32_t*)0x40040b68 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT4(FLAG)(*(uint32_t*)0x40040b88 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT5(FLAG)(*(uint32_t*)0x40040ba8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT6(FLAG)(*(uint32_t*)0x40040bc8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPINT7(FLAG)(*(uint32_t*)0x40040be8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0(FLAG)(*(uint32_t*)0x40040b10 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1(FLAG)(*(uint32_t*)0x40040b30 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2(FLAG)(*(uint32_t*)0x40040b50 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3(FLAG)(*(uint32_t*)0x40040b70 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4(FLAG)(*(uint32_t*)0x40040b90 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6(FLAG)(*(uint32_t*)0x400409a0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS6(FLAG)(*(uint32_t*)0x400409a4 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7(FLAG)(*(uint32_t*)0x400409a8 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DTXFSTS7(FLAG)(*(uint32_t*)0x400409ac |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL4(FLAG)(*(uint32_t*)0x40040b80 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL5(FLAG)(*(uint32_t*)0x40040ba0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL6(FLAG)(*(uint32_t*)0x40040bc0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPCTL7(FLAG)(*(uint32_t*)0x40040be0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5(FLAG)(*(uint32_t*)0x40040bb0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6(FLAG)(*(uint32_t*)0x40040bd0 |= ~FLAG)
#define Set_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 &= FLAG)
#define Clr_OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7(FLAG)(*(uint32_t*)0x40040bf0 |= ~FLAG)
#define Set_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 &= FLAG)
#define Clr_OTG_HS_PWRCLK_OTG_HS_PCGCR(FLAG) (*(uint32_t*)0x40040e00 |= ~FLAG)
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS                (0x1 << 0)    // Session request success
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ                   (0x1 << 1)    // Session request
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS                (0x1 << 8)    // Host negotiation success
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ                 (0x1 << 9)    // HNP request
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN               (0x1 << 10)    // Host set HNP enable
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN                (0x1 << 11)    // Device HNP enabled
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS                (0x1 << 16)    // Connector ID status
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT                  (0x1 << 17)    // Long/short debounce time
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD                 (0x1 << 18)    // A-session valid
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD                 (0x1 << 19)    // B-session valid
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGCTL_EHEN                  (0x1 << 12)    // Embedded host enable
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET                 (0x1 << 2)    // Session end detected
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG               (0x1 << 8)    // Session request success status change
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG               (0x1 << 9)    // Host negotiation success status change
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET                (0x1 << 17)    // Host negotiation detected
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG               (0x1 << 18)    // A-device timeout change
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE                (0x1 << 19)    // Debounce done
#define  _OTG_HS_GLOBAL_OTG_HS_GOTGINT_IDCHNG                (0x1 << 20)    // ID input pin changed
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT                  (0x1 << 0)    // Global interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN               (0xf << 1)    // Burst length/type
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN                 (0x1 << 5)    // DMA enable
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL               (0x1 << 7)    // TxFIFO empty level
#define  _OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL              (0x1 << 8)    // Periodic TxFIFO empty level
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL                 (0x7 << 0)    // FS timeout calibration
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL                (0x1 << 6)    // USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP                (0x1 << 8)    // SRP-capable
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP                (0x1 << 9)    // HNP-capable
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT                  (0xf << 10)    // USB turnaround time
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS               (0x1 << 15)    // PHY Low-power clock select
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS              (0x1 << 17)    // ULPI FS/LS select
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR                (0x1 << 18)    // ULPI Auto-resume
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM               (0x1 << 19)    // ULPI Clock SuspendM
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD            (0x1 << 20)    // ULPI External VBUS Drive
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI            (0x1 << 21)    // ULPI external VBUS indicator
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS                 (0x1 << 22)    // TermSel DLine pulsing selection
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI                  (0x1 << 23)    // Indicator complement
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI                  (0x1 << 24)    // Indicator pass through
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD               (0x1 << 25)    // ULPI interface protect disable
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD                 (0x1 << 29)    // Forced host mode
#define  _OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD                 (0x1 << 30)    // Forced peripheral mode
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST                 (0x1 << 0)    // Core soft reset
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST                 (0x1 << 1)    // HCLK soft reset
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST                 (0x1 << 2)    // Host frame counter reset
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH               (0x1 << 4)    // RxFIFO flush
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH               (0x1 << 5)    // TxFIFO flush
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM                (0x1f << 6)    // TxFIFO number
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL                (0x1 << 31)    // AHB master idle
#define  _OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ                (0x1 << 30)    // DMA request signal enabled for USB OTG HS
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD                  (0x1 << 0)    // Current mode of operation
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS                  (0x1 << 1)    // Mode mismatch interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT                (0x1 << 2)    // OTG interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF                   (0x1 << 3)    // Start of frame
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL                (0x1 << 4)    // RxFIFO nonempty
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE                (0x1 << 5)    // Nonperiodic TxFIFO empty
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF              (0x1 << 6)    // Global IN nonperiodic NAK effective
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF            (0x1 << 7)    // Global OUT NAK effective
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP                 (0x1 << 10)    // Early suspend
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP               (0x1 << 11)    // USB suspend
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST                (0x1 << 12)    // USB reset
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE               (0x1 << 13)    // Enumeration done
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP               (0x1 << 14)    // Isochronous OUT packet dropped interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF                  (0x1 << 15)    // End of periodic frame interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT                (0x1 << 18)    // IN endpoint interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT                (0x1 << 19)    // OUT endpoint interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR              (0x1 << 20)    // Incomplete isochronous IN transfer
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT     (0x1 << 21)    // Incomplete periodic transfer
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP             (0x1 << 22)    // Data fetch suspended
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT               (0x1 << 24)    // Host port interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT                 (0x1 << 25)    // Host channels interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE                 (0x1 << 26)    // Periodic TxFIFO empty
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG               (0x1 << 28)    // Connector ID status change
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT               (0x1 << 29)    // Disconnect detected interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT                (0x1 << 30)    // Session request/new session detected interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT                (0x1 << 31)    // Resume/remote wakeup detected interrupt
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM                 (0x1 << 1)    // Mode mismatch interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT                (0x1 << 2)    // OTG interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM                  (0x1 << 3)    // Start of frame mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM               (0x1 << 4)    // Receive FIFO nonempty mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM               (0x1 << 5)    // Nonperiodic TxFIFO empty mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM             (0x1 << 6)    // Global nonperiodic IN NAK effective mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM             (0x1 << 7)    // Global OUT NAK effective mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM                (0x1 << 10)    // Early suspend mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM              (0x1 << 11)    // USB suspend mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST                (0x1 << 12)    // USB reset mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM              (0x1 << 13)    // Enumeration done mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM              (0x1 << 14)    // Isochronous OUT packet dropped interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM                 (0x1 << 15)    // End of periodic frame interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT                (0x1 << 18)    // IN endpoints interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT                (0x1 << 19)    // OUT endpoints interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM             (0x1 << 20)    // Incomplete isochronous IN transfer mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM       (0x1 << 21)    // Incomplete periodic transfer mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM                (0x1 << 22)    // Data fetch suspended mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM                 (0x1 << 24)    // Host port interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM                  (0x1 << 25)    // Host channels interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM                (0x1 << 26)    // Periodic TxFIFO empty mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM              (0x1 << 28)    // Connector ID status change mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT               (0x1 << 29)    // Disconnect detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM                 (0x1 << 30)    // Session request/new session detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM                  (0x1 << 31)    // Resume/remote wakeup detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_RSTDE                 (0x1 << 23)    // Reset detected interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GINTMSK_LPMINTM               (0x1 << 27)    // LPM interrupt mask
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM            (0xf << 0)    // Channel number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT             (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID             (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS           (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM            (0xf << 0)    // Channel number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT             (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID             (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS           (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD                  (0xffff << 0)    // RxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFSA        (0xffff << 0)    // Nonperiodic transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFD         (0xffff << 16)    // Nonperiodic TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FSA        (0xffff << 0)    // Endpoint 0 transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FD         (0xffff << 16)    // Endpoint 0 TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV             (0xffff << 0)    // Nonperiodic TxFIFO space available
#define  _OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV             (0xff << 16)    // Nonperiodic transmit request queue space available
#define  _OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP             (0x7f << 24)    // Top of the nonperiodic transmit request queue
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN                  (0x1 << 16)    // Power down
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_BCDEN                   (0x1 << 17)    // Battery charging detector (BCD) enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDEN                   (0x1 << 18)    // Data contact detection (DCD) mode enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PDEN                    (0x1 << 19)    // Primary detection (PD) mode enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_SDEN                    (0x1 << 20)    // Secondary detection (SD) mode enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_VBDEN                   (0x1 << 21)    // USB VBUS detection enable
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDET                   (0x1 << 0)    // Data contact detection (DCD) status
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PDET                    (0x1 << 1)    // Primary detection (PD) status
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_SDET                    (0x1 << 2)    // Secondary detection (SD) status
#define  _OTG_HS_GLOBAL_OTG_HS_GCCFG_PS2DET                  (0x1 << 3)    // DM pull-up detection status
#define  _OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID                (0xffffffff << 0)    // Product ID field
#define  _OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA                (0xffff << 0)    // Host periodic TxFIFO start address
#define  _OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD                (0xffff << 16)    // Host periodic TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA             (0xffff << 0)    // IN endpoint FIFOx transmit RAM start address
#define  _OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD             (0xffff << 16)    // IN endpoint TxFIFO depth
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_EPNUM          (0xf << 0)    // Endpoint number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_BCNT           (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_DPID           (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_PKTSTS         (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_FRMNUM         (0xf << 21)    // Frame number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_EPNUM          (0xf << 0)    // Endpoint number
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_BCNT           (0x7ff << 4)    // Byte count
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_DPID           (0x3 << 15)    // Data PID
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_PKTSTS         (0xf << 17)    // Packet status
#define  _OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_FRMNUM         (0xf << 21)    // Frame number
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMEN                 (0x1 << 0)    // LPM support enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMACK                (0x1 << 1)    // LPM token acknowledge enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESL                  (0xf << 2)    // Best effort service latency
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_REMWAKE               (0x1 << 6)    // bRemoteWake value
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1SSEN                (0x1 << 7)    // L1 Shallow Sleep enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESLTHRS              (0xf << 8)    // BESL threshold
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1DSEN                (0x1 << 12)    // L1 deep sleep enable
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRST                (0x3 << 13)    // LPM response
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SLPSTS                (0x1 << 15)    // Port sleep status
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1RSMOK               (0x1 << 16)    // Sleep State Resume OK
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMCHIDX              (0xf << 17)    // LPM Channel Index
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNT               (0x7 << 21)    // LPM retry count
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SNDLPM                (0x1 << 24)    // Send LPM transaction
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNTSTS            (0x7 << 25)    // LPM retry count status
#define  _OTG_HS_GLOBAL_OTG_HS_GLPMCFG_ENBESL                (0x1 << 28)    // Enable best effort service latency
#define  _OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS                    (0x3 << 0)    // FS/LS PHY clock select
#define  _OTG_HS_HOST_OTG_HS_HCFG_FSLSS                      (0x1 << 2)    // FS- and LS-only support
#define  _OTG_HS_HOST_OTG_HS_HFIR_FRIVL                      (0xffff << 0)    // Frame interval
#define  _OTG_HS_HOST_OTG_HS_HFNUM_FRNUM                     (0xffff << 0)    // Frame number
#define  _OTG_HS_HOST_OTG_HS_HFNUM_FTREM                     (0xffff << 16)    // Frame time remaining
#define  _OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL                (0xffff << 0)    // Periodic transmit data FIFO space available
#define  _OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV                 (0xff << 16)    // Periodic transmit request queue space available
#define  _OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP                 (0xff << 24)    // Top of the periodic transmit request queue
#define  _OTG_HS_HOST_OTG_HS_HAINT_HAINT                     (0xffff << 0)    // Channel interrupts
#define  _OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM                 (0xffff << 0)    // Channel interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HPRT_PCSTS                      (0x1 << 0)    // Port connect status
#define  _OTG_HS_HOST_OTG_HS_HPRT_PCDET                      (0x1 << 1)    // Port connect detected
#define  _OTG_HS_HOST_OTG_HS_HPRT_PENA                       (0x1 << 2)    // Port enable
#define  _OTG_HS_HOST_OTG_HS_HPRT_PENCHNG                    (0x1 << 3)    // Port enable/disable change
#define  _OTG_HS_HOST_OTG_HS_HPRT_POCA                       (0x1 << 4)    // Port overcurrent active
#define  _OTG_HS_HOST_OTG_HS_HPRT_POCCHNG                    (0x1 << 5)    // Port overcurrent change
#define  _OTG_HS_HOST_OTG_HS_HPRT_PRES                       (0x1 << 6)    // Port resume
#define  _OTG_HS_HOST_OTG_HS_HPRT_PSUSP                      (0x1 << 7)    // Port suspend
#define  _OTG_HS_HOST_OTG_HS_HPRT_PRST                       (0x1 << 8)    // Port reset
#define  _OTG_HS_HOST_OTG_HS_HPRT_PLSTS                      (0x3 << 10)    // Port line status
#define  _OTG_HS_HOST_OTG_HS_HPRT_PPWR                       (0x1 << 12)    // Port power
#define  _OTG_HS_HOST_OTG_HS_HPRT_PTCTL                      (0xf << 13)    // Port test control
#define  _OTG_HS_HOST_OTG_HS_HPRT_PSPD                       (0x3 << 17)    // Port speed
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ                   (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM                   (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR                   (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV                   (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP                   (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_MC                      (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_DAD                     (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM                  (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS                   (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA                   (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR                 (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR                 (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS                 (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT               (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN                 (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT0_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT0_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT0_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT0_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT0_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT0_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT0_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT0_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT1_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT1_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT1_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT1_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT1_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT2_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT2_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT2_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT2_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT2_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT3_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT3_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT3_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT3_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT3_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT4_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT4_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT4_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT4_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT4_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT5_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT5_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT5_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT5_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT5_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT6_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT6_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT6_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT6_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT6_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT7_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT7_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT7_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT7_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT7_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT8_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT8_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT8_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT8_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT8_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_XFRC                     (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT9_CHH                      (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT9_AHBERR                   (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_STALL                    (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_NAK                      (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_ACK                      (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_NYET                     (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT9_TXERR                    (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_BBERR                    (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT9_FRMOR                    (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT9_DTERR                    (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT10_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT10_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT10_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT10_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT10_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT11_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT11_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT11_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT11_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT11_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM                 (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM                  (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR                (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM                  (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM                  (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET                  (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM                (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM                (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM                (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM                (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET                 (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM               (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM               (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET                 (0x1 << 6)    // response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM               (0x1 << 7)    // Transaction error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM               (0x1 << 8)    // Babble error mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ                  (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT                  (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID                    (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR                  (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR12_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT12_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT12_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT12_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT12_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT12_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT12_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT12_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT12_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT12_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK12_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ12_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ12_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ12_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA12_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR13_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT13_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT13_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT13_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT13_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT13_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT13_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT13_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT13_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT13_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_STALLM               (0x1 << 3)    // STALLM response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK13_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ13_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ13_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ13_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA13_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR14_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT14_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT14_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT14_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT14_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT14_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT14_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT14_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT14_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT14_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_STALLM               (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_NAKM                 (0x1 << 4)    // NAKM response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_ACKM                 (0x1 << 5)    // ACKM response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK14_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ14_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ14_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ14_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA14_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_MPSIZ                  (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_EPNUM                  (0xf << 11)    // Endpoint number
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_EPDIR                  (0x1 << 15)    // Endpoint direction
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_LSDEV                  (0x1 << 17)    // Low-speed device
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_EPTYP                  (0x3 << 18)    // Endpoint type
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_MC                     (0x3 << 20)    // Multi Count (MC) / Error Count (EC)
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_DAD                    (0x7f << 22)    // Device address
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_ODDFRM                 (0x1 << 29)    // Odd frame
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_CHDIS                  (0x1 << 30)    // Channel disable
#define  _OTG_HS_HOST_OTG_HS_HCCHAR15_CHENA                  (0x1 << 31)    // Channel enable
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_PRTADDR                (0x7f << 0)    // Port address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_HUBADDR                (0x7f << 7)    // Hub address
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_XACTPOS                (0x3 << 14)    // XACTPOS
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_COMPLSPLT              (0x1 << 16)    // Do complete split
#define  _OTG_HS_HOST_OTG_HS_HCSPLT15_SPLITEN                (0x1 << 31)    // Split enable
#define  _OTG_HS_HOST_OTG_HS_HCINT15_XFRC                    (0x1 << 0)    // Transfer completed
#define  _OTG_HS_HOST_OTG_HS_HCINT15_CHH                     (0x1 << 1)    // Channel halted
#define  _OTG_HS_HOST_OTG_HS_HCINT15_AHBERR                  (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINT15_STALL                   (0x1 << 3)    // STALL response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_NAK                     (0x1 << 4)    // NAK response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_ACK                     (0x1 << 5)    // ACK response received/transmitted interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_NYET                    (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINT15_TXERR                   (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINT15_BBERR                   (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINT15_FRMOR                   (0x1 << 9)    // Frame overrun
#define  _OTG_HS_HOST_OTG_HS_HCINT15_DTERR                   (0x1 << 10)    // Data toggle error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_XFRCM                (0x1 << 0)    // Transfer completed mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_CHHM                 (0x1 << 1)    // Channel halted mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_AHBERR               (0x1 << 2)    // AHB error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_STALL                (0x1 << 3)    // STALL response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_NAKM                 (0x1 << 4)    // NAK response received interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_ACKM                 (0x1 << 5)    // ACK response received/transmitted interrupt mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_NYET                 (0x1 << 6)    // Response received interrupt
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_TXERRM               (0x1 << 7)    // Transaction error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_BBERRM               (0x1 << 8)    // Babble error
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_FRMORM               (0x1 << 9)    // Frame overrun mask
#define  _OTG_HS_HOST_OTG_HS_HCINTMSK15_DTERRM               (0x1 << 10)    // Data toggle error mask
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ15_XFRSIZ                 (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ15_PKTCNT                 (0x3ff << 19)    // Packet count
#define  _OTG_HS_HOST_OTG_HS_HCTSIZ15_DPID                   (0x3 << 29)    // Data PID
#define  _OTG_HS_HOST_OTG_HS_HCDMA15_DMAADDR                 (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_DSPD                     (0x3 << 0)    // Device speed
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK                 (0x1 << 2)    // Nonzero-length status OUT handshake
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_DAD                      (0x7f << 4)    // Device address
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL                    (0x3 << 11)    // Periodic (micro)frame interval
#define  _OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL                (0x3 << 24)    // Periodic scheduling interval
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG                   (0x1 << 0)    // Remote wakeup signaling
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_SDIS                     (0x1 << 1)    // Soft disconnect
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS                   (0x1 << 2)    // Global IN NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS                   (0x1 << 3)    // Global OUT NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_TCTL                     (0x7 << 4)    // Test control
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK                   (0x1 << 7)    // Set global IN NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK                   (0x1 << 8)    // Clear global IN NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK                   (0x1 << 9)    // Set global OUT NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK                   (0x1 << 10)    // Clear global OUT NAK
#define  _OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE                 (0x1 << 11)    // Power-on programming done
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS                  (0x1 << 0)    // Suspend status
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD                  (0x3 << 1)    // Enumerated speed
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_EERR                     (0x1 << 3)    // Erratic error
#define  _OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF                    (0x3fff << 8)    // Frame number of the received SOF
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM                 (0x1 << 0)    // Transfer completed interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM                  (0x1 << 1)    // Endpoint disabled interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM                   (0x1 << 3)    // Timeout condition mask (nonisochronous endpoints)
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK             (0x1 << 4)    // IN token received when TxFIFO empty mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM               (0x1 << 5)    // IN token received with EP mismatch mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM               (0x1 << 6)    // IN endpoint NAK effective mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM                (0x1 << 8)    // FIFO underrun mask
#define  _OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM                   (0x1 << 9)    // BNA interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM                 (0x1 << 0)    // Transfer completed interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM                  (0x1 << 1)    // Endpoint disabled interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM                 (0x1 << 3)    // SETUP phase done mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM                (0x1 << 4)    // OUT token received when endpoint disabled mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP               (0x1 << 6)    // Back-to-back SETUP packets received mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM                  (0x1 << 8)    // OUT packet error mask
#define  _OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM                  (0x1 << 9)    // BNA interrupt mask
#define  _OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT                  (0xffff << 0)    // IN endpoint interrupt bits
#define  _OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT                  (0xffff << 16)    // OUT endpoint interrupt bits
#define  _OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM                 (0xffff << 0)    // IN EP interrupt mask bits
#define  _OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM                 (0xffff << 16)    // OUT EP interrupt mask bits
#define  _OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT               (0xffff << 0)    // Device VBUS discharge time
#define  _OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP             (0xfff << 0)    // Device VBUS pulsing time
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN           (0x1 << 0)    // Nonisochronous IN endpoints threshold enable
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN              (0x1 << 1)    // ISO IN endpoint threshold enable
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN              (0x1ff << 2)    // Transmit threshold length
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN               (0x1 << 16)    // Receive threshold enable
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN              (0x1ff << 17)    // Receive threshold length
#define  _OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN                 (0x1 << 27)    // Arbiter parking enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM          (0xffff << 0)    // IN EP Tx FIFO empty interrupt mask bits
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT              (0x1 << 1)    // IN endpoint 1interrupt bit
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT              (0x1 << 17)    // OUT endpoint 1 interrupt bit
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM          (0x1 << 1)    // IN Endpoint 1 interrupt mask bit
#define  _OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM          (0x1 << 17)    // OUT Endpoint 1 interrupt mask bit
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID           (0x1 << 16)    // Even/odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM               (0xf << 22)    // TxFIFO number
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC                  (0x1 << 3)    // Timeout condition
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE               (0x1 << 4)    // IN token received when TxFIFO is empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE               (0x1 << 6)    // IN endpoint NAK effective
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE                 (0x1 << 7)    // Transmit FIFO empty
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN           (0x1 << 8)    // Transmit Fifo Underrun
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA                  (0x1 << 9)    // Buffer not available interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS            (0x1 << 11)    // Packet dropped status
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR                 (0x1 << 12)    // Babble error interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK                  (0x1 << 13)    // NAK interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ              (0x7f << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT              (0x3 << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR              (0xffffffff << 0)    // DMA address
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ                (0x3 << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC                 (0x1 << 0)    // Transfer completed interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD               (0x1 << 1)    // Endpoint disabled interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP                 (0x1 << 3)    // SETUP phase done
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS              (0x1 << 4)    // OUT token received when endpoint disabled
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP              (0x1 << 6)    // Back-to-back SETUP packets received
#define  _OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET                 (0x1 << 14)    // NYET interrupt
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ              (0x7f << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT              (0x1 << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT             (0x3 << 29)    // SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS6_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_MCNT                (0x3 << 29)    // Multi count
#define  _OTG_HS_DEVICE_OTG_HS_DTXFSTS7_INEPTFSAV            (0xffff << 0)    // IN endpoint TxFIFO space avail
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_MPSIZ                (0x7ff << 0)    // Maximum packet size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_USBAEP               (0x1 << 15)    // USB active endpoint
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EONUM_DPID           (0x1 << 16)    // Even odd frame/Endpoint data PID
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_NAKSTS               (0x1 << 17)    // NAK status
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPTYP                (0x3 << 18)    // Endpoint type
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNPM                 (0x1 << 20)    // Snoop mode
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_Stall                (0x1 << 21)    // STALL handshake
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_CNAK                 (0x1 << 26)    // Clear NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNAK                 (0x1 << 27)    // Set NAK
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SD0PID_SEVNFRM       (0x1 << 28)    // Set DATA0 PID/Set even frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SODDFRM              (0x1 << 29)    // Set odd frame
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPDIS                (0x1 << 30)    // Endpoint disable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPENA                (0x1 << 31)    // Endpoint enable
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_XFRSIZ              (0x7ffff << 0)    // Transfer size
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_PKTCNT              (0x3ff << 19)    // Packet count
#define  _OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_RXDPID_STUPCNT      (0x3 << 29)    // Received data PID/SETUP packet count
#define  _OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK                 (0x1 << 0)    // Stop PHY clock
#define  _OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK                (0x1 << 1)    // Gate HCLK
#define  _OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP                 (0x1 << 4)    // PHY suspended
　
　drivers/inc/stm32f767xx_ADC.h
#define Get_ADC1_SR(FLAG)                    (*(uint32_t*)0x40012000 |= FLAG)
#define Get_ADC1_CR1(FLAG)                   (*(uint32_t*)0x40012004 |= FLAG)
#define Get_ADC1_CR2(FLAG)                   (*(uint32_t*)0x40012008 |= FLAG)
#define Get_ADC1_SMPR1(FLAG)                 (*(uint32_t*)0x4001200c |= FLAG)
#define Get_ADC1_SMPR2(FLAG)                 (*(uint32_t*)0x40012010 |= FLAG)
#define Get_ADC1_JOFR1(FLAG)                 (*(uint32_t*)0x40012014 |= FLAG)
#define Get_ADC1_JOFR2(FLAG)                 (*(uint32_t*)0x40012018 |= FLAG)
#define Get_ADC1_JOFR3(FLAG)                 (*(uint32_t*)0x4001201c |= FLAG)
#define Get_ADC1_JOFR4(FLAG)                 (*(uint32_t*)0x40012020 |= FLAG)
#define Get_ADC1_HTR(FLAG)                   (*(uint32_t*)0x40012024 |= FLAG)
#define Get_ADC1_LTR(FLAG)                   (*(uint32_t*)0x40012028 |= FLAG)
#define Get_ADC1_SQR1(FLAG)                  (*(uint32_t*)0x4001202c |= FLAG)
#define Get_ADC1_SQR2(FLAG)                  (*(uint32_t*)0x40012030 |= FLAG)
#define Get_ADC1_SQR3(FLAG)                  (*(uint32_t*)0x40012034 |= FLAG)
#define Get_ADC1_JSQR(FLAG)                  (*(uint32_t*)0x40012038 |= FLAG)
#define Get_ADC1_JDR1(FLAG)                  (*(uint32_t*)0x4001203c |= FLAG)
#define Get_ADC1_JDR2(FLAG)                  (*(uint32_t*)0x40012040 |= FLAG)
#define Get_ADC1_JDR3(FLAG)                  (*(uint32_t*)0x40012044 |= FLAG)
#define Get_ADC1_JDR4(FLAG)                  (*(uint32_t*)0x40012048 |= FLAG)
#define Get_ADC1_DR(FLAG)                    (*(uint32_t*)0x4001204c |= FLAG)
#define Get_ADC2_SR(FLAG)                    (*(uint32_t*)0x40012100 |= FLAG)
#define Get_ADC2_CR1(FLAG)                   (*(uint32_t*)0x40012104 |= FLAG)
#define Get_ADC2_CR2(FLAG)                   (*(uint32_t*)0x40012108 |= FLAG)
#define Get_ADC2_SMPR1(FLAG)                 (*(uint32_t*)0x4001210c |= FLAG)
#define Get_ADC2_SMPR2(FLAG)                 (*(uint32_t*)0x40012110 |= FLAG)
#define Get_ADC2_JOFR1(FLAG)                 (*(uint32_t*)0x40012114 |= FLAG)
#define Get_ADC2_JOFR2(FLAG)                 (*(uint32_t*)0x40012118 |= FLAG)
#define Get_ADC2_JOFR3(FLAG)                 (*(uint32_t*)0x4001211c |= FLAG)
#define Get_ADC2_JOFR4(FLAG)                 (*(uint32_t*)0x40012120 |= FLAG)
#define Get_ADC2_HTR(FLAG)                   (*(uint32_t*)0x40012124 |= FLAG)
#define Get_ADC2_LTR(FLAG)                   (*(uint32_t*)0x40012128 |= FLAG)
#define Get_ADC2_SQR1(FLAG)                  (*(uint32_t*)0x4001212c |= FLAG)
#define Get_ADC2_SQR2(FLAG)                  (*(uint32_t*)0x40012130 |= FLAG)
#define Get_ADC2_SQR3(FLAG)                  (*(uint32_t*)0x40012134 |= FLAG)
#define Get_ADC2_JSQR(FLAG)                  (*(uint32_t*)0x40012138 |= FLAG)
#define Get_ADC2_JDR1(FLAG)                  (*(uint32_t*)0x4001213c |= FLAG)
#define Get_ADC2_JDR2(FLAG)                  (*(uint32_t*)0x40012140 |= FLAG)
#define Get_ADC2_JDR3(FLAG)                  (*(uint32_t*)0x40012144 |= FLAG)
#define Get_ADC2_JDR4(FLAG)                  (*(uint32_t*)0x40012148 |= FLAG)
#define Get_ADC2_DR(FLAG)                    (*(uint32_t*)0x4001214c |= FLAG)
#define Get_ADC3_SR(FLAG)                    (*(uint32_t*)0x40012200 |= FLAG)
#define Get_ADC3_CR1(FLAG)                   (*(uint32_t*)0x40012204 |= FLAG)
#define Get_ADC3_CR2(FLAG)                   (*(uint32_t*)0x40012208 |= FLAG)
#define Get_ADC3_SMPR1(FLAG)                 (*(uint32_t*)0x4001220c |= FLAG)
#define Get_ADC3_SMPR2(FLAG)                 (*(uint32_t*)0x40012210 |= FLAG)
#define Get_ADC3_JOFR1(FLAG)                 (*(uint32_t*)0x40012214 |= FLAG)
#define Get_ADC3_JOFR2(FLAG)                 (*(uint32_t*)0x40012218 |= FLAG)
#define Get_ADC3_JOFR3(FLAG)                 (*(uint32_t*)0x4001221c |= FLAG)
#define Get_ADC3_JOFR4(FLAG)                 (*(uint32_t*)0x40012220 |= FLAG)
#define Get_ADC3_HTR(FLAG)                   (*(uint32_t*)0x40012224 |= FLAG)
#define Get_ADC3_LTR(FLAG)                   (*(uint32_t*)0x40012228 |= FLAG)
#define Get_ADC3_SQR1(FLAG)                  (*(uint32_t*)0x4001222c |= FLAG)
#define Get_ADC3_SQR2(FLAG)                  (*(uint32_t*)0x40012230 |= FLAG)
#define Get_ADC3_SQR3(FLAG)                  (*(uint32_t*)0x40012234 |= FLAG)
#define Get_ADC3_JSQR(FLAG)                  (*(uint32_t*)0x40012238 |= FLAG)
#define Get_ADC3_JDR1(FLAG)                  (*(uint32_t*)0x4001223c |= FLAG)
#define Get_ADC3_JDR2(FLAG)                  (*(uint32_t*)0x40012240 |= FLAG)
#define Get_ADC3_JDR3(FLAG)                  (*(uint32_t*)0x40012244 |= FLAG)
#define Get_ADC3_JDR4(FLAG)                  (*(uint32_t*)0x40012248 |= FLAG)
#define Get_ADC3_DR(FLAG)                    (*(uint32_t*)0x4001224c |= FLAG)
#define Set_ADC1_SR(FLAG)                    (*(uint32_t*)0x40012000 &= FLAG)
#define Clr_ADC1_SR(FLAG)                    (*(uint32_t*)0x40012000 |= ~FLAG)
#define Set_ADC1_CR1(FLAG)                   (*(uint32_t*)0x40012004 &= FLAG)
#define Clr_ADC1_CR1(FLAG)                   (*(uint32_t*)0x40012004 |= ~FLAG)
#define Set_ADC1_CR2(FLAG)                   (*(uint32_t*)0x40012008 &= FLAG)
#define Clr_ADC1_CR2(FLAG)                   (*(uint32_t*)0x40012008 |= ~FLAG)
#define Set_ADC1_SMPR1(FLAG)                 (*(uint32_t*)0x4001200c &= FLAG)
#define Clr_ADC1_SMPR1(FLAG)                 (*(uint32_t*)0x4001200c |= ~FLAG)
#define Set_ADC1_SMPR2(FLAG)                 (*(uint32_t*)0x40012010 &= FLAG)
#define Clr_ADC1_SMPR2(FLAG)                 (*(uint32_t*)0x40012010 |= ~FLAG)
#define Set_ADC1_JOFR1(FLAG)                 (*(uint32_t*)0x40012014 &= FLAG)
#define Clr_ADC1_JOFR1(FLAG)                 (*(uint32_t*)0x40012014 |= ~FLAG)
#define Set_ADC1_JOFR2(FLAG)                 (*(uint32_t*)0x40012018 &= FLAG)
#define Clr_ADC1_JOFR2(FLAG)                 (*(uint32_t*)0x40012018 |= ~FLAG)
#define Set_ADC1_JOFR3(FLAG)                 (*(uint32_t*)0x4001201c &= FLAG)
#define Clr_ADC1_JOFR3(FLAG)                 (*(uint32_t*)0x4001201c |= ~FLAG)
#define Set_ADC1_JOFR4(FLAG)                 (*(uint32_t*)0x40012020 &= FLAG)
#define Clr_ADC1_JOFR4(FLAG)                 (*(uint32_t*)0x40012020 |= ~FLAG)
#define Set_ADC1_HTR(FLAG)                   (*(uint32_t*)0x40012024 &= FLAG)
#define Clr_ADC1_HTR(FLAG)                   (*(uint32_t*)0x40012024 |= ~FLAG)
#define Set_ADC1_LTR(FLAG)                   (*(uint32_t*)0x40012028 &= FLAG)
#define Clr_ADC1_LTR(FLAG)                   (*(uint32_t*)0x40012028 |= ~FLAG)
#define Set_ADC1_SQR1(FLAG)                  (*(uint32_t*)0x4001202c &= FLAG)
#define Clr_ADC1_SQR1(FLAG)                  (*(uint32_t*)0x4001202c |= ~FLAG)
#define Set_ADC1_SQR2(FLAG)                  (*(uint32_t*)0x40012030 &= FLAG)
#define Clr_ADC1_SQR2(FLAG)                  (*(uint32_t*)0x40012030 |= ~FLAG)
#define Set_ADC1_SQR3(FLAG)                  (*(uint32_t*)0x40012034 &= FLAG)
#define Clr_ADC1_SQR3(FLAG)                  (*(uint32_t*)0x40012034 |= ~FLAG)
#define Set_ADC1_JSQR(FLAG)                  (*(uint32_t*)0x40012038 &= FLAG)
#define Clr_ADC1_JSQR(FLAG)                  (*(uint32_t*)0x40012038 |= ~FLAG)
#define Set_ADC1_JDR1(FLAG)                  (*(uint32_t*)0x4001203c &= FLAG)
#define Clr_ADC1_JDR1(FLAG)                  (*(uint32_t*)0x4001203c |= ~FLAG)
#define Set_ADC1_JDR2(FLAG)                  (*(uint32_t*)0x40012040 &= FLAG)
#define Clr_ADC1_JDR2(FLAG)                  (*(uint32_t*)0x40012040 |= ~FLAG)
#define Set_ADC1_JDR3(FLAG)                  (*(uint32_t*)0x40012044 &= FLAG)
#define Clr_ADC1_JDR3(FLAG)                  (*(uint32_t*)0x40012044 |= ~FLAG)
#define Set_ADC1_JDR4(FLAG)                  (*(uint32_t*)0x40012048 &= FLAG)
#define Clr_ADC1_JDR4(FLAG)                  (*(uint32_t*)0x40012048 |= ~FLAG)
#define Set_ADC1_DR(FLAG)                    (*(uint32_t*)0x4001204c &= FLAG)
#define Clr_ADC1_DR(FLAG)                    (*(uint32_t*)0x4001204c |= ~FLAG)
#define Set_ADC2_SR(FLAG)                    (*(uint32_t*)0x40012100 &= FLAG)
#define Clr_ADC2_SR(FLAG)                    (*(uint32_t*)0x40012100 |= ~FLAG)
#define Set_ADC2_CR1(FLAG)                   (*(uint32_t*)0x40012104 &= FLAG)
#define Clr_ADC2_CR1(FLAG)                   (*(uint32_t*)0x40012104 |= ~FLAG)
#define Set_ADC2_CR2(FLAG)                   (*(uint32_t*)0x40012108 &= FLAG)
#define Clr_ADC2_CR2(FLAG)                   (*(uint32_t*)0x40012108 |= ~FLAG)
#define Set_ADC2_SMPR1(FLAG)                 (*(uint32_t*)0x4001210c &= FLAG)
#define Clr_ADC2_SMPR1(FLAG)                 (*(uint32_t*)0x4001210c |= ~FLAG)
#define Set_ADC2_SMPR2(FLAG)                 (*(uint32_t*)0x40012110 &= FLAG)
#define Clr_ADC2_SMPR2(FLAG)                 (*(uint32_t*)0x40012110 |= ~FLAG)
#define Set_ADC2_JOFR1(FLAG)                 (*(uint32_t*)0x40012114 &= FLAG)
#define Clr_ADC2_JOFR1(FLAG)                 (*(uint32_t*)0x40012114 |= ~FLAG)
#define Set_ADC2_JOFR2(FLAG)                 (*(uint32_t*)0x40012118 &= FLAG)
#define Clr_ADC2_JOFR2(FLAG)                 (*(uint32_t*)0x40012118 |= ~FLAG)
#define Set_ADC2_JOFR3(FLAG)                 (*(uint32_t*)0x4001211c &= FLAG)
#define Clr_ADC2_JOFR3(FLAG)                 (*(uint32_t*)0x4001211c |= ~FLAG)
#define Set_ADC2_JOFR4(FLAG)                 (*(uint32_t*)0x40012120 &= FLAG)
#define Clr_ADC2_JOFR4(FLAG)                 (*(uint32_t*)0x40012120 |= ~FLAG)
#define Set_ADC2_HTR(FLAG)                   (*(uint32_t*)0x40012124 &= FLAG)
#define Clr_ADC2_HTR(FLAG)                   (*(uint32_t*)0x40012124 |= ~FLAG)
#define Set_ADC2_LTR(FLAG)                   (*(uint32_t*)0x40012128 &= FLAG)
#define Clr_ADC2_LTR(FLAG)                   (*(uint32_t*)0x40012128 |= ~FLAG)
#define Set_ADC2_SQR1(FLAG)                  (*(uint32_t*)0x4001212c &= FLAG)
#define Clr_ADC2_SQR1(FLAG)                  (*(uint32_t*)0x4001212c |= ~FLAG)
#define Set_ADC2_SQR2(FLAG)                  (*(uint32_t*)0x40012130 &= FLAG)
#define Clr_ADC2_SQR2(FLAG)                  (*(uint32_t*)0x40012130 |= ~FLAG)
#define Set_ADC2_SQR3(FLAG)                  (*(uint32_t*)0x40012134 &= FLAG)
#define Clr_ADC2_SQR3(FLAG)                  (*(uint32_t*)0x40012134 |= ~FLAG)
#define Set_ADC2_JSQR(FLAG)                  (*(uint32_t*)0x40012138 &= FLAG)
#define Clr_ADC2_JSQR(FLAG)                  (*(uint32_t*)0x40012138 |= ~FLAG)
#define Set_ADC2_JDR1(FLAG)                  (*(uint32_t*)0x4001213c &= FLAG)
#define Clr_ADC2_JDR1(FLAG)                  (*(uint32_t*)0x4001213c |= ~FLAG)
#define Set_ADC2_JDR2(FLAG)                  (*(uint32_t*)0x40012140 &= FLAG)
#define Clr_ADC2_JDR2(FLAG)                  (*(uint32_t*)0x40012140 |= ~FLAG)
#define Set_ADC2_JDR3(FLAG)                  (*(uint32_t*)0x40012144 &= FLAG)
#define Clr_ADC2_JDR3(FLAG)                  (*(uint32_t*)0x40012144 |= ~FLAG)
#define Set_ADC2_JDR4(FLAG)                  (*(uint32_t*)0x40012148 &= FLAG)
#define Clr_ADC2_JDR4(FLAG)                  (*(uint32_t*)0x40012148 |= ~FLAG)
#define Set_ADC2_DR(FLAG)                    (*(uint32_t*)0x4001214c &= FLAG)
#define Clr_ADC2_DR(FLAG)                    (*(uint32_t*)0x4001214c |= ~FLAG)
#define Set_ADC3_SR(FLAG)                    (*(uint32_t*)0x40012200 &= FLAG)
#define Clr_ADC3_SR(FLAG)                    (*(uint32_t*)0x40012200 |= ~FLAG)
#define Set_ADC3_CR1(FLAG)                   (*(uint32_t*)0x40012204 &= FLAG)
#define Clr_ADC3_CR1(FLAG)                   (*(uint32_t*)0x40012204 |= ~FLAG)
#define Set_ADC3_CR2(FLAG)                   (*(uint32_t*)0x40012208 &= FLAG)
#define Clr_ADC3_CR2(FLAG)                   (*(uint32_t*)0x40012208 |= ~FLAG)
#define Set_ADC3_SMPR1(FLAG)                 (*(uint32_t*)0x4001220c &= FLAG)
#define Clr_ADC3_SMPR1(FLAG)                 (*(uint32_t*)0x4001220c |= ~FLAG)
#define Set_ADC3_SMPR2(FLAG)                 (*(uint32_t*)0x40012210 &= FLAG)
#define Clr_ADC3_SMPR2(FLAG)                 (*(uint32_t*)0x40012210 |= ~FLAG)
#define Set_ADC3_JOFR1(FLAG)                 (*(uint32_t*)0x40012214 &= FLAG)
#define Clr_ADC3_JOFR1(FLAG)                 (*(uint32_t*)0x40012214 |= ~FLAG)
#define Set_ADC3_JOFR2(FLAG)                 (*(uint32_t*)0x40012218 &= FLAG)
#define Clr_ADC3_JOFR2(FLAG)                 (*(uint32_t*)0x40012218 |= ~FLAG)
#define Set_ADC3_JOFR3(FLAG)                 (*(uint32_t*)0x4001221c &= FLAG)
#define Clr_ADC3_JOFR3(FLAG)                 (*(uint32_t*)0x4001221c |= ~FLAG)
#define Set_ADC3_JOFR4(FLAG)                 (*(uint32_t*)0x40012220 &= FLAG)
#define Clr_ADC3_JOFR4(FLAG)                 (*(uint32_t*)0x40012220 |= ~FLAG)
#define Set_ADC3_HTR(FLAG)                   (*(uint32_t*)0x40012224 &= FLAG)
#define Clr_ADC3_HTR(FLAG)                   (*(uint32_t*)0x40012224 |= ~FLAG)
#define Set_ADC3_LTR(FLAG)                   (*(uint32_t*)0x40012228 &= FLAG)
#define Clr_ADC3_LTR(FLAG)                   (*(uint32_t*)0x40012228 |= ~FLAG)
#define Set_ADC3_SQR1(FLAG)                  (*(uint32_t*)0x4001222c &= FLAG)
#define Clr_ADC3_SQR1(FLAG)                  (*(uint32_t*)0x4001222c |= ~FLAG)
#define Set_ADC3_SQR2(FLAG)                  (*(uint32_t*)0x40012230 &= FLAG)
#define Clr_ADC3_SQR2(FLAG)                  (*(uint32_t*)0x40012230 |= ~FLAG)
#define Set_ADC3_SQR3(FLAG)                  (*(uint32_t*)0x40012234 &= FLAG)
#define Clr_ADC3_SQR3(FLAG)                  (*(uint32_t*)0x40012234 |= ~FLAG)
#define Set_ADC3_JSQR(FLAG)                  (*(uint32_t*)0x40012238 &= FLAG)
#define Clr_ADC3_JSQR(FLAG)                  (*(uint32_t*)0x40012238 |= ~FLAG)
#define Set_ADC3_JDR1(FLAG)                  (*(uint32_t*)0x4001223c &= FLAG)
#define Clr_ADC3_JDR1(FLAG)                  (*(uint32_t*)0x4001223c |= ~FLAG)
#define Set_ADC3_JDR2(FLAG)                  (*(uint32_t*)0x40012240 &= FLAG)
#define Clr_ADC3_JDR2(FLAG)                  (*(uint32_t*)0x40012240 |= ~FLAG)
#define Set_ADC3_JDR3(FLAG)                  (*(uint32_t*)0x40012244 &= FLAG)
#define Clr_ADC3_JDR3(FLAG)                  (*(uint32_t*)0x40012244 |= ~FLAG)
#define Set_ADC3_JDR4(FLAG)                  (*(uint32_t*)0x40012248 &= FLAG)
#define Clr_ADC3_JDR4(FLAG)                  (*(uint32_t*)0x40012248 |= ~FLAG)
#define Set_ADC3_DR(FLAG)                    (*(uint32_t*)0x4001224c &= FLAG)
#define Clr_ADC3_DR(FLAG)                    (*(uint32_t*)0x4001224c |= ~FLAG)
#define  _ADC1_SR_OVR                                        (0x1 << 5)    // Overrun
#define  _ADC1_SR_STRT                                       (0x1 << 4)    // Regular channel start flag
#define  _ADC1_SR_JSTRT                                      (0x1 << 3)    // Injected channel start flag
#define  _ADC1_SR_JEOC                                       (0x1 << 2)    // Injected channel end of conversion
#define  _ADC1_SR_EOC                                        (0x1 << 1)    // Regular channel end of conversion
#define  _ADC1_SR_AWD                                        (0x1 << 0)    // Analog watchdog flag
#define  _ADC1_CR1_OVRIE                                     (0x1 << 26)    // Overrun interrupt enable
#define  _ADC1_CR1_RES                                       (0x3 << 24)    // Resolution
#define  _ADC1_CR1_AWDEN                                     (0x1 << 23)    // Analog watchdog enable on regular channels
#define  _ADC1_CR1_JAWDEN                                    (0x1 << 22)    // Analog watchdog enable on injected channels
#define  _ADC1_CR1_DISCNUM                                   (0x7 << 13)    // Discontinuous mode channel count
#define  _ADC1_CR1_JDISCEN                                   (0x1 << 12)    // Discontinuous mode on injected channels
#define  _ADC1_CR1_DISCEN                                    (0x1 << 11)    // Discontinuous mode on regular channels
#define  _ADC1_CR1_JAUTO                                     (0x1 << 10)    // Automatic injected group conversion
#define  _ADC1_CR1_AWDSGL                                    (0x1 << 9)    // Enable the watchdog on a single channel in scan mode
#define  _ADC1_CR1_SCAN                                      (0x1 << 8)    // Scan mode
#define  _ADC1_CR1_JEOCIE                                    (0x1 << 7)    // Interrupt enable for injected channels
#define  _ADC1_CR1_AWDIE                                     (0x1 << 6)    // Analog watchdog interrupt enable
#define  _ADC1_CR1_EOCIE                                     (0x1 << 5)    // Interrupt enable for EOC
#define  _ADC1_CR1_AWDCH                                     (0x1f << 0)    // Analog watchdog channel select bits
#define  _ADC1_CR2_SWSTART                                   (0x1 << 30)    // Start conversion of regular channels
#define  _ADC1_CR2_EXTEN                                     (0x3 << 28)    // External trigger enable for regular channels
#define  _ADC1_CR2_EXTSEL                                    (0xf << 24)    // External event select for regular group
#define  _ADC1_CR2_JSWSTART                                  (0x1 << 22)    // Start conversion of injected channels
#define  _ADC1_CR2_JEXTEN                                    (0x3 << 20)    // External trigger enable for injected channels
#define  _ADC1_CR2_JEXTSEL                                   (0xf << 16)    // External event select for injected group
#define  _ADC1_CR2_ALIGN                                     (0x1 << 11)    // Data alignment
#define  _ADC1_CR2_EOCS                                      (0x1 << 10)    // End of conversion selection
#define  _ADC1_CR2_DDS                                       (0x1 << 9)    // DMA disable selection (for single ADC mode)
#define  _ADC1_CR2_DMA                                       (0x1 << 8)    // Direct memory access mode (for single ADC mode)
#define  _ADC1_CR2_CONT                                      (0x1 << 1)    // Continuous conversion
#define  _ADC1_CR2_ADON                                      (0x1 << 0)    // A/D Converter ON / OFF
#define  _ADC1_SMPR1_SMPx_x                                  (0xffffffff << 0)    // Sample time bits
#define  _ADC1_SMPR2_SMPx_x                                  (0xffffffff << 0)    // Sample time bits
#define  _ADC1_JOFR1_JOFFSET1                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC1_JOFR2_JOFFSET2                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC1_JOFR3_JOFFSET3                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC1_JOFR4_JOFFSET4                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC1_HTR_HT                                        (0xfff << 0)    // Analog watchdog higher threshold
#define  _ADC1_LTR_LT                                        (0xfff << 0)    // Analog watchdog lower threshold
#define  _ADC1_SQR1_L                                        (0xf << 20)    // Regular channel sequence length
#define  _ADC1_SQR1_SQ16                                     (0x1f << 15)    // 16th conversion in regular sequence
#define  _ADC1_SQR1_SQ15                                     (0x1f << 10)    // 15th conversion in regular sequence
#define  _ADC1_SQR1_SQ14                                     (0x1f << 5)    // 14th conversion in regular sequence
#define  _ADC1_SQR1_SQ13                                     (0x1f << 0)    // 13th conversion in regular sequence
#define  _ADC1_SQR2_SQ12                                     (0x1f << 25)    // 12th conversion in regular sequence
#define  _ADC1_SQR2_SQ11                                     (0x1f << 20)    // 11th conversion in regular sequence
#define  _ADC1_SQR2_SQ10                                     (0x1f << 15)    // 10th conversion in regular sequence
#define  _ADC1_SQR2_SQ9                                      (0x1f << 10)    // 9th conversion in regular sequence
#define  _ADC1_SQR2_SQ8                                      (0x1f << 5)    // 8th conversion in regular sequence
#define  _ADC1_SQR2_SQ7                                      (0x1f << 0)    // 7th conversion in regular sequence
#define  _ADC1_SQR3_SQ6                                      (0x1f << 25)    // 6th conversion in regular sequence
#define  _ADC1_SQR3_SQ5                                      (0x1f << 20)    // 5th conversion in regular sequence
#define  _ADC1_SQR3_SQ4                                      (0x1f << 15)    // 4th conversion in regular sequence
#define  _ADC1_SQR3_SQ3                                      (0x1f << 10)    // 3rd conversion in regular sequence
#define  _ADC1_SQR3_SQ2                                      (0x1f << 5)    // 2nd conversion in regular sequence
#define  _ADC1_SQR3_SQ1                                      (0x1f << 0)    // 1st conversion in regular sequence
#define  _ADC1_JSQR_JL                                       (0x3 << 20)    // Injected sequence length
#define  _ADC1_JSQR_JSQ4                                     (0x1f << 15)    // 4th conversion in injected sequence
#define  _ADC1_JSQR_JSQ3                                     (0x1f << 10)    // 3rd conversion in injected sequence
#define  _ADC1_JSQR_JSQ2                                     (0x1f << 5)    // 2nd conversion in injected sequence
#define  _ADC1_JSQR_JSQ1                                     (0x1f << 0)    // 1st conversion in injected sequence
#define  _ADC1_JDR1_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC1_JDR2_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC1_JDR3_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC1_JDR4_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC1_DR_DATA                                       (0xffff << 0)    // Regular data
#define  _ADC2_SR_OVR                                        (0x1 << 5)    // Overrun
#define  _ADC2_SR_STRT                                       (0x1 << 4)    // Regular channel start flag
#define  _ADC2_SR_JSTRT                                      (0x1 << 3)    // Injected channel start flag
#define  _ADC2_SR_JEOC                                       (0x1 << 2)    // Injected channel end of conversion
#define  _ADC2_SR_EOC                                        (0x1 << 1)    // Regular channel end of conversion
#define  _ADC2_SR_AWD                                        (0x1 << 0)    // Analog watchdog flag
#define  _ADC2_CR1_OVRIE                                     (0x1 << 26)    // Overrun interrupt enable
#define  _ADC2_CR1_RES                                       (0x3 << 24)    // Resolution
#define  _ADC2_CR1_AWDEN                                     (0x1 << 23)    // Analog watchdog enable on regular channels
#define  _ADC2_CR1_JAWDEN                                    (0x1 << 22)    // Analog watchdog enable on injected channels
#define  _ADC2_CR1_DISCNUM                                   (0x7 << 13)    // Discontinuous mode channel count
#define  _ADC2_CR1_JDISCEN                                   (0x1 << 12)    // Discontinuous mode on injected channels
#define  _ADC2_CR1_DISCEN                                    (0x1 << 11)    // Discontinuous mode on regular channels
#define  _ADC2_CR1_JAUTO                                     (0x1 << 10)    // Automatic injected group conversion
#define  _ADC2_CR1_AWDSGL                                    (0x1 << 9)    // Enable the watchdog on a single channel in scan mode
#define  _ADC2_CR1_SCAN                                      (0x1 << 8)    // Scan mode
#define  _ADC2_CR1_JEOCIE                                    (0x1 << 7)    // Interrupt enable for injected channels
#define  _ADC2_CR1_AWDIE                                     (0x1 << 6)    // Analog watchdog interrupt enable
#define  _ADC2_CR1_EOCIE                                     (0x1 << 5)    // Interrupt enable for EOC
#define  _ADC2_CR1_AWDCH                                     (0x1f << 0)    // Analog watchdog channel select bits
#define  _ADC2_CR2_SWSTART                                   (0x1 << 30)    // Start conversion of regular channels
#define  _ADC2_CR2_EXTEN                                     (0x3 << 28)    // External trigger enable for regular channels
#define  _ADC2_CR2_EXTSEL                                    (0xf << 24)    // External event select for regular group
#define  _ADC2_CR2_JSWSTART                                  (0x1 << 22)    // Start conversion of injected channels
#define  _ADC2_CR2_JEXTEN                                    (0x3 << 20)    // External trigger enable for injected channels
#define  _ADC2_CR2_JEXTSEL                                   (0xf << 16)    // External event select for injected group
#define  _ADC2_CR2_ALIGN                                     (0x1 << 11)    // Data alignment
#define  _ADC2_CR2_EOCS                                      (0x1 << 10)    // End of conversion selection
#define  _ADC2_CR2_DDS                                       (0x1 << 9)    // DMA disable selection (for single ADC mode)
#define  _ADC2_CR2_DMA                                       (0x1 << 8)    // Direct memory access mode (for single ADC mode)
#define  _ADC2_CR2_CONT                                      (0x1 << 1)    // Continuous conversion
#define  _ADC2_CR2_ADON                                      (0x1 << 0)    // A/D Converter ON / OFF
#define  _ADC2_SMPR1_SMPx_x                                  (0xffffffff << 0)    // Sample time bits
#define  _ADC2_SMPR2_SMPx_x                                  (0xffffffff << 0)    // Sample time bits
#define  _ADC2_JOFR1_JOFFSET1                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC2_JOFR2_JOFFSET2                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC2_JOFR3_JOFFSET3                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC2_JOFR4_JOFFSET4                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC2_HTR_HT                                        (0xfff << 0)    // Analog watchdog higher threshold
#define  _ADC2_LTR_LT                                        (0xfff << 0)    // Analog watchdog lower threshold
#define  _ADC2_SQR1_L                                        (0xf << 20)    // Regular channel sequence length
#define  _ADC2_SQR1_SQ16                                     (0x1f << 15)    // 16th conversion in regular sequence
#define  _ADC2_SQR1_SQ15                                     (0x1f << 10)    // 15th conversion in regular sequence
#define  _ADC2_SQR1_SQ14                                     (0x1f << 5)    // 14th conversion in regular sequence
#define  _ADC2_SQR1_SQ13                                     (0x1f << 0)    // 13th conversion in regular sequence
#define  _ADC2_SQR2_SQ12                                     (0x1f << 25)    // 12th conversion in regular sequence
#define  _ADC2_SQR2_SQ11                                     (0x1f << 20)    // 11th conversion in regular sequence
#define  _ADC2_SQR2_SQ10                                     (0x1f << 15)    // 10th conversion in regular sequence
#define  _ADC2_SQR2_SQ9                                      (0x1f << 10)    // 9th conversion in regular sequence
#define  _ADC2_SQR2_SQ8                                      (0x1f << 5)    // 8th conversion in regular sequence
#define  _ADC2_SQR2_SQ7                                      (0x1f << 0)    // 7th conversion in regular sequence
#define  _ADC2_SQR3_SQ6                                      (0x1f << 25)    // 6th conversion in regular sequence
#define  _ADC2_SQR3_SQ5                                      (0x1f << 20)    // 5th conversion in regular sequence
#define  _ADC2_SQR3_SQ4                                      (0x1f << 15)    // 4th conversion in regular sequence
#define  _ADC2_SQR3_SQ3                                      (0x1f << 10)    // 3rd conversion in regular sequence
#define  _ADC2_SQR3_SQ2                                      (0x1f << 5)    // 2nd conversion in regular sequence
#define  _ADC2_SQR3_SQ1                                      (0x1f << 0)    // 1st conversion in regular sequence
#define  _ADC2_JSQR_JL                                       (0x3 << 20)    // Injected sequence length
#define  _ADC2_JSQR_JSQ4                                     (0x1f << 15)    // 4th conversion in injected sequence
#define  _ADC2_JSQR_JSQ3                                     (0x1f << 10)    // 3rd conversion in injected sequence
#define  _ADC2_JSQR_JSQ2                                     (0x1f << 5)    // 2nd conversion in injected sequence
#define  _ADC2_JSQR_JSQ1                                     (0x1f << 0)    // 1st conversion in injected sequence
#define  _ADC2_JDR1_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC2_JDR2_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC2_JDR3_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC2_JDR4_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC2_DR_DATA                                       (0xffff << 0)    // Regular data
#define  _ADC3_SR_OVR                                        (0x1 << 5)    // Overrun
#define  _ADC3_SR_STRT                                       (0x1 << 4)    // Regular channel start flag
#define  _ADC3_SR_JSTRT                                      (0x1 << 3)    // Injected channel start flag
#define  _ADC3_SR_JEOC                                       (0x1 << 2)    // Injected channel end of conversion
#define  _ADC3_SR_EOC                                        (0x1 << 1)    // Regular channel end of conversion
#define  _ADC3_SR_AWD                                        (0x1 << 0)    // Analog watchdog flag
#define  _ADC3_CR1_OVRIE                                     (0x1 << 26)    // Overrun interrupt enable
#define  _ADC3_CR1_RES                                       (0x3 << 24)    // Resolution
#define  _ADC3_CR1_AWDEN                                     (0x1 << 23)    // Analog watchdog enable on regular channels
#define  _ADC3_CR1_JAWDEN                                    (0x1 << 22)    // Analog watchdog enable on injected channels
#define  _ADC3_CR1_DISCNUM                                   (0x7 << 13)    // Discontinuous mode channel count
#define  _ADC3_CR1_JDISCEN                                   (0x1 << 12)    // Discontinuous mode on injected channels
#define  _ADC3_CR1_DISCEN                                    (0x1 << 11)    // Discontinuous mode on regular channels
#define  _ADC3_CR1_JAUTO                                     (0x1 << 10)    // Automatic injected group conversion
#define  _ADC3_CR1_AWDSGL                                    (0x1 << 9)    // Enable the watchdog on a single channel in scan mode
#define  _ADC3_CR1_SCAN                                      (0x1 << 8)    // Scan mode
#define  _ADC3_CR1_JEOCIE                                    (0x1 << 7)    // Interrupt enable for injected channels
#define  _ADC3_CR1_AWDIE                                     (0x1 << 6)    // Analog watchdog interrupt enable
#define  _ADC3_CR1_EOCIE                                     (0x1 << 5)    // Interrupt enable for EOC
#define  _ADC3_CR1_AWDCH                                     (0x1f << 0)    // Analog watchdog channel select bits
#define  _ADC3_CR2_SWSTART                                   (0x1 << 30)    // Start conversion of regular channels
#define  _ADC3_CR2_EXTEN                                     (0x3 << 28)    // External trigger enable for regular channels
#define  _ADC3_CR2_EXTSEL                                    (0xf << 24)    // External event select for regular group
#define  _ADC3_CR2_JSWSTART                                  (0x1 << 22)    // Start conversion of injected channels
#define  _ADC3_CR2_JEXTEN                                    (0x3 << 20)    // External trigger enable for injected channels
#define  _ADC3_CR2_JEXTSEL                                   (0xf << 16)    // External event select for injected group
#define  _ADC3_CR2_ALIGN                                     (0x1 << 11)    // Data alignment
#define  _ADC3_CR2_EOCS                                      (0x1 << 10)    // End of conversion selection
#define  _ADC3_CR2_DDS                                       (0x1 << 9)    // DMA disable selection (for single ADC mode)
#define  _ADC3_CR2_DMA                                       (0x1 << 8)    // Direct memory access mode (for single ADC mode)
#define  _ADC3_CR2_CONT                                      (0x1 << 1)    // Continuous conversion
#define  _ADC3_CR2_ADON                                      (0x1 << 0)    // A/D Converter ON / OFF
#define  _ADC3_SMPR1_SMPx_x                                  (0xffffffff << 0)    // Sample time bits
#define  _ADC3_SMPR2_SMPx_x                                  (0xffffffff << 0)    // Sample time bits
#define  _ADC3_JOFR1_JOFFSET1                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC3_JOFR2_JOFFSET2                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC3_JOFR3_JOFFSET3                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC3_JOFR4_JOFFSET4                                (0xfff << 0)    // Data offset for injected channel x
#define  _ADC3_HTR_HT                                        (0xfff << 0)    // Analog watchdog higher threshold
#define  _ADC3_LTR_LT                                        (0xfff << 0)    // Analog watchdog lower threshold
#define  _ADC3_SQR1_L                                        (0xf << 20)    // Regular channel sequence length
#define  _ADC3_SQR1_SQ16                                     (0x1f << 15)    // 16th conversion in regular sequence
#define  _ADC3_SQR1_SQ15                                     (0x1f << 10)    // 15th conversion in regular sequence
#define  _ADC3_SQR1_SQ14                                     (0x1f << 5)    // 14th conversion in regular sequence
#define  _ADC3_SQR1_SQ13                                     (0x1f << 0)    // 13th conversion in regular sequence
#define  _ADC3_SQR2_SQ12                                     (0x1f << 25)    // 12th conversion in regular sequence
#define  _ADC3_SQR2_SQ11                                     (0x1f << 20)    // 11th conversion in regular sequence
#define  _ADC3_SQR2_SQ10                                     (0x1f << 15)    // 10th conversion in regular sequence
#define  _ADC3_SQR2_SQ9                                      (0x1f << 10)    // 9th conversion in regular sequence
#define  _ADC3_SQR2_SQ8                                      (0x1f << 5)    // 8th conversion in regular sequence
#define  _ADC3_SQR2_SQ7                                      (0x1f << 0)    // 7th conversion in regular sequence
#define  _ADC3_SQR3_SQ6                                      (0x1f << 25)    // 6th conversion in regular sequence
#define  _ADC3_SQR3_SQ5                                      (0x1f << 20)    // 5th conversion in regular sequence
#define  _ADC3_SQR3_SQ4                                      (0x1f << 15)    // 4th conversion in regular sequence
#define  _ADC3_SQR3_SQ3                                      (0x1f << 10)    // 3rd conversion in regular sequence
#define  _ADC3_SQR3_SQ2                                      (0x1f << 5)    // 2nd conversion in regular sequence
#define  _ADC3_SQR3_SQ1                                      (0x1f << 0)    // 1st conversion in regular sequence
#define  _ADC3_JSQR_JL                                       (0x3 << 20)    // Injected sequence length
#define  _ADC3_JSQR_JSQ4                                     (0x1f << 15)    // 4th conversion in injected sequence
#define  _ADC3_JSQR_JSQ3                                     (0x1f << 10)    // 3rd conversion in injected sequence
#define  _ADC3_JSQR_JSQ2                                     (0x1f << 5)    // 2nd conversion in injected sequence
#define  _ADC3_JSQR_JSQ1                                     (0x1f << 0)    // 1st conversion in injected sequence
#define  _ADC3_JDR1_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC3_JDR2_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC3_JDR3_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC3_JDR4_JDATA                                    (0xffff << 0)    // Injected data
#define  _ADC3_DR_DATA                                       (0xffff << 0)    // Regular data
　
　drivers/inc/stm32f767xx_CRYP.h
#define Get_CRYP_CR(FLAG)                    (*(uint32_t*)0x50060000 |= FLAG)
#define Get_CRYP_SR(FLAG)                    (*(uint32_t*)0x50060004 |= FLAG)
#define Get_CRYP_DIN(FLAG)                   (*(uint32_t*)0x50060008 |= FLAG)
#define Get_CRYP_DOUT(FLAG)                  (*(uint32_t*)0x5006000c |= FLAG)
#define Get_CRYP_DMACR(FLAG)                 (*(uint32_t*)0x50060010 |= FLAG)
#define Get_CRYP_IMSCR(FLAG)                 (*(uint32_t*)0x50060014 |= FLAG)
#define Get_CRYP_RISR(FLAG)                  (*(uint32_t*)0x50060018 |= FLAG)
#define Get_CRYP_MISR(FLAG)                  (*(uint32_t*)0x5006001c |= FLAG)
#define Get_CRYP_K0LR(FLAG)                  (*(uint32_t*)0x50060020 |= FLAG)
#define Get_CRYP_K0RR(FLAG)                  (*(uint32_t*)0x50060024 |= FLAG)
#define Get_CRYP_K1LR(FLAG)                  (*(uint32_t*)0x50060028 |= FLAG)
#define Get_CRYP_K1RR(FLAG)                  (*(uint32_t*)0x5006002c |= FLAG)
#define Get_CRYP_K2LR(FLAG)                  (*(uint32_t*)0x50060030 |= FLAG)
#define Get_CRYP_K2RR(FLAG)                  (*(uint32_t*)0x50060034 |= FLAG)
#define Get_CRYP_K3LR(FLAG)                  (*(uint32_t*)0x50060038 |= FLAG)
#define Get_CRYP_K3RR(FLAG)                  (*(uint32_t*)0x5006003c |= FLAG)
#define Get_CRYP_IV0LR(FLAG)                 (*(uint32_t*)0x50060040 |= FLAG)
#define Get_CRYP_IV0RR(FLAG)                 (*(uint32_t*)0x50060044 |= FLAG)
#define Get_CRYP_IV1LR(FLAG)                 (*(uint32_t*)0x50060048 |= FLAG)
#define Get_CRYP_IV1RR(FLAG)                 (*(uint32_t*)0x5006004c |= FLAG)
#define Get_CRYP_CSGCMCCM0R(FLAG)            (*(uint32_t*)0x50060050 |= FLAG)
#define Get_CRYP_CSGCMCCM1R(FLAG)            (*(uint32_t*)0x50060054 |= FLAG)
#define Get_CRYP_CSGCMCCM2R(FLAG)            (*(uint32_t*)0x50060058 |= FLAG)
#define Get_CRYP_CSGCMCCM3R(FLAG)            (*(uint32_t*)0x5006005c |= FLAG)
#define Get_CRYP_CSGCMCCM4R(FLAG)            (*(uint32_t*)0x50060060 |= FLAG)
#define Get_CRYP_CSGCMCCM5R(FLAG)            (*(uint32_t*)0x50060064 |= FLAG)
#define Get_CRYP_CSGCMCCM6R(FLAG)            (*(uint32_t*)0x50060068 |= FLAG)
#define Get_CRYP_CSGCMCCM7R(FLAG)            (*(uint32_t*)0x5006006c |= FLAG)
#define Get_CRYP_CSGCM0R(FLAG)               (*(uint32_t*)0x50060070 |= FLAG)
#define Get_CRYP_CSGCM1R(FLAG)               (*(uint32_t*)0x50060074 |= FLAG)
#define Get_CRYP_CSGCM2R(FLAG)               (*(uint32_t*)0x50060078 |= FLAG)
#define Get_CRYP_CSGCM3R(FLAG)               (*(uint32_t*)0x5006007c |= FLAG)
#define Get_CRYP_CSGCM4R(FLAG)               (*(uint32_t*)0x50060080 |= FLAG)
#define Get_CRYP_CSGCM5R(FLAG)               (*(uint32_t*)0x50060084 |= FLAG)
#define Get_CRYP_CSGCM6R(FLAG)               (*(uint32_t*)0x50060088 |= FLAG)
#define Get_CRYP_CSGCM7R(FLAG)               (*(uint32_t*)0x5006008c |= FLAG)
#define Set_CRYP_CR(FLAG)                    (*(uint32_t*)0x50060000 &= FLAG)
#define Clr_CRYP_CR(FLAG)                    (*(uint32_t*)0x50060000 |= ~FLAG)
#define Set_CRYP_SR(FLAG)                    (*(uint32_t*)0x50060004 &= FLAG)
#define Clr_CRYP_SR(FLAG)                    (*(uint32_t*)0x50060004 |= ~FLAG)
#define Set_CRYP_DIN(FLAG)                   (*(uint32_t*)0x50060008 &= FLAG)
#define Clr_CRYP_DIN(FLAG)                   (*(uint32_t*)0x50060008 |= ~FLAG)
#define Set_CRYP_DOUT(FLAG)                  (*(uint32_t*)0x5006000c &= FLAG)
#define Clr_CRYP_DOUT(FLAG)                  (*(uint32_t*)0x5006000c |= ~FLAG)
#define Set_CRYP_DMACR(FLAG)                 (*(uint32_t*)0x50060010 &= FLAG)
#define Clr_CRYP_DMACR(FLAG)                 (*(uint32_t*)0x50060010 |= ~FLAG)
#define Set_CRYP_IMSCR(FLAG)                 (*(uint32_t*)0x50060014 &= FLAG)
#define Clr_CRYP_IMSCR(FLAG)                 (*(uint32_t*)0x50060014 |= ~FLAG)
#define Set_CRYP_RISR(FLAG)                  (*(uint32_t*)0x50060018 &= FLAG)
#define Clr_CRYP_RISR(FLAG)                  (*(uint32_t*)0x50060018 |= ~FLAG)
#define Set_CRYP_MISR(FLAG)                  (*(uint32_t*)0x5006001c &= FLAG)
#define Clr_CRYP_MISR(FLAG)                  (*(uint32_t*)0x5006001c |= ~FLAG)
#define Set_CRYP_K0LR(FLAG)                  (*(uint32_t*)0x50060020 &= FLAG)
#define Clr_CRYP_K0LR(FLAG)                  (*(uint32_t*)0x50060020 |= ~FLAG)
#define Set_CRYP_K0RR(FLAG)                  (*(uint32_t*)0x50060024 &= FLAG)
#define Clr_CRYP_K0RR(FLAG)                  (*(uint32_t*)0x50060024 |= ~FLAG)
#define Set_CRYP_K1LR(FLAG)                  (*(uint32_t*)0x50060028 &= FLAG)
#define Clr_CRYP_K1LR(FLAG)                  (*(uint32_t*)0x50060028 |= ~FLAG)
#define Set_CRYP_K1RR(FLAG)                  (*(uint32_t*)0x5006002c &= FLAG)
#define Clr_CRYP_K1RR(FLAG)                  (*(uint32_t*)0x5006002c |= ~FLAG)
#define Set_CRYP_K2LR(FLAG)                  (*(uint32_t*)0x50060030 &= FLAG)
#define Clr_CRYP_K2LR(FLAG)                  (*(uint32_t*)0x50060030 |= ~FLAG)
#define Set_CRYP_K2RR(FLAG)                  (*(uint32_t*)0x50060034 &= FLAG)
#define Clr_CRYP_K2RR(FLAG)                  (*(uint32_t*)0x50060034 |= ~FLAG)
#define Set_CRYP_K3LR(FLAG)                  (*(uint32_t*)0x50060038 &= FLAG)
#define Clr_CRYP_K3LR(FLAG)                  (*(uint32_t*)0x50060038 |= ~FLAG)
#define Set_CRYP_K3RR(FLAG)                  (*(uint32_t*)0x5006003c &= FLAG)
#define Clr_CRYP_K3RR(FLAG)                  (*(uint32_t*)0x5006003c |= ~FLAG)
#define Set_CRYP_IV0LR(FLAG)                 (*(uint32_t*)0x50060040 &= FLAG)
#define Clr_CRYP_IV0LR(FLAG)                 (*(uint32_t*)0x50060040 |= ~FLAG)
#define Set_CRYP_IV0RR(FLAG)                 (*(uint32_t*)0x50060044 &= FLAG)
#define Clr_CRYP_IV0RR(FLAG)                 (*(uint32_t*)0x50060044 |= ~FLAG)
#define Set_CRYP_IV1LR(FLAG)                 (*(uint32_t*)0x50060048 &= FLAG)
#define Clr_CRYP_IV1LR(FLAG)                 (*(uint32_t*)0x50060048 |= ~FLAG)
#define Set_CRYP_IV1RR(FLAG)                 (*(uint32_t*)0x5006004c &= FLAG)
#define Clr_CRYP_IV1RR(FLAG)                 (*(uint32_t*)0x5006004c |= ~FLAG)
#define Set_CRYP_CSGCMCCM0R(FLAG)            (*(uint32_t*)0x50060050 &= FLAG)
#define Clr_CRYP_CSGCMCCM0R(FLAG)            (*(uint32_t*)0x50060050 |= ~FLAG)
#define Set_CRYP_CSGCMCCM1R(FLAG)            (*(uint32_t*)0x50060054 &= FLAG)
#define Clr_CRYP_CSGCMCCM1R(FLAG)            (*(uint32_t*)0x50060054 |= ~FLAG)
#define Set_CRYP_CSGCMCCM2R(FLAG)            (*(uint32_t*)0x50060058 &= FLAG)
#define Clr_CRYP_CSGCMCCM2R(FLAG)            (*(uint32_t*)0x50060058 |= ~FLAG)
#define Set_CRYP_CSGCMCCM3R(FLAG)            (*(uint32_t*)0x5006005c &= FLAG)
#define Clr_CRYP_CSGCMCCM3R(FLAG)            (*(uint32_t*)0x5006005c |= ~FLAG)
#define Set_CRYP_CSGCMCCM4R(FLAG)            (*(uint32_t*)0x50060060 &= FLAG)
#define Clr_CRYP_CSGCMCCM4R(FLAG)            (*(uint32_t*)0x50060060 |= ~FLAG)
#define Set_CRYP_CSGCMCCM5R(FLAG)            (*(uint32_t*)0x50060064 &= FLAG)
#define Clr_CRYP_CSGCMCCM5R(FLAG)            (*(uint32_t*)0x50060064 |= ~FLAG)
#define Set_CRYP_CSGCMCCM6R(FLAG)            (*(uint32_t*)0x50060068 &= FLAG)
#define Clr_CRYP_CSGCMCCM6R(FLAG)            (*(uint32_t*)0x50060068 |= ~FLAG)
#define Set_CRYP_CSGCMCCM7R(FLAG)            (*(uint32_t*)0x5006006c &= FLAG)
#define Clr_CRYP_CSGCMCCM7R(FLAG)            (*(uint32_t*)0x5006006c |= ~FLAG)
#define Set_CRYP_CSGCM0R(FLAG)               (*(uint32_t*)0x50060070 &= FLAG)
#define Clr_CRYP_CSGCM0R(FLAG)               (*(uint32_t*)0x50060070 |= ~FLAG)
#define Set_CRYP_CSGCM1R(FLAG)               (*(uint32_t*)0x50060074 &= FLAG)
#define Clr_CRYP_CSGCM1R(FLAG)               (*(uint32_t*)0x50060074 |= ~FLAG)
#define Set_CRYP_CSGCM2R(FLAG)               (*(uint32_t*)0x50060078 &= FLAG)
#define Clr_CRYP_CSGCM2R(FLAG)               (*(uint32_t*)0x50060078 |= ~FLAG)
#define Set_CRYP_CSGCM3R(FLAG)               (*(uint32_t*)0x5006007c &= FLAG)
#define Clr_CRYP_CSGCM3R(FLAG)               (*(uint32_t*)0x5006007c |= ~FLAG)
#define Set_CRYP_CSGCM4R(FLAG)               (*(uint32_t*)0x50060080 &= FLAG)
#define Clr_CRYP_CSGCM4R(FLAG)               (*(uint32_t*)0x50060080 |= ~FLAG)
#define Set_CRYP_CSGCM5R(FLAG)               (*(uint32_t*)0x50060084 &= FLAG)
#define Clr_CRYP_CSGCM5R(FLAG)               (*(uint32_t*)0x50060084 |= ~FLAG)
#define Set_CRYP_CSGCM6R(FLAG)               (*(uint32_t*)0x50060088 &= FLAG)
#define Clr_CRYP_CSGCM6R(FLAG)               (*(uint32_t*)0x50060088 |= ~FLAG)
#define Set_CRYP_CSGCM7R(FLAG)               (*(uint32_t*)0x5006008c &= FLAG)
#define Clr_CRYP_CSGCM7R(FLAG)               (*(uint32_t*)0x5006008c |= ~FLAG)
#define  _CRYP_CR_ALGODIR                                    (0x1 << 2)    // Algorithm direction
#define  _CRYP_CR_ALGOMODE0                                  (0x7 << 3)    // Algorithm mode
#define  _CRYP_CR_DATATYPE                                   (0x3 << 6)    // Data type selection
#define  _CRYP_CR_KEYSIZE                                    (0x3 << 8)    // Key size selection (AES mode only)
#define  _CRYP_CR_FFLUSH                                     (0x1 << 14)    // FIFO flush
#define  _CRYP_CR_CRYPEN                                     (0x1 << 15)    // Cryptographic processor enable
#define  _CRYP_CR_GCM_CCMPH                                  (0x3 << 16)    // GCM_CCMPH
#define  _CRYP_CR_ALGOMODE3                                  (0x1 << 19)    // ALGOMODE
#define  _CRYP_SR_BUSY                                       (0x1 << 4)    // Busy bit
#define  _CRYP_SR_OFFU                                       (0x1 << 3)    // Output FIFO full
#define  _CRYP_SR_OFNE                                       (0x1 << 2)    // Output FIFO not empty
#define  _CRYP_SR_IFNF                                       (0x1 << 1)    // Input FIFO not full
#define  _CRYP_SR_IFEM                                       (0x1 << 0)    // Input FIFO empty
#define  _CRYP_DIN_DATAIN                                    (0xffffffff << 0)    // Data input
#define  _CRYP_DOUT_DATAOUT                                  (0xffffffff << 0)    // Data output
#define  _CRYP_DMACR_DOEN                                    (0x1 << 1)    // DMA output enable
#define  _CRYP_DMACR_DIEN                                    (0x1 << 0)    // DMA input enable
#define  _CRYP_IMSCR_OUTIM                                   (0x1 << 1)    // Output FIFO service interrupt mask
#define  _CRYP_IMSCR_INIM                                    (0x1 << 0)    // Input FIFO service interrupt mask
#define  _CRYP_RISR_OUTRIS                                   (0x1 << 1)    // Output FIFO service raw interrupt status
#define  _CRYP_RISR_INRIS                                    (0x1 << 0)    // Input FIFO service raw interrupt status
#define  _CRYP_MISR_OUTMIS                                   (0x1 << 1)    // Output FIFO service masked interrupt status
#define  _CRYP_MISR_INMIS                                    (0x1 << 0)    // Input FIFO service masked interrupt status
#define  _CRYP_K0LR_b224                                     (0x1 << 0)    // b224
#define  _CRYP_K0LR_b225                                     (0x1 << 1)    // b225
#define  _CRYP_K0LR_b226                                     (0x1 << 2)    // b226
#define  _CRYP_K0LR_b227                                     (0x1 << 3)    // b227
#define  _CRYP_K0LR_b228                                     (0x1 << 4)    // b228
#define  _CRYP_K0LR_b229                                     (0x1 << 5)    // b229
#define  _CRYP_K0LR_b230                                     (0x1 << 6)    // b230
#define  _CRYP_K0LR_b231                                     (0x1 << 7)    // b231
#define  _CRYP_K0LR_b232                                     (0x1 << 8)    // b232
#define  _CRYP_K0LR_b233                                     (0x1 << 9)    // b233
#define  _CRYP_K0LR_b234                                     (0x1 << 10)    // b234
#define  _CRYP_K0LR_b235                                     (0x1 << 11)    // b235
#define  _CRYP_K0LR_b236                                     (0x1 << 12)    // b236
#define  _CRYP_K0LR_b237                                     (0x1 << 13)    // b237
#define  _CRYP_K0LR_b238                                     (0x1 << 14)    // b238
#define  _CRYP_K0LR_b239                                     (0x1 << 15)    // b239
#define  _CRYP_K0LR_b240                                     (0x1 << 16)    // b240
#define  _CRYP_K0LR_b241                                     (0x1 << 17)    // b241
#define  _CRYP_K0LR_b242                                     (0x1 << 18)    // b242
#define  _CRYP_K0LR_b243                                     (0x1 << 19)    // b243
#define  _CRYP_K0LR_b244                                     (0x1 << 20)    // b244
#define  _CRYP_K0LR_b245                                     (0x1 << 21)    // b245
#define  _CRYP_K0LR_b246                                     (0x1 << 22)    // b246
#define  _CRYP_K0LR_b247                                     (0x1 << 23)    // b247
#define  _CRYP_K0LR_b248                                     (0x1 << 24)    // b248
#define  _CRYP_K0LR_b249                                     (0x1 << 25)    // b249
#define  _CRYP_K0LR_b250                                     (0x1 << 26)    // b250
#define  _CRYP_K0LR_b251                                     (0x1 << 27)    // b251
#define  _CRYP_K0LR_b252                                     (0x1 << 28)    // b252
#define  _CRYP_K0LR_b253                                     (0x1 << 29)    // b253
#define  _CRYP_K0LR_b254                                     (0x1 << 30)    // b254
#define  _CRYP_K0LR_b255                                     (0x1 << 31)    // b255
#define  _CRYP_K0RR_b192                                     (0x1 << 0)    // b192
#define  _CRYP_K0RR_b193                                     (0x1 << 1)    // b193
#define  _CRYP_K0RR_b194                                     (0x1 << 2)    // b194
#define  _CRYP_K0RR_b195                                     (0x1 << 3)    // b195
#define  _CRYP_K0RR_b196                                     (0x1 << 4)    // b196
#define  _CRYP_K0RR_b197                                     (0x1 << 5)    // b197
#define  _CRYP_K0RR_b198                                     (0x1 << 6)    // b198
#define  _CRYP_K0RR_b199                                     (0x1 << 7)    // b199
#define  _CRYP_K0RR_b200                                     (0x1 << 8)    // b200
#define  _CRYP_K0RR_b201                                     (0x1 << 9)    // b201
#define  _CRYP_K0RR_b202                                     (0x1 << 10)    // b202
#define  _CRYP_K0RR_b203                                     (0x1 << 11)    // b203
#define  _CRYP_K0RR_b204                                     (0x1 << 12)    // b204
#define  _CRYP_K0RR_b205                                     (0x1 << 13)    // b205
#define  _CRYP_K0RR_b206                                     (0x1 << 14)    // b206
#define  _CRYP_K0RR_b207                                     (0x1 << 15)    // b207
#define  _CRYP_K0RR_b208                                     (0x1 << 16)    // b208
#define  _CRYP_K0RR_b209                                     (0x1 << 17)    // b209
#define  _CRYP_K0RR_b210                                     (0x1 << 18)    // b210
#define  _CRYP_K0RR_b211                                     (0x1 << 19)    // b211
#define  _CRYP_K0RR_b212                                     (0x1 << 20)    // b212
#define  _CRYP_K0RR_b213                                     (0x1 << 21)    // b213
#define  _CRYP_K0RR_b214                                     (0x1 << 22)    // b214
#define  _CRYP_K0RR_b215                                     (0x1 << 23)    // b215
#define  _CRYP_K0RR_b216                                     (0x1 << 24)    // b216
#define  _CRYP_K0RR_b217                                     (0x1 << 25)    // b217
#define  _CRYP_K0RR_b218                                     (0x1 << 26)    // b218
#define  _CRYP_K0RR_b219                                     (0x1 << 27)    // b219
#define  _CRYP_K0RR_b220                                     (0x1 << 28)    // b220
#define  _CRYP_K0RR_b221                                     (0x1 << 29)    // b221
#define  _CRYP_K0RR_b222                                     (0x1 << 30)    // b222
#define  _CRYP_K0RR_b223                                     (0x1 << 31)    // b223
#define  _CRYP_K1LR_b160                                     (0x1 << 0)    // b160
#define  _CRYP_K1LR_b161                                     (0x1 << 1)    // b161
#define  _CRYP_K1LR_b162                                     (0x1 << 2)    // b162
#define  _CRYP_K1LR_b163                                     (0x1 << 3)    // b163
#define  _CRYP_K1LR_b164                                     (0x1 << 4)    // b164
#define  _CRYP_K1LR_b165                                     (0x1 << 5)    // b165
#define  _CRYP_K1LR_b166                                     (0x1 << 6)    // b166
#define  _CRYP_K1LR_b167                                     (0x1 << 7)    // b167
#define  _CRYP_K1LR_b168                                     (0x1 << 8)    // b168
#define  _CRYP_K1LR_b169                                     (0x1 << 9)    // b169
#define  _CRYP_K1LR_b170                                     (0x1 << 10)    // b170
#define  _CRYP_K1LR_b171                                     (0x1 << 11)    // b171
#define  _CRYP_K1LR_b172                                     (0x1 << 12)    // b172
#define  _CRYP_K1LR_b173                                     (0x1 << 13)    // b173
#define  _CRYP_K1LR_b174                                     (0x1 << 14)    // b174
#define  _CRYP_K1LR_b175                                     (0x1 << 15)    // b175
#define  _CRYP_K1LR_b176                                     (0x1 << 16)    // b176
#define  _CRYP_K1LR_b177                                     (0x1 << 17)    // b177
#define  _CRYP_K1LR_b178                                     (0x1 << 18)    // b178
#define  _CRYP_K1LR_b179                                     (0x1 << 19)    // b179
#define  _CRYP_K1LR_b180                                     (0x1 << 20)    // b180
#define  _CRYP_K1LR_b181                                     (0x1 << 21)    // b181
#define  _CRYP_K1LR_b182                                     (0x1 << 22)    // b182
#define  _CRYP_K1LR_b183                                     (0x1 << 23)    // b183
#define  _CRYP_K1LR_b184                                     (0x1 << 24)    // b184
#define  _CRYP_K1LR_b185                                     (0x1 << 25)    // b185
#define  _CRYP_K1LR_b186                                     (0x1 << 26)    // b186
#define  _CRYP_K1LR_b187                                     (0x1 << 27)    // b187
#define  _CRYP_K1LR_b188                                     (0x1 << 28)    // b188
#define  _CRYP_K1LR_b189                                     (0x1 << 29)    // b189
#define  _CRYP_K1LR_b190                                     (0x1 << 30)    // b190
#define  _CRYP_K1LR_b191                                     (0x1 << 31)    // b191
#define  _CRYP_K1RR_b128                                     (0x1 << 0)    // b128
#define  _CRYP_K1RR_b129                                     (0x1 << 1)    // b129
#define  _CRYP_K1RR_b130                                     (0x1 << 2)    // b130
#define  _CRYP_K1RR_b131                                     (0x1 << 3)    // b131
#define  _CRYP_K1RR_b132                                     (0x1 << 4)    // b132
#define  _CRYP_K1RR_b133                                     (0x1 << 5)    // b133
#define  _CRYP_K1RR_b134                                     (0x1 << 6)    // b134
#define  _CRYP_K1RR_b135                                     (0x1 << 7)    // b135
#define  _CRYP_K1RR_b136                                     (0x1 << 8)    // b136
#define  _CRYP_K1RR_b137                                     (0x1 << 9)    // b137
#define  _CRYP_K1RR_b138                                     (0x1 << 10)    // b138
#define  _CRYP_K1RR_b139                                     (0x1 << 11)    // b139
#define  _CRYP_K1RR_b140                                     (0x1 << 12)    // b140
#define  _CRYP_K1RR_b141                                     (0x1 << 13)    // b141
#define  _CRYP_K1RR_b142                                     (0x1 << 14)    // b142
#define  _CRYP_K1RR_b143                                     (0x1 << 15)    // b143
#define  _CRYP_K1RR_b144                                     (0x1 << 16)    // b144
#define  _CRYP_K1RR_b145                                     (0x1 << 17)    // b145
#define  _CRYP_K1RR_b146                                     (0x1 << 18)    // b146
#define  _CRYP_K1RR_b147                                     (0x1 << 19)    // b147
#define  _CRYP_K1RR_b148                                     (0x1 << 20)    // b148
#define  _CRYP_K1RR_b149                                     (0x1 << 21)    // b149
#define  _CRYP_K1RR_b150                                     (0x1 << 22)    // b150
#define  _CRYP_K1RR_b151                                     (0x1 << 23)    // b151
#define  _CRYP_K1RR_b152                                     (0x1 << 24)    // b152
#define  _CRYP_K1RR_b153                                     (0x1 << 25)    // b153
#define  _CRYP_K1RR_b154                                     (0x1 << 26)    // b154
#define  _CRYP_K1RR_b155                                     (0x1 << 27)    // b155
#define  _CRYP_K1RR_b156                                     (0x1 << 28)    // b156
#define  _CRYP_K1RR_b157                                     (0x1 << 29)    // b157
#define  _CRYP_K1RR_b158                                     (0x1 << 30)    // b158
#define  _CRYP_K1RR_b159                                     (0x1 << 31)    // b159
#define  _CRYP_K2LR_b96                                      (0x1 << 0)    // b96
#define  _CRYP_K2LR_b97                                      (0x1 << 1)    // b97
#define  _CRYP_K2LR_b98                                      (0x1 << 2)    // b98
#define  _CRYP_K2LR_b99                                      (0x1 << 3)    // b99
#define  _CRYP_K2LR_b100                                     (0x1 << 4)    // b100
#define  _CRYP_K2LR_b101                                     (0x1 << 5)    // b101
#define  _CRYP_K2LR_b102                                     (0x1 << 6)    // b102
#define  _CRYP_K2LR_b103                                     (0x1 << 7)    // b103
#define  _CRYP_K2LR_b104                                     (0x1 << 8)    // b104
#define  _CRYP_K2LR_b105                                     (0x1 << 9)    // b105
#define  _CRYP_K2LR_b106                                     (0x1 << 10)    // b106
#define  _CRYP_K2LR_b107                                     (0x1 << 11)    // b107
#define  _CRYP_K2LR_b108                                     (0x1 << 12)    // b108
#define  _CRYP_K2LR_b109                                     (0x1 << 13)    // b109
#define  _CRYP_K2LR_b110                                     (0x1 << 14)    // b110
#define  _CRYP_K2LR_b111                                     (0x1 << 15)    // b111
#define  _CRYP_K2LR_b112                                     (0x1 << 16)    // b112
#define  _CRYP_K2LR_b113                                     (0x1 << 17)    // b113
#define  _CRYP_K2LR_b114                                     (0x1 << 18)    // b114
#define  _CRYP_K2LR_b115                                     (0x1 << 19)    // b115
#define  _CRYP_K2LR_b116                                     (0x1 << 20)    // b116
#define  _CRYP_K2LR_b117                                     (0x1 << 21)    // b117
#define  _CRYP_K2LR_b118                                     (0x1 << 22)    // b118
#define  _CRYP_K2LR_b119                                     (0x1 << 23)    // b119
#define  _CRYP_K2LR_b120                                     (0x1 << 24)    // b120
#define  _CRYP_K2LR_b121                                     (0x1 << 25)    // b121
#define  _CRYP_K2LR_b122                                     (0x1 << 26)    // b122
#define  _CRYP_K2LR_b123                                     (0x1 << 27)    // b123
#define  _CRYP_K2LR_b124                                     (0x1 << 28)    // b124
#define  _CRYP_K2LR_b125                                     (0x1 << 29)    // b125
#define  _CRYP_K2LR_b126                                     (0x1 << 30)    // b126
#define  _CRYP_K2LR_b127                                     (0x1 << 31)    // b127
#define  _CRYP_K2RR_b64                                      (0x1 << 0)    // b64
#define  _CRYP_K2RR_b65                                      (0x1 << 1)    // b65
#define  _CRYP_K2RR_b66                                      (0x1 << 2)    // b66
#define  _CRYP_K2RR_b67                                      (0x1 << 3)    // b67
#define  _CRYP_K2RR_b68                                      (0x1 << 4)    // b68
#define  _CRYP_K2RR_b69                                      (0x1 << 5)    // b69
#define  _CRYP_K2RR_b70                                      (0x1 << 6)    // b70
#define  _CRYP_K2RR_b71                                      (0x1 << 7)    // b71
#define  _CRYP_K2RR_b72                                      (0x1 << 8)    // b72
#define  _CRYP_K2RR_b73                                      (0x1 << 9)    // b73
#define  _CRYP_K2RR_b74                                      (0x1 << 10)    // b74
#define  _CRYP_K2RR_b75                                      (0x1 << 11)    // b75
#define  _CRYP_K2RR_b76                                      (0x1 << 12)    // b76
#define  _CRYP_K2RR_b77                                      (0x1 << 13)    // b77
#define  _CRYP_K2RR_b78                                      (0x1 << 14)    // b78
#define  _CRYP_K2RR_b79                                      (0x1 << 15)    // b79
#define  _CRYP_K2RR_b80                                      (0x1 << 16)    // b80
#define  _CRYP_K2RR_b81                                      (0x1 << 17)    // b81
#define  _CRYP_K2RR_b82                                      (0x1 << 18)    // b82
#define  _CRYP_K2RR_b83                                      (0x1 << 19)    // b83
#define  _CRYP_K2RR_b84                                      (0x1 << 20)    // b84
#define  _CRYP_K2RR_b85                                      (0x1 << 21)    // b85
#define  _CRYP_K2RR_b86                                      (0x1 << 22)    // b86
#define  _CRYP_K2RR_b87                                      (0x1 << 23)    // b87
#define  _CRYP_K2RR_b88                                      (0x1 << 24)    // b88
#define  _CRYP_K2RR_b89                                      (0x1 << 25)    // b89
#define  _CRYP_K2RR_b90                                      (0x1 << 26)    // b90
#define  _CRYP_K2RR_b91                                      (0x1 << 27)    // b91
#define  _CRYP_K2RR_b92                                      (0x1 << 28)    // b92
#define  _CRYP_K2RR_b93                                      (0x1 << 29)    // b93
#define  _CRYP_K2RR_b94                                      (0x1 << 30)    // b94
#define  _CRYP_K2RR_b95                                      (0x1 << 31)    // b95
#define  _CRYP_K3LR_b32                                      (0x1 << 0)    // b32
#define  _CRYP_K3LR_b33                                      (0x1 << 1)    // b33
#define  _CRYP_K3LR_b34                                      (0x1 << 2)    // b34
#define  _CRYP_K3LR_b35                                      (0x1 << 3)    // b35
#define  _CRYP_K3LR_b36                                      (0x1 << 4)    // b36
#define  _CRYP_K3LR_b37                                      (0x1 << 5)    // b37
#define  _CRYP_K3LR_b38                                      (0x1 << 6)    // b38
#define  _CRYP_K3LR_b39                                      (0x1 << 7)    // b39
#define  _CRYP_K3LR_b40                                      (0x1 << 8)    // b40
#define  _CRYP_K3LR_b41                                      (0x1 << 9)    // b41
#define  _CRYP_K3LR_b42                                      (0x1 << 10)    // b42
#define  _CRYP_K3LR_b43                                      (0x1 << 11)    // b43
#define  _CRYP_K3LR_b44                                      (0x1 << 12)    // b44
#define  _CRYP_K3LR_b45                                      (0x1 << 13)    // b45
#define  _CRYP_K3LR_b46                                      (0x1 << 14)    // b46
#define  _CRYP_K3LR_b47                                      (0x1 << 15)    // b47
#define  _CRYP_K3LR_b48                                      (0x1 << 16)    // b48
#define  _CRYP_K3LR_b49                                      (0x1 << 17)    // b49
#define  _CRYP_K3LR_b50                                      (0x1 << 18)    // b50
#define  _CRYP_K3LR_b51                                      (0x1 << 19)    // b51
#define  _CRYP_K3LR_b52                                      (0x1 << 20)    // b52
#define  _CRYP_K3LR_b53                                      (0x1 << 21)    // b53
#define  _CRYP_K3LR_b54                                      (0x1 << 22)    // b54
#define  _CRYP_K3LR_b55                                      (0x1 << 23)    // b55
#define  _CRYP_K3LR_b56                                      (0x1 << 24)    // b56
#define  _CRYP_K3LR_b57                                      (0x1 << 25)    // b57
#define  _CRYP_K3LR_b58                                      (0x1 << 26)    // b58
#define  _CRYP_K3LR_b59                                      (0x1 << 27)    // b59
#define  _CRYP_K3LR_b60                                      (0x1 << 28)    // b60
#define  _CRYP_K3LR_b61                                      (0x1 << 29)    // b61
#define  _CRYP_K3LR_b62                                      (0x1 << 30)    // b62
#define  _CRYP_K3LR_b63                                      (0x1 << 31)    // b63
#define  _CRYP_K3RR_b0                                       (0x1 << 0)    // b0
#define  _CRYP_K3RR_b1                                       (0x1 << 1)    // b1
#define  _CRYP_K3RR_b2                                       (0x1 << 2)    // b2
#define  _CRYP_K3RR_b3                                       (0x1 << 3)    // b3
#define  _CRYP_K3RR_b4                                       (0x1 << 4)    // b4
#define  _CRYP_K3RR_b5                                       (0x1 << 5)    // b5
#define  _CRYP_K3RR_b6                                       (0x1 << 6)    // b6
#define  _CRYP_K3RR_b7                                       (0x1 << 7)    // b7
#define  _CRYP_K3RR_b8                                       (0x1 << 8)    // b8
#define  _CRYP_K3RR_b9                                       (0x1 << 9)    // b9
#define  _CRYP_K3RR_b10                                      (0x1 << 10)    // b10
#define  _CRYP_K3RR_b11                                      (0x1 << 11)    // b11
#define  _CRYP_K3RR_b12                                      (0x1 << 12)    // b12
#define  _CRYP_K3RR_b13                                      (0x1 << 13)    // b13
#define  _CRYP_K3RR_b14                                      (0x1 << 14)    // b14
#define  _CRYP_K3RR_b15                                      (0x1 << 15)    // b15
#define  _CRYP_K3RR_b16                                      (0x1 << 16)    // b16
#define  _CRYP_K3RR_b17                                      (0x1 << 17)    // b17
#define  _CRYP_K3RR_b18                                      (0x1 << 18)    // b18
#define  _CRYP_K3RR_b19                                      (0x1 << 19)    // b19
#define  _CRYP_K3RR_b20                                      (0x1 << 20)    // b20
#define  _CRYP_K3RR_b21                                      (0x1 << 21)    // b21
#define  _CRYP_K3RR_b22                                      (0x1 << 22)    // b22
#define  _CRYP_K3RR_b23                                      (0x1 << 23)    // b23
#define  _CRYP_K3RR_b24                                      (0x1 << 24)    // b24
#define  _CRYP_K3RR_b25                                      (0x1 << 25)    // b25
#define  _CRYP_K3RR_b26                                      (0x1 << 26)    // b26
#define  _CRYP_K3RR_b27                                      (0x1 << 27)    // b27
#define  _CRYP_K3RR_b28                                      (0x1 << 28)    // b28
#define  _CRYP_K3RR_b29                                      (0x1 << 29)    // b29
#define  _CRYP_K3RR_b30                                      (0x1 << 30)    // b30
#define  _CRYP_K3RR_b31                                      (0x1 << 31)    // b31
#define  _CRYP_IV0LR_IV31                                    (0x1 << 0)    // IV31
#define  _CRYP_IV0LR_IV30                                    (0x1 << 1)    // IV30
#define  _CRYP_IV0LR_IV29                                    (0x1 << 2)    // IV29
#define  _CRYP_IV0LR_IV28                                    (0x1 << 3)    // IV28
#define  _CRYP_IV0LR_IV27                                    (0x1 << 4)    // IV27
#define  _CRYP_IV0LR_IV26                                    (0x1 << 5)    // IV26
#define  _CRYP_IV0LR_IV25                                    (0x1 << 6)    // IV25
#define  _CRYP_IV0LR_IV24                                    (0x1 << 7)    // IV24
#define  _CRYP_IV0LR_IV23                                    (0x1 << 8)    // IV23
#define  _CRYP_IV0LR_IV22                                    (0x1 << 9)    // IV22
#define  _CRYP_IV0LR_IV21                                    (0x1 << 10)    // IV21
#define  _CRYP_IV0LR_IV20                                    (0x1 << 11)    // IV20
#define  _CRYP_IV0LR_IV19                                    (0x1 << 12)    // IV19
#define  _CRYP_IV0LR_IV18                                    (0x1 << 13)    // IV18
#define  _CRYP_IV0LR_IV17                                    (0x1 << 14)    // IV17
#define  _CRYP_IV0LR_IV16                                    (0x1 << 15)    // IV16
#define  _CRYP_IV0LR_IV15                                    (0x1 << 16)    // IV15
#define  _CRYP_IV0LR_IV14                                    (0x1 << 17)    // IV14
#define  _CRYP_IV0LR_IV13                                    (0x1 << 18)    // IV13
#define  _CRYP_IV0LR_IV12                                    (0x1 << 19)    // IV12
#define  _CRYP_IV0LR_IV11                                    (0x1 << 20)    // IV11
#define  _CRYP_IV0LR_IV10                                    (0x1 << 21)    // IV10
#define  _CRYP_IV0LR_IV9                                     (0x1 << 22)    // IV9
#define  _CRYP_IV0LR_IV8                                     (0x1 << 23)    // IV8
#define  _CRYP_IV0LR_IV7                                     (0x1 << 24)    // IV7
#define  _CRYP_IV0LR_IV6                                     (0x1 << 25)    // IV6
#define  _CRYP_IV0LR_IV5                                     (0x1 << 26)    // IV5
#define  _CRYP_IV0LR_IV4                                     (0x1 << 27)    // IV4
#define  _CRYP_IV0LR_IV3                                     (0x1 << 28)    // IV3
#define  _CRYP_IV0LR_IV2                                     (0x1 << 29)    // IV2
#define  _CRYP_IV0LR_IV1                                     (0x1 << 30)    // IV1
#define  _CRYP_IV0LR_IV0                                     (0x1 << 31)    // IV0
#define  _CRYP_IV0RR_IV63                                    (0x1 << 0)    // IV63
#define  _CRYP_IV0RR_IV62                                    (0x1 << 1)    // IV62
#define  _CRYP_IV0RR_IV61                                    (0x1 << 2)    // IV61
#define  _CRYP_IV0RR_IV60                                    (0x1 << 3)    // IV60
#define  _CRYP_IV0RR_IV59                                    (0x1 << 4)    // IV59
#define  _CRYP_IV0RR_IV58                                    (0x1 << 5)    // IV58
#define  _CRYP_IV0RR_IV57                                    (0x1 << 6)    // IV57
#define  _CRYP_IV0RR_IV56                                    (0x1 << 7)    // IV56
#define  _CRYP_IV0RR_IV55                                    (0x1 << 8)    // IV55
#define  _CRYP_IV0RR_IV54                                    (0x1 << 9)    // IV54
#define  _CRYP_IV0RR_IV53                                    (0x1 << 10)    // IV53
#define  _CRYP_IV0RR_IV52                                    (0x1 << 11)    // IV52
#define  _CRYP_IV0RR_IV51                                    (0x1 << 12)    // IV51
#define  _CRYP_IV0RR_IV50                                    (0x1 << 13)    // IV50
#define  _CRYP_IV0RR_IV49                                    (0x1 << 14)    // IV49
#define  _CRYP_IV0RR_IV48                                    (0x1 << 15)    // IV48
#define  _CRYP_IV0RR_IV47                                    (0x1 << 16)    // IV47
#define  _CRYP_IV0RR_IV46                                    (0x1 << 17)    // IV46
#define  _CRYP_IV0RR_IV45                                    (0x1 << 18)    // IV45
#define  _CRYP_IV0RR_IV44                                    (0x1 << 19)    // IV44
#define  _CRYP_IV0RR_IV43                                    (0x1 << 20)    // IV43
#define  _CRYP_IV0RR_IV42                                    (0x1 << 21)    // IV42
#define  _CRYP_IV0RR_IV41                                    (0x1 << 22)    // IV41
#define  _CRYP_IV0RR_IV40                                    (0x1 << 23)    // IV40
#define  _CRYP_IV0RR_IV39                                    (0x1 << 24)    // IV39
#define  _CRYP_IV0RR_IV38                                    (0x1 << 25)    // IV38
#define  _CRYP_IV0RR_IV37                                    (0x1 << 26)    // IV37
#define  _CRYP_IV0RR_IV36                                    (0x1 << 27)    // IV36
#define  _CRYP_IV0RR_IV35                                    (0x1 << 28)    // IV35
#define  _CRYP_IV0RR_IV34                                    (0x1 << 29)    // IV34
#define  _CRYP_IV0RR_IV33                                    (0x1 << 30)    // IV33
#define  _CRYP_IV0RR_IV32                                    (0x1 << 31)    // IV32
#define  _CRYP_IV1LR_IV95                                    (0x1 << 0)    // IV95
#define  _CRYP_IV1LR_IV94                                    (0x1 << 1)    // IV94
#define  _CRYP_IV1LR_IV93                                    (0x1 << 2)    // IV93
#define  _CRYP_IV1LR_IV92                                    (0x1 << 3)    // IV92
#define  _CRYP_IV1LR_IV91                                    (0x1 << 4)    // IV91
#define  _CRYP_IV1LR_IV90                                    (0x1 << 5)    // IV90
#define  _CRYP_IV1LR_IV89                                    (0x1 << 6)    // IV89
#define  _CRYP_IV1LR_IV88                                    (0x1 << 7)    // IV88
#define  _CRYP_IV1LR_IV87                                    (0x1 << 8)    // IV87
#define  _CRYP_IV1LR_IV86                                    (0x1 << 9)    // IV86
#define  _CRYP_IV1LR_IV85                                    (0x1 << 10)    // IV85
#define  _CRYP_IV1LR_IV84                                    (0x1 << 11)    // IV84
#define  _CRYP_IV1LR_IV83                                    (0x1 << 12)    // IV83
#define  _CRYP_IV1LR_IV82                                    (0x1 << 13)    // IV82
#define  _CRYP_IV1LR_IV81                                    (0x1 << 14)    // IV81
#define  _CRYP_IV1LR_IV80                                    (0x1 << 15)    // IV80
#define  _CRYP_IV1LR_IV79                                    (0x1 << 16)    // IV79
#define  _CRYP_IV1LR_IV78                                    (0x1 << 17)    // IV78
#define  _CRYP_IV1LR_IV77                                    (0x1 << 18)    // IV77
#define  _CRYP_IV1LR_IV76                                    (0x1 << 19)    // IV76
#define  _CRYP_IV1LR_IV75                                    (0x1 << 20)    // IV75
#define  _CRYP_IV1LR_IV74                                    (0x1 << 21)    // IV74
#define  _CRYP_IV1LR_IV73                                    (0x1 << 22)    // IV73
#define  _CRYP_IV1LR_IV72                                    (0x1 << 23)    // IV72
#define  _CRYP_IV1LR_IV71                                    (0x1 << 24)    // IV71
#define  _CRYP_IV1LR_IV70                                    (0x1 << 25)    // IV70
#define  _CRYP_IV1LR_IV69                                    (0x1 << 26)    // IV69
#define  _CRYP_IV1LR_IV68                                    (0x1 << 27)    // IV68
#define  _CRYP_IV1LR_IV67                                    (0x1 << 28)    // IV67
#define  _CRYP_IV1LR_IV66                                    (0x1 << 29)    // IV66
#define  _CRYP_IV1LR_IV65                                    (0x1 << 30)    // IV65
#define  _CRYP_IV1LR_IV64                                    (0x1 << 31)    // IV64
#define  _CRYP_IV1RR_IV127                                   (0x1 << 0)    // IV127
#define  _CRYP_IV1RR_IV126                                   (0x1 << 1)    // IV126
#define  _CRYP_IV1RR_IV125                                   (0x1 << 2)    // IV125
#define  _CRYP_IV1RR_IV124                                   (0x1 << 3)    // IV124
#define  _CRYP_IV1RR_IV123                                   (0x1 << 4)    // IV123
#define  _CRYP_IV1RR_IV122                                   (0x1 << 5)    // IV122
#define  _CRYP_IV1RR_IV121                                   (0x1 << 6)    // IV121
#define  _CRYP_IV1RR_IV120                                   (0x1 << 7)    // IV120
#define  _CRYP_IV1RR_IV119                                   (0x1 << 8)    // IV119
#define  _CRYP_IV1RR_IV118                                   (0x1 << 9)    // IV118
#define  _CRYP_IV1RR_IV117                                   (0x1 << 10)    // IV117
#define  _CRYP_IV1RR_IV116                                   (0x1 << 11)    // IV116
#define  _CRYP_IV1RR_IV115                                   (0x1 << 12)    // IV115
#define  _CRYP_IV1RR_IV114                                   (0x1 << 13)    // IV114
#define  _CRYP_IV1RR_IV113                                   (0x1 << 14)    // IV113
#define  _CRYP_IV1RR_IV112                                   (0x1 << 15)    // IV112
#define  _CRYP_IV1RR_IV111                                   (0x1 << 16)    // IV111
#define  _CRYP_IV1RR_IV110                                   (0x1 << 17)    // IV110
#define  _CRYP_IV1RR_IV109                                   (0x1 << 18)    // IV109
#define  _CRYP_IV1RR_IV108                                   (0x1 << 19)    // IV108
#define  _CRYP_IV1RR_IV107                                   (0x1 << 20)    // IV107
#define  _CRYP_IV1RR_IV106                                   (0x1 << 21)    // IV106
#define  _CRYP_IV1RR_IV105                                   (0x1 << 22)    // IV105
#define  _CRYP_IV1RR_IV104                                   (0x1 << 23)    // IV104
#define  _CRYP_IV1RR_IV103                                   (0x1 << 24)    // IV103
#define  _CRYP_IV1RR_IV102                                   (0x1 << 25)    // IV102
#define  _CRYP_IV1RR_IV101                                   (0x1 << 26)    // IV101
#define  _CRYP_IV1RR_IV100                                   (0x1 << 27)    // IV100
#define  _CRYP_IV1RR_IV99                                    (0x1 << 28)    // IV99
#define  _CRYP_IV1RR_IV98                                    (0x1 << 29)    // IV98
#define  _CRYP_IV1RR_IV97                                    (0x1 << 30)    // IV97
#define  _CRYP_IV1RR_IV96                                    (0x1 << 31)    // IV96
#define  _CRYP_CSGCMCCM0R_CSGCMCCM0R                         (0xffffffff << 0)    // CSGCMCCM0R
#define  _CRYP_CSGCMCCM1R_CSGCMCCM1R                         (0xffffffff << 0)    // CSGCMCCM1R
#define  _CRYP_CSGCMCCM2R_CSGCMCCM2R                         (0xffffffff << 0)    // CSGCMCCM2R
#define  _CRYP_CSGCMCCM3R_CSGCMCCM3R                         (0xffffffff << 0)    // CSGCMCCM3R
#define  _CRYP_CSGCMCCM4R_CSGCMCCM4R                         (0xffffffff << 0)    // CSGCMCCM4R
#define  _CRYP_CSGCMCCM5R_CSGCMCCM5R                         (0xffffffff << 0)    // CSGCMCCM5R
#define  _CRYP_CSGCMCCM6R_CSGCMCCM6R                         (0xffffffff << 0)    // CSGCMCCM6R
#define  _CRYP_CSGCMCCM7R_CSGCMCCM7R                         (0xffffffff << 0)    // CSGCMCCM7R
#define  _CRYP_CSGCM0R_CSGCM0R                               (0xffffffff << 0)    // CSGCM0R
#define  _CRYP_CSGCM1R_CSGCM1R                               (0xffffffff << 0)    // CSGCM1R
#define  _CRYP_CSGCM2R_CSGCM2R                               (0xffffffff << 0)    // CSGCM2R
#define  _CRYP_CSGCM3R_CSGCM3R                               (0xffffffff << 0)    // CSGCM3R
#define  _CRYP_CSGCM4R_CSGCM4R                               (0xffffffff << 0)    // CSGCM4R
#define  _CRYP_CSGCM5R_CSGCM5R                               (0xffffffff << 0)    // CSGCM5R
#define  _CRYP_CSGCM6R_CSGCM6R                               (0xffffffff << 0)    // CSGCM6R
#define  _CRYP_CSGCM7R_CSGCM7R                               (0xffffffff << 0)    // CSGCM7R
